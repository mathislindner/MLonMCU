
UART-Communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800387c  0800387c  0001387c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800396c  0800396c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800396c  0800396c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800396c  0800396c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800396c  0800396c  0001396c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003970  08003970  00013970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  080039e4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080039e4  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000841f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b6  00000000  00000000  000284bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  00029d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d8  00000000  00000000  0002a628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000261f0  00000000  00000000  0002ae00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009939  00000000  00000000  00050ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6de2  00000000  00000000  0005a929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014170b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002954  00000000  00000000  0014175c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003864 	.word	0x08003864

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003864 	.word	0x08003864

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__io_putchar>:
static void MX_GPIO_Init(void);
static void MX_USART1_Init(void);
/* USER CODE BEGIN PFP */

#define PUTCHAR_PROTOTYPE_ int __io_putchar(int ch)
PUTCHAR_PROTOTYPE_ {
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	while (HAL_OK != HAL_USART_Transmit(&husart1, (uint8_t *) &ch, 1, 0xFFFF)){
 8000278:	bf00      	nop
 800027a:	1d39      	adds	r1, r7, #4
 800027c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000280:	2201      	movs	r2, #1
 8000282:	4805      	ldr	r0, [pc, #20]	; (8000298 <__io_putchar+0x28>)
 8000284:	f002 f8b0 	bl	80023e8 <HAL_USART_Transmit>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d1f5      	bne.n	800027a <__io_putchar+0xa>
		;
}
	return ch;
 800028e:	687b      	ldr	r3, [r7, #4]
}
 8000290:	4618      	mov	r0, r3
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	2000008c 	.word	0x2000008c

0800029c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	printf("Hello World!");
 80002a0:	4805      	ldr	r0, [pc, #20]	; (80002b8 <main+0x1c>)
 80002a2:	f002 fb51 	bl	8002948 <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a6:	f000 fa30 	bl	800070a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002aa:	f000 f807 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ae:	f000 f883 	bl	80003b8 <MX_GPIO_Init>
  MX_USART1_Init();
 80002b2:	f000 f855 	bl	8000360 <MX_USART1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b6:	e7fe      	b.n	80002b6 <main+0x1a>
 80002b8:	0800387c 	.word	0x0800387c

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b096      	sub	sp, #88	; 0x58
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0314 	add.w	r3, r7, #20
 80002c6:	2244      	movs	r2, #68	; 0x44
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 fb34 	bl	8002938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	463b      	mov	r3, r7
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002e2:	f000 fd25 	bl	8000d30 <HAL_PWREx_ControlVoltageScaling>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002ec:	f000 f87c 	bl	80003e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002f0:	2310      	movs	r3, #16
 80002f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002f4:	2301      	movs	r3, #1
 80002f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002fc:	2360      	movs	r3, #96	; 0x60
 80002fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000300:	2302      	movs	r3, #2
 8000302:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000304:	2301      	movs	r3, #1
 8000306:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000308:	2301      	movs	r3, #1
 800030a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800030c:	2328      	movs	r3, #40	; 0x28
 800030e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000310:	2307      	movs	r3, #7
 8000312:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000314:	2302      	movs	r3, #2
 8000316:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000318:	2302      	movs	r3, #2
 800031a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031c:	f107 0314 	add.w	r3, r7, #20
 8000320:	4618      	mov	r0, r3
 8000322:	f000 fd5b 	bl	8000ddc <HAL_RCC_OscConfig>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800032c:	f000 f85c 	bl	80003e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000330:	230f      	movs	r3, #15
 8000332:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000334:	2303      	movs	r3, #3
 8000336:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000344:	463b      	mov	r3, r7
 8000346:	2104      	movs	r1, #4
 8000348:	4618      	mov	r0, r3
 800034a:	f001 f923 	bl	8001594 <HAL_RCC_ClockConfig>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000354:	f000 f848 	bl	80003e8 <Error_Handler>
  }
}
 8000358:	bf00      	nop
 800035a:	3758      	adds	r7, #88	; 0x58
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <MX_USART1_Init+0x50>)
 8000366:	4a13      	ldr	r2, [pc, #76]	; (80003b4 <MX_USART1_Init+0x54>)
 8000368:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 800036a:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <MX_USART1_Init+0x50>)
 800036c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000370:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <MX_USART1_Init+0x50>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000378:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <MX_USART1_Init+0x50>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 800037e:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <MX_USART1_Init+0x50>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000384:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <MX_USART1_Init+0x50>)
 8000386:	220c      	movs	r2, #12
 8000388:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MX_USART1_Init+0x50>)
 800038c:	2200      	movs	r2, #0
 800038e:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <MX_USART1_Init+0x50>)
 8000392:	2200      	movs	r2, #0
 8000394:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <MX_USART1_Init+0x50>)
 8000398:	2200      	movs	r2, #0
 800039a:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 800039c:	4804      	ldr	r0, [pc, #16]	; (80003b0 <MX_USART1_Init+0x50>)
 800039e:	f001 ffd9 	bl	8002354 <HAL_USART_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 80003a8:	f000 f81e 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	2000008c 	.word	0x2000008c
 80003b4:	40013800 	.word	0x40013800

080003b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003be:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <MX_GPIO_Init+0x2c>)
 80003c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c2:	4a08      	ldr	r2, [pc, #32]	; (80003e4 <MX_GPIO_Init+0x2c>)
 80003c4:	f043 0302 	orr.w	r3, r3, #2
 80003c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ca:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <MX_GPIO_Init+0x2c>)
 80003cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ce:	f003 0302 	and.w	r3, r3, #2
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]

}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	40021000 	.word	0x40021000

080003e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ec:	b672      	cpsid	i
}
 80003ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <Error_Handler+0x8>
	...

080003f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <HAL_MspInit+0x44>)
 80003fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003fe:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <HAL_MspInit+0x44>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6613      	str	r3, [r2, #96]	; 0x60
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <HAL_MspInit+0x44>)
 8000408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <HAL_MspInit+0x44>)
 8000414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000416:	4a08      	ldr	r2, [pc, #32]	; (8000438 <HAL_MspInit+0x44>)
 8000418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800041c:	6593      	str	r3, [r2, #88]	; 0x58
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <HAL_MspInit+0x44>)
 8000420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000426:	603b      	str	r3, [r7, #0]
 8000428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000

0800043c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b0ac      	sub	sp, #176	; 0xb0
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000444:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	605a      	str	r2, [r3, #4]
 800044e:	609a      	str	r2, [r3, #8]
 8000450:	60da      	str	r2, [r3, #12]
 8000452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000454:	f107 0314 	add.w	r3, r7, #20
 8000458:	2288      	movs	r2, #136	; 0x88
 800045a:	2100      	movs	r1, #0
 800045c:	4618      	mov	r0, r3
 800045e:	f002 fa6b 	bl	8002938 <memset>
  if(husart->Instance==USART1)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a21      	ldr	r2, [pc, #132]	; (80004ec <HAL_USART_MspInit+0xb0>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d13a      	bne.n	80004e2 <HAL_USART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800046c:	2301      	movs	r3, #1
 800046e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000470:	2300      	movs	r3, #0
 8000472:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	4618      	mov	r0, r3
 800047a:	f001 faaf 	bl	80019dc <HAL_RCCEx_PeriphCLKConfig>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8000484:	f7ff ffb0 	bl	80003e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000488:	4b19      	ldr	r3, [pc, #100]	; (80004f0 <HAL_USART_MspInit+0xb4>)
 800048a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800048c:	4a18      	ldr	r2, [pc, #96]	; (80004f0 <HAL_USART_MspInit+0xb4>)
 800048e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000492:	6613      	str	r3, [r2, #96]	; 0x60
 8000494:	4b16      	ldr	r3, [pc, #88]	; (80004f0 <HAL_USART_MspInit+0xb4>)
 8000496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800049c:	613b      	str	r3, [r7, #16]
 800049e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a0:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <HAL_USART_MspInit+0xb4>)
 80004a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a4:	4a12      	ldr	r2, [pc, #72]	; (80004f0 <HAL_USART_MspInit+0xb4>)
 80004a6:	f043 0302 	orr.w	r3, r3, #2
 80004aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ac:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <HAL_USART_MspInit+0xb4>)
 80004ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b0:	f003 0302 	and.w	r3, r3, #2
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB5     ------> USART1_CK
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80004b8:	23e0      	movs	r3, #224	; 0xe0
 80004ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004be:	2302      	movs	r3, #2
 80004c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004ca:	2303      	movs	r3, #3
 80004cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80004d0:	2307      	movs	r3, #7
 80004d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80004da:	4619      	mov	r1, r3
 80004dc:	4805      	ldr	r0, [pc, #20]	; (80004f4 <HAL_USART_MspInit+0xb8>)
 80004de:	f000 fa6f 	bl	80009c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004e2:	bf00      	nop
 80004e4:	37b0      	adds	r7, #176	; 0xb0
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40013800 	.word	0x40013800
 80004f0:	40021000 	.word	0x40021000
 80004f4:	48000400 	.word	0x48000400

080004f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <NMI_Handler+0x4>

080004fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000502:	e7fe      	b.n	8000502 <HardFault_Handler+0x4>

08000504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <MemManage_Handler+0x4>

0800050a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050e:	e7fe      	b.n	800050e <BusFault_Handler+0x4>

08000510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <UsageFault_Handler+0x4>

08000516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000544:	f000 f936 	bl	80007b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
 800055c:	e00a      	b.n	8000574 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800055e:	f3af 8000 	nop.w
 8000562:	4601      	mov	r1, r0
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	1c5a      	adds	r2, r3, #1
 8000568:	60ba      	str	r2, [r7, #8]
 800056a:	b2ca      	uxtb	r2, r1
 800056c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	3301      	adds	r3, #1
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	429a      	cmp	r2, r3
 800057a:	dbf0      	blt.n	800055e <_read+0x12>
  }

  return len;
 800057c:	687b      	ldr	r3, [r7, #4]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3718      	adds	r7, #24
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	b086      	sub	sp, #24
 800058a:	af00      	add	r7, sp, #0
 800058c:	60f8      	str	r0, [r7, #12]
 800058e:	60b9      	str	r1, [r7, #8]
 8000590:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
 8000596:	e009      	b.n	80005ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	1c5a      	adds	r2, r3, #1
 800059c:	60ba      	str	r2, [r7, #8]
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff fe65 	bl	8000270 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	3301      	adds	r3, #1
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	697a      	ldr	r2, [r7, #20]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	dbf1      	blt.n	8000598 <_write+0x12>
  }
  return len;
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <_close>:

int _close(int file)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005e6:	605a      	str	r2, [r3, #4]
  return 0;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <_isatty>:

int _isatty(int file)
{
 80005f6:	b480      	push	{r7}
 80005f8:	b083      	sub	sp, #12
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000618:	2300      	movs	r3, #0
}
 800061a:	4618      	mov	r0, r3
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000630:	4a14      	ldr	r2, [pc, #80]	; (8000684 <_sbrk+0x5c>)
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <_sbrk+0x60>)
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <_sbrk+0x64>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d102      	bne.n	800064a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <_sbrk+0x64>)
 8000646:	4a12      	ldr	r2, [pc, #72]	; (8000690 <_sbrk+0x68>)
 8000648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <_sbrk+0x64>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	693a      	ldr	r2, [r7, #16]
 8000654:	429a      	cmp	r2, r3
 8000656:	d207      	bcs.n	8000668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000658:	f002 f944 	bl	80028e4 <__errno>
 800065c:	4603      	mov	r3, r0
 800065e:	220c      	movs	r2, #12
 8000660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
 8000666:	e009      	b.n	800067c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <_sbrk+0x64>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <_sbrk+0x64>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	4a05      	ldr	r2, [pc, #20]	; (800068c <_sbrk+0x64>)
 8000678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800067a:	68fb      	ldr	r3, [r7, #12]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3718      	adds	r7, #24
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20018000 	.word	0x20018000
 8000688:	00000400 	.word	0x00000400
 800068c:	200000dc 	.word	0x200000dc
 8000690:	200000f8 	.word	0x200000f8

08000694 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <SystemInit+0x20>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a05      	ldr	r2, [pc, #20]	; (80006b4 <SystemInit+0x20>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006bc:	f7ff ffea 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c0:	480c      	ldr	r0, [pc, #48]	; (80006f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006c2:	490d      	ldr	r1, [pc, #52]	; (80006f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006c4:	4a0d      	ldr	r2, [pc, #52]	; (80006fc <LoopForever+0xe>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c8:	e002      	b.n	80006d0 <LoopCopyDataInit>

080006ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ce:	3304      	adds	r3, #4

080006d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d4:	d3f9      	bcc.n	80006ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d8:	4c0a      	ldr	r4, [pc, #40]	; (8000704 <LoopForever+0x16>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006dc:	e001      	b.n	80006e2 <LoopFillZerobss>

080006de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e0:	3204      	adds	r2, #4

080006e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e4:	d3fb      	bcc.n	80006de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006e6:	f002 f903 	bl	80028f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ea:	f7ff fdd7 	bl	800029c <main>

080006ee <LoopForever>:

LoopForever:
    b LoopForever
 80006ee:	e7fe      	b.n	80006ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006fc:	08003974 	.word	0x08003974
  ldr r2, =_sbss
 8000700:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000704:	200000f4 	.word	0x200000f4

08000708 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000708:	e7fe      	b.n	8000708 <ADC1_2_IRQHandler>

0800070a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000710:	2300      	movs	r3, #0
 8000712:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000714:	2003      	movs	r0, #3
 8000716:	f000 f91f 	bl	8000958 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800071a:	2000      	movs	r0, #0
 800071c:	f000 f80e 	bl	800073c <HAL_InitTick>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d002      	beq.n	800072c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	71fb      	strb	r3, [r7, #7]
 800072a:	e001      	b.n	8000730 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800072c:	f7ff fe62 	bl	80003f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000730:	79fb      	ldrb	r3, [r7, #7]
}
 8000732:	4618      	mov	r0, r3
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000744:	2300      	movs	r3, #0
 8000746:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <HAL_InitTick+0x6c>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d023      	beq.n	8000798 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <HAL_InitTick+0x70>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <HAL_InitTick+0x6c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4619      	mov	r1, r3
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000762:	fbb2 f3f3 	udiv	r3, r2, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f91d 	bl	80009a6 <HAL_SYSTICK_Config>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d10f      	bne.n	8000792 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b0f      	cmp	r3, #15
 8000776:	d809      	bhi.n	800078c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000778:	2200      	movs	r2, #0
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	f000 f8f5 	bl	800096e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000784:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <HAL_InitTick+0x74>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6013      	str	r3, [r2, #0]
 800078a:	e007      	b.n	800079c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800078c:	2301      	movs	r3, #1
 800078e:	73fb      	strb	r3, [r7, #15]
 8000790:	e004      	b.n	800079c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000792:	2301      	movs	r3, #1
 8000794:	73fb      	strb	r3, [r7, #15]
 8000796:	e001      	b.n	800079c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000798:	2301      	movs	r3, #1
 800079a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000008 	.word	0x20000008
 80007ac:	20000000 	.word	0x20000000
 80007b0:	20000004 	.word	0x20000004

080007b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_IncTick+0x20>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_IncTick+0x24>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4413      	add	r3, r2
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <HAL_IncTick+0x24>)
 80007c6:	6013      	str	r3, [r2, #0]
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	20000008 	.word	0x20000008
 80007d8:	200000e0 	.word	0x200000e0

080007dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  return uwTick;
 80007e0:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <HAL_GetTick+0x14>)
 80007e2:	681b      	ldr	r3, [r3, #0]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	200000e0 	.word	0x200000e0

080007f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f003 0307 	and.w	r3, r3, #7
 8000802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <__NVIC_SetPriorityGrouping+0x44>)
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800080a:	68ba      	ldr	r2, [r7, #8]
 800080c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000810:	4013      	ands	r3, r2
 8000812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800081c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000826:	4a04      	ldr	r2, [pc, #16]	; (8000838 <__NVIC_SetPriorityGrouping+0x44>)
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	60d3      	str	r3, [r2, #12]
}
 800082c:	bf00      	nop
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <__NVIC_GetPriorityGrouping+0x18>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	0a1b      	lsrs	r3, r3, #8
 8000846:	f003 0307 	and.w	r3, r3, #7
}
 800084a:	4618      	mov	r0, r3
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	6039      	str	r1, [r7, #0]
 8000862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000868:	2b00      	cmp	r3, #0
 800086a:	db0a      	blt.n	8000882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	b2da      	uxtb	r2, r3
 8000870:	490c      	ldr	r1, [pc, #48]	; (80008a4 <__NVIC_SetPriority+0x4c>)
 8000872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000876:	0112      	lsls	r2, r2, #4
 8000878:	b2d2      	uxtb	r2, r2
 800087a:	440b      	add	r3, r1
 800087c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000880:	e00a      	b.n	8000898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4908      	ldr	r1, [pc, #32]	; (80008a8 <__NVIC_SetPriority+0x50>)
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	f003 030f 	and.w	r3, r3, #15
 800088e:	3b04      	subs	r3, #4
 8000890:	0112      	lsls	r2, r2, #4
 8000892:	b2d2      	uxtb	r2, r2
 8000894:	440b      	add	r3, r1
 8000896:	761a      	strb	r2, [r3, #24]
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	e000e100 	.word	0xe000e100
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b089      	sub	sp, #36	; 0x24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	f1c3 0307 	rsb	r3, r3, #7
 80008c6:	2b04      	cmp	r3, #4
 80008c8:	bf28      	it	cs
 80008ca:	2304      	movcs	r3, #4
 80008cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	3304      	adds	r3, #4
 80008d2:	2b06      	cmp	r3, #6
 80008d4:	d902      	bls.n	80008dc <NVIC_EncodePriority+0x30>
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	3b03      	subs	r3, #3
 80008da:	e000      	b.n	80008de <NVIC_EncodePriority+0x32>
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e0:	f04f 32ff 	mov.w	r2, #4294967295
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	43da      	mvns	r2, r3
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	401a      	ands	r2, r3
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008f4:	f04f 31ff 	mov.w	r1, #4294967295
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	fa01 f303 	lsl.w	r3, r1, r3
 80008fe:	43d9      	mvns	r1, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000904:	4313      	orrs	r3, r2
         );
}
 8000906:	4618      	mov	r0, r3
 8000908:	3724      	adds	r7, #36	; 0x24
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000924:	d301      	bcc.n	800092a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000926:	2301      	movs	r3, #1
 8000928:	e00f      	b.n	800094a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <SysTick_Config+0x40>)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3b01      	subs	r3, #1
 8000930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000932:	210f      	movs	r1, #15
 8000934:	f04f 30ff 	mov.w	r0, #4294967295
 8000938:	f7ff ff8e 	bl	8000858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <SysTick_Config+0x40>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <SysTick_Config+0x40>)
 8000944:	2207      	movs	r2, #7
 8000946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	e000e010 	.word	0xe000e010

08000958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff ff47 	bl	80007f4 <__NVIC_SetPriorityGrouping>
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b086      	sub	sp, #24
 8000972:	af00      	add	r7, sp, #0
 8000974:	4603      	mov	r3, r0
 8000976:	60b9      	str	r1, [r7, #8]
 8000978:	607a      	str	r2, [r7, #4]
 800097a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000980:	f7ff ff5c 	bl	800083c <__NVIC_GetPriorityGrouping>
 8000984:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	68b9      	ldr	r1, [r7, #8]
 800098a:	6978      	ldr	r0, [r7, #20]
 800098c:	f7ff ff8e 	bl	80008ac <NVIC_EncodePriority>
 8000990:	4602      	mov	r2, r0
 8000992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000996:	4611      	mov	r1, r2
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ff5d 	bl	8000858 <__NVIC_SetPriority>
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff ffb0 	bl	8000914 <SysTick_Config>
 80009b4:	4603      	mov	r3, r0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b087      	sub	sp, #28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ce:	e17f      	b.n	8000cd0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	2101      	movs	r1, #1
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	fa01 f303 	lsl.w	r3, r1, r3
 80009dc:	4013      	ands	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	f000 8171 	beq.w	8000cca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	f003 0303 	and.w	r3, r3, #3
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d005      	beq.n	8000a00 <HAL_GPIO_Init+0x40>
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f003 0303 	and.w	r3, r3, #3
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d130      	bne.n	8000a62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4013      	ands	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	68da      	ldr	r2, [r3, #12]
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a36:	2201      	movs	r2, #1
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	091b      	lsrs	r3, r3, #4
 8000a4c:	f003 0201 	and.w	r2, r3, #1
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f003 0303 	and.w	r3, r3, #3
 8000a6a:	2b03      	cmp	r3, #3
 8000a6c:	d118      	bne.n	8000aa0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a74:	2201      	movs	r2, #1
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	08db      	lsrs	r3, r3, #3
 8000a8a:	f003 0201 	and.w	r2, r3, #1
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f003 0303 	and.w	r3, r3, #3
 8000aa8:	2b03      	cmp	r3, #3
 8000aaa:	d017      	beq.n	8000adc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	689a      	ldr	r2, [r3, #8]
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f003 0303 	and.w	r3, r3, #3
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d123      	bne.n	8000b30 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	08da      	lsrs	r2, r3, #3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3208      	adds	r2, #8
 8000af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	f003 0307 	and.w	r3, r3, #7
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	220f      	movs	r2, #15
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	691a      	ldr	r2, [r3, #16]
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	08da      	lsrs	r2, r3, #3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	3208      	adds	r2, #8
 8000b2a:	6939      	ldr	r1, [r7, #16]
 8000b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f003 0203 	and.w	r2, r3, #3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	f000 80ac 	beq.w	8000cca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	4b5f      	ldr	r3, [pc, #380]	; (8000cf0 <HAL_GPIO_Init+0x330>)
 8000b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b76:	4a5e      	ldr	r2, [pc, #376]	; (8000cf0 <HAL_GPIO_Init+0x330>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b7e:	4b5c      	ldr	r3, [pc, #368]	; (8000cf0 <HAL_GPIO_Init+0x330>)
 8000b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b8a:	4a5a      	ldr	r2, [pc, #360]	; (8000cf4 <HAL_GPIO_Init+0x334>)
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	089b      	lsrs	r3, r3, #2
 8000b90:	3302      	adds	r3, #2
 8000b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	f003 0303 	and.w	r3, r3, #3
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	220f      	movs	r2, #15
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bb4:	d025      	beq.n	8000c02 <HAL_GPIO_Init+0x242>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a4f      	ldr	r2, [pc, #316]	; (8000cf8 <HAL_GPIO_Init+0x338>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d01f      	beq.n	8000bfe <HAL_GPIO_Init+0x23e>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a4e      	ldr	r2, [pc, #312]	; (8000cfc <HAL_GPIO_Init+0x33c>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d019      	beq.n	8000bfa <HAL_GPIO_Init+0x23a>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a4d      	ldr	r2, [pc, #308]	; (8000d00 <HAL_GPIO_Init+0x340>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d013      	beq.n	8000bf6 <HAL_GPIO_Init+0x236>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a4c      	ldr	r2, [pc, #304]	; (8000d04 <HAL_GPIO_Init+0x344>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d00d      	beq.n	8000bf2 <HAL_GPIO_Init+0x232>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a4b      	ldr	r2, [pc, #300]	; (8000d08 <HAL_GPIO_Init+0x348>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d007      	beq.n	8000bee <HAL_GPIO_Init+0x22e>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a4a      	ldr	r2, [pc, #296]	; (8000d0c <HAL_GPIO_Init+0x34c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d101      	bne.n	8000bea <HAL_GPIO_Init+0x22a>
 8000be6:	2306      	movs	r3, #6
 8000be8:	e00c      	b.n	8000c04 <HAL_GPIO_Init+0x244>
 8000bea:	2307      	movs	r3, #7
 8000bec:	e00a      	b.n	8000c04 <HAL_GPIO_Init+0x244>
 8000bee:	2305      	movs	r3, #5
 8000bf0:	e008      	b.n	8000c04 <HAL_GPIO_Init+0x244>
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	e006      	b.n	8000c04 <HAL_GPIO_Init+0x244>
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	e004      	b.n	8000c04 <HAL_GPIO_Init+0x244>
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	e002      	b.n	8000c04 <HAL_GPIO_Init+0x244>
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e000      	b.n	8000c04 <HAL_GPIO_Init+0x244>
 8000c02:	2300      	movs	r3, #0
 8000c04:	697a      	ldr	r2, [r7, #20]
 8000c06:	f002 0203 	and.w	r2, r2, #3
 8000c0a:	0092      	lsls	r2, r2, #2
 8000c0c:	4093      	lsls	r3, r2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c14:	4937      	ldr	r1, [pc, #220]	; (8000cf4 <HAL_GPIO_Init+0x334>)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	089b      	lsrs	r3, r3, #2
 8000c1a:	3302      	adds	r3, #2
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c22:	4b3b      	ldr	r3, [pc, #236]	; (8000d10 <HAL_GPIO_Init+0x350>)
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c46:	4a32      	ldr	r2, [pc, #200]	; (8000d10 <HAL_GPIO_Init+0x350>)
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c4c:	4b30      	ldr	r3, [pc, #192]	; (8000d10 <HAL_GPIO_Init+0x350>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d003      	beq.n	8000c70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c70:	4a27      	ldr	r2, [pc, #156]	; (8000d10 <HAL_GPIO_Init+0x350>)
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c76:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <HAL_GPIO_Init+0x350>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c9a:	4a1d      	ldr	r2, [pc, #116]	; (8000d10 <HAL_GPIO_Init+0x350>)
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <HAL_GPIO_Init+0x350>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cc4:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <HAL_GPIO_Init+0x350>)
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f47f ae78 	bne.w	80009d0 <HAL_GPIO_Init+0x10>
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	371c      	adds	r7, #28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40010000 	.word	0x40010000
 8000cf8:	48000400 	.word	0x48000400
 8000cfc:	48000800 	.word	0x48000800
 8000d00:	48000c00 	.word	0x48000c00
 8000d04:	48001000 	.word	0x48001000
 8000d08:	48001400 	.word	0x48001400
 8000d0c:	48001800 	.word	0x48001800
 8000d10:	40010400 	.word	0x40010400

08000d14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <HAL_PWREx_GetVoltageRange+0x18>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40007000 	.word	0x40007000

08000d30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d3e:	d130      	bne.n	8000da2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d40:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d4c:	d038      	beq.n	8000dc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d4e:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d56:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2232      	movs	r2, #50	; 0x32
 8000d64:	fb02 f303 	mul.w	r3, r2, r3
 8000d68:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6e:	0c9b      	lsrs	r3, r3, #18
 8000d70:	3301      	adds	r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d74:	e002      	b.n	8000d7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d7e:	695b      	ldr	r3, [r3, #20]
 8000d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d88:	d102      	bne.n	8000d90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1f2      	bne.n	8000d76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d9c:	d110      	bne.n	8000dc0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e00f      	b.n	8000dc2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dae:	d007      	beq.n	8000dc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000db8:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dbe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40007000 	.word	0x40007000
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	431bde83 	.word	0x431bde83

08000ddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e3ca      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dee:	4b97      	ldr	r3, [pc, #604]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f003 030c 	and.w	r3, r3, #12
 8000df6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000df8:	4b94      	ldr	r3, [pc, #592]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0310 	and.w	r3, r3, #16
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 80e4 	beq.w	8000fd8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d007      	beq.n	8000e26 <HAL_RCC_OscConfig+0x4a>
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	2b0c      	cmp	r3, #12
 8000e1a:	f040 808b 	bne.w	8000f34 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	f040 8087 	bne.w	8000f34 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e26:	4b89      	ldr	r3, [pc, #548]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d005      	beq.n	8000e3e <HAL_RCC_OscConfig+0x62>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d101      	bne.n	8000e3e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e3a2      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a1a      	ldr	r2, [r3, #32]
 8000e42:	4b82      	ldr	r3, [pc, #520]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d004      	beq.n	8000e58 <HAL_RCC_OscConfig+0x7c>
 8000e4e:	4b7f      	ldr	r3, [pc, #508]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e56:	e005      	b.n	8000e64 <HAL_RCC_OscConfig+0x88>
 8000e58:	4b7c      	ldr	r3, [pc, #496]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e5e:	091b      	lsrs	r3, r3, #4
 8000e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d223      	bcs.n	8000eb0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 fd55 	bl	800191c <RCC_SetFlashLatencyFromMSIRange>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e383      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e7c:	4b73      	ldr	r3, [pc, #460]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a72      	ldr	r2, [pc, #456]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000e82:	f043 0308 	orr.w	r3, r3, #8
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	4b70      	ldr	r3, [pc, #448]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a1b      	ldr	r3, [r3, #32]
 8000e94:	496d      	ldr	r1, [pc, #436]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000e96:	4313      	orrs	r3, r2
 8000e98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e9a:	4b6c      	ldr	r3, [pc, #432]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	021b      	lsls	r3, r3, #8
 8000ea8:	4968      	ldr	r1, [pc, #416]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	604b      	str	r3, [r1, #4]
 8000eae:	e025      	b.n	8000efc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eb0:	4b66      	ldr	r3, [pc, #408]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a65      	ldr	r2, [pc, #404]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000eb6:	f043 0308 	orr.w	r3, r3, #8
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	4b63      	ldr	r3, [pc, #396]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	4960      	ldr	r1, [pc, #384]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ece:	4b5f      	ldr	r3, [pc, #380]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	021b      	lsls	r3, r3, #8
 8000edc:	495b      	ldr	r1, [pc, #364]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d109      	bne.n	8000efc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fd15 	bl	800191c <RCC_SetFlashLatencyFromMSIRange>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e343      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000efc:	f000 fc4a 	bl	8001794 <HAL_RCC_GetSysClockFreq>
 8000f00:	4602      	mov	r2, r0
 8000f02:	4b52      	ldr	r3, [pc, #328]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	091b      	lsrs	r3, r3, #4
 8000f08:	f003 030f 	and.w	r3, r3, #15
 8000f0c:	4950      	ldr	r1, [pc, #320]	; (8001050 <HAL_RCC_OscConfig+0x274>)
 8000f0e:	5ccb      	ldrb	r3, [r1, r3]
 8000f10:	f003 031f 	and.w	r3, r3, #31
 8000f14:	fa22 f303 	lsr.w	r3, r2, r3
 8000f18:	4a4e      	ldr	r2, [pc, #312]	; (8001054 <HAL_RCC_OscConfig+0x278>)
 8000f1a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f1c:	4b4e      	ldr	r3, [pc, #312]	; (8001058 <HAL_RCC_OscConfig+0x27c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fc0b 	bl	800073c <HAL_InitTick>
 8000f26:	4603      	mov	r3, r0
 8000f28:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d052      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	e327      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d032      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f3c:	4b43      	ldr	r3, [pc, #268]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a42      	ldr	r2, [pc, #264]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f48:	f7ff fc48 	bl	80007dc <HAL_GetTick>
 8000f4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f4e:	e008      	b.n	8000f62 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f50:	f7ff fc44 	bl	80007dc <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e310      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f62:	4b3a      	ldr	r3, [pc, #232]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d0f0      	beq.n	8000f50 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f6e:	4b37      	ldr	r3, [pc, #220]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a36      	ldr	r2, [pc, #216]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	4b34      	ldr	r3, [pc, #208]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a1b      	ldr	r3, [r3, #32]
 8000f86:	4931      	ldr	r1, [pc, #196]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f8c:	4b2f      	ldr	r3, [pc, #188]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	492c      	ldr	r1, [pc, #176]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	604b      	str	r3, [r1, #4]
 8000fa0:	e01a      	b.n	8000fd8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fa2:	4b2a      	ldr	r3, [pc, #168]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a29      	ldr	r2, [pc, #164]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000fa8:	f023 0301 	bic.w	r3, r3, #1
 8000fac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fae:	f7ff fc15 	bl	80007dc <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fb6:	f7ff fc11 	bl	80007dc <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e2dd      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fc8:	4b20      	ldr	r3, [pc, #128]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f0      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x1da>
 8000fd4:	e000      	b.n	8000fd8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fd6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d074      	beq.n	80010ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d005      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x21a>
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	2b0c      	cmp	r3, #12
 8000fee:	d10e      	bne.n	800100e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d10b      	bne.n	800100e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d064      	beq.n	80010cc <HAL_RCC_OscConfig+0x2f0>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d160      	bne.n	80010cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e2ba      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001016:	d106      	bne.n	8001026 <HAL_RCC_OscConfig+0x24a>
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_RCC_OscConfig+0x270>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0b      	ldr	r2, [pc, #44]	; (800104c <HAL_RCC_OscConfig+0x270>)
 800101e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	e026      	b.n	8001074 <HAL_RCC_OscConfig+0x298>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800102e:	d115      	bne.n	800105c <HAL_RCC_OscConfig+0x280>
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a05      	ldr	r2, [pc, #20]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8001036:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_RCC_OscConfig+0x270>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a02      	ldr	r2, [pc, #8]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8001042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	e014      	b.n	8001074 <HAL_RCC_OscConfig+0x298>
 800104a:	bf00      	nop
 800104c:	40021000 	.word	0x40021000
 8001050:	0800388c 	.word	0x0800388c
 8001054:	20000000 	.word	0x20000000
 8001058:	20000004 	.word	0x20000004
 800105c:	4ba0      	ldr	r3, [pc, #640]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a9f      	ldr	r2, [pc, #636]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 8001062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	4b9d      	ldr	r3, [pc, #628]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a9c      	ldr	r2, [pc, #624]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 800106e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d013      	beq.n	80010a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800107c:	f7ff fbae 	bl	80007dc <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001084:	f7ff fbaa 	bl	80007dc <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b64      	cmp	r3, #100	; 0x64
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e276      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001096:	4b92      	ldr	r3, [pc, #584]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0f0      	beq.n	8001084 <HAL_RCC_OscConfig+0x2a8>
 80010a2:	e014      	b.n	80010ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a4:	f7ff fb9a 	bl	80007dc <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ac:	f7ff fb96 	bl	80007dc <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b64      	cmp	r3, #100	; 0x64
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e262      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010be:	4b88      	ldr	r3, [pc, #544]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f0      	bne.n	80010ac <HAL_RCC_OscConfig+0x2d0>
 80010ca:	e000      	b.n	80010ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d060      	beq.n	800119c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	2b04      	cmp	r3, #4
 80010de:	d005      	beq.n	80010ec <HAL_RCC_OscConfig+0x310>
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	2b0c      	cmp	r3, #12
 80010e4:	d119      	bne.n	800111a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d116      	bne.n	800111a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010ec:	4b7c      	ldr	r3, [pc, #496]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d005      	beq.n	8001104 <HAL_RCC_OscConfig+0x328>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e23f      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001104:	4b76      	ldr	r3, [pc, #472]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	061b      	lsls	r3, r3, #24
 8001112:	4973      	ldr	r1, [pc, #460]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 8001114:	4313      	orrs	r3, r2
 8001116:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001118:	e040      	b.n	800119c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d023      	beq.n	800116a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001122:	4b6f      	ldr	r3, [pc, #444]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a6e      	ldr	r2, [pc, #440]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 8001128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112e:	f7ff fb55 	bl	80007dc <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001136:	f7ff fb51 	bl	80007dc <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e21d      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001148:	4b65      	ldr	r3, [pc, #404]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0f0      	beq.n	8001136 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001154:	4b62      	ldr	r3, [pc, #392]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	061b      	lsls	r3, r3, #24
 8001162:	495f      	ldr	r1, [pc, #380]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 8001164:	4313      	orrs	r3, r2
 8001166:	604b      	str	r3, [r1, #4]
 8001168:	e018      	b.n	800119c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800116a:	4b5d      	ldr	r3, [pc, #372]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a5c      	ldr	r2, [pc, #368]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 8001170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001176:	f7ff fb31 	bl	80007dc <HAL_GetTick>
 800117a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800117c:	e008      	b.n	8001190 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800117e:	f7ff fb2d 	bl	80007dc <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e1f9      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001190:	4b53      	ldr	r3, [pc, #332]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1f0      	bne.n	800117e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d03c      	beq.n	8001222 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d01c      	beq.n	80011ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011b0:	4b4b      	ldr	r3, [pc, #300]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 80011b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011b6:	4a4a      	ldr	r2, [pc, #296]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c0:	f7ff fb0c 	bl	80007dc <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c8:	f7ff fb08 	bl	80007dc <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e1d4      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011da:	4b41      	ldr	r3, [pc, #260]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 80011dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0ef      	beq.n	80011c8 <HAL_RCC_OscConfig+0x3ec>
 80011e8:	e01b      	b.n	8001222 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ea:	4b3d      	ldr	r3, [pc, #244]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 80011ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011f0:	4a3b      	ldr	r2, [pc, #236]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 80011f2:	f023 0301 	bic.w	r3, r3, #1
 80011f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011fa:	f7ff faef 	bl	80007dc <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001202:	f7ff faeb 	bl	80007dc <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e1b7      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001214:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 8001216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1ef      	bne.n	8001202 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 80a6 	beq.w	800137c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001234:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 8001236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10d      	bne.n	800125c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001240:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 8001242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001244:	4a26      	ldr	r2, [pc, #152]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 8001246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124a:	6593      	str	r3, [r2, #88]	; 0x58
 800124c:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 800124e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001258:	2301      	movs	r3, #1
 800125a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <HAL_RCC_OscConfig+0x508>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001264:	2b00      	cmp	r3, #0
 8001266:	d118      	bne.n	800129a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001268:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <HAL_RCC_OscConfig+0x508>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a1d      	ldr	r2, [pc, #116]	; (80012e4 <HAL_RCC_OscConfig+0x508>)
 800126e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001272:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001274:	f7ff fab2 	bl	80007dc <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800127c:	f7ff faae 	bl	80007dc <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e17a      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_RCC_OscConfig+0x508>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f0      	beq.n	800127c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d108      	bne.n	80012b4 <HAL_RCC_OscConfig+0x4d8>
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 80012a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a8:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012b2:	e029      	b.n	8001308 <HAL_RCC_OscConfig+0x52c>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2b05      	cmp	r3, #5
 80012ba:	d115      	bne.n	80012e8 <HAL_RCC_OscConfig+0x50c>
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 80012be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012c2:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 80012ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012d2:	4a03      	ldr	r2, [pc, #12]	; (80012e0 <HAL_RCC_OscConfig+0x504>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012dc:	e014      	b.n	8001308 <HAL_RCC_OscConfig+0x52c>
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40007000 	.word	0x40007000
 80012e8:	4b9c      	ldr	r3, [pc, #624]	; (800155c <HAL_RCC_OscConfig+0x780>)
 80012ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ee:	4a9b      	ldr	r2, [pc, #620]	; (800155c <HAL_RCC_OscConfig+0x780>)
 80012f0:	f023 0301 	bic.w	r3, r3, #1
 80012f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012f8:	4b98      	ldr	r3, [pc, #608]	; (800155c <HAL_RCC_OscConfig+0x780>)
 80012fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012fe:	4a97      	ldr	r2, [pc, #604]	; (800155c <HAL_RCC_OscConfig+0x780>)
 8001300:	f023 0304 	bic.w	r3, r3, #4
 8001304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d016      	beq.n	800133e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001310:	f7ff fa64 	bl	80007dc <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001316:	e00a      	b.n	800132e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001318:	f7ff fa60 	bl	80007dc <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	f241 3288 	movw	r2, #5000	; 0x1388
 8001326:	4293      	cmp	r3, r2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e12a      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800132e:	4b8b      	ldr	r3, [pc, #556]	; (800155c <HAL_RCC_OscConfig+0x780>)
 8001330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0ed      	beq.n	8001318 <HAL_RCC_OscConfig+0x53c>
 800133c:	e015      	b.n	800136a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133e:	f7ff fa4d 	bl	80007dc <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001344:	e00a      	b.n	800135c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001346:	f7ff fa49 	bl	80007dc <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	f241 3288 	movw	r2, #5000	; 0x1388
 8001354:	4293      	cmp	r3, r2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e113      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800135c:	4b7f      	ldr	r3, [pc, #508]	; (800155c <HAL_RCC_OscConfig+0x780>)
 800135e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1ed      	bne.n	8001346 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800136a:	7ffb      	ldrb	r3, [r7, #31]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d105      	bne.n	800137c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001370:	4b7a      	ldr	r3, [pc, #488]	; (800155c <HAL_RCC_OscConfig+0x780>)
 8001372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001374:	4a79      	ldr	r2, [pc, #484]	; (800155c <HAL_RCC_OscConfig+0x780>)
 8001376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800137a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 80fe 	beq.w	8001582 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138a:	2b02      	cmp	r3, #2
 800138c:	f040 80d0 	bne.w	8001530 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001390:	4b72      	ldr	r3, [pc, #456]	; (800155c <HAL_RCC_OscConfig+0x780>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f003 0203 	and.w	r2, r3, #3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d130      	bne.n	8001406 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	3b01      	subs	r3, #1
 80013b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d127      	bne.n	8001406 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d11f      	bne.n	8001406 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013d0:	2a07      	cmp	r2, #7
 80013d2:	bf14      	ite	ne
 80013d4:	2201      	movne	r2, #1
 80013d6:	2200      	moveq	r2, #0
 80013d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013da:	4293      	cmp	r3, r2
 80013dc:	d113      	bne.n	8001406 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e8:	085b      	lsrs	r3, r3, #1
 80013ea:	3b01      	subs	r3, #1
 80013ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d109      	bne.n	8001406 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	085b      	lsrs	r3, r3, #1
 80013fe:	3b01      	subs	r3, #1
 8001400:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001402:	429a      	cmp	r2, r3
 8001404:	d06e      	beq.n	80014e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	2b0c      	cmp	r3, #12
 800140a:	d069      	beq.n	80014e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800140c:	4b53      	ldr	r3, [pc, #332]	; (800155c <HAL_RCC_OscConfig+0x780>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d105      	bne.n	8001424 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001418:	4b50      	ldr	r3, [pc, #320]	; (800155c <HAL_RCC_OscConfig+0x780>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e0ad      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001428:	4b4c      	ldr	r3, [pc, #304]	; (800155c <HAL_RCC_OscConfig+0x780>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a4b      	ldr	r2, [pc, #300]	; (800155c <HAL_RCC_OscConfig+0x780>)
 800142e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001432:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001434:	f7ff f9d2 	bl	80007dc <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800143c:	f7ff f9ce 	bl	80007dc <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e09a      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800144e:	4b43      	ldr	r3, [pc, #268]	; (800155c <HAL_RCC_OscConfig+0x780>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800145a:	4b40      	ldr	r3, [pc, #256]	; (800155c <HAL_RCC_OscConfig+0x780>)
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	4b40      	ldr	r3, [pc, #256]	; (8001560 <HAL_RCC_OscConfig+0x784>)
 8001460:	4013      	ands	r3, r2
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800146a:	3a01      	subs	r2, #1
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	4311      	orrs	r1, r2
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001474:	0212      	lsls	r2, r2, #8
 8001476:	4311      	orrs	r1, r2
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800147c:	0852      	lsrs	r2, r2, #1
 800147e:	3a01      	subs	r2, #1
 8001480:	0552      	lsls	r2, r2, #21
 8001482:	4311      	orrs	r1, r2
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001488:	0852      	lsrs	r2, r2, #1
 800148a:	3a01      	subs	r2, #1
 800148c:	0652      	lsls	r2, r2, #25
 800148e:	4311      	orrs	r1, r2
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001494:	0912      	lsrs	r2, r2, #4
 8001496:	0452      	lsls	r2, r2, #17
 8001498:	430a      	orrs	r2, r1
 800149a:	4930      	ldr	r1, [pc, #192]	; (800155c <HAL_RCC_OscConfig+0x780>)
 800149c:	4313      	orrs	r3, r2
 800149e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80014a0:	4b2e      	ldr	r3, [pc, #184]	; (800155c <HAL_RCC_OscConfig+0x780>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a2d      	ldr	r2, [pc, #180]	; (800155c <HAL_RCC_OscConfig+0x780>)
 80014a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014ac:	4b2b      	ldr	r3, [pc, #172]	; (800155c <HAL_RCC_OscConfig+0x780>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	4a2a      	ldr	r2, [pc, #168]	; (800155c <HAL_RCC_OscConfig+0x780>)
 80014b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014b8:	f7ff f990 	bl	80007dc <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c0:	f7ff f98c 	bl	80007dc <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e058      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014d2:	4b22      	ldr	r3, [pc, #136]	; (800155c <HAL_RCC_OscConfig+0x780>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014de:	e050      	b.n	8001582 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e04f      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <HAL_RCC_OscConfig+0x780>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d148      	bne.n	8001582 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <HAL_RCC_OscConfig+0x780>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a19      	ldr	r2, [pc, #100]	; (800155c <HAL_RCC_OscConfig+0x780>)
 80014f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014fc:	4b17      	ldr	r3, [pc, #92]	; (800155c <HAL_RCC_OscConfig+0x780>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	4a16      	ldr	r2, [pc, #88]	; (800155c <HAL_RCC_OscConfig+0x780>)
 8001502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001506:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001508:	f7ff f968 	bl	80007dc <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001510:	f7ff f964 	bl	80007dc <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e030      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_RCC_OscConfig+0x780>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x734>
 800152e:	e028      	b.n	8001582 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	2b0c      	cmp	r3, #12
 8001534:	d023      	beq.n	800157e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_RCC_OscConfig+0x780>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a08      	ldr	r2, [pc, #32]	; (800155c <HAL_RCC_OscConfig+0x780>)
 800153c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001542:	f7ff f94b 	bl	80007dc <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001548:	e00c      	b.n	8001564 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800154a:	f7ff f947 	bl	80007dc <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d905      	bls.n	8001564 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e013      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
 800155c:	40021000 	.word	0x40021000
 8001560:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_RCC_OscConfig+0x7b0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1ec      	bne.n	800154a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_RCC_OscConfig+0x7b0>)
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	4905      	ldr	r1, [pc, #20]	; (800158c <HAL_RCC_OscConfig+0x7b0>)
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_RCC_OscConfig+0x7b4>)
 8001578:	4013      	ands	r3, r2
 800157a:	60cb      	str	r3, [r1, #12]
 800157c:	e001      	b.n	8001582 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3720      	adds	r7, #32
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40021000 	.word	0x40021000
 8001590:	feeefffc 	.word	0xfeeefffc

08001594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0e7      	b.n	8001778 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015a8:	4b75      	ldr	r3, [pc, #468]	; (8001780 <HAL_RCC_ClockConfig+0x1ec>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d910      	bls.n	80015d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b6:	4b72      	ldr	r3, [pc, #456]	; (8001780 <HAL_RCC_ClockConfig+0x1ec>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 0207 	bic.w	r2, r3, #7
 80015be:	4970      	ldr	r1, [pc, #448]	; (8001780 <HAL_RCC_ClockConfig+0x1ec>)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c6:	4b6e      	ldr	r3, [pc, #440]	; (8001780 <HAL_RCC_ClockConfig+0x1ec>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d001      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e0cf      	b.n	8001778 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d010      	beq.n	8001606 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	4b66      	ldr	r3, [pc, #408]	; (8001784 <HAL_RCC_ClockConfig+0x1f0>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d908      	bls.n	8001606 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f4:	4b63      	ldr	r3, [pc, #396]	; (8001784 <HAL_RCC_ClockConfig+0x1f0>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	4960      	ldr	r1, [pc, #384]	; (8001784 <HAL_RCC_ClockConfig+0x1f0>)
 8001602:	4313      	orrs	r3, r2
 8001604:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d04c      	beq.n	80016ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b03      	cmp	r3, #3
 8001618:	d107      	bne.n	800162a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800161a:	4b5a      	ldr	r3, [pc, #360]	; (8001784 <HAL_RCC_ClockConfig+0x1f0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d121      	bne.n	800166a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e0a6      	b.n	8001778 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d107      	bne.n	8001642 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001632:	4b54      	ldr	r3, [pc, #336]	; (8001784 <HAL_RCC_ClockConfig+0x1f0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d115      	bne.n	800166a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e09a      	b.n	8001778 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d107      	bne.n	800165a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800164a:	4b4e      	ldr	r3, [pc, #312]	; (8001784 <HAL_RCC_ClockConfig+0x1f0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d109      	bne.n	800166a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e08e      	b.n	8001778 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800165a:	4b4a      	ldr	r3, [pc, #296]	; (8001784 <HAL_RCC_ClockConfig+0x1f0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e086      	b.n	8001778 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800166a:	4b46      	ldr	r3, [pc, #280]	; (8001784 <HAL_RCC_ClockConfig+0x1f0>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f023 0203 	bic.w	r2, r3, #3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4943      	ldr	r1, [pc, #268]	; (8001784 <HAL_RCC_ClockConfig+0x1f0>)
 8001678:	4313      	orrs	r3, r2
 800167a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800167c:	f7ff f8ae 	bl	80007dc <HAL_GetTick>
 8001680:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001682:	e00a      	b.n	800169a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001684:	f7ff f8aa 	bl	80007dc <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001692:	4293      	cmp	r3, r2
 8001694:	d901      	bls.n	800169a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e06e      	b.n	8001778 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169a:	4b3a      	ldr	r3, [pc, #232]	; (8001784 <HAL_RCC_ClockConfig+0x1f0>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 020c 	and.w	r2, r3, #12
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d1eb      	bne.n	8001684 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d010      	beq.n	80016da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	4b31      	ldr	r3, [pc, #196]	; (8001784 <HAL_RCC_ClockConfig+0x1f0>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d208      	bcs.n	80016da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c8:	4b2e      	ldr	r3, [pc, #184]	; (8001784 <HAL_RCC_ClockConfig+0x1f0>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	492b      	ldr	r1, [pc, #172]	; (8001784 <HAL_RCC_ClockConfig+0x1f0>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016da:	4b29      	ldr	r3, [pc, #164]	; (8001780 <HAL_RCC_ClockConfig+0x1ec>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d210      	bcs.n	800170a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e8:	4b25      	ldr	r3, [pc, #148]	; (8001780 <HAL_RCC_ClockConfig+0x1ec>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f023 0207 	bic.w	r2, r3, #7
 80016f0:	4923      	ldr	r1, [pc, #140]	; (8001780 <HAL_RCC_ClockConfig+0x1ec>)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f8:	4b21      	ldr	r3, [pc, #132]	; (8001780 <HAL_RCC_ClockConfig+0x1ec>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d001      	beq.n	800170a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e036      	b.n	8001778 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	2b00      	cmp	r3, #0
 8001714:	d008      	beq.n	8001728 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001716:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <HAL_RCC_ClockConfig+0x1f0>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	4918      	ldr	r1, [pc, #96]	; (8001784 <HAL_RCC_ClockConfig+0x1f0>)
 8001724:	4313      	orrs	r3, r2
 8001726:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	2b00      	cmp	r3, #0
 8001732:	d009      	beq.n	8001748 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <HAL_RCC_ClockConfig+0x1f0>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	4910      	ldr	r1, [pc, #64]	; (8001784 <HAL_RCC_ClockConfig+0x1f0>)
 8001744:	4313      	orrs	r3, r2
 8001746:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001748:	f000 f824 	bl	8001794 <HAL_RCC_GetSysClockFreq>
 800174c:	4602      	mov	r2, r0
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <HAL_RCC_ClockConfig+0x1f0>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	091b      	lsrs	r3, r3, #4
 8001754:	f003 030f 	and.w	r3, r3, #15
 8001758:	490b      	ldr	r1, [pc, #44]	; (8001788 <HAL_RCC_ClockConfig+0x1f4>)
 800175a:	5ccb      	ldrb	r3, [r1, r3]
 800175c:	f003 031f 	and.w	r3, r3, #31
 8001760:	fa22 f303 	lsr.w	r3, r2, r3
 8001764:	4a09      	ldr	r2, [pc, #36]	; (800178c <HAL_RCC_ClockConfig+0x1f8>)
 8001766:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_RCC_ClockConfig+0x1fc>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe ffe5 	bl	800073c <HAL_InitTick>
 8001772:	4603      	mov	r3, r0
 8001774:	72fb      	strb	r3, [r7, #11]

  return status;
 8001776:	7afb      	ldrb	r3, [r7, #11]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40022000 	.word	0x40022000
 8001784:	40021000 	.word	0x40021000
 8001788:	0800388c 	.word	0x0800388c
 800178c:	20000000 	.word	0x20000000
 8001790:	20000004 	.word	0x20000004

08001794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017a2:	4b3e      	ldr	r3, [pc, #248]	; (800189c <HAL_RCC_GetSysClockFreq+0x108>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ac:	4b3b      	ldr	r3, [pc, #236]	; (800189c <HAL_RCC_GetSysClockFreq+0x108>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0x34>
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	2b0c      	cmp	r3, #12
 80017c0:	d121      	bne.n	8001806 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d11e      	bne.n	8001806 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017c8:	4b34      	ldr	r3, [pc, #208]	; (800189c <HAL_RCC_GetSysClockFreq+0x108>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d107      	bne.n	80017e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017d4:	4b31      	ldr	r3, [pc, #196]	; (800189c <HAL_RCC_GetSysClockFreq+0x108>)
 80017d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017da:	0a1b      	lsrs	r3, r3, #8
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	61fb      	str	r3, [r7, #28]
 80017e2:	e005      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017e4:	4b2d      	ldr	r3, [pc, #180]	; (800189c <HAL_RCC_GetSysClockFreq+0x108>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80017f0:	4a2b      	ldr	r2, [pc, #172]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10d      	bne.n	800181c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001804:	e00a      	b.n	800181c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	2b04      	cmp	r3, #4
 800180a:	d102      	bne.n	8001812 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800180c:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	e004      	b.n	800181c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	2b08      	cmp	r3, #8
 8001816:	d101      	bne.n	800181c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001818:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800181a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	2b0c      	cmp	r3, #12
 8001820:	d134      	bne.n	800188c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001822:	4b1e      	ldr	r3, [pc, #120]	; (800189c <HAL_RCC_GetSysClockFreq+0x108>)
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d003      	beq.n	800183a <HAL_RCC_GetSysClockFreq+0xa6>
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	2b03      	cmp	r3, #3
 8001836:	d003      	beq.n	8001840 <HAL_RCC_GetSysClockFreq+0xac>
 8001838:	e005      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800183a:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800183c:	617b      	str	r3, [r7, #20]
      break;
 800183e:	e005      	b.n	800184c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001842:	617b      	str	r3, [r7, #20]
      break;
 8001844:	e002      	b.n	800184c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	617b      	str	r3, [r7, #20]
      break;
 800184a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800184c:	4b13      	ldr	r3, [pc, #76]	; (800189c <HAL_RCC_GetSysClockFreq+0x108>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	3301      	adds	r3, #1
 8001858:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <HAL_RCC_GetSysClockFreq+0x108>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	0a1b      	lsrs	r3, r3, #8
 8001860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	fb03 f202 	mul.w	r2, r3, r2
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001870:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_RCC_GetSysClockFreq+0x108>)
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	0e5b      	lsrs	r3, r3, #25
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	3301      	adds	r3, #1
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	fbb2 f3f3 	udiv	r3, r2, r3
 800188a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800188c:	69bb      	ldr	r3, [r7, #24]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3724      	adds	r7, #36	; 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40021000 	.word	0x40021000
 80018a0:	080038a4 	.word	0x080038a4
 80018a4:	00f42400 	.word	0x00f42400
 80018a8:	007a1200 	.word	0x007a1200

080018ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000000 	.word	0x20000000

080018c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80018c8:	f7ff fff0 	bl	80018ac <HAL_RCC_GetHCLKFreq>
 80018cc:	4602      	mov	r2, r0
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	0a1b      	lsrs	r3, r3, #8
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	4904      	ldr	r1, [pc, #16]	; (80018ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80018da:	5ccb      	ldrb	r3, [r1, r3]
 80018dc:	f003 031f 	and.w	r3, r3, #31
 80018e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40021000 	.word	0x40021000
 80018ec:	0800389c 	.word	0x0800389c

080018f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80018f4:	f7ff ffda 	bl	80018ac <HAL_RCC_GetHCLKFreq>
 80018f8:	4602      	mov	r2, r0
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	0adb      	lsrs	r3, r3, #11
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	4904      	ldr	r1, [pc, #16]	; (8001918 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001906:	5ccb      	ldrb	r3, [r1, r3]
 8001908:	f003 031f 	and.w	r3, r3, #31
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001910:	4618      	mov	r0, r3
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	0800389c 	.word	0x0800389c

0800191c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001924:	2300      	movs	r3, #0
 8001926:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001928:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800192a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001934:	f7ff f9ee 	bl	8000d14 <HAL_PWREx_GetVoltageRange>
 8001938:	6178      	str	r0, [r7, #20]
 800193a:	e014      	b.n	8001966 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800193c:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	4a24      	ldr	r2, [pc, #144]	; (80019d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001946:	6593      	str	r3, [r2, #88]	; 0x58
 8001948:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001954:	f7ff f9de 	bl	8000d14 <HAL_PWREx_GetVoltageRange>
 8001958:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800195a:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195e:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001964:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800196c:	d10b      	bne.n	8001986 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b80      	cmp	r3, #128	; 0x80
 8001972:	d919      	bls.n	80019a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2ba0      	cmp	r3, #160	; 0xa0
 8001978:	d902      	bls.n	8001980 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800197a:	2302      	movs	r3, #2
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	e013      	b.n	80019a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001980:	2301      	movs	r3, #1
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	e010      	b.n	80019a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b80      	cmp	r3, #128	; 0x80
 800198a:	d902      	bls.n	8001992 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800198c:	2303      	movs	r3, #3
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	e00a      	b.n	80019a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b80      	cmp	r3, #128	; 0x80
 8001996:	d102      	bne.n	800199e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001998:	2302      	movs	r3, #2
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	e004      	b.n	80019a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b70      	cmp	r3, #112	; 0x70
 80019a2:	d101      	bne.n	80019a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019a4:	2301      	movs	r3, #1
 80019a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f023 0207 	bic.w	r2, r3, #7
 80019b0:	4909      	ldr	r1, [pc, #36]	; (80019d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019b8:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d001      	beq.n	80019ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40022000 	.word	0x40022000

080019dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80019e4:	2300      	movs	r3, #0
 80019e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80019e8:	2300      	movs	r3, #0
 80019ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d041      	beq.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001a00:	d02a      	beq.n	8001a58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001a02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001a06:	d824      	bhi.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001a08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001a0c:	d008      	beq.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001a0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001a12:	d81e      	bhi.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00a      	beq.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001a18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a1c:	d010      	beq.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001a1e:	e018      	b.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001a20:	4b86      	ldr	r3, [pc, #536]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	4a85      	ldr	r2, [pc, #532]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001a2c:	e015      	b.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3304      	adds	r3, #4
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 fabb 	bl	8001fb0 <RCCEx_PLLSAI1_Config>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001a3e:	e00c      	b.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3320      	adds	r3, #32
 8001a44:	2100      	movs	r1, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 fba6 	bl	8002198 <RCCEx_PLLSAI2_Config>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001a50:	e003      	b.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	74fb      	strb	r3, [r7, #19]
      break;
 8001a56:	e000      	b.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001a58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001a5a:	7cfb      	ldrb	r3, [r7, #19]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10b      	bne.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a60:	4b76      	ldr	r3, [pc, #472]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a6e:	4973      	ldr	r1, [pc, #460]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001a76:	e001      	b.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a78:	7cfb      	ldrb	r3, [r7, #19]
 8001a7a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d041      	beq.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001a90:	d02a      	beq.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001a92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001a96:	d824      	bhi.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001a98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a9c:	d008      	beq.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001a9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001aa2:	d81e      	bhi.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00a      	beq.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aac:	d010      	beq.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001aae:	e018      	b.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ab0:	4b62      	ldr	r3, [pc, #392]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	4a61      	ldr	r2, [pc, #388]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001abc:	e015      	b.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f000 fa73 	bl	8001fb0 <RCCEx_PLLSAI1_Config>
 8001aca:	4603      	mov	r3, r0
 8001acc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ace:	e00c      	b.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3320      	adds	r3, #32
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fb5e 	bl	8002198 <RCCEx_PLLSAI2_Config>
 8001adc:	4603      	mov	r3, r0
 8001ade:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ae0:	e003      	b.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	74fb      	strb	r3, [r7, #19]
      break;
 8001ae6:	e000      	b.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ae8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001aea:	7cfb      	ldrb	r3, [r7, #19]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d10b      	bne.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001af0:	4b52      	ldr	r3, [pc, #328]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001afe:	494f      	ldr	r1, [pc, #316]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001b06:	e001      	b.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b08:	7cfb      	ldrb	r3, [r7, #19]
 8001b0a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 80a0 	beq.w	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b1e:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00d      	beq.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b34:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b38:	4a40      	ldr	r2, [pc, #256]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b40:	4b3e      	ldr	r3, [pc, #248]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b50:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a3a      	ldr	r2, [pc, #232]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b5c:	f7fe fe3e 	bl	80007dc <HAL_GetTick>
 8001b60:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001b62:	e009      	b.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b64:	f7fe fe3a 	bl	80007dc <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d902      	bls.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	74fb      	strb	r3, [r7, #19]
        break;
 8001b76:	e005      	b.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001b78:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0ef      	beq.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001b84:	7cfb      	ldrb	r3, [r7, #19]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d15c      	bne.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b8a:	4b2c      	ldr	r3, [pc, #176]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b94:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d01f      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d019      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ba8:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001bb4:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bba:	4a20      	ldr	r2, [pc, #128]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bca:	4a1c      	ldr	r2, [pc, #112]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001bd4:	4a19      	ldr	r2, [pc, #100]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d016      	beq.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be6:	f7fe fdf9 	bl	80007dc <HAL_GetTick>
 8001bea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bec:	e00b      	b.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7fe fdf5 	bl	80007dc <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d902      	bls.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	74fb      	strb	r3, [r7, #19]
            break;
 8001c04:	e006      	b.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0ec      	beq.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001c14:	7cfb      	ldrb	r3, [r7, #19]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c2a:	4904      	ldr	r1, [pc, #16]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001c32:	e009      	b.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c34:	7cfb      	ldrb	r3, [r7, #19]
 8001c36:	74bb      	strb	r3, [r7, #18]
 8001c38:	e006      	b.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c44:	7cfb      	ldrb	r3, [r7, #19]
 8001c46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c48:	7c7b      	ldrb	r3, [r7, #17]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d105      	bne.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c4e:	4b9e      	ldr	r3, [pc, #632]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	4a9d      	ldr	r2, [pc, #628]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00a      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c66:	4b98      	ldr	r3, [pc, #608]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6c:	f023 0203 	bic.w	r2, r3, #3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c74:	4994      	ldr	r1, [pc, #592]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00a      	beq.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c88:	4b8f      	ldr	r3, [pc, #572]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c8e:	f023 020c 	bic.w	r2, r3, #12
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c96:	498c      	ldr	r1, [pc, #560]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00a      	beq.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001caa:	4b87      	ldr	r3, [pc, #540]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	4983      	ldr	r1, [pc, #524]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00a      	beq.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ccc:	4b7e      	ldr	r3, [pc, #504]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	497b      	ldr	r1, [pc, #492]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00a      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001cee:	4b76      	ldr	r3, [pc, #472]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cfc:	4972      	ldr	r1, [pc, #456]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0320 	and.w	r3, r3, #32
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00a      	beq.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d10:	4b6d      	ldr	r3, [pc, #436]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	496a      	ldr	r1, [pc, #424]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00a      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d32:	4b65      	ldr	r3, [pc, #404]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d40:	4961      	ldr	r1, [pc, #388]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00a      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001d54:	4b5c      	ldr	r3, [pc, #368]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d62:	4959      	ldr	r1, [pc, #356]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00a      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d76:	4b54      	ldr	r3, [pc, #336]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d84:	4950      	ldr	r1, [pc, #320]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00a      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d98:	4b4b      	ldr	r3, [pc, #300]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da6:	4948      	ldr	r1, [pc, #288]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00a      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001dba:	4b43      	ldr	r3, [pc, #268]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc8:	493f      	ldr	r1, [pc, #252]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d028      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ddc:	4b3a      	ldr	r3, [pc, #232]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dea:	4937      	ldr	r1, [pc, #220]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001df6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001dfa:	d106      	bne.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001dfc:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	4a31      	ldr	r2, [pc, #196]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e06:	60d3      	str	r3, [r2, #12]
 8001e08:	e011      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e12:	d10c      	bne.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3304      	adds	r3, #4
 8001e18:	2101      	movs	r1, #1
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 f8c8 	bl	8001fb0 <RCCEx_PLLSAI1_Config>
 8001e20:	4603      	mov	r3, r0
 8001e22:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001e24:	7cfb      	ldrb	r3, [r7, #19]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8001e2a:	7cfb      	ldrb	r3, [r7, #19]
 8001e2c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d028      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e3a:	4b23      	ldr	r3, [pc, #140]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e48:	491f      	ldr	r1, [pc, #124]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e58:	d106      	bne.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	4a1a      	ldr	r2, [pc, #104]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e64:	60d3      	str	r3, [r2, #12]
 8001e66:	e011      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3304      	adds	r3, #4
 8001e76:	2101      	movs	r1, #1
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 f899 	bl	8001fb0 <RCCEx_PLLSAI1_Config>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e82:	7cfb      	ldrb	r3, [r7, #19]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8001e88:	7cfb      	ldrb	r3, [r7, #19]
 8001e8a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d02b      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea6:	4908      	ldr	r1, [pc, #32]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001eb6:	d109      	bne.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4a02      	ldr	r2, [pc, #8]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ec2:	60d3      	str	r3, [r2, #12]
 8001ec4:	e014      	b.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001ec6:	bf00      	nop
 8001ec8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	2101      	movs	r1, #1
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 f867 	bl	8001fb0 <RCCEx_PLLSAI1_Config>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001ee6:	7cfb      	ldrb	r3, [r7, #19]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8001eec:	7cfb      	ldrb	r3, [r7, #19]
 8001eee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d02f      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001efc:	4b2b      	ldr	r3, [pc, #172]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f0a:	4928      	ldr	r1, [pc, #160]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f1a:	d10d      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3304      	adds	r3, #4
 8001f20:	2102      	movs	r1, #2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f844 	bl	8001fb0 <RCCEx_PLLSAI1_Config>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f2c:	7cfb      	ldrb	r3, [r7, #19]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d014      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8001f32:	7cfb      	ldrb	r3, [r7, #19]
 8001f34:	74bb      	strb	r3, [r7, #18]
 8001f36:	e011      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3320      	adds	r3, #32
 8001f46:	2102      	movs	r1, #2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f000 f925 	bl	8002198 <RCCEx_PLLSAI2_Config>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f52:	7cfb      	ldrb	r3, [r7, #19]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8001f58:	7cfb      	ldrb	r3, [r7, #19]
 8001f5a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00a      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f76:	490d      	ldr	r1, [pc, #52]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00b      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f9a:	4904      	ldr	r1, [pc, #16]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001fa2:	7cbb      	ldrb	r3, [r7, #18]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40021000 	.word	0x40021000

08001fb0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001fbe:	4b75      	ldr	r3, [pc, #468]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d018      	beq.n	8001ffc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001fca:	4b72      	ldr	r3, [pc, #456]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f003 0203 	and.w	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d10d      	bne.n	8001ff6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
       ||
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d009      	beq.n	8001ff6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001fe2:	4b6c      	ldr	r3, [pc, #432]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	091b      	lsrs	r3, r3, #4
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
       ||
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d047      	beq.n	8002086 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	73fb      	strb	r3, [r7, #15]
 8001ffa:	e044      	b.n	8002086 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d018      	beq.n	8002036 <RCCEx_PLLSAI1_Config+0x86>
 8002004:	2b03      	cmp	r3, #3
 8002006:	d825      	bhi.n	8002054 <RCCEx_PLLSAI1_Config+0xa4>
 8002008:	2b01      	cmp	r3, #1
 800200a:	d002      	beq.n	8002012 <RCCEx_PLLSAI1_Config+0x62>
 800200c:	2b02      	cmp	r3, #2
 800200e:	d009      	beq.n	8002024 <RCCEx_PLLSAI1_Config+0x74>
 8002010:	e020      	b.n	8002054 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002012:	4b60      	ldr	r3, [pc, #384]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d11d      	bne.n	800205a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002022:	e01a      	b.n	800205a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002024:	4b5b      	ldr	r3, [pc, #364]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202c:	2b00      	cmp	r3, #0
 800202e:	d116      	bne.n	800205e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002034:	e013      	b.n	800205e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002036:	4b57      	ldr	r3, [pc, #348]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10f      	bne.n	8002062 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002042:	4b54      	ldr	r3, [pc, #336]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d109      	bne.n	8002062 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002052:	e006      	b.n	8002062 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
      break;
 8002058:	e004      	b.n	8002064 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800205a:	bf00      	nop
 800205c:	e002      	b.n	8002064 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800205e:	bf00      	nop
 8002060:	e000      	b.n	8002064 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002062:	bf00      	nop
    }

    if(status == HAL_OK)
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10d      	bne.n	8002086 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800206a:	4b4a      	ldr	r3, [pc, #296]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6819      	ldr	r1, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	430b      	orrs	r3, r1
 8002080:	4944      	ldr	r1, [pc, #272]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002082:	4313      	orrs	r3, r2
 8002084:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d17d      	bne.n	8002188 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800208c:	4b41      	ldr	r3, [pc, #260]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a40      	ldr	r2, [pc, #256]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002092:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002096:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002098:	f7fe fba0 	bl	80007dc <HAL_GetTick>
 800209c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800209e:	e009      	b.n	80020b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80020a0:	f7fe fb9c 	bl	80007dc <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d902      	bls.n	80020b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	73fb      	strb	r3, [r7, #15]
        break;
 80020b2:	e005      	b.n	80020c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80020b4:	4b37      	ldr	r3, [pc, #220]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1ef      	bne.n	80020a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d160      	bne.n	8002188 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d111      	bne.n	80020f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020cc:	4b31      	ldr	r3, [pc, #196]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80020d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6892      	ldr	r2, [r2, #8]
 80020dc:	0211      	lsls	r1, r2, #8
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68d2      	ldr	r2, [r2, #12]
 80020e2:	0912      	lsrs	r2, r2, #4
 80020e4:	0452      	lsls	r2, r2, #17
 80020e6:	430a      	orrs	r2, r1
 80020e8:	492a      	ldr	r1, [pc, #168]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	610b      	str	r3, [r1, #16]
 80020ee:	e027      	b.n	8002140 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d112      	bne.n	800211c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020f6:	4b27      	ldr	r3, [pc, #156]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80020fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6892      	ldr	r2, [r2, #8]
 8002106:	0211      	lsls	r1, r2, #8
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6912      	ldr	r2, [r2, #16]
 800210c:	0852      	lsrs	r2, r2, #1
 800210e:	3a01      	subs	r2, #1
 8002110:	0552      	lsls	r2, r2, #21
 8002112:	430a      	orrs	r2, r1
 8002114:	491f      	ldr	r1, [pc, #124]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002116:	4313      	orrs	r3, r2
 8002118:	610b      	str	r3, [r1, #16]
 800211a:	e011      	b.n	8002140 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800211c:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002124:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6892      	ldr	r2, [r2, #8]
 800212c:	0211      	lsls	r1, r2, #8
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6952      	ldr	r2, [r2, #20]
 8002132:	0852      	lsrs	r2, r2, #1
 8002134:	3a01      	subs	r2, #1
 8002136:	0652      	lsls	r2, r2, #25
 8002138:	430a      	orrs	r2, r1
 800213a:	4916      	ldr	r1, [pc, #88]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 800213c:	4313      	orrs	r3, r2
 800213e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002140:	4b14      	ldr	r3, [pc, #80]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a13      	ldr	r2, [pc, #76]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002146:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800214a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214c:	f7fe fb46 	bl	80007dc <HAL_GetTick>
 8002150:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002152:	e009      	b.n	8002168 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002154:	f7fe fb42 	bl	80007dc <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d902      	bls.n	8002168 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	73fb      	strb	r3, [r7, #15]
          break;
 8002166:	e005      	b.n	8002174 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002168:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0ef      	beq.n	8002154 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	4904      	ldr	r1, [pc, #16]	; (8002194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002184:	4313      	orrs	r3, r2
 8002186:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002188:	7bfb      	ldrb	r3, [r7, #15]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40021000 	.word	0x40021000

08002198 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80021a6:	4b6a      	ldr	r3, [pc, #424]	; (8002350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d018      	beq.n	80021e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80021b2:	4b67      	ldr	r3, [pc, #412]	; (8002350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f003 0203 	and.w	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d10d      	bne.n	80021de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
       ||
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d009      	beq.n	80021de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80021ca:	4b61      	ldr	r3, [pc, #388]	; (8002350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	091b      	lsrs	r3, r3, #4
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
       ||
 80021da:	429a      	cmp	r2, r3
 80021dc:	d047      	beq.n	800226e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	73fb      	strb	r3, [r7, #15]
 80021e2:	e044      	b.n	800226e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d018      	beq.n	800221e <RCCEx_PLLSAI2_Config+0x86>
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d825      	bhi.n	800223c <RCCEx_PLLSAI2_Config+0xa4>
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d002      	beq.n	80021fa <RCCEx_PLLSAI2_Config+0x62>
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d009      	beq.n	800220c <RCCEx_PLLSAI2_Config+0x74>
 80021f8:	e020      	b.n	800223c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80021fa:	4b55      	ldr	r3, [pc, #340]	; (8002350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d11d      	bne.n	8002242 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800220a:	e01a      	b.n	8002242 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800220c:	4b50      	ldr	r3, [pc, #320]	; (8002350 <RCCEx_PLLSAI2_Config+0x1b8>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002214:	2b00      	cmp	r3, #0
 8002216:	d116      	bne.n	8002246 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800221c:	e013      	b.n	8002246 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800221e:	4b4c      	ldr	r3, [pc, #304]	; (8002350 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10f      	bne.n	800224a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800222a:	4b49      	ldr	r3, [pc, #292]	; (8002350 <RCCEx_PLLSAI2_Config+0x1b8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800223a:	e006      	b.n	800224a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
      break;
 8002240:	e004      	b.n	800224c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002242:	bf00      	nop
 8002244:	e002      	b.n	800224c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002246:	bf00      	nop
 8002248:	e000      	b.n	800224c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800224a:	bf00      	nop
    }

    if(status == HAL_OK)
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10d      	bne.n	800226e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002252:	4b3f      	ldr	r3, [pc, #252]	; (8002350 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6819      	ldr	r1, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	3b01      	subs	r3, #1
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	430b      	orrs	r3, r1
 8002268:	4939      	ldr	r1, [pc, #228]	; (8002350 <RCCEx_PLLSAI2_Config+0x1b8>)
 800226a:	4313      	orrs	r3, r2
 800226c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d167      	bne.n	8002344 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002274:	4b36      	ldr	r3, [pc, #216]	; (8002350 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a35      	ldr	r2, [pc, #212]	; (8002350 <RCCEx_PLLSAI2_Config+0x1b8>)
 800227a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800227e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002280:	f7fe faac 	bl	80007dc <HAL_GetTick>
 8002284:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002286:	e009      	b.n	800229c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002288:	f7fe faa8 	bl	80007dc <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d902      	bls.n	800229c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	73fb      	strb	r3, [r7, #15]
        break;
 800229a:	e005      	b.n	80022a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800229c:	4b2c      	ldr	r3, [pc, #176]	; (8002350 <RCCEx_PLLSAI2_Config+0x1b8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1ef      	bne.n	8002288 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d14a      	bne.n	8002344 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d111      	bne.n	80022d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80022b4:	4b26      	ldr	r3, [pc, #152]	; (8002350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80022bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6892      	ldr	r2, [r2, #8]
 80022c4:	0211      	lsls	r1, r2, #8
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68d2      	ldr	r2, [r2, #12]
 80022ca:	0912      	lsrs	r2, r2, #4
 80022cc:	0452      	lsls	r2, r2, #17
 80022ce:	430a      	orrs	r2, r1
 80022d0:	491f      	ldr	r1, [pc, #124]	; (8002350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	614b      	str	r3, [r1, #20]
 80022d6:	e011      	b.n	80022fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80022d8:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80022e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6892      	ldr	r2, [r2, #8]
 80022e8:	0211      	lsls	r1, r2, #8
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6912      	ldr	r2, [r2, #16]
 80022ee:	0852      	lsrs	r2, r2, #1
 80022f0:	3a01      	subs	r2, #1
 80022f2:	0652      	lsls	r2, r2, #25
 80022f4:	430a      	orrs	r2, r1
 80022f6:	4916      	ldr	r1, [pc, #88]	; (8002350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a13      	ldr	r2, [pc, #76]	; (8002350 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002306:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002308:	f7fe fa68 	bl	80007dc <HAL_GetTick>
 800230c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800230e:	e009      	b.n	8002324 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002310:	f7fe fa64 	bl	80007dc <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d902      	bls.n	8002324 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	73fb      	strb	r3, [r7, #15]
          break;
 8002322:	e005      	b.n	8002330 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002324:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0ef      	beq.n	8002310 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d106      	bne.n	8002344 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	4904      	ldr	r1, [pc, #16]	; (8002350 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002340:	4313      	orrs	r3, r2
 8002342:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002344:	7bfb      	ldrb	r3, [r7, #15]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000

08002354 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e03c      	b.n	80023e0 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fe f85e 	bl	800043c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f909 	bl	80025b0 <USART_SetConfig>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e01b      	b.n	80023e0 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023b6:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023c6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 fa3f 	bl	800285c <USART_CheckIdleState>
 80023de:	4603      	mov	r3, r0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08a      	sub	sp, #40	; 0x28
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	4613      	mov	r3, r2
 80023f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b01      	cmp	r3, #1
 8002402:	f040 809a 	bne.w	800253a <HAL_USART_Transmit+0x152>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <HAL_USART_Transmit+0x2a>
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e092      	b.n	800253c <HAL_USART_Transmit+0x154>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_USART_Transmit+0x3c>
 8002420:	2302      	movs	r3, #2
 8002422:	e08b      	b.n	800253c <HAL_USART_Transmit+0x154>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2212      	movs	r2, #18
 8002436:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800243a:	f7fe f9cf 	bl	80007dc <HAL_GetTick>
 800243e:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	88fa      	ldrh	r2, [r7, #6]
 8002444:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	88fa      	ldrh	r2, [r7, #6]
 800244a:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002454:	d108      	bne.n	8002468 <HAL_USART_Transmit+0x80>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d104      	bne.n	8002468 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	e003      	b.n	8002470 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800246c:	2300      	movs	r3, #0
 800246e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8002470:	e02b      	b.n	80024ca <HAL_USART_Transmit+0xe2>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2200      	movs	r2, #0
 800247a:	2180      	movs	r1, #128	; 0x80
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f861 	bl	8002544 <USART_WaitOnFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e057      	b.n	800253c <HAL_USART_Transmit+0x154>
      }
      if (ptxdata8bits == NULL)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10b      	bne.n	80024aa <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	881a      	ldrh	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800249e:	b292      	uxth	r2, r2
 80024a0:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	3302      	adds	r3, #2
 80024a6:	61bb      	str	r3, [r7, #24]
 80024a8:	e008      	b.n	80024bc <HAL_USART_Transmit+0xd4>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	781a      	ldrb	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	b292      	uxth	r2, r2
 80024b4:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3301      	adds	r3, #1
 80024ba:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1ce      	bne.n	8002472 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2200      	movs	r2, #0
 80024dc:	2140      	movs	r1, #64	; 0x40
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f830 	bl	8002544 <USART_WaitOnFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_USART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e026      	b.n	800253c <HAL_USART_Transmit+0x154>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2240      	movs	r2, #64	; 0x40
 80024f4:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2208      	movs	r2, #8
 80024fc:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	8b1b      	ldrh	r3, [r3, #24]
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0208 	orr.w	r2, r2, #8
 800250e:	b292      	uxth	r2, r2
 8002510:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	8b1b      	ldrh	r3, [r3, #24]
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0210 	orr.w	r2, r2, #16
 8002522:	b292      	uxth	r2, r2
 8002524:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	e000      	b.n	800253c <HAL_USART_Transmit+0x154>
  }
  else
  {
    return HAL_BUSY;
 800253a:	2302      	movs	r3, #2
  }
}
 800253c:	4618      	mov	r0, r3
 800253e:	3720      	adds	r7, #32
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	4613      	mov	r3, r2
 8002552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002554:	e018      	b.n	8002588 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255c:	d014      	beq.n	8002588 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800255e:	f7fe f93d 	bl	80007dc <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	429a      	cmp	r2, r3
 800256c:	d302      	bcc.n	8002574 <USART_WaitOnFlagUntilTimeout+0x30>
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d109      	bne.n	8002588 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e00f      	b.n	80025a8 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69da      	ldr	r2, [r3, #28]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	4013      	ands	r3, r2
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	429a      	cmp	r2, r3
 8002596:	bf0c      	ite	eq
 8002598:	2301      	moveq	r3, #1
 800259a:	2300      	movne	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d0d7      	beq.n	8002556 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80025bc:	2300      	movs	r3, #0
 80025be:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4b9a      	ldr	r3, [pc, #616]	; (8002848 <USART_SetConfig+0x298>)
 80025de:	4013      	ands	r3, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	6979      	ldr	r1, [r7, #20]
 80025e6:	430b      	orrs	r3, r1
 80025e8:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80025ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025ee:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	4313      	orrs	r3, r2
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	4313      	orrs	r3, r2
 8002608:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	430a      	orrs	r2, r1
 8002626:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a87      	ldr	r2, [pc, #540]	; (800284c <USART_SetConfig+0x29c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d121      	bne.n	8002676 <USART_SetConfig+0xc6>
 8002632:	4b87      	ldr	r3, [pc, #540]	; (8002850 <USART_SetConfig+0x2a0>)
 8002634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b03      	cmp	r3, #3
 800263e:	d817      	bhi.n	8002670 <USART_SetConfig+0xc0>
 8002640:	a201      	add	r2, pc, #4	; (adr r2, 8002648 <USART_SetConfig+0x98>)
 8002642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002646:	bf00      	nop
 8002648:	08002659 	.word	0x08002659
 800264c:	08002665 	.word	0x08002665
 8002650:	0800265f 	.word	0x0800265f
 8002654:	0800266b 	.word	0x0800266b
 8002658:	2301      	movs	r3, #1
 800265a:	77fb      	strb	r3, [r7, #31]
 800265c:	e06b      	b.n	8002736 <USART_SetConfig+0x186>
 800265e:	2302      	movs	r3, #2
 8002660:	77fb      	strb	r3, [r7, #31]
 8002662:	e068      	b.n	8002736 <USART_SetConfig+0x186>
 8002664:	2304      	movs	r3, #4
 8002666:	77fb      	strb	r3, [r7, #31]
 8002668:	e065      	b.n	8002736 <USART_SetConfig+0x186>
 800266a:	2308      	movs	r3, #8
 800266c:	77fb      	strb	r3, [r7, #31]
 800266e:	e062      	b.n	8002736 <USART_SetConfig+0x186>
 8002670:	2310      	movs	r3, #16
 8002672:	77fb      	strb	r3, [r7, #31]
 8002674:	e05f      	b.n	8002736 <USART_SetConfig+0x186>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a76      	ldr	r2, [pc, #472]	; (8002854 <USART_SetConfig+0x2a4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d132      	bne.n	80026e6 <USART_SetConfig+0x136>
 8002680:	4b73      	ldr	r3, [pc, #460]	; (8002850 <USART_SetConfig+0x2a0>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	2b0c      	cmp	r3, #12
 800268c:	d828      	bhi.n	80026e0 <USART_SetConfig+0x130>
 800268e:	a201      	add	r2, pc, #4	; (adr r2, 8002694 <USART_SetConfig+0xe4>)
 8002690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002694:	080026c9 	.word	0x080026c9
 8002698:	080026e1 	.word	0x080026e1
 800269c:	080026e1 	.word	0x080026e1
 80026a0:	080026e1 	.word	0x080026e1
 80026a4:	080026d5 	.word	0x080026d5
 80026a8:	080026e1 	.word	0x080026e1
 80026ac:	080026e1 	.word	0x080026e1
 80026b0:	080026e1 	.word	0x080026e1
 80026b4:	080026cf 	.word	0x080026cf
 80026b8:	080026e1 	.word	0x080026e1
 80026bc:	080026e1 	.word	0x080026e1
 80026c0:	080026e1 	.word	0x080026e1
 80026c4:	080026db 	.word	0x080026db
 80026c8:	2300      	movs	r3, #0
 80026ca:	77fb      	strb	r3, [r7, #31]
 80026cc:	e033      	b.n	8002736 <USART_SetConfig+0x186>
 80026ce:	2302      	movs	r3, #2
 80026d0:	77fb      	strb	r3, [r7, #31]
 80026d2:	e030      	b.n	8002736 <USART_SetConfig+0x186>
 80026d4:	2304      	movs	r3, #4
 80026d6:	77fb      	strb	r3, [r7, #31]
 80026d8:	e02d      	b.n	8002736 <USART_SetConfig+0x186>
 80026da:	2308      	movs	r3, #8
 80026dc:	77fb      	strb	r3, [r7, #31]
 80026de:	e02a      	b.n	8002736 <USART_SetConfig+0x186>
 80026e0:	2310      	movs	r3, #16
 80026e2:	77fb      	strb	r3, [r7, #31]
 80026e4:	e027      	b.n	8002736 <USART_SetConfig+0x186>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a5b      	ldr	r2, [pc, #364]	; (8002858 <USART_SetConfig+0x2a8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d120      	bne.n	8002732 <USART_SetConfig+0x182>
 80026f0:	4b57      	ldr	r3, [pc, #348]	; (8002850 <USART_SetConfig+0x2a0>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80026fa:	2b30      	cmp	r3, #48	; 0x30
 80026fc:	d013      	beq.n	8002726 <USART_SetConfig+0x176>
 80026fe:	2b30      	cmp	r3, #48	; 0x30
 8002700:	d814      	bhi.n	800272c <USART_SetConfig+0x17c>
 8002702:	2b20      	cmp	r3, #32
 8002704:	d009      	beq.n	800271a <USART_SetConfig+0x16a>
 8002706:	2b20      	cmp	r3, #32
 8002708:	d810      	bhi.n	800272c <USART_SetConfig+0x17c>
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <USART_SetConfig+0x164>
 800270e:	2b10      	cmp	r3, #16
 8002710:	d006      	beq.n	8002720 <USART_SetConfig+0x170>
 8002712:	e00b      	b.n	800272c <USART_SetConfig+0x17c>
 8002714:	2300      	movs	r3, #0
 8002716:	77fb      	strb	r3, [r7, #31]
 8002718:	e00d      	b.n	8002736 <USART_SetConfig+0x186>
 800271a:	2302      	movs	r3, #2
 800271c:	77fb      	strb	r3, [r7, #31]
 800271e:	e00a      	b.n	8002736 <USART_SetConfig+0x186>
 8002720:	2304      	movs	r3, #4
 8002722:	77fb      	strb	r3, [r7, #31]
 8002724:	e007      	b.n	8002736 <USART_SetConfig+0x186>
 8002726:	2308      	movs	r3, #8
 8002728:	77fb      	strb	r3, [r7, #31]
 800272a:	e004      	b.n	8002736 <USART_SetConfig+0x186>
 800272c:	2310      	movs	r3, #16
 800272e:	77fb      	strb	r3, [r7, #31]
 8002730:	e001      	b.n	8002736 <USART_SetConfig+0x186>
 8002732:	2310      	movs	r3, #16
 8002734:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8002736:	7ffb      	ldrb	r3, [r7, #31]
 8002738:	2b08      	cmp	r3, #8
 800273a:	d85a      	bhi.n	80027f2 <USART_SetConfig+0x242>
 800273c:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <USART_SetConfig+0x194>)
 800273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002742:	bf00      	nop
 8002744:	08002769 	.word	0x08002769
 8002748:	08002787 	.word	0x08002787
 800274c:	080027a5 	.word	0x080027a5
 8002750:	080027f3 	.word	0x080027f3
 8002754:	080027bf 	.word	0x080027bf
 8002758:	080027f3 	.word	0x080027f3
 800275c:	080027f3 	.word	0x080027f3
 8002760:	080027f3 	.word	0x080027f3
 8002764:	080027dd 	.word	0x080027dd
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8002768:	f7ff f8ac 	bl	80018c4 <HAL_RCC_GetPCLK1Freq>
 800276c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	005a      	lsls	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	085b      	lsrs	r3, r3, #1
 8002778:	441a      	add	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002782:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8002784:	e038      	b.n	80027f8 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8002786:	f7ff f8b3 	bl	80018f0 <HAL_RCC_GetPCLK2Freq>
 800278a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	005a      	lsls	r2, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	085b      	lsrs	r3, r3, #1
 8002796:	441a      	add	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80027a2:	e029      	b.n	80027f8 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	085b      	lsrs	r3, r3, #1
 80027aa:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80027ae:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6852      	ldr	r2, [r2, #4]
 80027b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80027bc:	e01c      	b.n	80027f8 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80027be:	f7fe ffe9 	bl	8001794 <HAL_RCC_GetSysClockFreq>
 80027c2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	005a      	lsls	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	085b      	lsrs	r3, r3, #1
 80027ce:	441a      	add	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80027da:	e00d      	b.n	80027f8 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	085b      	lsrs	r3, r3, #1
 80027e2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80027f0:	e002      	b.n	80027f8 <USART_SetConfig+0x248>
    default:
      ret = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	77bb      	strb	r3, [r7, #30]
      break;
 80027f6:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2b0f      	cmp	r3, #15
 80027fc:	d916      	bls.n	800282c <USART_SetConfig+0x27c>
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002804:	d212      	bcs.n	800282c <USART_SetConfig+0x27c>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	b29b      	uxth	r3, r3
 800280a:	f023 030f 	bic.w	r3, r3, #15
 800280e:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	085b      	lsrs	r3, r3, #1
 8002814:	b29b      	uxth	r3, r3
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	b29a      	uxth	r2, r3
 800281c:	89fb      	ldrh	r3, [r7, #14]
 800281e:	4313      	orrs	r3, r2
 8002820:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	89fa      	ldrh	r2, [r7, #14]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	e001      	b.n	8002830 <USART_SetConfig+0x280>
  }
  else
  {
    ret = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 800283c:	7fbb      	ldrb	r3, [r7, #30]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3720      	adds	r7, #32
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	efff69f3 	.word	0xefff69f3
 800284c:	40013800 	.word	0x40013800
 8002850:	40021000 	.word	0x40021000
 8002854:	40004400 	.word	0x40004400
 8002858:	40004800 	.word	0x40004800

0800285c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af02      	add	r7, sp, #8
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800286a:	f7fd ffb7 	bl	80007dc <HAL_GetTick>
 800286e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b08      	cmp	r3, #8
 800287c:	d10e      	bne.n	800289c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800287e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff fe59 	bl	8002544 <USART_WaitOnFlagUntilTimeout>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e01e      	b.n	80028da <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d10e      	bne.n	80028c8 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80028aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff fe43 	bl	8002544 <USART_WaitOnFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e008      	b.n	80028da <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <__errno>:
 80028e4:	4b01      	ldr	r3, [pc, #4]	; (80028ec <__errno+0x8>)
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	2000000c 	.word	0x2000000c

080028f0 <__libc_init_array>:
 80028f0:	b570      	push	{r4, r5, r6, lr}
 80028f2:	4d0d      	ldr	r5, [pc, #52]	; (8002928 <__libc_init_array+0x38>)
 80028f4:	4c0d      	ldr	r4, [pc, #52]	; (800292c <__libc_init_array+0x3c>)
 80028f6:	1b64      	subs	r4, r4, r5
 80028f8:	10a4      	asrs	r4, r4, #2
 80028fa:	2600      	movs	r6, #0
 80028fc:	42a6      	cmp	r6, r4
 80028fe:	d109      	bne.n	8002914 <__libc_init_array+0x24>
 8002900:	4d0b      	ldr	r5, [pc, #44]	; (8002930 <__libc_init_array+0x40>)
 8002902:	4c0c      	ldr	r4, [pc, #48]	; (8002934 <__libc_init_array+0x44>)
 8002904:	f000 ffae 	bl	8003864 <_init>
 8002908:	1b64      	subs	r4, r4, r5
 800290a:	10a4      	asrs	r4, r4, #2
 800290c:	2600      	movs	r6, #0
 800290e:	42a6      	cmp	r6, r4
 8002910:	d105      	bne.n	800291e <__libc_init_array+0x2e>
 8002912:	bd70      	pop	{r4, r5, r6, pc}
 8002914:	f855 3b04 	ldr.w	r3, [r5], #4
 8002918:	4798      	blx	r3
 800291a:	3601      	adds	r6, #1
 800291c:	e7ee      	b.n	80028fc <__libc_init_array+0xc>
 800291e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002922:	4798      	blx	r3
 8002924:	3601      	adds	r6, #1
 8002926:	e7f2      	b.n	800290e <__libc_init_array+0x1e>
 8002928:	0800396c 	.word	0x0800396c
 800292c:	0800396c 	.word	0x0800396c
 8002930:	0800396c 	.word	0x0800396c
 8002934:	08003970 	.word	0x08003970

08002938 <memset>:
 8002938:	4402      	add	r2, r0
 800293a:	4603      	mov	r3, r0
 800293c:	4293      	cmp	r3, r2
 800293e:	d100      	bne.n	8002942 <memset+0xa>
 8002940:	4770      	bx	lr
 8002942:	f803 1b01 	strb.w	r1, [r3], #1
 8002946:	e7f9      	b.n	800293c <memset+0x4>

08002948 <iprintf>:
 8002948:	b40f      	push	{r0, r1, r2, r3}
 800294a:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <iprintf+0x2c>)
 800294c:	b513      	push	{r0, r1, r4, lr}
 800294e:	681c      	ldr	r4, [r3, #0]
 8002950:	b124      	cbz	r4, 800295c <iprintf+0x14>
 8002952:	69a3      	ldr	r3, [r4, #24]
 8002954:	b913      	cbnz	r3, 800295c <iprintf+0x14>
 8002956:	4620      	mov	r0, r4
 8002958:	f000 f866 	bl	8002a28 <__sinit>
 800295c:	ab05      	add	r3, sp, #20
 800295e:	9a04      	ldr	r2, [sp, #16]
 8002960:	68a1      	ldr	r1, [r4, #8]
 8002962:	9301      	str	r3, [sp, #4]
 8002964:	4620      	mov	r0, r4
 8002966:	f000 f9bd 	bl	8002ce4 <_vfiprintf_r>
 800296a:	b002      	add	sp, #8
 800296c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002970:	b004      	add	sp, #16
 8002972:	4770      	bx	lr
 8002974:	2000000c 	.word	0x2000000c

08002978 <std>:
 8002978:	2300      	movs	r3, #0
 800297a:	b510      	push	{r4, lr}
 800297c:	4604      	mov	r4, r0
 800297e:	e9c0 3300 	strd	r3, r3, [r0]
 8002982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002986:	6083      	str	r3, [r0, #8]
 8002988:	8181      	strh	r1, [r0, #12]
 800298a:	6643      	str	r3, [r0, #100]	; 0x64
 800298c:	81c2      	strh	r2, [r0, #14]
 800298e:	6183      	str	r3, [r0, #24]
 8002990:	4619      	mov	r1, r3
 8002992:	2208      	movs	r2, #8
 8002994:	305c      	adds	r0, #92	; 0x5c
 8002996:	f7ff ffcf 	bl	8002938 <memset>
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <std+0x38>)
 800299c:	6263      	str	r3, [r4, #36]	; 0x24
 800299e:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <std+0x3c>)
 80029a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <std+0x40>)
 80029a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80029a6:	4b05      	ldr	r3, [pc, #20]	; (80029bc <std+0x44>)
 80029a8:	6224      	str	r4, [r4, #32]
 80029aa:	6323      	str	r3, [r4, #48]	; 0x30
 80029ac:	bd10      	pop	{r4, pc}
 80029ae:	bf00      	nop
 80029b0:	0800328d 	.word	0x0800328d
 80029b4:	080032af 	.word	0x080032af
 80029b8:	080032e7 	.word	0x080032e7
 80029bc:	0800330b 	.word	0x0800330b

080029c0 <_cleanup_r>:
 80029c0:	4901      	ldr	r1, [pc, #4]	; (80029c8 <_cleanup_r+0x8>)
 80029c2:	f000 b8af 	b.w	8002b24 <_fwalk_reent>
 80029c6:	bf00      	nop
 80029c8:	080035e5 	.word	0x080035e5

080029cc <__sfmoreglue>:
 80029cc:	b570      	push	{r4, r5, r6, lr}
 80029ce:	2268      	movs	r2, #104	; 0x68
 80029d0:	1e4d      	subs	r5, r1, #1
 80029d2:	4355      	muls	r5, r2
 80029d4:	460e      	mov	r6, r1
 80029d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80029da:	f000 f8e5 	bl	8002ba8 <_malloc_r>
 80029de:	4604      	mov	r4, r0
 80029e0:	b140      	cbz	r0, 80029f4 <__sfmoreglue+0x28>
 80029e2:	2100      	movs	r1, #0
 80029e4:	e9c0 1600 	strd	r1, r6, [r0]
 80029e8:	300c      	adds	r0, #12
 80029ea:	60a0      	str	r0, [r4, #8]
 80029ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80029f0:	f7ff ffa2 	bl	8002938 <memset>
 80029f4:	4620      	mov	r0, r4
 80029f6:	bd70      	pop	{r4, r5, r6, pc}

080029f8 <__sfp_lock_acquire>:
 80029f8:	4801      	ldr	r0, [pc, #4]	; (8002a00 <__sfp_lock_acquire+0x8>)
 80029fa:	f000 b8b3 	b.w	8002b64 <__retarget_lock_acquire_recursive>
 80029fe:	bf00      	nop
 8002a00:	200000e5 	.word	0x200000e5

08002a04 <__sfp_lock_release>:
 8002a04:	4801      	ldr	r0, [pc, #4]	; (8002a0c <__sfp_lock_release+0x8>)
 8002a06:	f000 b8ae 	b.w	8002b66 <__retarget_lock_release_recursive>
 8002a0a:	bf00      	nop
 8002a0c:	200000e5 	.word	0x200000e5

08002a10 <__sinit_lock_acquire>:
 8002a10:	4801      	ldr	r0, [pc, #4]	; (8002a18 <__sinit_lock_acquire+0x8>)
 8002a12:	f000 b8a7 	b.w	8002b64 <__retarget_lock_acquire_recursive>
 8002a16:	bf00      	nop
 8002a18:	200000e6 	.word	0x200000e6

08002a1c <__sinit_lock_release>:
 8002a1c:	4801      	ldr	r0, [pc, #4]	; (8002a24 <__sinit_lock_release+0x8>)
 8002a1e:	f000 b8a2 	b.w	8002b66 <__retarget_lock_release_recursive>
 8002a22:	bf00      	nop
 8002a24:	200000e6 	.word	0x200000e6

08002a28 <__sinit>:
 8002a28:	b510      	push	{r4, lr}
 8002a2a:	4604      	mov	r4, r0
 8002a2c:	f7ff fff0 	bl	8002a10 <__sinit_lock_acquire>
 8002a30:	69a3      	ldr	r3, [r4, #24]
 8002a32:	b11b      	cbz	r3, 8002a3c <__sinit+0x14>
 8002a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a38:	f7ff bff0 	b.w	8002a1c <__sinit_lock_release>
 8002a3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002a40:	6523      	str	r3, [r4, #80]	; 0x50
 8002a42:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <__sinit+0x68>)
 8002a44:	4a13      	ldr	r2, [pc, #76]	; (8002a94 <__sinit+0x6c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	62a2      	str	r2, [r4, #40]	; 0x28
 8002a4a:	42a3      	cmp	r3, r4
 8002a4c:	bf04      	itt	eq
 8002a4e:	2301      	moveq	r3, #1
 8002a50:	61a3      	streq	r3, [r4, #24]
 8002a52:	4620      	mov	r0, r4
 8002a54:	f000 f820 	bl	8002a98 <__sfp>
 8002a58:	6060      	str	r0, [r4, #4]
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	f000 f81c 	bl	8002a98 <__sfp>
 8002a60:	60a0      	str	r0, [r4, #8]
 8002a62:	4620      	mov	r0, r4
 8002a64:	f000 f818 	bl	8002a98 <__sfp>
 8002a68:	2200      	movs	r2, #0
 8002a6a:	60e0      	str	r0, [r4, #12]
 8002a6c:	2104      	movs	r1, #4
 8002a6e:	6860      	ldr	r0, [r4, #4]
 8002a70:	f7ff ff82 	bl	8002978 <std>
 8002a74:	68a0      	ldr	r0, [r4, #8]
 8002a76:	2201      	movs	r2, #1
 8002a78:	2109      	movs	r1, #9
 8002a7a:	f7ff ff7d 	bl	8002978 <std>
 8002a7e:	68e0      	ldr	r0, [r4, #12]
 8002a80:	2202      	movs	r2, #2
 8002a82:	2112      	movs	r1, #18
 8002a84:	f7ff ff78 	bl	8002978 <std>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	61a3      	str	r3, [r4, #24]
 8002a8c:	e7d2      	b.n	8002a34 <__sinit+0xc>
 8002a8e:	bf00      	nop
 8002a90:	080038d4 	.word	0x080038d4
 8002a94:	080029c1 	.word	0x080029c1

08002a98 <__sfp>:
 8002a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9a:	4607      	mov	r7, r0
 8002a9c:	f7ff ffac 	bl	80029f8 <__sfp_lock_acquire>
 8002aa0:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <__sfp+0x84>)
 8002aa2:	681e      	ldr	r6, [r3, #0]
 8002aa4:	69b3      	ldr	r3, [r6, #24]
 8002aa6:	b913      	cbnz	r3, 8002aae <__sfp+0x16>
 8002aa8:	4630      	mov	r0, r6
 8002aaa:	f7ff ffbd 	bl	8002a28 <__sinit>
 8002aae:	3648      	adds	r6, #72	; 0x48
 8002ab0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	d503      	bpl.n	8002ac0 <__sfp+0x28>
 8002ab8:	6833      	ldr	r3, [r6, #0]
 8002aba:	b30b      	cbz	r3, 8002b00 <__sfp+0x68>
 8002abc:	6836      	ldr	r6, [r6, #0]
 8002abe:	e7f7      	b.n	8002ab0 <__sfp+0x18>
 8002ac0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002ac4:	b9d5      	cbnz	r5, 8002afc <__sfp+0x64>
 8002ac6:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <__sfp+0x88>)
 8002ac8:	60e3      	str	r3, [r4, #12]
 8002aca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ace:	6665      	str	r5, [r4, #100]	; 0x64
 8002ad0:	f000 f847 	bl	8002b62 <__retarget_lock_init_recursive>
 8002ad4:	f7ff ff96 	bl	8002a04 <__sfp_lock_release>
 8002ad8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002adc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002ae0:	6025      	str	r5, [r4, #0]
 8002ae2:	61a5      	str	r5, [r4, #24]
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	4629      	mov	r1, r5
 8002ae8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002aec:	f7ff ff24 	bl	8002938 <memset>
 8002af0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002af4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002af8:	4620      	mov	r0, r4
 8002afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002afc:	3468      	adds	r4, #104	; 0x68
 8002afe:	e7d9      	b.n	8002ab4 <__sfp+0x1c>
 8002b00:	2104      	movs	r1, #4
 8002b02:	4638      	mov	r0, r7
 8002b04:	f7ff ff62 	bl	80029cc <__sfmoreglue>
 8002b08:	4604      	mov	r4, r0
 8002b0a:	6030      	str	r0, [r6, #0]
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	d1d5      	bne.n	8002abc <__sfp+0x24>
 8002b10:	f7ff ff78 	bl	8002a04 <__sfp_lock_release>
 8002b14:	230c      	movs	r3, #12
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	e7ee      	b.n	8002af8 <__sfp+0x60>
 8002b1a:	bf00      	nop
 8002b1c:	080038d4 	.word	0x080038d4
 8002b20:	ffff0001 	.word	0xffff0001

08002b24 <_fwalk_reent>:
 8002b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b28:	4606      	mov	r6, r0
 8002b2a:	4688      	mov	r8, r1
 8002b2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002b30:	2700      	movs	r7, #0
 8002b32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b36:	f1b9 0901 	subs.w	r9, r9, #1
 8002b3a:	d505      	bpl.n	8002b48 <_fwalk_reent+0x24>
 8002b3c:	6824      	ldr	r4, [r4, #0]
 8002b3e:	2c00      	cmp	r4, #0
 8002b40:	d1f7      	bne.n	8002b32 <_fwalk_reent+0xe>
 8002b42:	4638      	mov	r0, r7
 8002b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b48:	89ab      	ldrh	r3, [r5, #12]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d907      	bls.n	8002b5e <_fwalk_reent+0x3a>
 8002b4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b52:	3301      	adds	r3, #1
 8002b54:	d003      	beq.n	8002b5e <_fwalk_reent+0x3a>
 8002b56:	4629      	mov	r1, r5
 8002b58:	4630      	mov	r0, r6
 8002b5a:	47c0      	blx	r8
 8002b5c:	4307      	orrs	r7, r0
 8002b5e:	3568      	adds	r5, #104	; 0x68
 8002b60:	e7e9      	b.n	8002b36 <_fwalk_reent+0x12>

08002b62 <__retarget_lock_init_recursive>:
 8002b62:	4770      	bx	lr

08002b64 <__retarget_lock_acquire_recursive>:
 8002b64:	4770      	bx	lr

08002b66 <__retarget_lock_release_recursive>:
 8002b66:	4770      	bx	lr

08002b68 <sbrk_aligned>:
 8002b68:	b570      	push	{r4, r5, r6, lr}
 8002b6a:	4e0e      	ldr	r6, [pc, #56]	; (8002ba4 <sbrk_aligned+0x3c>)
 8002b6c:	460c      	mov	r4, r1
 8002b6e:	6831      	ldr	r1, [r6, #0]
 8002b70:	4605      	mov	r5, r0
 8002b72:	b911      	cbnz	r1, 8002b7a <sbrk_aligned+0x12>
 8002b74:	f000 fb7a 	bl	800326c <_sbrk_r>
 8002b78:	6030      	str	r0, [r6, #0]
 8002b7a:	4621      	mov	r1, r4
 8002b7c:	4628      	mov	r0, r5
 8002b7e:	f000 fb75 	bl	800326c <_sbrk_r>
 8002b82:	1c43      	adds	r3, r0, #1
 8002b84:	d00a      	beq.n	8002b9c <sbrk_aligned+0x34>
 8002b86:	1cc4      	adds	r4, r0, #3
 8002b88:	f024 0403 	bic.w	r4, r4, #3
 8002b8c:	42a0      	cmp	r0, r4
 8002b8e:	d007      	beq.n	8002ba0 <sbrk_aligned+0x38>
 8002b90:	1a21      	subs	r1, r4, r0
 8002b92:	4628      	mov	r0, r5
 8002b94:	f000 fb6a 	bl	800326c <_sbrk_r>
 8002b98:	3001      	adds	r0, #1
 8002b9a:	d101      	bne.n	8002ba0 <sbrk_aligned+0x38>
 8002b9c:	f04f 34ff 	mov.w	r4, #4294967295
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	bd70      	pop	{r4, r5, r6, pc}
 8002ba4:	200000ec 	.word	0x200000ec

08002ba8 <_malloc_r>:
 8002ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bac:	1ccd      	adds	r5, r1, #3
 8002bae:	f025 0503 	bic.w	r5, r5, #3
 8002bb2:	3508      	adds	r5, #8
 8002bb4:	2d0c      	cmp	r5, #12
 8002bb6:	bf38      	it	cc
 8002bb8:	250c      	movcc	r5, #12
 8002bba:	2d00      	cmp	r5, #0
 8002bbc:	4607      	mov	r7, r0
 8002bbe:	db01      	blt.n	8002bc4 <_malloc_r+0x1c>
 8002bc0:	42a9      	cmp	r1, r5
 8002bc2:	d905      	bls.n	8002bd0 <_malloc_r+0x28>
 8002bc4:	230c      	movs	r3, #12
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	2600      	movs	r6, #0
 8002bca:	4630      	mov	r0, r6
 8002bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bd0:	4e2e      	ldr	r6, [pc, #184]	; (8002c8c <_malloc_r+0xe4>)
 8002bd2:	f000 fdbb 	bl	800374c <__malloc_lock>
 8002bd6:	6833      	ldr	r3, [r6, #0]
 8002bd8:	461c      	mov	r4, r3
 8002bda:	bb34      	cbnz	r4, 8002c2a <_malloc_r+0x82>
 8002bdc:	4629      	mov	r1, r5
 8002bde:	4638      	mov	r0, r7
 8002be0:	f7ff ffc2 	bl	8002b68 <sbrk_aligned>
 8002be4:	1c43      	adds	r3, r0, #1
 8002be6:	4604      	mov	r4, r0
 8002be8:	d14d      	bne.n	8002c86 <_malloc_r+0xde>
 8002bea:	6834      	ldr	r4, [r6, #0]
 8002bec:	4626      	mov	r6, r4
 8002bee:	2e00      	cmp	r6, #0
 8002bf0:	d140      	bne.n	8002c74 <_malloc_r+0xcc>
 8002bf2:	6823      	ldr	r3, [r4, #0]
 8002bf4:	4631      	mov	r1, r6
 8002bf6:	4638      	mov	r0, r7
 8002bf8:	eb04 0803 	add.w	r8, r4, r3
 8002bfc:	f000 fb36 	bl	800326c <_sbrk_r>
 8002c00:	4580      	cmp	r8, r0
 8002c02:	d13a      	bne.n	8002c7a <_malloc_r+0xd2>
 8002c04:	6821      	ldr	r1, [r4, #0]
 8002c06:	3503      	adds	r5, #3
 8002c08:	1a6d      	subs	r5, r5, r1
 8002c0a:	f025 0503 	bic.w	r5, r5, #3
 8002c0e:	3508      	adds	r5, #8
 8002c10:	2d0c      	cmp	r5, #12
 8002c12:	bf38      	it	cc
 8002c14:	250c      	movcc	r5, #12
 8002c16:	4629      	mov	r1, r5
 8002c18:	4638      	mov	r0, r7
 8002c1a:	f7ff ffa5 	bl	8002b68 <sbrk_aligned>
 8002c1e:	3001      	adds	r0, #1
 8002c20:	d02b      	beq.n	8002c7a <_malloc_r+0xd2>
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	442b      	add	r3, r5
 8002c26:	6023      	str	r3, [r4, #0]
 8002c28:	e00e      	b.n	8002c48 <_malloc_r+0xa0>
 8002c2a:	6822      	ldr	r2, [r4, #0]
 8002c2c:	1b52      	subs	r2, r2, r5
 8002c2e:	d41e      	bmi.n	8002c6e <_malloc_r+0xc6>
 8002c30:	2a0b      	cmp	r2, #11
 8002c32:	d916      	bls.n	8002c62 <_malloc_r+0xba>
 8002c34:	1961      	adds	r1, r4, r5
 8002c36:	42a3      	cmp	r3, r4
 8002c38:	6025      	str	r5, [r4, #0]
 8002c3a:	bf18      	it	ne
 8002c3c:	6059      	strne	r1, [r3, #4]
 8002c3e:	6863      	ldr	r3, [r4, #4]
 8002c40:	bf08      	it	eq
 8002c42:	6031      	streq	r1, [r6, #0]
 8002c44:	5162      	str	r2, [r4, r5]
 8002c46:	604b      	str	r3, [r1, #4]
 8002c48:	4638      	mov	r0, r7
 8002c4a:	f104 060b 	add.w	r6, r4, #11
 8002c4e:	f000 fd83 	bl	8003758 <__malloc_unlock>
 8002c52:	f026 0607 	bic.w	r6, r6, #7
 8002c56:	1d23      	adds	r3, r4, #4
 8002c58:	1af2      	subs	r2, r6, r3
 8002c5a:	d0b6      	beq.n	8002bca <_malloc_r+0x22>
 8002c5c:	1b9b      	subs	r3, r3, r6
 8002c5e:	50a3      	str	r3, [r4, r2]
 8002c60:	e7b3      	b.n	8002bca <_malloc_r+0x22>
 8002c62:	6862      	ldr	r2, [r4, #4]
 8002c64:	42a3      	cmp	r3, r4
 8002c66:	bf0c      	ite	eq
 8002c68:	6032      	streq	r2, [r6, #0]
 8002c6a:	605a      	strne	r2, [r3, #4]
 8002c6c:	e7ec      	b.n	8002c48 <_malloc_r+0xa0>
 8002c6e:	4623      	mov	r3, r4
 8002c70:	6864      	ldr	r4, [r4, #4]
 8002c72:	e7b2      	b.n	8002bda <_malloc_r+0x32>
 8002c74:	4634      	mov	r4, r6
 8002c76:	6876      	ldr	r6, [r6, #4]
 8002c78:	e7b9      	b.n	8002bee <_malloc_r+0x46>
 8002c7a:	230c      	movs	r3, #12
 8002c7c:	603b      	str	r3, [r7, #0]
 8002c7e:	4638      	mov	r0, r7
 8002c80:	f000 fd6a 	bl	8003758 <__malloc_unlock>
 8002c84:	e7a1      	b.n	8002bca <_malloc_r+0x22>
 8002c86:	6025      	str	r5, [r4, #0]
 8002c88:	e7de      	b.n	8002c48 <_malloc_r+0xa0>
 8002c8a:	bf00      	nop
 8002c8c:	200000e8 	.word	0x200000e8

08002c90 <__sfputc_r>:
 8002c90:	6893      	ldr	r3, [r2, #8]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	b410      	push	{r4}
 8002c98:	6093      	str	r3, [r2, #8]
 8002c9a:	da08      	bge.n	8002cae <__sfputc_r+0x1e>
 8002c9c:	6994      	ldr	r4, [r2, #24]
 8002c9e:	42a3      	cmp	r3, r4
 8002ca0:	db01      	blt.n	8002ca6 <__sfputc_r+0x16>
 8002ca2:	290a      	cmp	r1, #10
 8002ca4:	d103      	bne.n	8002cae <__sfputc_r+0x1e>
 8002ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002caa:	f000 bb33 	b.w	8003314 <__swbuf_r>
 8002cae:	6813      	ldr	r3, [r2, #0]
 8002cb0:	1c58      	adds	r0, r3, #1
 8002cb2:	6010      	str	r0, [r2, #0]
 8002cb4:	7019      	strb	r1, [r3, #0]
 8002cb6:	4608      	mov	r0, r1
 8002cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <__sfputs_r>:
 8002cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc0:	4606      	mov	r6, r0
 8002cc2:	460f      	mov	r7, r1
 8002cc4:	4614      	mov	r4, r2
 8002cc6:	18d5      	adds	r5, r2, r3
 8002cc8:	42ac      	cmp	r4, r5
 8002cca:	d101      	bne.n	8002cd0 <__sfputs_r+0x12>
 8002ccc:	2000      	movs	r0, #0
 8002cce:	e007      	b.n	8002ce0 <__sfputs_r+0x22>
 8002cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cd4:	463a      	mov	r2, r7
 8002cd6:	4630      	mov	r0, r6
 8002cd8:	f7ff ffda 	bl	8002c90 <__sfputc_r>
 8002cdc:	1c43      	adds	r3, r0, #1
 8002cde:	d1f3      	bne.n	8002cc8 <__sfputs_r+0xa>
 8002ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ce4 <_vfiprintf_r>:
 8002ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ce8:	460d      	mov	r5, r1
 8002cea:	b09d      	sub	sp, #116	; 0x74
 8002cec:	4614      	mov	r4, r2
 8002cee:	4698      	mov	r8, r3
 8002cf0:	4606      	mov	r6, r0
 8002cf2:	b118      	cbz	r0, 8002cfc <_vfiprintf_r+0x18>
 8002cf4:	6983      	ldr	r3, [r0, #24]
 8002cf6:	b90b      	cbnz	r3, 8002cfc <_vfiprintf_r+0x18>
 8002cf8:	f7ff fe96 	bl	8002a28 <__sinit>
 8002cfc:	4b89      	ldr	r3, [pc, #548]	; (8002f24 <_vfiprintf_r+0x240>)
 8002cfe:	429d      	cmp	r5, r3
 8002d00:	d11b      	bne.n	8002d3a <_vfiprintf_r+0x56>
 8002d02:	6875      	ldr	r5, [r6, #4]
 8002d04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d06:	07d9      	lsls	r1, r3, #31
 8002d08:	d405      	bmi.n	8002d16 <_vfiprintf_r+0x32>
 8002d0a:	89ab      	ldrh	r3, [r5, #12]
 8002d0c:	059a      	lsls	r2, r3, #22
 8002d0e:	d402      	bmi.n	8002d16 <_vfiprintf_r+0x32>
 8002d10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d12:	f7ff ff27 	bl	8002b64 <__retarget_lock_acquire_recursive>
 8002d16:	89ab      	ldrh	r3, [r5, #12]
 8002d18:	071b      	lsls	r3, r3, #28
 8002d1a:	d501      	bpl.n	8002d20 <_vfiprintf_r+0x3c>
 8002d1c:	692b      	ldr	r3, [r5, #16]
 8002d1e:	b9eb      	cbnz	r3, 8002d5c <_vfiprintf_r+0x78>
 8002d20:	4629      	mov	r1, r5
 8002d22:	4630      	mov	r0, r6
 8002d24:	f000 fb5a 	bl	80033dc <__swsetup_r>
 8002d28:	b1c0      	cbz	r0, 8002d5c <_vfiprintf_r+0x78>
 8002d2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d2c:	07dc      	lsls	r4, r3, #31
 8002d2e:	d50e      	bpl.n	8002d4e <_vfiprintf_r+0x6a>
 8002d30:	f04f 30ff 	mov.w	r0, #4294967295
 8002d34:	b01d      	add	sp, #116	; 0x74
 8002d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d3a:	4b7b      	ldr	r3, [pc, #492]	; (8002f28 <_vfiprintf_r+0x244>)
 8002d3c:	429d      	cmp	r5, r3
 8002d3e:	d101      	bne.n	8002d44 <_vfiprintf_r+0x60>
 8002d40:	68b5      	ldr	r5, [r6, #8]
 8002d42:	e7df      	b.n	8002d04 <_vfiprintf_r+0x20>
 8002d44:	4b79      	ldr	r3, [pc, #484]	; (8002f2c <_vfiprintf_r+0x248>)
 8002d46:	429d      	cmp	r5, r3
 8002d48:	bf08      	it	eq
 8002d4a:	68f5      	ldreq	r5, [r6, #12]
 8002d4c:	e7da      	b.n	8002d04 <_vfiprintf_r+0x20>
 8002d4e:	89ab      	ldrh	r3, [r5, #12]
 8002d50:	0598      	lsls	r0, r3, #22
 8002d52:	d4ed      	bmi.n	8002d30 <_vfiprintf_r+0x4c>
 8002d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d56:	f7ff ff06 	bl	8002b66 <__retarget_lock_release_recursive>
 8002d5a:	e7e9      	b.n	8002d30 <_vfiprintf_r+0x4c>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8002d60:	2320      	movs	r3, #32
 8002d62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d66:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d6a:	2330      	movs	r3, #48	; 0x30
 8002d6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002f30 <_vfiprintf_r+0x24c>
 8002d70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d74:	f04f 0901 	mov.w	r9, #1
 8002d78:	4623      	mov	r3, r4
 8002d7a:	469a      	mov	sl, r3
 8002d7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d80:	b10a      	cbz	r2, 8002d86 <_vfiprintf_r+0xa2>
 8002d82:	2a25      	cmp	r2, #37	; 0x25
 8002d84:	d1f9      	bne.n	8002d7a <_vfiprintf_r+0x96>
 8002d86:	ebba 0b04 	subs.w	fp, sl, r4
 8002d8a:	d00b      	beq.n	8002da4 <_vfiprintf_r+0xc0>
 8002d8c:	465b      	mov	r3, fp
 8002d8e:	4622      	mov	r2, r4
 8002d90:	4629      	mov	r1, r5
 8002d92:	4630      	mov	r0, r6
 8002d94:	f7ff ff93 	bl	8002cbe <__sfputs_r>
 8002d98:	3001      	adds	r0, #1
 8002d9a:	f000 80aa 	beq.w	8002ef2 <_vfiprintf_r+0x20e>
 8002d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002da0:	445a      	add	r2, fp
 8002da2:	9209      	str	r2, [sp, #36]	; 0x24
 8002da4:	f89a 3000 	ldrb.w	r3, [sl]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 80a2 	beq.w	8002ef2 <_vfiprintf_r+0x20e>
 8002dae:	2300      	movs	r3, #0
 8002db0:	f04f 32ff 	mov.w	r2, #4294967295
 8002db4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002db8:	f10a 0a01 	add.w	sl, sl, #1
 8002dbc:	9304      	str	r3, [sp, #16]
 8002dbe:	9307      	str	r3, [sp, #28]
 8002dc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002dc4:	931a      	str	r3, [sp, #104]	; 0x68
 8002dc6:	4654      	mov	r4, sl
 8002dc8:	2205      	movs	r2, #5
 8002dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dce:	4858      	ldr	r0, [pc, #352]	; (8002f30 <_vfiprintf_r+0x24c>)
 8002dd0:	f7fd f9fe 	bl	80001d0 <memchr>
 8002dd4:	9a04      	ldr	r2, [sp, #16]
 8002dd6:	b9d8      	cbnz	r0, 8002e10 <_vfiprintf_r+0x12c>
 8002dd8:	06d1      	lsls	r1, r2, #27
 8002dda:	bf44      	itt	mi
 8002ddc:	2320      	movmi	r3, #32
 8002dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002de2:	0713      	lsls	r3, r2, #28
 8002de4:	bf44      	itt	mi
 8002de6:	232b      	movmi	r3, #43	; 0x2b
 8002de8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dec:	f89a 3000 	ldrb.w	r3, [sl]
 8002df0:	2b2a      	cmp	r3, #42	; 0x2a
 8002df2:	d015      	beq.n	8002e20 <_vfiprintf_r+0x13c>
 8002df4:	9a07      	ldr	r2, [sp, #28]
 8002df6:	4654      	mov	r4, sl
 8002df8:	2000      	movs	r0, #0
 8002dfa:	f04f 0c0a 	mov.w	ip, #10
 8002dfe:	4621      	mov	r1, r4
 8002e00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e04:	3b30      	subs	r3, #48	; 0x30
 8002e06:	2b09      	cmp	r3, #9
 8002e08:	d94e      	bls.n	8002ea8 <_vfiprintf_r+0x1c4>
 8002e0a:	b1b0      	cbz	r0, 8002e3a <_vfiprintf_r+0x156>
 8002e0c:	9207      	str	r2, [sp, #28]
 8002e0e:	e014      	b.n	8002e3a <_vfiprintf_r+0x156>
 8002e10:	eba0 0308 	sub.w	r3, r0, r8
 8002e14:	fa09 f303 	lsl.w	r3, r9, r3
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	9304      	str	r3, [sp, #16]
 8002e1c:	46a2      	mov	sl, r4
 8002e1e:	e7d2      	b.n	8002dc6 <_vfiprintf_r+0xe2>
 8002e20:	9b03      	ldr	r3, [sp, #12]
 8002e22:	1d19      	adds	r1, r3, #4
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	9103      	str	r1, [sp, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	bfbb      	ittet	lt
 8002e2c:	425b      	neglt	r3, r3
 8002e2e:	f042 0202 	orrlt.w	r2, r2, #2
 8002e32:	9307      	strge	r3, [sp, #28]
 8002e34:	9307      	strlt	r3, [sp, #28]
 8002e36:	bfb8      	it	lt
 8002e38:	9204      	strlt	r2, [sp, #16]
 8002e3a:	7823      	ldrb	r3, [r4, #0]
 8002e3c:	2b2e      	cmp	r3, #46	; 0x2e
 8002e3e:	d10c      	bne.n	8002e5a <_vfiprintf_r+0x176>
 8002e40:	7863      	ldrb	r3, [r4, #1]
 8002e42:	2b2a      	cmp	r3, #42	; 0x2a
 8002e44:	d135      	bne.n	8002eb2 <_vfiprintf_r+0x1ce>
 8002e46:	9b03      	ldr	r3, [sp, #12]
 8002e48:	1d1a      	adds	r2, r3, #4
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	9203      	str	r2, [sp, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	bfb8      	it	lt
 8002e52:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e56:	3402      	adds	r4, #2
 8002e58:	9305      	str	r3, [sp, #20]
 8002e5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002f40 <_vfiprintf_r+0x25c>
 8002e5e:	7821      	ldrb	r1, [r4, #0]
 8002e60:	2203      	movs	r2, #3
 8002e62:	4650      	mov	r0, sl
 8002e64:	f7fd f9b4 	bl	80001d0 <memchr>
 8002e68:	b140      	cbz	r0, 8002e7c <_vfiprintf_r+0x198>
 8002e6a:	2340      	movs	r3, #64	; 0x40
 8002e6c:	eba0 000a 	sub.w	r0, r0, sl
 8002e70:	fa03 f000 	lsl.w	r0, r3, r0
 8002e74:	9b04      	ldr	r3, [sp, #16]
 8002e76:	4303      	orrs	r3, r0
 8002e78:	3401      	adds	r4, #1
 8002e7a:	9304      	str	r3, [sp, #16]
 8002e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e80:	482c      	ldr	r0, [pc, #176]	; (8002f34 <_vfiprintf_r+0x250>)
 8002e82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e86:	2206      	movs	r2, #6
 8002e88:	f7fd f9a2 	bl	80001d0 <memchr>
 8002e8c:	2800      	cmp	r0, #0
 8002e8e:	d03f      	beq.n	8002f10 <_vfiprintf_r+0x22c>
 8002e90:	4b29      	ldr	r3, [pc, #164]	; (8002f38 <_vfiprintf_r+0x254>)
 8002e92:	bb1b      	cbnz	r3, 8002edc <_vfiprintf_r+0x1f8>
 8002e94:	9b03      	ldr	r3, [sp, #12]
 8002e96:	3307      	adds	r3, #7
 8002e98:	f023 0307 	bic.w	r3, r3, #7
 8002e9c:	3308      	adds	r3, #8
 8002e9e:	9303      	str	r3, [sp, #12]
 8002ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ea2:	443b      	add	r3, r7
 8002ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ea6:	e767      	b.n	8002d78 <_vfiprintf_r+0x94>
 8002ea8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002eac:	460c      	mov	r4, r1
 8002eae:	2001      	movs	r0, #1
 8002eb0:	e7a5      	b.n	8002dfe <_vfiprintf_r+0x11a>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	3401      	adds	r4, #1
 8002eb6:	9305      	str	r3, [sp, #20]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f04f 0c0a 	mov.w	ip, #10
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ec4:	3a30      	subs	r2, #48	; 0x30
 8002ec6:	2a09      	cmp	r2, #9
 8002ec8:	d903      	bls.n	8002ed2 <_vfiprintf_r+0x1ee>
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0c5      	beq.n	8002e5a <_vfiprintf_r+0x176>
 8002ece:	9105      	str	r1, [sp, #20]
 8002ed0:	e7c3      	b.n	8002e5a <_vfiprintf_r+0x176>
 8002ed2:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e7f0      	b.n	8002ebe <_vfiprintf_r+0x1da>
 8002edc:	ab03      	add	r3, sp, #12
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	462a      	mov	r2, r5
 8002ee2:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <_vfiprintf_r+0x258>)
 8002ee4:	a904      	add	r1, sp, #16
 8002ee6:	4630      	mov	r0, r6
 8002ee8:	f3af 8000 	nop.w
 8002eec:	4607      	mov	r7, r0
 8002eee:	1c78      	adds	r0, r7, #1
 8002ef0:	d1d6      	bne.n	8002ea0 <_vfiprintf_r+0x1bc>
 8002ef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ef4:	07d9      	lsls	r1, r3, #31
 8002ef6:	d405      	bmi.n	8002f04 <_vfiprintf_r+0x220>
 8002ef8:	89ab      	ldrh	r3, [r5, #12]
 8002efa:	059a      	lsls	r2, r3, #22
 8002efc:	d402      	bmi.n	8002f04 <_vfiprintf_r+0x220>
 8002efe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f00:	f7ff fe31 	bl	8002b66 <__retarget_lock_release_recursive>
 8002f04:	89ab      	ldrh	r3, [r5, #12]
 8002f06:	065b      	lsls	r3, r3, #25
 8002f08:	f53f af12 	bmi.w	8002d30 <_vfiprintf_r+0x4c>
 8002f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f0e:	e711      	b.n	8002d34 <_vfiprintf_r+0x50>
 8002f10:	ab03      	add	r3, sp, #12
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	462a      	mov	r2, r5
 8002f16:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <_vfiprintf_r+0x258>)
 8002f18:	a904      	add	r1, sp, #16
 8002f1a:	4630      	mov	r0, r6
 8002f1c:	f000 f880 	bl	8003020 <_printf_i>
 8002f20:	e7e4      	b.n	8002eec <_vfiprintf_r+0x208>
 8002f22:	bf00      	nop
 8002f24:	080038f8 	.word	0x080038f8
 8002f28:	08003918 	.word	0x08003918
 8002f2c:	080038d8 	.word	0x080038d8
 8002f30:	08003938 	.word	0x08003938
 8002f34:	08003942 	.word	0x08003942
 8002f38:	00000000 	.word	0x00000000
 8002f3c:	08002cbf 	.word	0x08002cbf
 8002f40:	0800393e 	.word	0x0800393e

08002f44 <_printf_common>:
 8002f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f48:	4616      	mov	r6, r2
 8002f4a:	4699      	mov	r9, r3
 8002f4c:	688a      	ldr	r2, [r1, #8]
 8002f4e:	690b      	ldr	r3, [r1, #16]
 8002f50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f54:	4293      	cmp	r3, r2
 8002f56:	bfb8      	it	lt
 8002f58:	4613      	movlt	r3, r2
 8002f5a:	6033      	str	r3, [r6, #0]
 8002f5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f60:	4607      	mov	r7, r0
 8002f62:	460c      	mov	r4, r1
 8002f64:	b10a      	cbz	r2, 8002f6a <_printf_common+0x26>
 8002f66:	3301      	adds	r3, #1
 8002f68:	6033      	str	r3, [r6, #0]
 8002f6a:	6823      	ldr	r3, [r4, #0]
 8002f6c:	0699      	lsls	r1, r3, #26
 8002f6e:	bf42      	ittt	mi
 8002f70:	6833      	ldrmi	r3, [r6, #0]
 8002f72:	3302      	addmi	r3, #2
 8002f74:	6033      	strmi	r3, [r6, #0]
 8002f76:	6825      	ldr	r5, [r4, #0]
 8002f78:	f015 0506 	ands.w	r5, r5, #6
 8002f7c:	d106      	bne.n	8002f8c <_printf_common+0x48>
 8002f7e:	f104 0a19 	add.w	sl, r4, #25
 8002f82:	68e3      	ldr	r3, [r4, #12]
 8002f84:	6832      	ldr	r2, [r6, #0]
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	42ab      	cmp	r3, r5
 8002f8a:	dc26      	bgt.n	8002fda <_printf_common+0x96>
 8002f8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f90:	1e13      	subs	r3, r2, #0
 8002f92:	6822      	ldr	r2, [r4, #0]
 8002f94:	bf18      	it	ne
 8002f96:	2301      	movne	r3, #1
 8002f98:	0692      	lsls	r2, r2, #26
 8002f9a:	d42b      	bmi.n	8002ff4 <_printf_common+0xb0>
 8002f9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fa0:	4649      	mov	r1, r9
 8002fa2:	4638      	mov	r0, r7
 8002fa4:	47c0      	blx	r8
 8002fa6:	3001      	adds	r0, #1
 8002fa8:	d01e      	beq.n	8002fe8 <_printf_common+0xa4>
 8002faa:	6823      	ldr	r3, [r4, #0]
 8002fac:	68e5      	ldr	r5, [r4, #12]
 8002fae:	6832      	ldr	r2, [r6, #0]
 8002fb0:	f003 0306 	and.w	r3, r3, #6
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	bf08      	it	eq
 8002fb8:	1aad      	subeq	r5, r5, r2
 8002fba:	68a3      	ldr	r3, [r4, #8]
 8002fbc:	6922      	ldr	r2, [r4, #16]
 8002fbe:	bf0c      	ite	eq
 8002fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fc4:	2500      	movne	r5, #0
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	bfc4      	itt	gt
 8002fca:	1a9b      	subgt	r3, r3, r2
 8002fcc:	18ed      	addgt	r5, r5, r3
 8002fce:	2600      	movs	r6, #0
 8002fd0:	341a      	adds	r4, #26
 8002fd2:	42b5      	cmp	r5, r6
 8002fd4:	d11a      	bne.n	800300c <_printf_common+0xc8>
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	e008      	b.n	8002fec <_printf_common+0xa8>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	4652      	mov	r2, sl
 8002fde:	4649      	mov	r1, r9
 8002fe0:	4638      	mov	r0, r7
 8002fe2:	47c0      	blx	r8
 8002fe4:	3001      	adds	r0, #1
 8002fe6:	d103      	bne.n	8002ff0 <_printf_common+0xac>
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ff0:	3501      	adds	r5, #1
 8002ff2:	e7c6      	b.n	8002f82 <_printf_common+0x3e>
 8002ff4:	18e1      	adds	r1, r4, r3
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	2030      	movs	r0, #48	; 0x30
 8002ffa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ffe:	4422      	add	r2, r4
 8003000:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003004:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003008:	3302      	adds	r3, #2
 800300a:	e7c7      	b.n	8002f9c <_printf_common+0x58>
 800300c:	2301      	movs	r3, #1
 800300e:	4622      	mov	r2, r4
 8003010:	4649      	mov	r1, r9
 8003012:	4638      	mov	r0, r7
 8003014:	47c0      	blx	r8
 8003016:	3001      	adds	r0, #1
 8003018:	d0e6      	beq.n	8002fe8 <_printf_common+0xa4>
 800301a:	3601      	adds	r6, #1
 800301c:	e7d9      	b.n	8002fd2 <_printf_common+0x8e>
	...

08003020 <_printf_i>:
 8003020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003024:	7e0f      	ldrb	r7, [r1, #24]
 8003026:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003028:	2f78      	cmp	r7, #120	; 0x78
 800302a:	4691      	mov	r9, r2
 800302c:	4680      	mov	r8, r0
 800302e:	460c      	mov	r4, r1
 8003030:	469a      	mov	sl, r3
 8003032:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003036:	d807      	bhi.n	8003048 <_printf_i+0x28>
 8003038:	2f62      	cmp	r7, #98	; 0x62
 800303a:	d80a      	bhi.n	8003052 <_printf_i+0x32>
 800303c:	2f00      	cmp	r7, #0
 800303e:	f000 80d8 	beq.w	80031f2 <_printf_i+0x1d2>
 8003042:	2f58      	cmp	r7, #88	; 0x58
 8003044:	f000 80a3 	beq.w	800318e <_printf_i+0x16e>
 8003048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800304c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003050:	e03a      	b.n	80030c8 <_printf_i+0xa8>
 8003052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003056:	2b15      	cmp	r3, #21
 8003058:	d8f6      	bhi.n	8003048 <_printf_i+0x28>
 800305a:	a101      	add	r1, pc, #4	; (adr r1, 8003060 <_printf_i+0x40>)
 800305c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003060:	080030b9 	.word	0x080030b9
 8003064:	080030cd 	.word	0x080030cd
 8003068:	08003049 	.word	0x08003049
 800306c:	08003049 	.word	0x08003049
 8003070:	08003049 	.word	0x08003049
 8003074:	08003049 	.word	0x08003049
 8003078:	080030cd 	.word	0x080030cd
 800307c:	08003049 	.word	0x08003049
 8003080:	08003049 	.word	0x08003049
 8003084:	08003049 	.word	0x08003049
 8003088:	08003049 	.word	0x08003049
 800308c:	080031d9 	.word	0x080031d9
 8003090:	080030fd 	.word	0x080030fd
 8003094:	080031bb 	.word	0x080031bb
 8003098:	08003049 	.word	0x08003049
 800309c:	08003049 	.word	0x08003049
 80030a0:	080031fb 	.word	0x080031fb
 80030a4:	08003049 	.word	0x08003049
 80030a8:	080030fd 	.word	0x080030fd
 80030ac:	08003049 	.word	0x08003049
 80030b0:	08003049 	.word	0x08003049
 80030b4:	080031c3 	.word	0x080031c3
 80030b8:	682b      	ldr	r3, [r5, #0]
 80030ba:	1d1a      	adds	r2, r3, #4
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	602a      	str	r2, [r5, #0]
 80030c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0a3      	b.n	8003214 <_printf_i+0x1f4>
 80030cc:	6820      	ldr	r0, [r4, #0]
 80030ce:	6829      	ldr	r1, [r5, #0]
 80030d0:	0606      	lsls	r6, r0, #24
 80030d2:	f101 0304 	add.w	r3, r1, #4
 80030d6:	d50a      	bpl.n	80030ee <_printf_i+0xce>
 80030d8:	680e      	ldr	r6, [r1, #0]
 80030da:	602b      	str	r3, [r5, #0]
 80030dc:	2e00      	cmp	r6, #0
 80030de:	da03      	bge.n	80030e8 <_printf_i+0xc8>
 80030e0:	232d      	movs	r3, #45	; 0x2d
 80030e2:	4276      	negs	r6, r6
 80030e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030e8:	485e      	ldr	r0, [pc, #376]	; (8003264 <_printf_i+0x244>)
 80030ea:	230a      	movs	r3, #10
 80030ec:	e019      	b.n	8003122 <_printf_i+0x102>
 80030ee:	680e      	ldr	r6, [r1, #0]
 80030f0:	602b      	str	r3, [r5, #0]
 80030f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030f6:	bf18      	it	ne
 80030f8:	b236      	sxthne	r6, r6
 80030fa:	e7ef      	b.n	80030dc <_printf_i+0xbc>
 80030fc:	682b      	ldr	r3, [r5, #0]
 80030fe:	6820      	ldr	r0, [r4, #0]
 8003100:	1d19      	adds	r1, r3, #4
 8003102:	6029      	str	r1, [r5, #0]
 8003104:	0601      	lsls	r1, r0, #24
 8003106:	d501      	bpl.n	800310c <_printf_i+0xec>
 8003108:	681e      	ldr	r6, [r3, #0]
 800310a:	e002      	b.n	8003112 <_printf_i+0xf2>
 800310c:	0646      	lsls	r6, r0, #25
 800310e:	d5fb      	bpl.n	8003108 <_printf_i+0xe8>
 8003110:	881e      	ldrh	r6, [r3, #0]
 8003112:	4854      	ldr	r0, [pc, #336]	; (8003264 <_printf_i+0x244>)
 8003114:	2f6f      	cmp	r7, #111	; 0x6f
 8003116:	bf0c      	ite	eq
 8003118:	2308      	moveq	r3, #8
 800311a:	230a      	movne	r3, #10
 800311c:	2100      	movs	r1, #0
 800311e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003122:	6865      	ldr	r5, [r4, #4]
 8003124:	60a5      	str	r5, [r4, #8]
 8003126:	2d00      	cmp	r5, #0
 8003128:	bfa2      	ittt	ge
 800312a:	6821      	ldrge	r1, [r4, #0]
 800312c:	f021 0104 	bicge.w	r1, r1, #4
 8003130:	6021      	strge	r1, [r4, #0]
 8003132:	b90e      	cbnz	r6, 8003138 <_printf_i+0x118>
 8003134:	2d00      	cmp	r5, #0
 8003136:	d04d      	beq.n	80031d4 <_printf_i+0x1b4>
 8003138:	4615      	mov	r5, r2
 800313a:	fbb6 f1f3 	udiv	r1, r6, r3
 800313e:	fb03 6711 	mls	r7, r3, r1, r6
 8003142:	5dc7      	ldrb	r7, [r0, r7]
 8003144:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003148:	4637      	mov	r7, r6
 800314a:	42bb      	cmp	r3, r7
 800314c:	460e      	mov	r6, r1
 800314e:	d9f4      	bls.n	800313a <_printf_i+0x11a>
 8003150:	2b08      	cmp	r3, #8
 8003152:	d10b      	bne.n	800316c <_printf_i+0x14c>
 8003154:	6823      	ldr	r3, [r4, #0]
 8003156:	07de      	lsls	r6, r3, #31
 8003158:	d508      	bpl.n	800316c <_printf_i+0x14c>
 800315a:	6923      	ldr	r3, [r4, #16]
 800315c:	6861      	ldr	r1, [r4, #4]
 800315e:	4299      	cmp	r1, r3
 8003160:	bfde      	ittt	le
 8003162:	2330      	movle	r3, #48	; 0x30
 8003164:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003168:	f105 35ff 	addle.w	r5, r5, #4294967295
 800316c:	1b52      	subs	r2, r2, r5
 800316e:	6122      	str	r2, [r4, #16]
 8003170:	f8cd a000 	str.w	sl, [sp]
 8003174:	464b      	mov	r3, r9
 8003176:	aa03      	add	r2, sp, #12
 8003178:	4621      	mov	r1, r4
 800317a:	4640      	mov	r0, r8
 800317c:	f7ff fee2 	bl	8002f44 <_printf_common>
 8003180:	3001      	adds	r0, #1
 8003182:	d14c      	bne.n	800321e <_printf_i+0x1fe>
 8003184:	f04f 30ff 	mov.w	r0, #4294967295
 8003188:	b004      	add	sp, #16
 800318a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800318e:	4835      	ldr	r0, [pc, #212]	; (8003264 <_printf_i+0x244>)
 8003190:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003194:	6829      	ldr	r1, [r5, #0]
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	f851 6b04 	ldr.w	r6, [r1], #4
 800319c:	6029      	str	r1, [r5, #0]
 800319e:	061d      	lsls	r5, r3, #24
 80031a0:	d514      	bpl.n	80031cc <_printf_i+0x1ac>
 80031a2:	07df      	lsls	r7, r3, #31
 80031a4:	bf44      	itt	mi
 80031a6:	f043 0320 	orrmi.w	r3, r3, #32
 80031aa:	6023      	strmi	r3, [r4, #0]
 80031ac:	b91e      	cbnz	r6, 80031b6 <_printf_i+0x196>
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	f023 0320 	bic.w	r3, r3, #32
 80031b4:	6023      	str	r3, [r4, #0]
 80031b6:	2310      	movs	r3, #16
 80031b8:	e7b0      	b.n	800311c <_printf_i+0xfc>
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	f043 0320 	orr.w	r3, r3, #32
 80031c0:	6023      	str	r3, [r4, #0]
 80031c2:	2378      	movs	r3, #120	; 0x78
 80031c4:	4828      	ldr	r0, [pc, #160]	; (8003268 <_printf_i+0x248>)
 80031c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031ca:	e7e3      	b.n	8003194 <_printf_i+0x174>
 80031cc:	0659      	lsls	r1, r3, #25
 80031ce:	bf48      	it	mi
 80031d0:	b2b6      	uxthmi	r6, r6
 80031d2:	e7e6      	b.n	80031a2 <_printf_i+0x182>
 80031d4:	4615      	mov	r5, r2
 80031d6:	e7bb      	b.n	8003150 <_printf_i+0x130>
 80031d8:	682b      	ldr	r3, [r5, #0]
 80031da:	6826      	ldr	r6, [r4, #0]
 80031dc:	6961      	ldr	r1, [r4, #20]
 80031de:	1d18      	adds	r0, r3, #4
 80031e0:	6028      	str	r0, [r5, #0]
 80031e2:	0635      	lsls	r5, r6, #24
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	d501      	bpl.n	80031ec <_printf_i+0x1cc>
 80031e8:	6019      	str	r1, [r3, #0]
 80031ea:	e002      	b.n	80031f2 <_printf_i+0x1d2>
 80031ec:	0670      	lsls	r0, r6, #25
 80031ee:	d5fb      	bpl.n	80031e8 <_printf_i+0x1c8>
 80031f0:	8019      	strh	r1, [r3, #0]
 80031f2:	2300      	movs	r3, #0
 80031f4:	6123      	str	r3, [r4, #16]
 80031f6:	4615      	mov	r5, r2
 80031f8:	e7ba      	b.n	8003170 <_printf_i+0x150>
 80031fa:	682b      	ldr	r3, [r5, #0]
 80031fc:	1d1a      	adds	r2, r3, #4
 80031fe:	602a      	str	r2, [r5, #0]
 8003200:	681d      	ldr	r5, [r3, #0]
 8003202:	6862      	ldr	r2, [r4, #4]
 8003204:	2100      	movs	r1, #0
 8003206:	4628      	mov	r0, r5
 8003208:	f7fc ffe2 	bl	80001d0 <memchr>
 800320c:	b108      	cbz	r0, 8003212 <_printf_i+0x1f2>
 800320e:	1b40      	subs	r0, r0, r5
 8003210:	6060      	str	r0, [r4, #4]
 8003212:	6863      	ldr	r3, [r4, #4]
 8003214:	6123      	str	r3, [r4, #16]
 8003216:	2300      	movs	r3, #0
 8003218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800321c:	e7a8      	b.n	8003170 <_printf_i+0x150>
 800321e:	6923      	ldr	r3, [r4, #16]
 8003220:	462a      	mov	r2, r5
 8003222:	4649      	mov	r1, r9
 8003224:	4640      	mov	r0, r8
 8003226:	47d0      	blx	sl
 8003228:	3001      	adds	r0, #1
 800322a:	d0ab      	beq.n	8003184 <_printf_i+0x164>
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	079b      	lsls	r3, r3, #30
 8003230:	d413      	bmi.n	800325a <_printf_i+0x23a>
 8003232:	68e0      	ldr	r0, [r4, #12]
 8003234:	9b03      	ldr	r3, [sp, #12]
 8003236:	4298      	cmp	r0, r3
 8003238:	bfb8      	it	lt
 800323a:	4618      	movlt	r0, r3
 800323c:	e7a4      	b.n	8003188 <_printf_i+0x168>
 800323e:	2301      	movs	r3, #1
 8003240:	4632      	mov	r2, r6
 8003242:	4649      	mov	r1, r9
 8003244:	4640      	mov	r0, r8
 8003246:	47d0      	blx	sl
 8003248:	3001      	adds	r0, #1
 800324a:	d09b      	beq.n	8003184 <_printf_i+0x164>
 800324c:	3501      	adds	r5, #1
 800324e:	68e3      	ldr	r3, [r4, #12]
 8003250:	9903      	ldr	r1, [sp, #12]
 8003252:	1a5b      	subs	r3, r3, r1
 8003254:	42ab      	cmp	r3, r5
 8003256:	dcf2      	bgt.n	800323e <_printf_i+0x21e>
 8003258:	e7eb      	b.n	8003232 <_printf_i+0x212>
 800325a:	2500      	movs	r5, #0
 800325c:	f104 0619 	add.w	r6, r4, #25
 8003260:	e7f5      	b.n	800324e <_printf_i+0x22e>
 8003262:	bf00      	nop
 8003264:	08003949 	.word	0x08003949
 8003268:	0800395a 	.word	0x0800395a

0800326c <_sbrk_r>:
 800326c:	b538      	push	{r3, r4, r5, lr}
 800326e:	4d06      	ldr	r5, [pc, #24]	; (8003288 <_sbrk_r+0x1c>)
 8003270:	2300      	movs	r3, #0
 8003272:	4604      	mov	r4, r0
 8003274:	4608      	mov	r0, r1
 8003276:	602b      	str	r3, [r5, #0]
 8003278:	f7fd f9d6 	bl	8000628 <_sbrk>
 800327c:	1c43      	adds	r3, r0, #1
 800327e:	d102      	bne.n	8003286 <_sbrk_r+0x1a>
 8003280:	682b      	ldr	r3, [r5, #0]
 8003282:	b103      	cbz	r3, 8003286 <_sbrk_r+0x1a>
 8003284:	6023      	str	r3, [r4, #0]
 8003286:	bd38      	pop	{r3, r4, r5, pc}
 8003288:	200000f0 	.word	0x200000f0

0800328c <__sread>:
 800328c:	b510      	push	{r4, lr}
 800328e:	460c      	mov	r4, r1
 8003290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003294:	f000 fab2 	bl	80037fc <_read_r>
 8003298:	2800      	cmp	r0, #0
 800329a:	bfab      	itete	ge
 800329c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800329e:	89a3      	ldrhlt	r3, [r4, #12]
 80032a0:	181b      	addge	r3, r3, r0
 80032a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80032a6:	bfac      	ite	ge
 80032a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80032aa:	81a3      	strhlt	r3, [r4, #12]
 80032ac:	bd10      	pop	{r4, pc}

080032ae <__swrite>:
 80032ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032b2:	461f      	mov	r7, r3
 80032b4:	898b      	ldrh	r3, [r1, #12]
 80032b6:	05db      	lsls	r3, r3, #23
 80032b8:	4605      	mov	r5, r0
 80032ba:	460c      	mov	r4, r1
 80032bc:	4616      	mov	r6, r2
 80032be:	d505      	bpl.n	80032cc <__swrite+0x1e>
 80032c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032c4:	2302      	movs	r3, #2
 80032c6:	2200      	movs	r2, #0
 80032c8:	f000 f9c8 	bl	800365c <_lseek_r>
 80032cc:	89a3      	ldrh	r3, [r4, #12]
 80032ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032d6:	81a3      	strh	r3, [r4, #12]
 80032d8:	4632      	mov	r2, r6
 80032da:	463b      	mov	r3, r7
 80032dc:	4628      	mov	r0, r5
 80032de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032e2:	f000 b869 	b.w	80033b8 <_write_r>

080032e6 <__sseek>:
 80032e6:	b510      	push	{r4, lr}
 80032e8:	460c      	mov	r4, r1
 80032ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032ee:	f000 f9b5 	bl	800365c <_lseek_r>
 80032f2:	1c43      	adds	r3, r0, #1
 80032f4:	89a3      	ldrh	r3, [r4, #12]
 80032f6:	bf15      	itete	ne
 80032f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80032fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80032fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003302:	81a3      	strheq	r3, [r4, #12]
 8003304:	bf18      	it	ne
 8003306:	81a3      	strhne	r3, [r4, #12]
 8003308:	bd10      	pop	{r4, pc}

0800330a <__sclose>:
 800330a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800330e:	f000 b8d3 	b.w	80034b8 <_close_r>
	...

08003314 <__swbuf_r>:
 8003314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003316:	460e      	mov	r6, r1
 8003318:	4614      	mov	r4, r2
 800331a:	4605      	mov	r5, r0
 800331c:	b118      	cbz	r0, 8003326 <__swbuf_r+0x12>
 800331e:	6983      	ldr	r3, [r0, #24]
 8003320:	b90b      	cbnz	r3, 8003326 <__swbuf_r+0x12>
 8003322:	f7ff fb81 	bl	8002a28 <__sinit>
 8003326:	4b21      	ldr	r3, [pc, #132]	; (80033ac <__swbuf_r+0x98>)
 8003328:	429c      	cmp	r4, r3
 800332a:	d12b      	bne.n	8003384 <__swbuf_r+0x70>
 800332c:	686c      	ldr	r4, [r5, #4]
 800332e:	69a3      	ldr	r3, [r4, #24]
 8003330:	60a3      	str	r3, [r4, #8]
 8003332:	89a3      	ldrh	r3, [r4, #12]
 8003334:	071a      	lsls	r2, r3, #28
 8003336:	d52f      	bpl.n	8003398 <__swbuf_r+0x84>
 8003338:	6923      	ldr	r3, [r4, #16]
 800333a:	b36b      	cbz	r3, 8003398 <__swbuf_r+0x84>
 800333c:	6923      	ldr	r3, [r4, #16]
 800333e:	6820      	ldr	r0, [r4, #0]
 8003340:	1ac0      	subs	r0, r0, r3
 8003342:	6963      	ldr	r3, [r4, #20]
 8003344:	b2f6      	uxtb	r6, r6
 8003346:	4283      	cmp	r3, r0
 8003348:	4637      	mov	r7, r6
 800334a:	dc04      	bgt.n	8003356 <__swbuf_r+0x42>
 800334c:	4621      	mov	r1, r4
 800334e:	4628      	mov	r0, r5
 8003350:	f000 f948 	bl	80035e4 <_fflush_r>
 8003354:	bb30      	cbnz	r0, 80033a4 <__swbuf_r+0x90>
 8003356:	68a3      	ldr	r3, [r4, #8]
 8003358:	3b01      	subs	r3, #1
 800335a:	60a3      	str	r3, [r4, #8]
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	6022      	str	r2, [r4, #0]
 8003362:	701e      	strb	r6, [r3, #0]
 8003364:	6963      	ldr	r3, [r4, #20]
 8003366:	3001      	adds	r0, #1
 8003368:	4283      	cmp	r3, r0
 800336a:	d004      	beq.n	8003376 <__swbuf_r+0x62>
 800336c:	89a3      	ldrh	r3, [r4, #12]
 800336e:	07db      	lsls	r3, r3, #31
 8003370:	d506      	bpl.n	8003380 <__swbuf_r+0x6c>
 8003372:	2e0a      	cmp	r6, #10
 8003374:	d104      	bne.n	8003380 <__swbuf_r+0x6c>
 8003376:	4621      	mov	r1, r4
 8003378:	4628      	mov	r0, r5
 800337a:	f000 f933 	bl	80035e4 <_fflush_r>
 800337e:	b988      	cbnz	r0, 80033a4 <__swbuf_r+0x90>
 8003380:	4638      	mov	r0, r7
 8003382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003384:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <__swbuf_r+0x9c>)
 8003386:	429c      	cmp	r4, r3
 8003388:	d101      	bne.n	800338e <__swbuf_r+0x7a>
 800338a:	68ac      	ldr	r4, [r5, #8]
 800338c:	e7cf      	b.n	800332e <__swbuf_r+0x1a>
 800338e:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <__swbuf_r+0xa0>)
 8003390:	429c      	cmp	r4, r3
 8003392:	bf08      	it	eq
 8003394:	68ec      	ldreq	r4, [r5, #12]
 8003396:	e7ca      	b.n	800332e <__swbuf_r+0x1a>
 8003398:	4621      	mov	r1, r4
 800339a:	4628      	mov	r0, r5
 800339c:	f000 f81e 	bl	80033dc <__swsetup_r>
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d0cb      	beq.n	800333c <__swbuf_r+0x28>
 80033a4:	f04f 37ff 	mov.w	r7, #4294967295
 80033a8:	e7ea      	b.n	8003380 <__swbuf_r+0x6c>
 80033aa:	bf00      	nop
 80033ac:	080038f8 	.word	0x080038f8
 80033b0:	08003918 	.word	0x08003918
 80033b4:	080038d8 	.word	0x080038d8

080033b8 <_write_r>:
 80033b8:	b538      	push	{r3, r4, r5, lr}
 80033ba:	4d07      	ldr	r5, [pc, #28]	; (80033d8 <_write_r+0x20>)
 80033bc:	4604      	mov	r4, r0
 80033be:	4608      	mov	r0, r1
 80033c0:	4611      	mov	r1, r2
 80033c2:	2200      	movs	r2, #0
 80033c4:	602a      	str	r2, [r5, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f7fd f8dd 	bl	8000586 <_write>
 80033cc:	1c43      	adds	r3, r0, #1
 80033ce:	d102      	bne.n	80033d6 <_write_r+0x1e>
 80033d0:	682b      	ldr	r3, [r5, #0]
 80033d2:	b103      	cbz	r3, 80033d6 <_write_r+0x1e>
 80033d4:	6023      	str	r3, [r4, #0]
 80033d6:	bd38      	pop	{r3, r4, r5, pc}
 80033d8:	200000f0 	.word	0x200000f0

080033dc <__swsetup_r>:
 80033dc:	4b32      	ldr	r3, [pc, #200]	; (80034a8 <__swsetup_r+0xcc>)
 80033de:	b570      	push	{r4, r5, r6, lr}
 80033e0:	681d      	ldr	r5, [r3, #0]
 80033e2:	4606      	mov	r6, r0
 80033e4:	460c      	mov	r4, r1
 80033e6:	b125      	cbz	r5, 80033f2 <__swsetup_r+0x16>
 80033e8:	69ab      	ldr	r3, [r5, #24]
 80033ea:	b913      	cbnz	r3, 80033f2 <__swsetup_r+0x16>
 80033ec:	4628      	mov	r0, r5
 80033ee:	f7ff fb1b 	bl	8002a28 <__sinit>
 80033f2:	4b2e      	ldr	r3, [pc, #184]	; (80034ac <__swsetup_r+0xd0>)
 80033f4:	429c      	cmp	r4, r3
 80033f6:	d10f      	bne.n	8003418 <__swsetup_r+0x3c>
 80033f8:	686c      	ldr	r4, [r5, #4]
 80033fa:	89a3      	ldrh	r3, [r4, #12]
 80033fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003400:	0719      	lsls	r1, r3, #28
 8003402:	d42c      	bmi.n	800345e <__swsetup_r+0x82>
 8003404:	06dd      	lsls	r5, r3, #27
 8003406:	d411      	bmi.n	800342c <__swsetup_r+0x50>
 8003408:	2309      	movs	r3, #9
 800340a:	6033      	str	r3, [r6, #0]
 800340c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003410:	81a3      	strh	r3, [r4, #12]
 8003412:	f04f 30ff 	mov.w	r0, #4294967295
 8003416:	e03e      	b.n	8003496 <__swsetup_r+0xba>
 8003418:	4b25      	ldr	r3, [pc, #148]	; (80034b0 <__swsetup_r+0xd4>)
 800341a:	429c      	cmp	r4, r3
 800341c:	d101      	bne.n	8003422 <__swsetup_r+0x46>
 800341e:	68ac      	ldr	r4, [r5, #8]
 8003420:	e7eb      	b.n	80033fa <__swsetup_r+0x1e>
 8003422:	4b24      	ldr	r3, [pc, #144]	; (80034b4 <__swsetup_r+0xd8>)
 8003424:	429c      	cmp	r4, r3
 8003426:	bf08      	it	eq
 8003428:	68ec      	ldreq	r4, [r5, #12]
 800342a:	e7e6      	b.n	80033fa <__swsetup_r+0x1e>
 800342c:	0758      	lsls	r0, r3, #29
 800342e:	d512      	bpl.n	8003456 <__swsetup_r+0x7a>
 8003430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003432:	b141      	cbz	r1, 8003446 <__swsetup_r+0x6a>
 8003434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003438:	4299      	cmp	r1, r3
 800343a:	d002      	beq.n	8003442 <__swsetup_r+0x66>
 800343c:	4630      	mov	r0, r6
 800343e:	f000 f991 	bl	8003764 <_free_r>
 8003442:	2300      	movs	r3, #0
 8003444:	6363      	str	r3, [r4, #52]	; 0x34
 8003446:	89a3      	ldrh	r3, [r4, #12]
 8003448:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800344c:	81a3      	strh	r3, [r4, #12]
 800344e:	2300      	movs	r3, #0
 8003450:	6063      	str	r3, [r4, #4]
 8003452:	6923      	ldr	r3, [r4, #16]
 8003454:	6023      	str	r3, [r4, #0]
 8003456:	89a3      	ldrh	r3, [r4, #12]
 8003458:	f043 0308 	orr.w	r3, r3, #8
 800345c:	81a3      	strh	r3, [r4, #12]
 800345e:	6923      	ldr	r3, [r4, #16]
 8003460:	b94b      	cbnz	r3, 8003476 <__swsetup_r+0x9a>
 8003462:	89a3      	ldrh	r3, [r4, #12]
 8003464:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800346c:	d003      	beq.n	8003476 <__swsetup_r+0x9a>
 800346e:	4621      	mov	r1, r4
 8003470:	4630      	mov	r0, r6
 8003472:	f000 f92b 	bl	80036cc <__smakebuf_r>
 8003476:	89a0      	ldrh	r0, [r4, #12]
 8003478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800347c:	f010 0301 	ands.w	r3, r0, #1
 8003480:	d00a      	beq.n	8003498 <__swsetup_r+0xbc>
 8003482:	2300      	movs	r3, #0
 8003484:	60a3      	str	r3, [r4, #8]
 8003486:	6963      	ldr	r3, [r4, #20]
 8003488:	425b      	negs	r3, r3
 800348a:	61a3      	str	r3, [r4, #24]
 800348c:	6923      	ldr	r3, [r4, #16]
 800348e:	b943      	cbnz	r3, 80034a2 <__swsetup_r+0xc6>
 8003490:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003494:	d1ba      	bne.n	800340c <__swsetup_r+0x30>
 8003496:	bd70      	pop	{r4, r5, r6, pc}
 8003498:	0781      	lsls	r1, r0, #30
 800349a:	bf58      	it	pl
 800349c:	6963      	ldrpl	r3, [r4, #20]
 800349e:	60a3      	str	r3, [r4, #8]
 80034a0:	e7f4      	b.n	800348c <__swsetup_r+0xb0>
 80034a2:	2000      	movs	r0, #0
 80034a4:	e7f7      	b.n	8003496 <__swsetup_r+0xba>
 80034a6:	bf00      	nop
 80034a8:	2000000c 	.word	0x2000000c
 80034ac:	080038f8 	.word	0x080038f8
 80034b0:	08003918 	.word	0x08003918
 80034b4:	080038d8 	.word	0x080038d8

080034b8 <_close_r>:
 80034b8:	b538      	push	{r3, r4, r5, lr}
 80034ba:	4d06      	ldr	r5, [pc, #24]	; (80034d4 <_close_r+0x1c>)
 80034bc:	2300      	movs	r3, #0
 80034be:	4604      	mov	r4, r0
 80034c0:	4608      	mov	r0, r1
 80034c2:	602b      	str	r3, [r5, #0]
 80034c4:	f7fd f87b 	bl	80005be <_close>
 80034c8:	1c43      	adds	r3, r0, #1
 80034ca:	d102      	bne.n	80034d2 <_close_r+0x1a>
 80034cc:	682b      	ldr	r3, [r5, #0]
 80034ce:	b103      	cbz	r3, 80034d2 <_close_r+0x1a>
 80034d0:	6023      	str	r3, [r4, #0]
 80034d2:	bd38      	pop	{r3, r4, r5, pc}
 80034d4:	200000f0 	.word	0x200000f0

080034d8 <__sflush_r>:
 80034d8:	898a      	ldrh	r2, [r1, #12]
 80034da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034de:	4605      	mov	r5, r0
 80034e0:	0710      	lsls	r0, r2, #28
 80034e2:	460c      	mov	r4, r1
 80034e4:	d458      	bmi.n	8003598 <__sflush_r+0xc0>
 80034e6:	684b      	ldr	r3, [r1, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	dc05      	bgt.n	80034f8 <__sflush_r+0x20>
 80034ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	dc02      	bgt.n	80034f8 <__sflush_r+0x20>
 80034f2:	2000      	movs	r0, #0
 80034f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034fa:	2e00      	cmp	r6, #0
 80034fc:	d0f9      	beq.n	80034f2 <__sflush_r+0x1a>
 80034fe:	2300      	movs	r3, #0
 8003500:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003504:	682f      	ldr	r7, [r5, #0]
 8003506:	602b      	str	r3, [r5, #0]
 8003508:	d032      	beq.n	8003570 <__sflush_r+0x98>
 800350a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800350c:	89a3      	ldrh	r3, [r4, #12]
 800350e:	075a      	lsls	r2, r3, #29
 8003510:	d505      	bpl.n	800351e <__sflush_r+0x46>
 8003512:	6863      	ldr	r3, [r4, #4]
 8003514:	1ac0      	subs	r0, r0, r3
 8003516:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003518:	b10b      	cbz	r3, 800351e <__sflush_r+0x46>
 800351a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800351c:	1ac0      	subs	r0, r0, r3
 800351e:	2300      	movs	r3, #0
 8003520:	4602      	mov	r2, r0
 8003522:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003524:	6a21      	ldr	r1, [r4, #32]
 8003526:	4628      	mov	r0, r5
 8003528:	47b0      	blx	r6
 800352a:	1c43      	adds	r3, r0, #1
 800352c:	89a3      	ldrh	r3, [r4, #12]
 800352e:	d106      	bne.n	800353e <__sflush_r+0x66>
 8003530:	6829      	ldr	r1, [r5, #0]
 8003532:	291d      	cmp	r1, #29
 8003534:	d82c      	bhi.n	8003590 <__sflush_r+0xb8>
 8003536:	4a2a      	ldr	r2, [pc, #168]	; (80035e0 <__sflush_r+0x108>)
 8003538:	40ca      	lsrs	r2, r1
 800353a:	07d6      	lsls	r6, r2, #31
 800353c:	d528      	bpl.n	8003590 <__sflush_r+0xb8>
 800353e:	2200      	movs	r2, #0
 8003540:	6062      	str	r2, [r4, #4]
 8003542:	04d9      	lsls	r1, r3, #19
 8003544:	6922      	ldr	r2, [r4, #16]
 8003546:	6022      	str	r2, [r4, #0]
 8003548:	d504      	bpl.n	8003554 <__sflush_r+0x7c>
 800354a:	1c42      	adds	r2, r0, #1
 800354c:	d101      	bne.n	8003552 <__sflush_r+0x7a>
 800354e:	682b      	ldr	r3, [r5, #0]
 8003550:	b903      	cbnz	r3, 8003554 <__sflush_r+0x7c>
 8003552:	6560      	str	r0, [r4, #84]	; 0x54
 8003554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003556:	602f      	str	r7, [r5, #0]
 8003558:	2900      	cmp	r1, #0
 800355a:	d0ca      	beq.n	80034f2 <__sflush_r+0x1a>
 800355c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003560:	4299      	cmp	r1, r3
 8003562:	d002      	beq.n	800356a <__sflush_r+0x92>
 8003564:	4628      	mov	r0, r5
 8003566:	f000 f8fd 	bl	8003764 <_free_r>
 800356a:	2000      	movs	r0, #0
 800356c:	6360      	str	r0, [r4, #52]	; 0x34
 800356e:	e7c1      	b.n	80034f4 <__sflush_r+0x1c>
 8003570:	6a21      	ldr	r1, [r4, #32]
 8003572:	2301      	movs	r3, #1
 8003574:	4628      	mov	r0, r5
 8003576:	47b0      	blx	r6
 8003578:	1c41      	adds	r1, r0, #1
 800357a:	d1c7      	bne.n	800350c <__sflush_r+0x34>
 800357c:	682b      	ldr	r3, [r5, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0c4      	beq.n	800350c <__sflush_r+0x34>
 8003582:	2b1d      	cmp	r3, #29
 8003584:	d001      	beq.n	800358a <__sflush_r+0xb2>
 8003586:	2b16      	cmp	r3, #22
 8003588:	d101      	bne.n	800358e <__sflush_r+0xb6>
 800358a:	602f      	str	r7, [r5, #0]
 800358c:	e7b1      	b.n	80034f2 <__sflush_r+0x1a>
 800358e:	89a3      	ldrh	r3, [r4, #12]
 8003590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003594:	81a3      	strh	r3, [r4, #12]
 8003596:	e7ad      	b.n	80034f4 <__sflush_r+0x1c>
 8003598:	690f      	ldr	r7, [r1, #16]
 800359a:	2f00      	cmp	r7, #0
 800359c:	d0a9      	beq.n	80034f2 <__sflush_r+0x1a>
 800359e:	0793      	lsls	r3, r2, #30
 80035a0:	680e      	ldr	r6, [r1, #0]
 80035a2:	bf08      	it	eq
 80035a4:	694b      	ldreq	r3, [r1, #20]
 80035a6:	600f      	str	r7, [r1, #0]
 80035a8:	bf18      	it	ne
 80035aa:	2300      	movne	r3, #0
 80035ac:	eba6 0807 	sub.w	r8, r6, r7
 80035b0:	608b      	str	r3, [r1, #8]
 80035b2:	f1b8 0f00 	cmp.w	r8, #0
 80035b6:	dd9c      	ble.n	80034f2 <__sflush_r+0x1a>
 80035b8:	6a21      	ldr	r1, [r4, #32]
 80035ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80035bc:	4643      	mov	r3, r8
 80035be:	463a      	mov	r2, r7
 80035c0:	4628      	mov	r0, r5
 80035c2:	47b0      	blx	r6
 80035c4:	2800      	cmp	r0, #0
 80035c6:	dc06      	bgt.n	80035d6 <__sflush_r+0xfe>
 80035c8:	89a3      	ldrh	r3, [r4, #12]
 80035ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ce:	81a3      	strh	r3, [r4, #12]
 80035d0:	f04f 30ff 	mov.w	r0, #4294967295
 80035d4:	e78e      	b.n	80034f4 <__sflush_r+0x1c>
 80035d6:	4407      	add	r7, r0
 80035d8:	eba8 0800 	sub.w	r8, r8, r0
 80035dc:	e7e9      	b.n	80035b2 <__sflush_r+0xda>
 80035de:	bf00      	nop
 80035e0:	20400001 	.word	0x20400001

080035e4 <_fflush_r>:
 80035e4:	b538      	push	{r3, r4, r5, lr}
 80035e6:	690b      	ldr	r3, [r1, #16]
 80035e8:	4605      	mov	r5, r0
 80035ea:	460c      	mov	r4, r1
 80035ec:	b913      	cbnz	r3, 80035f4 <_fflush_r+0x10>
 80035ee:	2500      	movs	r5, #0
 80035f0:	4628      	mov	r0, r5
 80035f2:	bd38      	pop	{r3, r4, r5, pc}
 80035f4:	b118      	cbz	r0, 80035fe <_fflush_r+0x1a>
 80035f6:	6983      	ldr	r3, [r0, #24]
 80035f8:	b90b      	cbnz	r3, 80035fe <_fflush_r+0x1a>
 80035fa:	f7ff fa15 	bl	8002a28 <__sinit>
 80035fe:	4b14      	ldr	r3, [pc, #80]	; (8003650 <_fflush_r+0x6c>)
 8003600:	429c      	cmp	r4, r3
 8003602:	d11b      	bne.n	800363c <_fflush_r+0x58>
 8003604:	686c      	ldr	r4, [r5, #4]
 8003606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0ef      	beq.n	80035ee <_fflush_r+0xa>
 800360e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003610:	07d0      	lsls	r0, r2, #31
 8003612:	d404      	bmi.n	800361e <_fflush_r+0x3a>
 8003614:	0599      	lsls	r1, r3, #22
 8003616:	d402      	bmi.n	800361e <_fflush_r+0x3a>
 8003618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800361a:	f7ff faa3 	bl	8002b64 <__retarget_lock_acquire_recursive>
 800361e:	4628      	mov	r0, r5
 8003620:	4621      	mov	r1, r4
 8003622:	f7ff ff59 	bl	80034d8 <__sflush_r>
 8003626:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003628:	07da      	lsls	r2, r3, #31
 800362a:	4605      	mov	r5, r0
 800362c:	d4e0      	bmi.n	80035f0 <_fflush_r+0xc>
 800362e:	89a3      	ldrh	r3, [r4, #12]
 8003630:	059b      	lsls	r3, r3, #22
 8003632:	d4dd      	bmi.n	80035f0 <_fflush_r+0xc>
 8003634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003636:	f7ff fa96 	bl	8002b66 <__retarget_lock_release_recursive>
 800363a:	e7d9      	b.n	80035f0 <_fflush_r+0xc>
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <_fflush_r+0x70>)
 800363e:	429c      	cmp	r4, r3
 8003640:	d101      	bne.n	8003646 <_fflush_r+0x62>
 8003642:	68ac      	ldr	r4, [r5, #8]
 8003644:	e7df      	b.n	8003606 <_fflush_r+0x22>
 8003646:	4b04      	ldr	r3, [pc, #16]	; (8003658 <_fflush_r+0x74>)
 8003648:	429c      	cmp	r4, r3
 800364a:	bf08      	it	eq
 800364c:	68ec      	ldreq	r4, [r5, #12]
 800364e:	e7da      	b.n	8003606 <_fflush_r+0x22>
 8003650:	080038f8 	.word	0x080038f8
 8003654:	08003918 	.word	0x08003918
 8003658:	080038d8 	.word	0x080038d8

0800365c <_lseek_r>:
 800365c:	b538      	push	{r3, r4, r5, lr}
 800365e:	4d07      	ldr	r5, [pc, #28]	; (800367c <_lseek_r+0x20>)
 8003660:	4604      	mov	r4, r0
 8003662:	4608      	mov	r0, r1
 8003664:	4611      	mov	r1, r2
 8003666:	2200      	movs	r2, #0
 8003668:	602a      	str	r2, [r5, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	f7fc ffce 	bl	800060c <_lseek>
 8003670:	1c43      	adds	r3, r0, #1
 8003672:	d102      	bne.n	800367a <_lseek_r+0x1e>
 8003674:	682b      	ldr	r3, [r5, #0]
 8003676:	b103      	cbz	r3, 800367a <_lseek_r+0x1e>
 8003678:	6023      	str	r3, [r4, #0]
 800367a:	bd38      	pop	{r3, r4, r5, pc}
 800367c:	200000f0 	.word	0x200000f0

08003680 <__swhatbuf_r>:
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	460e      	mov	r6, r1
 8003684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003688:	2900      	cmp	r1, #0
 800368a:	b096      	sub	sp, #88	; 0x58
 800368c:	4614      	mov	r4, r2
 800368e:	461d      	mov	r5, r3
 8003690:	da08      	bge.n	80036a4 <__swhatbuf_r+0x24>
 8003692:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	602a      	str	r2, [r5, #0]
 800369a:	061a      	lsls	r2, r3, #24
 800369c:	d410      	bmi.n	80036c0 <__swhatbuf_r+0x40>
 800369e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a2:	e00e      	b.n	80036c2 <__swhatbuf_r+0x42>
 80036a4:	466a      	mov	r2, sp
 80036a6:	f000 f8bb 	bl	8003820 <_fstat_r>
 80036aa:	2800      	cmp	r0, #0
 80036ac:	dbf1      	blt.n	8003692 <__swhatbuf_r+0x12>
 80036ae:	9a01      	ldr	r2, [sp, #4]
 80036b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036b8:	425a      	negs	r2, r3
 80036ba:	415a      	adcs	r2, r3
 80036bc:	602a      	str	r2, [r5, #0]
 80036be:	e7ee      	b.n	800369e <__swhatbuf_r+0x1e>
 80036c0:	2340      	movs	r3, #64	; 0x40
 80036c2:	2000      	movs	r0, #0
 80036c4:	6023      	str	r3, [r4, #0]
 80036c6:	b016      	add	sp, #88	; 0x58
 80036c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080036cc <__smakebuf_r>:
 80036cc:	898b      	ldrh	r3, [r1, #12]
 80036ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036d0:	079d      	lsls	r5, r3, #30
 80036d2:	4606      	mov	r6, r0
 80036d4:	460c      	mov	r4, r1
 80036d6:	d507      	bpl.n	80036e8 <__smakebuf_r+0x1c>
 80036d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036dc:	6023      	str	r3, [r4, #0]
 80036de:	6123      	str	r3, [r4, #16]
 80036e0:	2301      	movs	r3, #1
 80036e2:	6163      	str	r3, [r4, #20]
 80036e4:	b002      	add	sp, #8
 80036e6:	bd70      	pop	{r4, r5, r6, pc}
 80036e8:	ab01      	add	r3, sp, #4
 80036ea:	466a      	mov	r2, sp
 80036ec:	f7ff ffc8 	bl	8003680 <__swhatbuf_r>
 80036f0:	9900      	ldr	r1, [sp, #0]
 80036f2:	4605      	mov	r5, r0
 80036f4:	4630      	mov	r0, r6
 80036f6:	f7ff fa57 	bl	8002ba8 <_malloc_r>
 80036fa:	b948      	cbnz	r0, 8003710 <__smakebuf_r+0x44>
 80036fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003700:	059a      	lsls	r2, r3, #22
 8003702:	d4ef      	bmi.n	80036e4 <__smakebuf_r+0x18>
 8003704:	f023 0303 	bic.w	r3, r3, #3
 8003708:	f043 0302 	orr.w	r3, r3, #2
 800370c:	81a3      	strh	r3, [r4, #12]
 800370e:	e7e3      	b.n	80036d8 <__smakebuf_r+0xc>
 8003710:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <__smakebuf_r+0x7c>)
 8003712:	62b3      	str	r3, [r6, #40]	; 0x28
 8003714:	89a3      	ldrh	r3, [r4, #12]
 8003716:	6020      	str	r0, [r4, #0]
 8003718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800371c:	81a3      	strh	r3, [r4, #12]
 800371e:	9b00      	ldr	r3, [sp, #0]
 8003720:	6163      	str	r3, [r4, #20]
 8003722:	9b01      	ldr	r3, [sp, #4]
 8003724:	6120      	str	r0, [r4, #16]
 8003726:	b15b      	cbz	r3, 8003740 <__smakebuf_r+0x74>
 8003728:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800372c:	4630      	mov	r0, r6
 800372e:	f000 f889 	bl	8003844 <_isatty_r>
 8003732:	b128      	cbz	r0, 8003740 <__smakebuf_r+0x74>
 8003734:	89a3      	ldrh	r3, [r4, #12]
 8003736:	f023 0303 	bic.w	r3, r3, #3
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	81a3      	strh	r3, [r4, #12]
 8003740:	89a0      	ldrh	r0, [r4, #12]
 8003742:	4305      	orrs	r5, r0
 8003744:	81a5      	strh	r5, [r4, #12]
 8003746:	e7cd      	b.n	80036e4 <__smakebuf_r+0x18>
 8003748:	080029c1 	.word	0x080029c1

0800374c <__malloc_lock>:
 800374c:	4801      	ldr	r0, [pc, #4]	; (8003754 <__malloc_lock+0x8>)
 800374e:	f7ff ba09 	b.w	8002b64 <__retarget_lock_acquire_recursive>
 8003752:	bf00      	nop
 8003754:	200000e4 	.word	0x200000e4

08003758 <__malloc_unlock>:
 8003758:	4801      	ldr	r0, [pc, #4]	; (8003760 <__malloc_unlock+0x8>)
 800375a:	f7ff ba04 	b.w	8002b66 <__retarget_lock_release_recursive>
 800375e:	bf00      	nop
 8003760:	200000e4 	.word	0x200000e4

08003764 <_free_r>:
 8003764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003766:	2900      	cmp	r1, #0
 8003768:	d044      	beq.n	80037f4 <_free_r+0x90>
 800376a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800376e:	9001      	str	r0, [sp, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	f1a1 0404 	sub.w	r4, r1, #4
 8003776:	bfb8      	it	lt
 8003778:	18e4      	addlt	r4, r4, r3
 800377a:	f7ff ffe7 	bl	800374c <__malloc_lock>
 800377e:	4a1e      	ldr	r2, [pc, #120]	; (80037f8 <_free_r+0x94>)
 8003780:	9801      	ldr	r0, [sp, #4]
 8003782:	6813      	ldr	r3, [r2, #0]
 8003784:	b933      	cbnz	r3, 8003794 <_free_r+0x30>
 8003786:	6063      	str	r3, [r4, #4]
 8003788:	6014      	str	r4, [r2, #0]
 800378a:	b003      	add	sp, #12
 800378c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003790:	f7ff bfe2 	b.w	8003758 <__malloc_unlock>
 8003794:	42a3      	cmp	r3, r4
 8003796:	d908      	bls.n	80037aa <_free_r+0x46>
 8003798:	6825      	ldr	r5, [r4, #0]
 800379a:	1961      	adds	r1, r4, r5
 800379c:	428b      	cmp	r3, r1
 800379e:	bf01      	itttt	eq
 80037a0:	6819      	ldreq	r1, [r3, #0]
 80037a2:	685b      	ldreq	r3, [r3, #4]
 80037a4:	1949      	addeq	r1, r1, r5
 80037a6:	6021      	streq	r1, [r4, #0]
 80037a8:	e7ed      	b.n	8003786 <_free_r+0x22>
 80037aa:	461a      	mov	r2, r3
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	b10b      	cbz	r3, 80037b4 <_free_r+0x50>
 80037b0:	42a3      	cmp	r3, r4
 80037b2:	d9fa      	bls.n	80037aa <_free_r+0x46>
 80037b4:	6811      	ldr	r1, [r2, #0]
 80037b6:	1855      	adds	r5, r2, r1
 80037b8:	42a5      	cmp	r5, r4
 80037ba:	d10b      	bne.n	80037d4 <_free_r+0x70>
 80037bc:	6824      	ldr	r4, [r4, #0]
 80037be:	4421      	add	r1, r4
 80037c0:	1854      	adds	r4, r2, r1
 80037c2:	42a3      	cmp	r3, r4
 80037c4:	6011      	str	r1, [r2, #0]
 80037c6:	d1e0      	bne.n	800378a <_free_r+0x26>
 80037c8:	681c      	ldr	r4, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	6053      	str	r3, [r2, #4]
 80037ce:	4421      	add	r1, r4
 80037d0:	6011      	str	r1, [r2, #0]
 80037d2:	e7da      	b.n	800378a <_free_r+0x26>
 80037d4:	d902      	bls.n	80037dc <_free_r+0x78>
 80037d6:	230c      	movs	r3, #12
 80037d8:	6003      	str	r3, [r0, #0]
 80037da:	e7d6      	b.n	800378a <_free_r+0x26>
 80037dc:	6825      	ldr	r5, [r4, #0]
 80037de:	1961      	adds	r1, r4, r5
 80037e0:	428b      	cmp	r3, r1
 80037e2:	bf04      	itt	eq
 80037e4:	6819      	ldreq	r1, [r3, #0]
 80037e6:	685b      	ldreq	r3, [r3, #4]
 80037e8:	6063      	str	r3, [r4, #4]
 80037ea:	bf04      	itt	eq
 80037ec:	1949      	addeq	r1, r1, r5
 80037ee:	6021      	streq	r1, [r4, #0]
 80037f0:	6054      	str	r4, [r2, #4]
 80037f2:	e7ca      	b.n	800378a <_free_r+0x26>
 80037f4:	b003      	add	sp, #12
 80037f6:	bd30      	pop	{r4, r5, pc}
 80037f8:	200000e8 	.word	0x200000e8

080037fc <_read_r>:
 80037fc:	b538      	push	{r3, r4, r5, lr}
 80037fe:	4d07      	ldr	r5, [pc, #28]	; (800381c <_read_r+0x20>)
 8003800:	4604      	mov	r4, r0
 8003802:	4608      	mov	r0, r1
 8003804:	4611      	mov	r1, r2
 8003806:	2200      	movs	r2, #0
 8003808:	602a      	str	r2, [r5, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	f7fc fe9e 	bl	800054c <_read>
 8003810:	1c43      	adds	r3, r0, #1
 8003812:	d102      	bne.n	800381a <_read_r+0x1e>
 8003814:	682b      	ldr	r3, [r5, #0]
 8003816:	b103      	cbz	r3, 800381a <_read_r+0x1e>
 8003818:	6023      	str	r3, [r4, #0]
 800381a:	bd38      	pop	{r3, r4, r5, pc}
 800381c:	200000f0 	.word	0x200000f0

08003820 <_fstat_r>:
 8003820:	b538      	push	{r3, r4, r5, lr}
 8003822:	4d07      	ldr	r5, [pc, #28]	; (8003840 <_fstat_r+0x20>)
 8003824:	2300      	movs	r3, #0
 8003826:	4604      	mov	r4, r0
 8003828:	4608      	mov	r0, r1
 800382a:	4611      	mov	r1, r2
 800382c:	602b      	str	r3, [r5, #0]
 800382e:	f7fc fed2 	bl	80005d6 <_fstat>
 8003832:	1c43      	adds	r3, r0, #1
 8003834:	d102      	bne.n	800383c <_fstat_r+0x1c>
 8003836:	682b      	ldr	r3, [r5, #0]
 8003838:	b103      	cbz	r3, 800383c <_fstat_r+0x1c>
 800383a:	6023      	str	r3, [r4, #0]
 800383c:	bd38      	pop	{r3, r4, r5, pc}
 800383e:	bf00      	nop
 8003840:	200000f0 	.word	0x200000f0

08003844 <_isatty_r>:
 8003844:	b538      	push	{r3, r4, r5, lr}
 8003846:	4d06      	ldr	r5, [pc, #24]	; (8003860 <_isatty_r+0x1c>)
 8003848:	2300      	movs	r3, #0
 800384a:	4604      	mov	r4, r0
 800384c:	4608      	mov	r0, r1
 800384e:	602b      	str	r3, [r5, #0]
 8003850:	f7fc fed1 	bl	80005f6 <_isatty>
 8003854:	1c43      	adds	r3, r0, #1
 8003856:	d102      	bne.n	800385e <_isatty_r+0x1a>
 8003858:	682b      	ldr	r3, [r5, #0]
 800385a:	b103      	cbz	r3, 800385e <_isatty_r+0x1a>
 800385c:	6023      	str	r3, [r4, #0]
 800385e:	bd38      	pop	{r3, r4, r5, pc}
 8003860:	200000f0 	.word	0x200000f0

08003864 <_init>:
 8003864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003866:	bf00      	nop
 8003868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386a:	bc08      	pop	{r3}
 800386c:	469e      	mov	lr, r3
 800386e:	4770      	bx	lr

08003870 <_fini>:
 8003870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003872:	bf00      	nop
 8003874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003876:	bc08      	pop	{r3}
 8003878:	469e      	mov	lr, r3
 800387a:	4770      	bx	lr
