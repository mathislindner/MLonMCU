
FFTProfiling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006804  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008c54  08006998  08006998  00016998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5ec  0800f5ec  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800f5ec  0800f5ec  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f5ec  0800f5ec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5ec  0800f5ec  0001f5ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f5f0  0800f5f0  0001f5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800f5f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  200001dc  0800f7d0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  0800f7d0  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a29  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cfe  00000000  00000000  00029c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0002b938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000850  00000000  00000000  0002c2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000257f3  00000000  00000000  0002cb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8cb  00000000  00000000  000522fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e800e  00000000  00000000  0005cbc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00144bd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003558  00000000  00000000  00144c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000012d6  00000000  00000000  001481ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800697c 	.word	0x0800697c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800697c 	.word	0x0800697c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <ResetTimer>:
#include "CycleCounter.h"

void ResetTimer(){
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
	DWT_CYCCNT   = (unsigned int *)0xE0001004; //address of the register
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <ResetTimer+0x40>)
 8000bae:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <ResetTimer+0x44>)
 8000bb0:	601a      	str	r2, [r3, #0]
	DWT_CONTROL  = (unsigned int *)0xE0001000; //address of the register
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <ResetTimer+0x48>)
 8000bb4:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <ResetTimer+0x4c>)
 8000bb6:	601a      	str	r2, [r3, #0]
	SCB_DEMCR    = (unsigned int *)0xE000EDFC; //address of the register
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <ResetTimer+0x50>)
 8000bba:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <ResetTimer+0x54>)
 8000bbc:	601a      	str	r2, [r3, #0]
	*SCB_DEMCR   = *SCB_DEMCR | 0x01000000;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <ResetTimer+0x50>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <ResetTimer+0x50>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000bcc:	601a      	str	r2, [r3, #0]
	*DWT_CYCCNT  = 0; // reset the counter
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <ResetTimer+0x40>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
	*DWT_CONTROL = 0; 
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <ResetTimer+0x48>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	200001f8 	.word	0x200001f8
 8000bec:	e0001004 	.word	0xe0001004
 8000bf0:	200001fc 	.word	0x200001fc
 8000bf4:	e0001000 	.word	0xe0001000
 8000bf8:	20000200 	.word	0x20000200
 8000bfc:	e000edfc 	.word	0xe000edfc

08000c00 <StartTimer>:

void StartTimer(){
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
	*DWT_CONTROL = *DWT_CONTROL | 1 ; // enable the counter
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <StartTimer+0x20>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <StartTimer+0x20>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f042 0201 	orr.w	r2, r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	200001fc 	.word	0x200001fc

08000c24 <StopTimer>:

void StopTimer(){
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
	*DWT_CONTROL = *DWT_CONTROL & 0 ; // disable the counter    
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <StopTimer+0x1c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <StopTimer+0x1c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	200001fc 	.word	0x200001fc

08000c44 <getCycles>:

unsigned int getCycles(){
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
	return *DWT_CYCCNT;
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <getCycles+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	200001f8 	.word	0x200001f8

08000c5c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the serial port and Loop until the end of transmission */
  while (HAL_OK != HAL_USART_Transmit(&husart1, (uint8_t *) &ch, 1, 30000))
 8000c64:	bf00      	nop
 8000c66:	1d39      	adds	r1, r7, #4
 8000c68:	f247 5330 	movw	r3, #30000	; 0x7530
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <__io_putchar+0x28>)
 8000c70:	f002 f96e 	bl	8002f50 <HAL_USART_Transmit>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1f5      	bne.n	8000c66 <__io_putchar+0xa>
  {
    ;
  }
  return ch;
 8000c7a:	687b      	ldr	r3, [r7, #4]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000204 	.word	0x20000204

08000c88 <__io_getchar>:
  * @brief Retargets the C library scanf function to the USART.
  * @param None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. readwrite a character to the USART2 and Loop until the end of transmission */
  uint8_t ch = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_USART_Receive(&husart1, (uint8_t *)&ch, 1, 30000))
 8000c92:	bf00      	nop
 8000c94:	1df9      	adds	r1, r7, #7
 8000c96:	f247 5330 	movw	r3, #30000	; 0x7530
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <__io_getchar+0x2c>)
 8000c9e:	f002 fa05 	bl	80030ac <HAL_USART_Receive>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1f5      	bne.n	8000c94 <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000204 	.word	0x20000204

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	
	int naiveRuntime;
	int cmsisRuntime;
	
	arm_cfft_radix2_instance_f32* fft_struct = (arm_cfft_radix2_instance_f32*) calloc(1, sizeof(arm_cfft_radix2_instance_f32));
 8000cbe:	2114      	movs	r1, #20
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f003 f821 	bl	8003d08 <calloc>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	617b      	str	r3, [r7, #20]
	arm_cfft_radix2_init_f32(fft_struct, vectorSize, 0, 0);
 8000cca:	2300      	movs	r3, #0
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2140      	movs	r1, #64	; 0x40
 8000cd0:	6978      	ldr	r0, [r7, #20]
 8000cd2:	f002 ff15 	bl	8003b00 <arm_cfft_radix2_init_f32>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd6:	f000 fae2 	bl	800129e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cda:	f000 f86b 	bl	8000db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cde:	f000 f90d 	bl	8000efc <MX_GPIO_Init>
  MX_USART1_Init();
 8000ce2:	f000 f8df 	bl	8000ea4 <MX_USART1_Init>
  /* USER CODE BEGIN 2 */

  printf("Starting FFT...\r\n");
 8000ce6:	4830      	ldr	r0, [pc, #192]	; (8000da8 <main+0xf0>)
 8000ce8:	f003 fe5a 	bl	80049a0 <puts>
	/* NAIVE IMPLEMENTATION BEGIN */

	ResetTimer();
 8000cec:	f7ff ff5c 	bl	8000ba8 <ResetTimer>
  	StartTimer();
 8000cf0:	f7ff ff86 	bl	8000c00 <StartTimer>
	float* vectorReal = (float*) calloc(vectorSize, sizeof(float));
 8000cf4:	2104      	movs	r1, #4
 8000cf6:	2040      	movs	r0, #64	; 0x40
 8000cf8:	f003 f806 	bl	8003d08 <calloc>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	613b      	str	r3, [r7, #16]
	float* vectorImag = (float*) calloc(vectorSize, sizeof(float));
 8000d00:	2104      	movs	r1, #4
 8000d02:	2040      	movs	r0, #64	; 0x40
 8000d04:	f003 f800 	bl	8003d08 <calloc>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	60fb      	str	r3, [r7, #12]

	*/

	/* CMSIS IMPLEMENTATION BEGIN */
	
  	ResetTimer();
 8000d0c:	f7ff ff4c 	bl	8000ba8 <ResetTimer>
    StartTimer();
 8000d10:	f7ff ff76 	bl	8000c00 <StartTimer>
	float* cmsisVectorBuffer = (float*) calloc(2*vectorSize, sizeof(float));
 8000d14:	2104      	movs	r1, #4
 8000d16:	2080      	movs	r0, #128	; 0x80
 8000d18:	f002 fff6 	bl	8003d08 <calloc>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	60bb      	str	r3, [r7, #8]
	
	for(int i=0;i<vectorSize;i++){
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
 8000d24:	e009      	b.n	8000d3a <main+0x82>
		vectorReal[i] = 1;
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000d32:	601a      	str	r2, [r3, #0]
	for(int i=0;i<vectorSize;i++){
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	3301      	adds	r3, #1
 8000d38:	61fb      	str	r3, [r7, #28]
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d3e:	ddf2      	ble.n	8000d26 <main+0x6e>
	}
	
	for(int i=0;i<vectorSize;i++){
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
 8000d44:	e017      	b.n	8000d76 <main+0xbe>
		cmsisVectorBuffer[2*i] = vectorReal[i];
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	441a      	add	r2, r3
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	68b9      	ldr	r1, [r7, #8]
 8000d54:	440b      	add	r3, r1
 8000d56:	6812      	ldr	r2, [r2, #0]
 8000d58:	601a      	str	r2, [r3, #0]
		cmsisVectorBuffer[2*i+1] = vectorImag[i];
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	441a      	add	r2, r3
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	3304      	adds	r3, #4
 8000d68:	68b9      	ldr	r1, [r7, #8]
 8000d6a:	440b      	add	r3, r1
 8000d6c:	6812      	ldr	r2, [r2, #0]
 8000d6e:	601a      	str	r2, [r3, #0]
	for(int i=0;i<vectorSize;i++){
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	3301      	adds	r3, #1
 8000d74:	61bb      	str	r3, [r7, #24]
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	2b3f      	cmp	r3, #63	; 0x3f
 8000d7a:	dde4      	ble.n	8000d46 <main+0x8e>
	}
	//CHANGED FROM *" TO q
	arm_cfft_radix2_q31(fft_struct, cmsisVectorBuffer);
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f002 fea6 	bl	8003ad0 <arm_cfft_radix2_q31>
	
	StopTimer();
 8000d84:	f7ff ff4e 	bl	8000c24 <StopTimer>
	cmsisRuntime = getCycles();
 8000d88:	f7ff ff5c 	bl	8000c44 <getCycles>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	607b      	str	r3, [r7, #4]
	printf("CSMIS implementation took");
 8000d90:	4806      	ldr	r0, [pc, #24]	; (8000dac <main+0xf4>)
 8000d92:	f003 fd69 	bl	8004868 <iprintf>
	printf("%d", cmsisRuntime);
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <main+0xf8>)
 8000d9a:	f003 fd65 	bl	8004868 <iprintf>
	
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	printf("\n");
 8000d9e:	200a      	movs	r0, #10
 8000da0:	f003 fd7a 	bl	8004898 <putchar>
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <main+0xec>
 8000da6:	bf00      	nop
 8000da8:	08006998 	.word	0x08006998
 8000dac:	080069ac 	.word	0x080069ac
 8000db0:	080069c8 	.word	0x080069c8

08000db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b0b8      	sub	sp, #224	; 0xe0
 8000db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dbe:	2244      	movs	r2, #68	; 0x44
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 ffe8 	bl	8003d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2288      	movs	r2, #136	; 0x88
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f002 ffda 	bl	8003d98 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000de4:	2310      	movs	r3, #16
 8000de6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000dea:	2301      	movs	r3, #1
 8000dec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000df6:	2360      	movs	r3, #96	; 0x60
 8000df8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e02:	2301      	movs	r3, #1
 8000e04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000e0e:	2328      	movs	r3, #40	; 0x28
 8000e10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e14:	2307      	movs	r3, #7
 8000e16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 fd9c 	bl	8001968 <HAL_RCC_OscConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000e36:	f000 f879 	bl	8000f2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3a:	230f      	movs	r3, #15
 8000e3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e40:	2303      	movs	r3, #3
 8000e42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e58:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e5c:	2104      	movs	r1, #4
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f001 f96a 	bl	8002138 <HAL_RCC_ClockConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000e6a:	f000 f85f 	bl	8000f2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e76:	463b      	mov	r3, r7
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 fb63 	bl	8002544 <HAL_RCCEx_PeriphCLKConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000e84:	f000 f852 	bl	8000f2c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e88:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e8c:	f000 fd16 	bl	80018bc <HAL_PWREx_ControlVoltageScaling>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000e96:	f000 f849 	bl	8000f2c <Error_Handler>
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	37e0      	adds	r7, #224	; 0xe0
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <MX_USART1_Init+0x50>)
 8000eaa:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <MX_USART1_Init+0x54>)
 8000eac:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_USART1_Init+0x50>)
 8000eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb4:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <MX_USART1_Init+0x50>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <MX_USART1_Init+0x50>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_USART1_Init+0x50>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <MX_USART1_Init+0x50>)
 8000eca:	220c      	movs	r2, #12
 8000ecc:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_USART1_Init+0x50>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <MX_USART1_Init+0x50>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_USART1_Init+0x50>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000ee0:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <MX_USART1_Init+0x50>)
 8000ee2:	f001 ffeb 	bl	8002ebc <HAL_USART_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000eec:	f000 f81e 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000204 	.word	0x20000204
 8000ef8:	40013800 	.word	0x40013800

08000efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_GPIO_Init+0x2c>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <MX_GPIO_Init+0x2c>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_GPIO_Init+0x2c>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000

08000f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <HAL_MspInit+0x44>)
 8000f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f46:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <HAL_MspInit+0x44>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <HAL_MspInit+0x44>)
 8000f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <HAL_MspInit+0x44>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5e:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <HAL_MspInit+0x44>)
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f64:	6593      	str	r3, [r2, #88]	; 0x58
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_MspInit+0x44>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000

08000f84 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a17      	ldr	r2, [pc, #92]	; (8001000 <HAL_USART_MspInit+0x7c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d127      	bne.n	8000ff6 <HAL_USART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <HAL_USART_MspInit+0x80>)
 8000fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000faa:	4a16      	ldr	r2, [pc, #88]	; (8001004 <HAL_USART_MspInit+0x80>)
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <HAL_USART_MspInit+0x80>)
 8000fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_USART_MspInit+0x80>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	4a10      	ldr	r2, [pc, #64]	; (8001004 <HAL_USART_MspInit+0x80>)
 8000fc4:	f043 0302 	orr.w	r3, r3, #2
 8000fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_USART_MspInit+0x80>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB5     ------> USART1_CK
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fd6:	23e0      	movs	r3, #224	; 0xe0
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <HAL_USART_MspInit+0x84>)
 8000ff2:	f000 faab 	bl	800154c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40013800 	.word	0x40013800
 8001004:	40021000 	.word	0x40021000
 8001008:	48000400 	.word	0x48000400

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <HardFault_Handler+0x4>

08001020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <MemManage_Handler+0x4>

08001026 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <BusFault_Handler+0x4>

0800102c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <UsageFault_Handler+0x4>

08001032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001060:	f000 f970 	bl	8001344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
	return 1;
 800106c:	2301      	movs	r3, #1
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_kill>:

int _kill(int pid, int sig)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001082:	f002 fe49 	bl	8003d18 <__errno>
 8001086:	4603      	mov	r3, r0
 8001088:	2216      	movs	r2, #22
 800108a:	601a      	str	r2, [r3, #0]
	return -1;
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <_exit>:

void _exit (int status)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ffe7 	bl	8001078 <_kill>
	while (1) {}		/* Make sure we hang here */
 80010aa:	e7fe      	b.n	80010aa <_exit+0x12>

080010ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	e00a      	b.n	80010d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010be:	f7ff fde3 	bl	8000c88 <__io_getchar>
 80010c2:	4601      	mov	r1, r0
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	60ba      	str	r2, [r7, #8]
 80010ca:	b2ca      	uxtb	r2, r1
 80010cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	429a      	cmp	r2, r3
 80010da:	dbf0      	blt.n	80010be <_read+0x12>
	}

return len;
 80010dc:	687b      	ldr	r3, [r7, #4]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	60f8      	str	r0, [r7, #12]
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	e009      	b.n	800110c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	60ba      	str	r2, [r7, #8]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fdab 	bl	8000c5c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	3301      	adds	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	429a      	cmp	r2, r3
 8001112:	dbf1      	blt.n	80010f8 <_write+0x12>
	}
	return len;
 8001114:	687b      	ldr	r3, [r7, #4]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <_close>:

int _close(int file)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
	return -1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001146:	605a      	str	r2, [r3, #4]
	return 0;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <_isatty>:

int _isatty(int file)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
	return 1;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
	return 0;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <_sbrk+0x50>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <_sbrk+0x16>
		heap_end = &end;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <_sbrk+0x50>)
 800119a:	4a10      	ldr	r2, [pc, #64]	; (80011dc <_sbrk+0x54>)
 800119c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <_sbrk+0x50>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <_sbrk+0x50>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4413      	add	r3, r2
 80011ac:	466a      	mov	r2, sp
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d907      	bls.n	80011c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80011b2:	f002 fdb1 	bl	8003d18 <__errno>
 80011b6:	4603      	mov	r3, r0
 80011b8:	220c      	movs	r2, #12
 80011ba:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295
 80011c0:	e006      	b.n	80011d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <_sbrk+0x50>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a03      	ldr	r2, [pc, #12]	; (80011d8 <_sbrk+0x50>)
 80011cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80011ce:	68fb      	ldr	r3, [r7, #12]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000254 	.word	0x20000254
 80011dc:	20000270 	.word	0x20000270

080011e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <SystemInit+0x64>)
 80011e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ea:	4a16      	ldr	r2, [pc, #88]	; (8001244 <SystemInit+0x64>)
 80011ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <SystemInit+0x68>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a13      	ldr	r2, [pc, #76]	; (8001248 <SystemInit+0x68>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <SystemInit+0x68>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <SystemInit+0x68>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a0f      	ldr	r2, [pc, #60]	; (8001248 <SystemInit+0x68>)
 800120c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001210:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001214:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <SystemInit+0x68>)
 8001218:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800121c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <SystemInit+0x68>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a09      	ldr	r2, [pc, #36]	; (8001248 <SystemInit+0x68>)
 8001224:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001228:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800122a:	4b07      	ldr	r3, [pc, #28]	; (8001248 <SystemInit+0x68>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SystemInit+0x64>)
 8001232:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001236:	609a      	str	r2, [r3, #8]
#endif
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00
 8001248:	40021000 	.word	0x40021000

0800124c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800124c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001284 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001250:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001252:	e003      	b.n	800125c <LoopCopyDataInit>

08001254 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001256:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001258:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800125a:	3104      	adds	r1, #4

0800125c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800125c:	480b      	ldr	r0, [pc, #44]	; (800128c <LoopForever+0xa>)
	ldr	r3, =_edata
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001260:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001262:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001264:	d3f6      	bcc.n	8001254 <CopyDataInit>
	ldr	r2, =_sbss
 8001266:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001268:	e002      	b.n	8001270 <LoopFillZerobss>

0800126a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800126a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800126c:	f842 3b04 	str.w	r3, [r2], #4

08001270 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <LoopForever+0x16>)
	cmp	r2, r3
 8001272:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001274:	d3f9      	bcc.n	800126a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001276:	f7ff ffb3 	bl	80011e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800127a:	f002 fd53 	bl	8003d24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800127e:	f7ff fd1b 	bl	8000cb8 <main>

08001282 <LoopForever>:

LoopForever:
    b LoopForever
 8001282:	e7fe      	b.n	8001282 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001284:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001288:	0800f5f4 	.word	0x0800f5f4
	ldr	r0, =_sdata
 800128c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001290:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001294:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001298:	2000026c 	.word	0x2000026c

0800129c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC1_2_IRQHandler>

0800129e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012a4:	2300      	movs	r3, #0
 80012a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a8:	2003      	movs	r0, #3
 80012aa:	f000 f91b 	bl	80014e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ae:	2000      	movs	r0, #0
 80012b0:	f000 f80e 	bl	80012d0 <HAL_InitTick>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	71fb      	strb	r3, [r7, #7]
 80012be:	e001      	b.n	80012c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012c0:	f7ff fe3c 	bl	8000f3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012c4:	79fb      	ldrb	r3, [r7, #7]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012d8:	2300      	movs	r3, #0
 80012da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012dc:	4b16      	ldr	r3, [pc, #88]	; (8001338 <HAL_InitTick+0x68>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d022      	beq.n	800132a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_InitTick+0x6c>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <HAL_InitTick+0x68>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80012f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 f91a 	bl	8001532 <HAL_SYSTICK_Config>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d10f      	bne.n	8001324 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b0f      	cmp	r3, #15
 8001308:	d809      	bhi.n	800131e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800130a:	2200      	movs	r2, #0
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	f04f 30ff 	mov.w	r0, #4294967295
 8001312:	f000 f8f2 	bl	80014fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <HAL_InitTick+0x70>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	e007      	b.n	800132e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
 8001322:	e004      	b.n	800132e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	e001      	b.n	800132e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800132e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000008 	.word	0x20000008
 800133c:	20000000 	.word	0x20000000
 8001340:	20000004 	.word	0x20000004

08001344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_IncTick+0x1c>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <HAL_IncTick+0x20>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4413      	add	r3, r2
 8001352:	4a03      	ldr	r2, [pc, #12]	; (8001360 <HAL_IncTick+0x1c>)
 8001354:	6013      	str	r3, [r2, #0]
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	20000258 	.word	0x20000258
 8001364:	20000008 	.word	0x20000008

08001368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_GetTick+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000258 	.word	0x20000258

08001380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800139c:	4013      	ands	r3, r2
 800139e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b2:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	60d3      	str	r3, [r2, #12]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	0a1b      	lsrs	r3, r3, #8
 80013d2:	f003 0307 	and.w	r3, r3, #7
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db0a      	blt.n	800140e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	490c      	ldr	r1, [pc, #48]	; (8001430 <__NVIC_SetPriority+0x4c>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	0112      	lsls	r2, r2, #4
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	440b      	add	r3, r1
 8001408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800140c:	e00a      	b.n	8001424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4908      	ldr	r1, [pc, #32]	; (8001434 <__NVIC_SetPriority+0x50>)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	3b04      	subs	r3, #4
 800141c:	0112      	lsls	r2, r2, #4
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	440b      	add	r3, r1
 8001422:	761a      	strb	r2, [r3, #24]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000e100 	.word	0xe000e100
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	; 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f1c3 0307 	rsb	r3, r3, #7
 8001452:	2b04      	cmp	r3, #4
 8001454:	bf28      	it	cs
 8001456:	2304      	movcs	r3, #4
 8001458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3304      	adds	r3, #4
 800145e:	2b06      	cmp	r3, #6
 8001460:	d902      	bls.n	8001468 <NVIC_EncodePriority+0x30>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3b03      	subs	r3, #3
 8001466:	e000      	b.n	800146a <NVIC_EncodePriority+0x32>
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	f04f 32ff 	mov.w	r2, #4294967295
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	401a      	ands	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001480:	f04f 31ff 	mov.w	r1, #4294967295
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	43d9      	mvns	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	4313      	orrs	r3, r2
         );
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b0:	d301      	bcc.n	80014b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00f      	b.n	80014d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <SysTick_Config+0x40>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014be:	210f      	movs	r1, #15
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	f7ff ff8e 	bl	80013e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <SysTick_Config+0x40>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <SysTick_Config+0x40>)
 80014d0:	2207      	movs	r2, #7
 80014d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	e000e010 	.word	0xe000e010

080014e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff47 	bl	8001380 <__NVIC_SetPriorityGrouping>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800150c:	f7ff ff5c 	bl	80013c8 <__NVIC_GetPriorityGrouping>
 8001510:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	6978      	ldr	r0, [r7, #20]
 8001518:	f7ff ff8e 	bl	8001438 <NVIC_EncodePriority>
 800151c:	4602      	mov	r2, r0
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff5d 	bl	80013e4 <__NVIC_SetPriority>
}
 800152a:	bf00      	nop
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ffb0 	bl	80014a0 <SysTick_Config>
 8001540:	4603      	mov	r3, r0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155a:	e17f      	b.n	800185c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	2101      	movs	r1, #1
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	fa01 f303 	lsl.w	r3, r1, r3
 8001568:	4013      	ands	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 8171 	beq.w	8001856 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x38>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b12      	cmp	r3, #18
 8001582:	d123      	bne.n	80015cc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	08da      	lsrs	r2, r3, #3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3208      	adds	r2, #8
 800158c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001590:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	220f      	movs	r2, #15
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	691a      	ldr	r2, [r3, #16]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	08da      	lsrs	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3208      	adds	r2, #8
 80015c6:	6939      	ldr	r1, [r7, #16]
 80015c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	2203      	movs	r2, #3
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0203 	and.w	r2, r3, #3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d00b      	beq.n	8001620 <HAL_GPIO_Init+0xd4>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d007      	beq.n	8001620 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001614:	2b11      	cmp	r3, #17
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b12      	cmp	r3, #18
 800161e:	d130      	bne.n	8001682 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	2203      	movs	r2, #3
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001656:	2201      	movs	r2, #1
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	091b      	lsrs	r3, r3, #4
 800166c:	f003 0201 	and.w	r2, r3, #1
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	2b03      	cmp	r3, #3
 800168c:	d118      	bne.n	80016c0 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001692:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001694:	2201      	movs	r2, #1
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	08db      	lsrs	r3, r3, #3
 80016aa:	f003 0201 	and.w	r2, r3, #1
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	2203      	movs	r2, #3
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 80ac 	beq.w	8001856 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	4b5f      	ldr	r3, [pc, #380]	; (800187c <HAL_GPIO_Init+0x330>)
 8001700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001702:	4a5e      	ldr	r2, [pc, #376]	; (800187c <HAL_GPIO_Init+0x330>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6613      	str	r3, [r2, #96]	; 0x60
 800170a:	4b5c      	ldr	r3, [pc, #368]	; (800187c <HAL_GPIO_Init+0x330>)
 800170c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001716:	4a5a      	ldr	r2, [pc, #360]	; (8001880 <HAL_GPIO_Init+0x334>)
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	3302      	adds	r3, #2
 800171e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	220f      	movs	r2, #15
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001740:	d025      	beq.n	800178e <HAL_GPIO_Init+0x242>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4f      	ldr	r2, [pc, #316]	; (8001884 <HAL_GPIO_Init+0x338>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d01f      	beq.n	800178a <HAL_GPIO_Init+0x23e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4e      	ldr	r2, [pc, #312]	; (8001888 <HAL_GPIO_Init+0x33c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d019      	beq.n	8001786 <HAL_GPIO_Init+0x23a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4d      	ldr	r2, [pc, #308]	; (800188c <HAL_GPIO_Init+0x340>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d013      	beq.n	8001782 <HAL_GPIO_Init+0x236>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4c      	ldr	r2, [pc, #304]	; (8001890 <HAL_GPIO_Init+0x344>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d00d      	beq.n	800177e <HAL_GPIO_Init+0x232>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a4b      	ldr	r2, [pc, #300]	; (8001894 <HAL_GPIO_Init+0x348>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d007      	beq.n	800177a <HAL_GPIO_Init+0x22e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a4a      	ldr	r2, [pc, #296]	; (8001898 <HAL_GPIO_Init+0x34c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d101      	bne.n	8001776 <HAL_GPIO_Init+0x22a>
 8001772:	2306      	movs	r3, #6
 8001774:	e00c      	b.n	8001790 <HAL_GPIO_Init+0x244>
 8001776:	2307      	movs	r3, #7
 8001778:	e00a      	b.n	8001790 <HAL_GPIO_Init+0x244>
 800177a:	2305      	movs	r3, #5
 800177c:	e008      	b.n	8001790 <HAL_GPIO_Init+0x244>
 800177e:	2304      	movs	r3, #4
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x244>
 8001782:	2303      	movs	r3, #3
 8001784:	e004      	b.n	8001790 <HAL_GPIO_Init+0x244>
 8001786:	2302      	movs	r3, #2
 8001788:	e002      	b.n	8001790 <HAL_GPIO_Init+0x244>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_GPIO_Init+0x244>
 800178e:	2300      	movs	r3, #0
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	f002 0203 	and.w	r2, r2, #3
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	4093      	lsls	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017a0:	4937      	ldr	r1, [pc, #220]	; (8001880 <HAL_GPIO_Init+0x334>)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	089b      	lsrs	r3, r3, #2
 80017a6:	3302      	adds	r3, #2
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80017ae:	4b3b      	ldr	r3, [pc, #236]	; (800189c <HAL_GPIO_Init+0x350>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017d2:	4a32      	ldr	r2, [pc, #200]	; (800189c <HAL_GPIO_Init+0x350>)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80017d8:	4b30      	ldr	r3, [pc, #192]	; (800189c <HAL_GPIO_Init+0x350>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017fc:	4a27      	ldr	r2, [pc, #156]	; (800189c <HAL_GPIO_Init+0x350>)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001802:	4b26      	ldr	r3, [pc, #152]	; (800189c <HAL_GPIO_Init+0x350>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001826:	4a1d      	ldr	r2, [pc, #116]	; (800189c <HAL_GPIO_Init+0x350>)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <HAL_GPIO_Init+0x350>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	43db      	mvns	r3, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001850:	4a12      	ldr	r2, [pc, #72]	; (800189c <HAL_GPIO_Init+0x350>)
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa22 f303 	lsr.w	r3, r2, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	f47f ae78 	bne.w	800155c <HAL_GPIO_Init+0x10>
  }
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	371c      	adds	r7, #28
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	40010000 	.word	0x40010000
 8001884:	48000400 	.word	0x48000400
 8001888:	48000800 	.word	0x48000800
 800188c:	48000c00 	.word	0x48000c00
 8001890:	48001000 	.word	0x48001000
 8001894:	48001400 	.word	0x48001400
 8001898:	48001800 	.word	0x48001800
 800189c:	40010400 	.word	0x40010400

080018a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40007000 	.word	0x40007000

080018bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ca:	d130      	bne.n	800192e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018cc:	4b23      	ldr	r3, [pc, #140]	; (800195c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018d8:	d038      	beq.n	800194c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018e2:	4a1e      	ldr	r2, [pc, #120]	; (800195c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ea:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2232      	movs	r2, #50	; 0x32
 80018f0:	fb02 f303 	mul.w	r3, r2, r3
 80018f4:	4a1b      	ldr	r2, [pc, #108]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	0c9b      	lsrs	r3, r3, #18
 80018fc:	3301      	adds	r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001900:	e002      	b.n	8001908 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3b01      	subs	r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001914:	d102      	bne.n	800191c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f2      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800191c:	4b0f      	ldr	r3, [pc, #60]	; (800195c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001928:	d110      	bne.n	800194c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e00f      	b.n	800194e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800193a:	d007      	beq.n	800194c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800193c:	4b07      	ldr	r3, [pc, #28]	; (800195c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001944:	4a05      	ldr	r2, [pc, #20]	; (800195c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800194a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40007000 	.word	0x40007000
 8001960:	20000000 	.word	0x20000000
 8001964:	431bde83 	.word	0x431bde83

08001968 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e3d8      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800197a:	4b97      	ldr	r3, [pc, #604]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001984:	4b94      	ldr	r3, [pc, #592]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 80e4 	beq.w	8001b64 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d007      	beq.n	80019b2 <HAL_RCC_OscConfig+0x4a>
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	2b0c      	cmp	r3, #12
 80019a6:	f040 808b 	bne.w	8001ac0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	f040 8087 	bne.w	8001ac0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019b2:	4b89      	ldr	r3, [pc, #548]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <HAL_RCC_OscConfig+0x62>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e3b0      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1a      	ldr	r2, [r3, #32]
 80019ce:	4b82      	ldr	r3, [pc, #520]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d004      	beq.n	80019e4 <HAL_RCC_OscConfig+0x7c>
 80019da:	4b7f      	ldr	r3, [pc, #508]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019e2:	e005      	b.n	80019f0 <HAL_RCC_OscConfig+0x88>
 80019e4:	4b7c      	ldr	r3, [pc, #496]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 80019e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ea:	091b      	lsrs	r3, r3, #4
 80019ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d223      	bcs.n	8001a3c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 fd43 	bl	8002484 <RCC_SetFlashLatencyFromMSIRange>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e391      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a08:	4b73      	ldr	r3, [pc, #460]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a72      	ldr	r2, [pc, #456]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a0e:	f043 0308 	orr.w	r3, r3, #8
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	4b70      	ldr	r3, [pc, #448]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	496d      	ldr	r1, [pc, #436]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a26:	4b6c      	ldr	r3, [pc, #432]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	4968      	ldr	r1, [pc, #416]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	604b      	str	r3, [r1, #4]
 8001a3a:	e025      	b.n	8001a88 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a3c:	4b66      	ldr	r3, [pc, #408]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a65      	ldr	r2, [pc, #404]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a42:	f043 0308 	orr.w	r3, r3, #8
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b63      	ldr	r3, [pc, #396]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4960      	ldr	r1, [pc, #384]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a5a:	4b5f      	ldr	r3, [pc, #380]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	495b      	ldr	r1, [pc, #364]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d109      	bne.n	8001a88 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fd03 	bl	8002484 <RCC_SetFlashLatencyFromMSIRange>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e351      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a88:	f000 fc38 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	4b52      	ldr	r3, [pc, #328]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	091b      	lsrs	r3, r3, #4
 8001a94:	f003 030f 	and.w	r3, r3, #15
 8001a98:	4950      	ldr	r1, [pc, #320]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a9a:	5ccb      	ldrb	r3, [r1, r3]
 8001a9c:	f003 031f 	and.w	r3, r3, #31
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	4a4e      	ldr	r2, [pc, #312]	; (8001be0 <HAL_RCC_OscConfig+0x278>)
 8001aa6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001aa8:	4b4e      	ldr	r3, [pc, #312]	; (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fc0f 	bl	80012d0 <HAL_InitTick>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d052      	beq.n	8001b62 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	e335      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d032      	beq.n	8001b2e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ac8:	4b43      	ldr	r3, [pc, #268]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a42      	ldr	r2, [pc, #264]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fc48 	bl	8001368 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001adc:	f7ff fc44 	bl	8001368 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e31e      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aee:	4b3a      	ldr	r3, [pc, #232]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001afa:	4b37      	ldr	r3, [pc, #220]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a36      	ldr	r2, [pc, #216]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001b00:	f043 0308 	orr.w	r3, r3, #8
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	4931      	ldr	r1, [pc, #196]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b18:	4b2f      	ldr	r3, [pc, #188]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	492c      	ldr	r1, [pc, #176]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
 8001b2c:	e01a      	b.n	8001b64 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b2e:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a29      	ldr	r2, [pc, #164]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001b34:	f023 0301 	bic.w	r3, r3, #1
 8001b38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fc15 	bl	8001368 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b42:	f7ff fc11 	bl	8001368 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e2eb      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b54:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1f0      	bne.n	8001b42 <HAL_RCC_OscConfig+0x1da>
 8001b60:	e000      	b.n	8001b64 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b62:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d074      	beq.n	8001c5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d005      	beq.n	8001b82 <HAL_RCC_OscConfig+0x21a>
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	2b0c      	cmp	r3, #12
 8001b7a:	d10e      	bne.n	8001b9a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d10b      	bne.n	8001b9a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d064      	beq.n	8001c58 <HAL_RCC_OscConfig+0x2f0>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d160      	bne.n	8001c58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e2c8      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba2:	d106      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x24a>
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0b      	ldr	r2, [pc, #44]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	e026      	b.n	8001c00 <HAL_RCC_OscConfig+0x298>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bba:	d115      	bne.n	8001be8 <HAL_RCC_OscConfig+0x280>
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001bc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a02      	ldr	r2, [pc, #8]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	e014      	b.n	8001c00 <HAL_RCC_OscConfig+0x298>
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	080069cc 	.word	0x080069cc
 8001be0:	20000000 	.word	0x20000000
 8001be4:	20000004 	.word	0x20000004
 8001be8:	4ba0      	ldr	r3, [pc, #640]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a9f      	ldr	r2, [pc, #636]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b9d      	ldr	r3, [pc, #628]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a9c      	ldr	r2, [pc, #624]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d013      	beq.n	8001c30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7ff fbae 	bl	8001368 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff fbaa 	bl	8001368 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	; 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e284      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c22:	4b92      	ldr	r3, [pc, #584]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0x2a8>
 8001c2e:	e014      	b.n	8001c5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff fb9a 	bl	8001368 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff fb96 	bl	8001368 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	; 0x64
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e270      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c4a:	4b88      	ldr	r3, [pc, #544]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x2d0>
 8001c56:	e000      	b.n	8001c5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d060      	beq.n	8001d28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_OscConfig+0x310>
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2b0c      	cmp	r3, #12
 8001c70:	d119      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d116      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c78:	4b7c      	ldr	r3, [pc, #496]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_RCC_OscConfig+0x328>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e24d      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c90:	4b76      	ldr	r3, [pc, #472]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	061b      	lsls	r3, r3, #24
 8001c9e:	4973      	ldr	r1, [pc, #460]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ca4:	e040      	b.n	8001d28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d023      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cae:	4b6f      	ldr	r3, [pc, #444]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a6e      	ldr	r2, [pc, #440]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7ff fb55 	bl	8001368 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc2:	f7ff fb51 	bl	8001368 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e22b      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cd4:	4b65      	ldr	r3, [pc, #404]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce0:	4b62      	ldr	r3, [pc, #392]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	061b      	lsls	r3, r3, #24
 8001cee:	495f      	ldr	r1, [pc, #380]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]
 8001cf4:	e018      	b.n	8001d28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf6:	4b5d      	ldr	r3, [pc, #372]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a5c      	ldr	r2, [pc, #368]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d02:	f7ff fb31 	bl	8001368 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d0a:	f7ff fb2d 	bl	8001368 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e207      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d1c:	4b53      	ldr	r3, [pc, #332]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d03c      	beq.n	8001dae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d01c      	beq.n	8001d76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d3c:	4b4b      	ldr	r3, [pc, #300]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d42:	4a4a      	ldr	r2, [pc, #296]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4c:	f7ff fb0c 	bl	8001368 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d54:	f7ff fb08 	bl	8001368 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e1e2      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d66:	4b41      	ldr	r3, [pc, #260]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0ef      	beq.n	8001d54 <HAL_RCC_OscConfig+0x3ec>
 8001d74:	e01b      	b.n	8001dae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d76:	4b3d      	ldr	r3, [pc, #244]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7c:	4a3b      	ldr	r2, [pc, #236]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001d7e:	f023 0301 	bic.w	r3, r3, #1
 8001d82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d86:	f7ff faef 	bl	8001368 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d8e:	f7ff faeb 	bl	8001368 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e1c5      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da0:	4b32      	ldr	r3, [pc, #200]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1ef      	bne.n	8001d8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 80a6 	beq.w	8001f08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001dc0:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10d      	bne.n	8001de8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dcc:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd0:	4a26      	ldr	r2, [pc, #152]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	6593      	str	r3, [r2, #88]	; 0x58
 8001dd8:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de4:	2301      	movs	r3, #1
 8001de6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de8:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <HAL_RCC_OscConfig+0x508>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d118      	bne.n	8001e26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001df4:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <HAL_RCC_OscConfig+0x508>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1d      	ldr	r2, [pc, #116]	; (8001e70 <HAL_RCC_OscConfig+0x508>)
 8001dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e00:	f7ff fab2 	bl	8001368 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e08:	f7ff faae 	bl	8001368 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e188      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <HAL_RCC_OscConfig+0x508>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d108      	bne.n	8001e40 <HAL_RCC_OscConfig+0x4d8>
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e34:	4a0d      	ldr	r2, [pc, #52]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e3e:	e029      	b.n	8001e94 <HAL_RCC_OscConfig+0x52c>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b05      	cmp	r3, #5
 8001e46:	d115      	bne.n	8001e74 <HAL_RCC_OscConfig+0x50c>
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4e:	4a07      	ldr	r2, [pc, #28]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5e:	4a03      	ldr	r2, [pc, #12]	; (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e68:	e014      	b.n	8001e94 <HAL_RCC_OscConfig+0x52c>
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40007000 	.word	0x40007000
 8001e74:	4b91      	ldr	r3, [pc, #580]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7a:	4a90      	ldr	r2, [pc, #576]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e84:	4b8d      	ldr	r3, [pc, #564]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 8001e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e8a:	4a8c      	ldr	r2, [pc, #560]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 8001e8c:	f023 0304 	bic.w	r3, r3, #4
 8001e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d016      	beq.n	8001eca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9c:	f7ff fa64 	bl	8001368 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea4:	f7ff fa60 	bl	8001368 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e138      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eba:	4b80      	ldr	r3, [pc, #512]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 8001ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0ed      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x53c>
 8001ec8:	e015      	b.n	8001ef6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eca:	f7ff fa4d 	bl	8001368 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed2:	f7ff fa49 	bl	8001368 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e121      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ee8:	4b74      	ldr	r3, [pc, #464]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 8001eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1ed      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ef6:	7ffb      	ldrb	r3, [r7, #31]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d105      	bne.n	8001f08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efc:	4b6f      	ldr	r3, [pc, #444]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	4a6e      	ldr	r2, [pc, #440]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 8001f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f06:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 810c 	beq.w	800212a <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	f040 80d4 	bne.w	80020c4 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f1c:	4b67      	ldr	r3, [pc, #412]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f003 0203 	and.w	r2, r3, #3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d130      	bne.n	8001f92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d127      	bne.n	8001f92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d11f      	bne.n	8001f92 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f5c:	2a07      	cmp	r2, #7
 8001f5e:	bf14      	ite	ne
 8001f60:	2201      	movne	r2, #1
 8001f62:	2200      	moveq	r2, #0
 8001f64:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d113      	bne.n	8001f92 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f74:	085b      	lsrs	r3, r3, #1
 8001f76:	3b01      	subs	r3, #1
 8001f78:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d109      	bne.n	8001f92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	085b      	lsrs	r3, r3, #1
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d06e      	beq.n	8002070 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	2b0c      	cmp	r3, #12
 8001f96:	d069      	beq.n	800206c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f98:	4b48      	ldr	r3, [pc, #288]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d105      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fa4:	4b45      	ldr	r3, [pc, #276]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0bb      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fb4:	4b41      	ldr	r3, [pc, #260]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a40      	ldr	r2, [pc, #256]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 8001fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fbe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fc0:	f7ff f9d2 	bl	8001368 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7ff f9ce 	bl	8001368 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e0a8      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fda:	4b38      	ldr	r3, [pc, #224]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe6:	4b35      	ldr	r3, [pc, #212]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	4b35      	ldr	r3, [pc, #212]	; (80020c0 <HAL_RCC_OscConfig+0x758>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ff6:	3a01      	subs	r2, #1
 8001ff8:	0112      	lsls	r2, r2, #4
 8001ffa:	4311      	orrs	r1, r2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002000:	0212      	lsls	r2, r2, #8
 8002002:	4311      	orrs	r1, r2
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002008:	0852      	lsrs	r2, r2, #1
 800200a:	3a01      	subs	r2, #1
 800200c:	0552      	lsls	r2, r2, #21
 800200e:	4311      	orrs	r1, r2
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002014:	0852      	lsrs	r2, r2, #1
 8002016:	3a01      	subs	r2, #1
 8002018:	0652      	lsls	r2, r2, #25
 800201a:	4311      	orrs	r1, r2
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002020:	0912      	lsrs	r2, r2, #4
 8002022:	0452      	lsls	r2, r2, #17
 8002024:	430a      	orrs	r2, r1
 8002026:	4925      	ldr	r1, [pc, #148]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 8002028:	4313      	orrs	r3, r2
 800202a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800202c:	4b23      	ldr	r3, [pc, #140]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a22      	ldr	r2, [pc, #136]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 8002032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002036:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002038:	4b20      	ldr	r3, [pc, #128]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4a1f      	ldr	r2, [pc, #124]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 800203e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002042:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002044:	f7ff f990 	bl	8001368 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204c:	f7ff f98c 	bl	8001368 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e066      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800206a:	e05e      	b.n	800212a <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e05d      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d156      	bne.n	800212a <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800207c:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a0e      	ldr	r2, [pc, #56]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 8002082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002086:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 800208e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002092:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002094:	f7ff f968 	bl	8001368 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209c:	f7ff f964 	bl	8001368 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e03e      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ae:	4b03      	ldr	r3, [pc, #12]	; (80020bc <HAL_RCC_OscConfig+0x754>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x734>
 80020ba:	e036      	b.n	800212a <HAL_RCC_OscConfig+0x7c2>
 80020bc:	40021000 	.word	0x40021000
 80020c0:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	2b0c      	cmp	r3, #12
 80020c8:	d02d      	beq.n	8002126 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ca:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <HAL_RCC_OscConfig+0x7cc>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a19      	ldr	r2, [pc, #100]	; (8002134 <HAL_RCC_OscConfig+0x7cc>)
 80020d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020d4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80020d6:	4b17      	ldr	r3, [pc, #92]	; (8002134 <HAL_RCC_OscConfig+0x7cc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d105      	bne.n	80020ee <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <HAL_RCC_OscConfig+0x7cc>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	4a13      	ldr	r2, [pc, #76]	; (8002134 <HAL_RCC_OscConfig+0x7cc>)
 80020e8:	f023 0303 	bic.w	r3, r3, #3
 80020ec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <HAL_RCC_OscConfig+0x7cc>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	4a10      	ldr	r2, [pc, #64]	; (8002134 <HAL_RCC_OscConfig+0x7cc>)
 80020f4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80020f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020fc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fe:	f7ff f933 	bl	8001368 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002106:	f7ff f92f 	bl	8001368 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e009      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_RCC_OscConfig+0x7cc>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f0      	bne.n	8002106 <HAL_RCC_OscConfig+0x79e>
 8002124:	e001      	b.n	800212a <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3720      	adds	r7, #32
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000

08002138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0c8      	b.n	80022de <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800214c:	4b66      	ldr	r3, [pc, #408]	; (80022e8 <HAL_RCC_ClockConfig+0x1b0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d910      	bls.n	800217c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215a:	4b63      	ldr	r3, [pc, #396]	; (80022e8 <HAL_RCC_ClockConfig+0x1b0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 0207 	bic.w	r2, r3, #7
 8002162:	4961      	ldr	r1, [pc, #388]	; (80022e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	4313      	orrs	r3, r2
 8002168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b5f      	ldr	r3, [pc, #380]	; (80022e8 <HAL_RCC_ClockConfig+0x1b0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0b0      	b.n	80022de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d04c      	beq.n	8002222 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d107      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002190:	4b56      	ldr	r3, [pc, #344]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d121      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e09e      	b.n	80022de <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d107      	bne.n	80021b8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a8:	4b50      	ldr	r3, [pc, #320]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d115      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e092      	b.n	80022de <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d107      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021c0:	4b4a      	ldr	r3, [pc, #296]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d109      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e086      	b.n	80022de <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021d0:	4b46      	ldr	r3, [pc, #280]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e07e      	b.n	80022de <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021e0:	4b42      	ldr	r3, [pc, #264]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f023 0203 	bic.w	r2, r3, #3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	493f      	ldr	r1, [pc, #252]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021f2:	f7ff f8b9 	bl	8001368 <HAL_GetTick>
 80021f6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f8:	e00a      	b.n	8002210 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021fa:	f7ff f8b5 	bl	8001368 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f241 3288 	movw	r2, #5000	; 0x1388
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e066      	b.n	80022de <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002210:	4b36      	ldr	r3, [pc, #216]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 020c 	and.w	r2, r3, #12
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	429a      	cmp	r2, r3
 8002220:	d1eb      	bne.n	80021fa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d008      	beq.n	8002240 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800222e:	4b2f      	ldr	r3, [pc, #188]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	492c      	ldr	r1, [pc, #176]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 800223c:	4313      	orrs	r3, r2
 800223e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002240:	4b29      	ldr	r3, [pc, #164]	; (80022e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d210      	bcs.n	8002270 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224e:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 0207 	bic.w	r2, r3, #7
 8002256:	4924      	ldr	r1, [pc, #144]	; (80022e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800225e:	4b22      	ldr	r3, [pc, #136]	; (80022e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d001      	beq.n	8002270 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e036      	b.n	80022de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4918      	ldr	r1, [pc, #96]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 800228a:	4313      	orrs	r3, r2
 800228c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d009      	beq.n	80022ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800229a:	4b14      	ldr	r3, [pc, #80]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4910      	ldr	r1, [pc, #64]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ae:	f000 f825 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 80022b2:	4602      	mov	r2, r0
 80022b4:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	490c      	ldr	r1, [pc, #48]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 80022c0:	5ccb      	ldrb	r3, [r1, r3]
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe fffc 	bl	80012d0 <HAL_InitTick>
 80022d8:	4603      	mov	r3, r0
 80022da:	72fb      	strb	r3, [r7, #11]

  return status;
 80022dc:	7afb      	ldrb	r3, [r7, #11]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40022000 	.word	0x40022000
 80022ec:	40021000 	.word	0x40021000
 80022f0:	080069cc 	.word	0x080069cc
 80022f4:	20000000 	.word	0x20000000
 80022f8:	20000004 	.word	0x20000004

080022fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800230a:	4b3e      	ldr	r3, [pc, #248]	; (8002404 <HAL_RCC_GetSysClockFreq+0x108>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002314:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <HAL_RCC_GetSysClockFreq+0x108>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x34>
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d121      	bne.n	800236e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d11e      	bne.n	800236e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002330:	4b34      	ldr	r3, [pc, #208]	; (8002404 <HAL_RCC_GetSysClockFreq+0x108>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d107      	bne.n	800234c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800233c:	4b31      	ldr	r3, [pc, #196]	; (8002404 <HAL_RCC_GetSysClockFreq+0x108>)
 800233e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002342:	0a1b      	lsrs	r3, r3, #8
 8002344:	f003 030f 	and.w	r3, r3, #15
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	e005      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800234c:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <HAL_RCC_GetSysClockFreq+0x108>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002358:	4a2b      	ldr	r2, [pc, #172]	; (8002408 <HAL_RCC_GetSysClockFreq+0x10c>)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002360:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10d      	bne.n	8002384 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	2b04      	cmp	r3, #4
 8002372:	d102      	bne.n	800237a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002374:	4b25      	ldr	r3, [pc, #148]	; (800240c <HAL_RCC_GetSysClockFreq+0x110>)
 8002376:	61bb      	str	r3, [r7, #24]
 8002378:	e004      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b08      	cmp	r3, #8
 800237e:	d101      	bne.n	8002384 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002380:	4b23      	ldr	r3, [pc, #140]	; (8002410 <HAL_RCC_GetSysClockFreq+0x114>)
 8002382:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	2b0c      	cmp	r3, #12
 8002388:	d134      	bne.n	80023f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800238a:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <HAL_RCC_GetSysClockFreq+0x108>)
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d003      	beq.n	80023a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b03      	cmp	r3, #3
 800239e:	d003      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0xac>
 80023a0:	e005      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023a2:	4b1a      	ldr	r3, [pc, #104]	; (800240c <HAL_RCC_GetSysClockFreq+0x110>)
 80023a4:	617b      	str	r3, [r7, #20]
      break;
 80023a6:	e005      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023a8:	4b19      	ldr	r3, [pc, #100]	; (8002410 <HAL_RCC_GetSysClockFreq+0x114>)
 80023aa:	617b      	str	r3, [r7, #20]
      break;
 80023ac:	e002      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	617b      	str	r3, [r7, #20]
      break;
 80023b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <HAL_RCC_GetSysClockFreq+0x108>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	3301      	adds	r3, #1
 80023c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	fb03 f202 	mul.w	r2, r3, r2
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <HAL_RCC_GetSysClockFreq+0x108>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	0e5b      	lsrs	r3, r3, #25
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	3301      	adds	r3, #1
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023f4:	69bb      	ldr	r3, [r7, #24]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	; 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40021000 	.word	0x40021000
 8002408:	080069e4 	.word	0x080069e4
 800240c:	00f42400 	.word	0x00f42400
 8002410:	007a1200 	.word	0x007a1200

08002414 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <HAL_RCC_GetHCLKFreq+0x14>)
 800241a:	681b      	ldr	r3, [r3, #0]
}
 800241c:	4618      	mov	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	20000000 	.word	0x20000000

0800242c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002430:	f7ff fff0 	bl	8002414 <HAL_RCC_GetHCLKFreq>
 8002434:	4602      	mov	r2, r0
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	0a1b      	lsrs	r3, r3, #8
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	4904      	ldr	r1, [pc, #16]	; (8002454 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002442:	5ccb      	ldrb	r3, [r1, r3]
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800244c:	4618      	mov	r0, r3
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000
 8002454:	080069dc 	.word	0x080069dc

08002458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800245c:	f7ff ffda 	bl	8002414 <HAL_RCC_GetHCLKFreq>
 8002460:	4602      	mov	r2, r0
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	0adb      	lsrs	r3, r3, #11
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	4904      	ldr	r1, [pc, #16]	; (8002480 <HAL_RCC_GetPCLK2Freq+0x28>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	f003 031f 	and.w	r3, r3, #31
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	080069dc 	.word	0x080069dc

08002484 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800248c:	2300      	movs	r3, #0
 800248e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002490:	4b2a      	ldr	r3, [pc, #168]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800249c:	f7ff fa00 	bl	80018a0 <HAL_PWREx_GetVoltageRange>
 80024a0:	6178      	str	r0, [r7, #20]
 80024a2:	e014      	b.n	80024ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024a4:	4b25      	ldr	r3, [pc, #148]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	4a24      	ldr	r2, [pc, #144]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ae:	6593      	str	r3, [r2, #88]	; 0x58
 80024b0:	4b22      	ldr	r3, [pc, #136]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024bc:	f7ff f9f0 	bl	80018a0 <HAL_PWREx_GetVoltageRange>
 80024c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024c2:	4b1e      	ldr	r3, [pc, #120]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c6:	4a1d      	ldr	r2, [pc, #116]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d4:	d10b      	bne.n	80024ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b80      	cmp	r3, #128	; 0x80
 80024da:	d919      	bls.n	8002510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2ba0      	cmp	r3, #160	; 0xa0
 80024e0:	d902      	bls.n	80024e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024e2:	2302      	movs	r3, #2
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	e013      	b.n	8002510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024e8:	2301      	movs	r3, #1
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	e010      	b.n	8002510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b80      	cmp	r3, #128	; 0x80
 80024f2:	d902      	bls.n	80024fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024f4:	2303      	movs	r3, #3
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	e00a      	b.n	8002510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b80      	cmp	r3, #128	; 0x80
 80024fe:	d102      	bne.n	8002506 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002500:	2302      	movs	r3, #2
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	e004      	b.n	8002510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b70      	cmp	r3, #112	; 0x70
 800250a:	d101      	bne.n	8002510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800250c:	2301      	movs	r3, #1
 800250e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f023 0207 	bic.w	r2, r3, #7
 8002518:	4909      	ldr	r1, [pc, #36]	; (8002540 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002520:	4b07      	ldr	r3, [pc, #28]	; (8002540 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	429a      	cmp	r2, r3
 800252c:	d001      	beq.n	8002532 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000
 8002540:	40022000 	.word	0x40022000

08002544 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800254c:	2300      	movs	r3, #0
 800254e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002550:	2300      	movs	r3, #0
 8002552:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800255c:	2b00      	cmp	r3, #0
 800255e:	d041      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002564:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002568:	d02a      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800256a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800256e:	d824      	bhi.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002570:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002574:	d008      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002576:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800257a:	d81e      	bhi.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002580:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002584:	d010      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002586:	e018      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002588:	4b86      	ldr	r3, [pc, #536]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4a85      	ldr	r2, [pc, #532]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002592:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002594:	e015      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3304      	adds	r3, #4
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fabb 	bl	8002b18 <RCCEx_PLLSAI1_Config>
 80025a2:	4603      	mov	r3, r0
 80025a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025a6:	e00c      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3320      	adds	r3, #32
 80025ac:	2100      	movs	r1, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 fba6 	bl	8002d00 <RCCEx_PLLSAI2_Config>
 80025b4:	4603      	mov	r3, r0
 80025b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025b8:	e003      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	74fb      	strb	r3, [r7, #19]
      break;
 80025be:	e000      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025c2:	7cfb      	ldrb	r3, [r7, #19]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10b      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025c8:	4b76      	ldr	r3, [pc, #472]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025d6:	4973      	ldr	r1, [pc, #460]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025de:	e001      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e0:	7cfb      	ldrb	r3, [r7, #19]
 80025e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d041      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025f8:	d02a      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80025fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025fe:	d824      	bhi.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002600:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002604:	d008      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002606:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800260a:	d81e      	bhi.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002614:	d010      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002616:	e018      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002618:	4b62      	ldr	r3, [pc, #392]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a61      	ldr	r2, [pc, #388]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002622:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002624:	e015      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3304      	adds	r3, #4
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f000 fa73 	bl	8002b18 <RCCEx_PLLSAI1_Config>
 8002632:	4603      	mov	r3, r0
 8002634:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002636:	e00c      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3320      	adds	r3, #32
 800263c:	2100      	movs	r1, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f000 fb5e 	bl	8002d00 <RCCEx_PLLSAI2_Config>
 8002644:	4603      	mov	r3, r0
 8002646:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002648:	e003      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	74fb      	strb	r3, [r7, #19]
      break;
 800264e:	e000      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002650:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002652:	7cfb      	ldrb	r3, [r7, #19]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10b      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002658:	4b52      	ldr	r3, [pc, #328]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002666:	494f      	ldr	r1, [pc, #316]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800266e:	e001      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002670:	7cfb      	ldrb	r3, [r7, #19]
 8002672:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80a0 	beq.w	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002686:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002696:	2300      	movs	r3, #0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00d      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269c:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	4a40      	ldr	r2, [pc, #256]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a6:	6593      	str	r3, [r2, #88]	; 0x58
 80026a8:	4b3e      	ldr	r3, [pc, #248]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b4:	2301      	movs	r3, #1
 80026b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026b8:	4b3b      	ldr	r3, [pc, #236]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a3a      	ldr	r2, [pc, #232]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026c4:	f7fe fe50 	bl	8001368 <HAL_GetTick>
 80026c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026ca:	e009      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026cc:	f7fe fe4c 	bl	8001368 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d902      	bls.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	74fb      	strb	r3, [r7, #19]
        break;
 80026de:	e005      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026e0:	4b31      	ldr	r3, [pc, #196]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ef      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80026ec:	7cfb      	ldrb	r3, [r7, #19]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d15c      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026f2:	4b2c      	ldr	r3, [pc, #176]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01f      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	429a      	cmp	r2, r3
 800270e:	d019      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002710:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800271a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800271c:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002722:	4a20      	ldr	r2, [pc, #128]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800272c:	4b1d      	ldr	r3, [pc, #116]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002732:	4a1c      	ldr	r2, [pc, #112]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800273c:	4a19      	ldr	r2, [pc, #100]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d016      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274e:	f7fe fe0b 	bl	8001368 <HAL_GetTick>
 8002752:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002754:	e00b      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002756:	f7fe fe07 	bl	8001368 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	f241 3288 	movw	r2, #5000	; 0x1388
 8002764:	4293      	cmp	r3, r2
 8002766:	d902      	bls.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	74fb      	strb	r3, [r7, #19]
            break;
 800276c:	e006      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800276e:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0ec      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800277c:	7cfb      	ldrb	r3, [r7, #19]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10c      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002782:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002788:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002792:	4904      	ldr	r1, [pc, #16]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800279a:	e009      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800279c:	7cfb      	ldrb	r3, [r7, #19]
 800279e:	74bb      	strb	r3, [r7, #18]
 80027a0:	e006      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ac:	7cfb      	ldrb	r3, [r7, #19]
 80027ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027b0:	7c7b      	ldrb	r3, [r7, #17]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d105      	bne.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b6:	4b9e      	ldr	r3, [pc, #632]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ba:	4a9d      	ldr	r2, [pc, #628]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027ce:	4b98      	ldr	r3, [pc, #608]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d4:	f023 0203 	bic.w	r2, r3, #3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027dc:	4994      	ldr	r1, [pc, #592]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027f0:	4b8f      	ldr	r3, [pc, #572]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f6:	f023 020c 	bic.w	r2, r3, #12
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	498c      	ldr	r1, [pc, #560]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002812:	4b87      	ldr	r3, [pc, #540]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002818:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	4983      	ldr	r1, [pc, #524]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002834:	4b7e      	ldr	r3, [pc, #504]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	497b      	ldr	r1, [pc, #492]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002856:	4b76      	ldr	r3, [pc, #472]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002864:	4972      	ldr	r1, [pc, #456]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002878:	4b6d      	ldr	r3, [pc, #436]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002886:	496a      	ldr	r1, [pc, #424]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800289a:	4b65      	ldr	r3, [pc, #404]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a8:	4961      	ldr	r1, [pc, #388]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028bc:	4b5c      	ldr	r3, [pc, #368]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ca:	4959      	ldr	r1, [pc, #356]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028de:	4b54      	ldr	r3, [pc, #336]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ec:	4950      	ldr	r1, [pc, #320]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002900:	4b4b      	ldr	r3, [pc, #300]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290e:	4948      	ldr	r1, [pc, #288]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002922:	4b43      	ldr	r3, [pc, #268]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002928:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002930:	493f      	ldr	r1, [pc, #252]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d028      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002944:	4b3a      	ldr	r3, [pc, #232]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002952:	4937      	ldr	r1, [pc, #220]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800295e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002962:	d106      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002964:	4b32      	ldr	r3, [pc, #200]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4a31      	ldr	r2, [pc, #196]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800296e:	60d3      	str	r3, [r2, #12]
 8002970:	e011      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002976:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800297a:	d10c      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3304      	adds	r3, #4
 8002980:	2101      	movs	r1, #1
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f8c8 	bl	8002b18 <RCCEx_PLLSAI1_Config>
 8002988:	4603      	mov	r3, r0
 800298a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800298c:	7cfb      	ldrb	r3, [r7, #19]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002992:	7cfb      	ldrb	r3, [r7, #19]
 8002994:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d028      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029a2:	4b23      	ldr	r3, [pc, #140]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b0:	491f      	ldr	r1, [pc, #124]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029c0:	d106      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c2:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	4a1a      	ldr	r2, [pc, #104]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029cc:	60d3      	str	r3, [r2, #12]
 80029ce:	e011      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3304      	adds	r3, #4
 80029de:	2101      	movs	r1, #1
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 f899 	bl	8002b18 <RCCEx_PLLSAI1_Config>
 80029e6:	4603      	mov	r3, r0
 80029e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ea:	7cfb      	ldrb	r3, [r7, #19]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80029f0:	7cfb      	ldrb	r3, [r7, #19]
 80029f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d02b      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0e:	4908      	ldr	r1, [pc, #32]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a1e:	d109      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a20:	4b03      	ldr	r3, [pc, #12]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4a02      	ldr	r2, [pc, #8]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a2a:	60d3      	str	r3, [r2, #12]
 8002a2c:	e014      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3304      	adds	r3, #4
 8002a42:	2101      	movs	r1, #1
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 f867 	bl	8002b18 <RCCEx_PLLSAI1_Config>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a4e:	7cfb      	ldrb	r3, [r7, #19]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a54:	7cfb      	ldrb	r3, [r7, #19]
 8002a56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d02f      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a64:	4b2b      	ldr	r3, [pc, #172]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a72:	4928      	ldr	r1, [pc, #160]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a82:	d10d      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3304      	adds	r3, #4
 8002a88:	2102      	movs	r1, #2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f844 	bl	8002b18 <RCCEx_PLLSAI1_Config>
 8002a90:	4603      	mov	r3, r0
 8002a92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a94:	7cfb      	ldrb	r3, [r7, #19]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d014      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a9a:	7cfb      	ldrb	r3, [r7, #19]
 8002a9c:	74bb      	strb	r3, [r7, #18]
 8002a9e:	e011      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3320      	adds	r3, #32
 8002aae:	2102      	movs	r1, #2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 f925 	bl	8002d00 <RCCEx_PLLSAI2_Config>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aba:	7cfb      	ldrb	r3, [r7, #19]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ac0:	7cfb      	ldrb	r3, [r7, #19]
 8002ac2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ad0:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	490d      	ldr	r1, [pc, #52]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00b      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002af2:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b02:	4904      	ldr	r1, [pc, #16]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b0a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40021000 	.word	0x40021000

08002b18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b26:	4b75      	ldr	r3, [pc, #468]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d018      	beq.n	8002b64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b32:	4b72      	ldr	r3, [pc, #456]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 0203 	and.w	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d10d      	bne.n	8002b5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
       ||
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b4a:	4b6c      	ldr	r3, [pc, #432]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	091b      	lsrs	r3, r3, #4
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
       ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d047      	beq.n	8002bee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
 8002b62:	e044      	b.n	8002bee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d018      	beq.n	8002b9e <RCCEx_PLLSAI1_Config+0x86>
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d825      	bhi.n	8002bbc <RCCEx_PLLSAI1_Config+0xa4>
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d002      	beq.n	8002b7a <RCCEx_PLLSAI1_Config+0x62>
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d009      	beq.n	8002b8c <RCCEx_PLLSAI1_Config+0x74>
 8002b78:	e020      	b.n	8002bbc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b7a:	4b60      	ldr	r3, [pc, #384]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d11d      	bne.n	8002bc2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b8a:	e01a      	b.n	8002bc2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b8c:	4b5b      	ldr	r3, [pc, #364]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d116      	bne.n	8002bc6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9c:	e013      	b.n	8002bc6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b9e:	4b57      	ldr	r3, [pc, #348]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10f      	bne.n	8002bca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002baa:	4b54      	ldr	r3, [pc, #336]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d109      	bne.n	8002bca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bba:	e006      	b.n	8002bca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc0:	e004      	b.n	8002bcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bc2:	bf00      	nop
 8002bc4:	e002      	b.n	8002bcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bc6:	bf00      	nop
 8002bc8:	e000      	b.n	8002bcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bca:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10d      	bne.n	8002bee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bd2:	4b4a      	ldr	r3, [pc, #296]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6819      	ldr	r1, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	430b      	orrs	r3, r1
 8002be8:	4944      	ldr	r1, [pc, #272]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d17d      	bne.n	8002cf0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bf4:	4b41      	ldr	r3, [pc, #260]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a40      	ldr	r2, [pc, #256]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c00:	f7fe fbb2 	bl	8001368 <HAL_GetTick>
 8002c04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c06:	e009      	b.n	8002c1c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c08:	f7fe fbae 	bl	8001368 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d902      	bls.n	8002c1c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	73fb      	strb	r3, [r7, #15]
        break;
 8002c1a:	e005      	b.n	8002c28 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c1c:	4b37      	ldr	r3, [pc, #220]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1ef      	bne.n	8002c08 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d160      	bne.n	8002cf0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d111      	bne.n	8002c58 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c34:	4b31      	ldr	r3, [pc, #196]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6892      	ldr	r2, [r2, #8]
 8002c44:	0211      	lsls	r1, r2, #8
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68d2      	ldr	r2, [r2, #12]
 8002c4a:	0912      	lsrs	r2, r2, #4
 8002c4c:	0452      	lsls	r2, r2, #17
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	492a      	ldr	r1, [pc, #168]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	610b      	str	r3, [r1, #16]
 8002c56:	e027      	b.n	8002ca8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d112      	bne.n	8002c84 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c5e:	4b27      	ldr	r3, [pc, #156]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6892      	ldr	r2, [r2, #8]
 8002c6e:	0211      	lsls	r1, r2, #8
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6912      	ldr	r2, [r2, #16]
 8002c74:	0852      	lsrs	r2, r2, #1
 8002c76:	3a01      	subs	r2, #1
 8002c78:	0552      	lsls	r2, r2, #21
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	491f      	ldr	r1, [pc, #124]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	610b      	str	r3, [r1, #16]
 8002c82:	e011      	b.n	8002ca8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c84:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6892      	ldr	r2, [r2, #8]
 8002c94:	0211      	lsls	r1, r2, #8
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6952      	ldr	r2, [r2, #20]
 8002c9a:	0852      	lsrs	r2, r2, #1
 8002c9c:	3a01      	subs	r2, #1
 8002c9e:	0652      	lsls	r2, r2, #25
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	4916      	ldr	r1, [pc, #88]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ca8:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a13      	ldr	r2, [pc, #76]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb4:	f7fe fb58 	bl	8001368 <HAL_GetTick>
 8002cb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cba:	e009      	b.n	8002cd0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cbc:	f7fe fb54 	bl	8001368 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d902      	bls.n	8002cd0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	73fb      	strb	r3, [r7, #15]
          break;
 8002cce:	e005      	b.n	8002cdc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0ef      	beq.n	8002cbc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ce2:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce4:	691a      	ldr	r2, [r3, #16]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	4904      	ldr	r1, [pc, #16]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40021000 	.word	0x40021000

08002d00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d0e:	4b6a      	ldr	r3, [pc, #424]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d018      	beq.n	8002d4c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d1a:	4b67      	ldr	r3, [pc, #412]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f003 0203 	and.w	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d10d      	bne.n	8002d46 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
       ||
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d009      	beq.n	8002d46 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d32:	4b61      	ldr	r3, [pc, #388]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	091b      	lsrs	r3, r3, #4
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
       ||
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d047      	beq.n	8002dd6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	73fb      	strb	r3, [r7, #15]
 8002d4a:	e044      	b.n	8002dd6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d018      	beq.n	8002d86 <RCCEx_PLLSAI2_Config+0x86>
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d825      	bhi.n	8002da4 <RCCEx_PLLSAI2_Config+0xa4>
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d002      	beq.n	8002d62 <RCCEx_PLLSAI2_Config+0x62>
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d009      	beq.n	8002d74 <RCCEx_PLLSAI2_Config+0x74>
 8002d60:	e020      	b.n	8002da4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d62:	4b55      	ldr	r3, [pc, #340]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d11d      	bne.n	8002daa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d72:	e01a      	b.n	8002daa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d74:	4b50      	ldr	r3, [pc, #320]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d116      	bne.n	8002dae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d84:	e013      	b.n	8002dae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d86:	4b4c      	ldr	r3, [pc, #304]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10f      	bne.n	8002db2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d92:	4b49      	ldr	r3, [pc, #292]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002da2:	e006      	b.n	8002db2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
      break;
 8002da8:	e004      	b.n	8002db4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002daa:	bf00      	nop
 8002dac:	e002      	b.n	8002db4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dae:	bf00      	nop
 8002db0:	e000      	b.n	8002db4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002db2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10d      	bne.n	8002dd6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dba:	4b3f      	ldr	r3, [pc, #252]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6819      	ldr	r1, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	430b      	orrs	r3, r1
 8002dd0:	4939      	ldr	r1, [pc, #228]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d167      	bne.n	8002eac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ddc:	4b36      	ldr	r3, [pc, #216]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a35      	ldr	r2, [pc, #212]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de8:	f7fe fabe 	bl	8001368 <HAL_GetTick>
 8002dec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dee:	e009      	b.n	8002e04 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002df0:	f7fe faba 	bl	8001368 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d902      	bls.n	8002e04 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	73fb      	strb	r3, [r7, #15]
        break;
 8002e02:	e005      	b.n	8002e10 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e04:	4b2c      	ldr	r3, [pc, #176]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1ef      	bne.n	8002df0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d14a      	bne.n	8002eac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d111      	bne.n	8002e40 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e1c:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6892      	ldr	r2, [r2, #8]
 8002e2c:	0211      	lsls	r1, r2, #8
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68d2      	ldr	r2, [r2, #12]
 8002e32:	0912      	lsrs	r2, r2, #4
 8002e34:	0452      	lsls	r2, r2, #17
 8002e36:	430a      	orrs	r2, r1
 8002e38:	491f      	ldr	r1, [pc, #124]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	614b      	str	r3, [r1, #20]
 8002e3e:	e011      	b.n	8002e64 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e40:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6892      	ldr	r2, [r2, #8]
 8002e50:	0211      	lsls	r1, r2, #8
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6912      	ldr	r2, [r2, #16]
 8002e56:	0852      	lsrs	r2, r2, #1
 8002e58:	3a01      	subs	r2, #1
 8002e5a:	0652      	lsls	r2, r2, #25
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	4916      	ldr	r1, [pc, #88]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e64:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a13      	ldr	r2, [pc, #76]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e70:	f7fe fa7a 	bl	8001368 <HAL_GetTick>
 8002e74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e76:	e009      	b.n	8002e8c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e78:	f7fe fa76 	bl	8001368 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d902      	bls.n	8002e8c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	73fb      	strb	r3, [r7, #15]
          break;
 8002e8a:	e005      	b.n	8002e98 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0ef      	beq.n	8002e78 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	4904      	ldr	r1, [pc, #16]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000

08002ebc <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e03c      	b.n	8002f48 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fe f84e 	bl	8000f84 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f9df 	bl	80032c4 <USART_SetConfig>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e01b      	b.n	8002f48 <HAL_USART_Init+0x8c>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f1e:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f2e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fb15 	bl	8003570 <USART_CheckIdleState>
 8002f46:	4603      	mov	r3, r0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	; 0x28
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	f040 809a 	bne.w	80030a2 <HAL_USART_Transmit+0x152>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <HAL_USART_Transmit+0x2a>
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e092      	b.n	80030a4 <HAL_USART_Transmit+0x154>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_USART_Transmit+0x3c>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e08b      	b.n	80030a4 <HAL_USART_Transmit+0x154>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2212      	movs	r2, #18
 8002f9e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002fa2:	f7fe f9e1 	bl	8001368 <HAL_GetTick>
 8002fa6:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	88fa      	ldrh	r2, [r7, #6]
 8002fac:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	88fa      	ldrh	r2, [r7, #6]
 8002fb2:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fbc:	d108      	bne.n	8002fd0 <HAL_USART_Transmit+0x80>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d104      	bne.n	8002fd0 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	61bb      	str	r3, [r7, #24]
 8002fce:	e003      	b.n	8002fd8 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8002fd8:	e02b      	b.n	8003032 <HAL_USART_Transmit+0xe2>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2180      	movs	r1, #128	; 0x80
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 f936 	bl	8003256 <USART_WaitOnFlagUntilTimeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e057      	b.n	80030a4 <HAL_USART_Transmit+0x154>
      }
      if (ptxdata8bits == NULL)
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10b      	bne.n	8003012 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	881a      	ldrh	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003006:	b292      	uxth	r2, r2
 8003008:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	3302      	adds	r3, #2
 800300e:	61bb      	str	r3, [r7, #24]
 8003010:	e008      	b.n	8003024 <HAL_USART_Transmit+0xd4>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	781a      	ldrb	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	b292      	uxth	r2, r2
 800301c:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3301      	adds	r3, #1
 8003022:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1ce      	bne.n	8002fda <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2200      	movs	r2, #0
 8003044:	2140      	movs	r1, #64	; 0x40
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 f905 	bl	8003256 <USART_WaitOnFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_USART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e026      	b.n	80030a4 <HAL_USART_Transmit+0x154>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2240      	movs	r2, #64	; 0x40
 800305c:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2208      	movs	r2, #8
 8003064:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	8b1b      	ldrh	r3, [r3, #24]
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0208 	orr.w	r2, r2, #8
 8003076:	b292      	uxth	r2, r2
 8003078:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	8b1b      	ldrh	r3, [r3, #24]
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0210 	orr.w	r2, r2, #16
 800308a:	b292      	uxth	r2, r2
 800308c:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	e000      	b.n	80030a4 <HAL_USART_Transmit+0x154>
  }
  else
  {
    return HAL_BUSY;
 80030a2:	2302      	movs	r3, #2
  }
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3720      	adds	r7, #32
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_USART_Receive>:
  * @param Size Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *prxdata8bits;
  uint16_t *prxdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	f040 80c1 	bne.w	800324c <HAL_USART_Receive+0x1a0>
  {
    if ((pRxData == NULL) || (Size == 0U))
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <HAL_USART_Receive+0x2a>
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_USART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e0b9      	b.n	800324e <HAL_USART_Receive+0x1a2>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_USART_Receive+0x3c>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e0b2      	b.n	800324e <HAL_USART_Receive+0x1a2>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_RX;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2222      	movs	r2, #34	; 0x22
 80030fa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80030fe:	f7fe f933 	bl	8001368 <HAL_GetTick>
 8003102:	6178      	str	r0, [r7, #20]

    husart->RxXferSize = Size;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	88fa      	ldrh	r2, [r7, #6]
 8003108:	861a      	strh	r2, [r3, #48]	; 0x30
    husart->RxXferCount = Size;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	88fa      	ldrh	r2, [r7, #6]
 800310e:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Computation of USART mask to apply to RDR register */
    USART_MASK_COMPUTATION(husart);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003118:	d10c      	bne.n	8003134 <HAL_USART_Receive+0x88>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d104      	bne.n	800312c <HAL_USART_Receive+0x80>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003128:	869a      	strh	r2, [r3, #52]	; 0x34
 800312a:	e027      	b.n	800317c <HAL_USART_Receive+0xd0>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	22ff      	movs	r2, #255	; 0xff
 8003130:	869a      	strh	r2, [r3, #52]	; 0x34
 8003132:	e023      	b.n	800317c <HAL_USART_Receive+0xd0>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10b      	bne.n	8003154 <HAL_USART_Receive+0xa8>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d103      	bne.n	800314c <HAL_USART_Receive+0xa0>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	22ff      	movs	r2, #255	; 0xff
 8003148:	869a      	strh	r2, [r3, #52]	; 0x34
 800314a:	e017      	b.n	800317c <HAL_USART_Receive+0xd0>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	227f      	movs	r2, #127	; 0x7f
 8003150:	869a      	strh	r2, [r3, #52]	; 0x34
 8003152:	e013      	b.n	800317c <HAL_USART_Receive+0xd0>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800315c:	d10b      	bne.n	8003176 <HAL_USART_Receive+0xca>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d103      	bne.n	800316e <HAL_USART_Receive+0xc2>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	227f      	movs	r2, #127	; 0x7f
 800316a:	869a      	strh	r2, [r3, #52]	; 0x34
 800316c:	e006      	b.n	800317c <HAL_USART_Receive+0xd0>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	223f      	movs	r2, #63	; 0x3f
 8003172:	869a      	strh	r2, [r3, #52]	; 0x34
 8003174:	e002      	b.n	800317c <HAL_USART_Receive+0xd0>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	869a      	strh	r2, [r3, #52]	; 0x34
    uhMask = husart->Mask;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003180:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800318a:	d108      	bne.n	800319e <HAL_USART_Receive+0xf2>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d104      	bne.n	800319e <HAL_USART_Receive+0xf2>
    {
      prxdata8bits  = NULL;
 8003194:	2300      	movs	r3, #0
 8003196:	61fb      	str	r3, [r7, #28]
      prxdata16bits = (uint16_t *) pRxData;
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	e003      	b.n	80031a6 <HAL_USART_Receive+0xfa>
    }
    else
    {
      prxdata8bits  = pRxData;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	61fb      	str	r3, [r7, #28]
      prxdata16bits = NULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (husart->RxXferCount > 0U)
 80031a6:	e042      	b.n	800322e <HAL_USART_Receive+0x182>
      {
        /* Wait until TXE flag is set to send dummy byte in order to generate the
        * clock for the slave to send data.
        * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
        * can be written for all the cases. */
        if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2200      	movs	r2, #0
 80031b0:	2180      	movs	r1, #128	; 0x80
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f84f 	bl	8003256 <USART_WaitOnFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_USART_Receive+0x116>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e045      	b.n	800324e <HAL_USART_Receive+0x1a2>
        }
        husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x0FF);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	22ff      	movs	r2, #255	; 0xff
 80031c8:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait for RXNE Flag */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2200      	movs	r2, #0
 80031d2:	2120      	movs	r1, #32
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f83e 	bl	8003256 <USART_WaitOnFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <HAL_USART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e034      	b.n	800324e <HAL_USART_Receive+0x1a2>
      }

      if (prxdata8bits == NULL)
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10c      	bne.n	8003204 <HAL_USART_Receive+0x158>
      {
        *prxdata16bits = (uint16_t)(husart->Instance->RDR & uhMask);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	8a7b      	ldrh	r3, [r7, #18]
 80031f4:	4013      	ands	r3, r2
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	801a      	strh	r2, [r3, #0]
        prxdata16bits++;
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	3302      	adds	r3, #2
 8003200:	61bb      	str	r3, [r7, #24]
 8003202:	e00d      	b.n	8003220 <HAL_USART_Receive+0x174>
      }
      else
      {
        *prxdata8bits = (uint8_t)(husart->Instance->RDR & (uint8_t)(uhMask & 0xFFU));
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800320a:	b29b      	uxth	r3, r3
 800320c:	b2da      	uxtb	r2, r3
 800320e:	8a7b      	ldrh	r3, [r7, #18]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	4013      	ands	r3, r2
 8003214:	b2da      	uxtb	r2, r3
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	701a      	strb	r2, [r3, #0]
        prxdata8bits++;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3301      	adds	r3, #1
 800321e:	61fb      	str	r3, [r7, #28]
      }

      husart->RxXferCount--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	865a      	strh	r2, [r3, #50]	; 0x32
    while (husart->RxXferCount > 0U)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1b7      	bne.n	80031a8 <HAL_USART_Receive+0xfc>
      __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR2_SLVEN */

    /* At end of Rx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	e000      	b.n	800324e <HAL_USART_Receive+0x1a2>
  }
  else
  {
    return HAL_BUSY;
 800324c:	2302      	movs	r3, #2
  }
}
 800324e:	4618      	mov	r0, r3
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	603b      	str	r3, [r7, #0]
 8003262:	4613      	mov	r3, r2
 8003264:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003266:	e018      	b.n	800329a <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326e:	d014      	beq.n	800329a <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003270:	f7fe f87a 	bl	8001368 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	429a      	cmp	r2, r3
 800327e:	d302      	bcc.n	8003286 <USART_WaitOnFlagUntilTimeout+0x30>
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d109      	bne.n	800329a <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e00f      	b.n	80032ba <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4013      	ands	r3, r2
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	bf0c      	ite	eq
 80032aa:	2301      	moveq	r3, #1
 80032ac:	2300      	movne	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	461a      	mov	r2, r3
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d0d7      	beq.n	8003268 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4b9a      	ldr	r3, [pc, #616]	; (800355c <USART_SetConfig+0x298>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	6979      	ldr	r1, [r7, #20]
 80032fa:	430b      	orrs	r3, r1
 80032fc:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80032fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003302:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	4313      	orrs	r3, r2
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	4313      	orrs	r3, r2
 800331c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	430a      	orrs	r2, r1
 800333a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a87      	ldr	r2, [pc, #540]	; (8003560 <USART_SetConfig+0x29c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d121      	bne.n	800338a <USART_SetConfig+0xc6>
 8003346:	4b87      	ldr	r3, [pc, #540]	; (8003564 <USART_SetConfig+0x2a0>)
 8003348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	2b03      	cmp	r3, #3
 8003352:	d817      	bhi.n	8003384 <USART_SetConfig+0xc0>
 8003354:	a201      	add	r2, pc, #4	; (adr r2, 800335c <USART_SetConfig+0x98>)
 8003356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335a:	bf00      	nop
 800335c:	0800336d 	.word	0x0800336d
 8003360:	08003379 	.word	0x08003379
 8003364:	08003373 	.word	0x08003373
 8003368:	0800337f 	.word	0x0800337f
 800336c:	2301      	movs	r3, #1
 800336e:	77fb      	strb	r3, [r7, #31]
 8003370:	e06b      	b.n	800344a <USART_SetConfig+0x186>
 8003372:	2302      	movs	r3, #2
 8003374:	77fb      	strb	r3, [r7, #31]
 8003376:	e068      	b.n	800344a <USART_SetConfig+0x186>
 8003378:	2304      	movs	r3, #4
 800337a:	77fb      	strb	r3, [r7, #31]
 800337c:	e065      	b.n	800344a <USART_SetConfig+0x186>
 800337e:	2308      	movs	r3, #8
 8003380:	77fb      	strb	r3, [r7, #31]
 8003382:	e062      	b.n	800344a <USART_SetConfig+0x186>
 8003384:	2310      	movs	r3, #16
 8003386:	77fb      	strb	r3, [r7, #31]
 8003388:	e05f      	b.n	800344a <USART_SetConfig+0x186>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a76      	ldr	r2, [pc, #472]	; (8003568 <USART_SetConfig+0x2a4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d132      	bne.n	80033fa <USART_SetConfig+0x136>
 8003394:	4b73      	ldr	r3, [pc, #460]	; (8003564 <USART_SetConfig+0x2a0>)
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b0c      	cmp	r3, #12
 80033a0:	d828      	bhi.n	80033f4 <USART_SetConfig+0x130>
 80033a2:	a201      	add	r2, pc, #4	; (adr r2, 80033a8 <USART_SetConfig+0xe4>)
 80033a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a8:	080033dd 	.word	0x080033dd
 80033ac:	080033f5 	.word	0x080033f5
 80033b0:	080033f5 	.word	0x080033f5
 80033b4:	080033f5 	.word	0x080033f5
 80033b8:	080033e9 	.word	0x080033e9
 80033bc:	080033f5 	.word	0x080033f5
 80033c0:	080033f5 	.word	0x080033f5
 80033c4:	080033f5 	.word	0x080033f5
 80033c8:	080033e3 	.word	0x080033e3
 80033cc:	080033f5 	.word	0x080033f5
 80033d0:	080033f5 	.word	0x080033f5
 80033d4:	080033f5 	.word	0x080033f5
 80033d8:	080033ef 	.word	0x080033ef
 80033dc:	2300      	movs	r3, #0
 80033de:	77fb      	strb	r3, [r7, #31]
 80033e0:	e033      	b.n	800344a <USART_SetConfig+0x186>
 80033e2:	2302      	movs	r3, #2
 80033e4:	77fb      	strb	r3, [r7, #31]
 80033e6:	e030      	b.n	800344a <USART_SetConfig+0x186>
 80033e8:	2304      	movs	r3, #4
 80033ea:	77fb      	strb	r3, [r7, #31]
 80033ec:	e02d      	b.n	800344a <USART_SetConfig+0x186>
 80033ee:	2308      	movs	r3, #8
 80033f0:	77fb      	strb	r3, [r7, #31]
 80033f2:	e02a      	b.n	800344a <USART_SetConfig+0x186>
 80033f4:	2310      	movs	r3, #16
 80033f6:	77fb      	strb	r3, [r7, #31]
 80033f8:	e027      	b.n	800344a <USART_SetConfig+0x186>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a5b      	ldr	r2, [pc, #364]	; (800356c <USART_SetConfig+0x2a8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d120      	bne.n	8003446 <USART_SetConfig+0x182>
 8003404:	4b57      	ldr	r3, [pc, #348]	; (8003564 <USART_SetConfig+0x2a0>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800340e:	2b30      	cmp	r3, #48	; 0x30
 8003410:	d013      	beq.n	800343a <USART_SetConfig+0x176>
 8003412:	2b30      	cmp	r3, #48	; 0x30
 8003414:	d814      	bhi.n	8003440 <USART_SetConfig+0x17c>
 8003416:	2b20      	cmp	r3, #32
 8003418:	d009      	beq.n	800342e <USART_SetConfig+0x16a>
 800341a:	2b20      	cmp	r3, #32
 800341c:	d810      	bhi.n	8003440 <USART_SetConfig+0x17c>
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <USART_SetConfig+0x164>
 8003422:	2b10      	cmp	r3, #16
 8003424:	d006      	beq.n	8003434 <USART_SetConfig+0x170>
 8003426:	e00b      	b.n	8003440 <USART_SetConfig+0x17c>
 8003428:	2300      	movs	r3, #0
 800342a:	77fb      	strb	r3, [r7, #31]
 800342c:	e00d      	b.n	800344a <USART_SetConfig+0x186>
 800342e:	2302      	movs	r3, #2
 8003430:	77fb      	strb	r3, [r7, #31]
 8003432:	e00a      	b.n	800344a <USART_SetConfig+0x186>
 8003434:	2304      	movs	r3, #4
 8003436:	77fb      	strb	r3, [r7, #31]
 8003438:	e007      	b.n	800344a <USART_SetConfig+0x186>
 800343a:	2308      	movs	r3, #8
 800343c:	77fb      	strb	r3, [r7, #31]
 800343e:	e004      	b.n	800344a <USART_SetConfig+0x186>
 8003440:	2310      	movs	r3, #16
 8003442:	77fb      	strb	r3, [r7, #31]
 8003444:	e001      	b.n	800344a <USART_SetConfig+0x186>
 8003446:	2310      	movs	r3, #16
 8003448:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 800344a:	7ffb      	ldrb	r3, [r7, #31]
 800344c:	2b08      	cmp	r3, #8
 800344e:	d85a      	bhi.n	8003506 <USART_SetConfig+0x242>
 8003450:	a201      	add	r2, pc, #4	; (adr r2, 8003458 <USART_SetConfig+0x194>)
 8003452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003456:	bf00      	nop
 8003458:	0800347d 	.word	0x0800347d
 800345c:	0800349b 	.word	0x0800349b
 8003460:	080034b9 	.word	0x080034b9
 8003464:	08003507 	.word	0x08003507
 8003468:	080034d3 	.word	0x080034d3
 800346c:	08003507 	.word	0x08003507
 8003470:	08003507 	.word	0x08003507
 8003474:	08003507 	.word	0x08003507
 8003478:	080034f1 	.word	0x080034f1
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800347c:	f7fe ffd6 	bl	800242c <HAL_RCC_GetPCLK1Freq>
 8003480:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	005a      	lsls	r2, r3, #1
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	085b      	lsrs	r3, r3, #1
 800348c:	441a      	add	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	fbb2 f3f3 	udiv	r3, r2, r3
 8003496:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8003498:	e038      	b.n	800350c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800349a:	f7fe ffdd 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 800349e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	005a      	lsls	r2, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	085b      	lsrs	r3, r3, #1
 80034aa:	441a      	add	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80034b6:	e029      	b.n	800350c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	085b      	lsrs	r3, r3, #1
 80034be:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80034c2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6852      	ldr	r2, [r2, #4]
 80034ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80034d0:	e01c      	b.n	800350c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80034d2:	f7fe ff13 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 80034d6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	005a      	lsls	r2, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	085b      	lsrs	r3, r3, #1
 80034e2:	441a      	add	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80034ee:	e00d      	b.n	800350c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	085b      	lsrs	r3, r3, #1
 80034f6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003502:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8003504:	e002      	b.n	800350c <USART_SetConfig+0x248>
    default:
      ret = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	77bb      	strb	r3, [r7, #30]
      break;
 800350a:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b0f      	cmp	r3, #15
 8003510:	d916      	bls.n	8003540 <USART_SetConfig+0x27c>
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003518:	d212      	bcs.n	8003540 <USART_SetConfig+0x27c>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	b29b      	uxth	r3, r3
 800351e:	f023 030f 	bic.w	r3, r3, #15
 8003522:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	085b      	lsrs	r3, r3, #1
 8003528:	b29b      	uxth	r3, r3
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	b29a      	uxth	r2, r3
 8003530:	89fb      	ldrh	r3, [r7, #14]
 8003532:	4313      	orrs	r3, r2
 8003534:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	89fa      	ldrh	r2, [r7, #14]
 800353c:	60da      	str	r2, [r3, #12]
 800353e:	e001      	b.n	8003544 <USART_SetConfig+0x280>
  }
  else
  {
    ret = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8003550:	7fbb      	ldrb	r3, [r7, #30]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3720      	adds	r7, #32
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	efff69f3 	.word	0xefff69f3
 8003560:	40013800 	.word	0x40013800
 8003564:	40021000 	.word	0x40021000
 8003568:	40004400 	.word	0x40004400
 800356c:	40004800 	.word	0x40004800

08003570 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af02      	add	r7, sp, #8
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800357e:	f7fd fef3 	bl	8001368 <HAL_GetTick>
 8003582:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b08      	cmp	r3, #8
 8003590:	d10e      	bne.n	80035b0 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8003592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff fe58 	bl	8003256 <USART_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e01e      	b.n	80035ee <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d10e      	bne.n	80035dc <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80035be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff fe42 	bl	8003256 <USART_WaitOnFlagUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e008      	b.n	80035ee <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <arm_radix2_butterfly_q31>:
 80035f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035fc:	b093      	sub	sp, #76	; 0x4c
 80035fe:	910f      	str	r1, [sp, #60]	; 0x3c
 8003600:	0849      	lsrs	r1, r1, #1
 8003602:	900e      	str	r0, [sp, #56]	; 0x38
 8003604:	9210      	str	r2, [sp, #64]	; 0x40
 8003606:	930b      	str	r3, [sp, #44]	; 0x2c
 8003608:	910d      	str	r1, [sp, #52]	; 0x34
 800360a:	f000 8114 	beq.w	8003836 <arm_radix2_butterfly_q31+0x23e>
 800360e:	1d04      	adds	r4, r0, #4
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	eb00 09c1 	add.w	r9, r0, r1, lsl #3
 8003616:	9411      	str	r4, [sp, #68]	; 0x44
 8003618:	46a4      	mov	ip, r4
 800361a:	9309      	str	r3, [sp, #36]	; 0x24
 800361c:	4686      	mov	lr, r0
 800361e:	4690      	mov	r8, r2
 8003620:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8003624:	f85e 3031 	ldr.w	r3, [lr, r1, lsl #3]
 8003628:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 800362c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003630:	f8d8 9000 	ldr.w	r9, [r8]
 8003634:	105c      	asrs	r4, r3, #1
 8003636:	1052      	asrs	r2, r2, #1
 8003638:	1913      	adds	r3, r2, r4
 800363a:	105b      	asrs	r3, r3, #1
 800363c:	f84c 3c04 	str.w	r3, [ip, #-4]
 8003640:	f8de 7004 	ldr.w	r7, [lr, #4]
 8003644:	f85c 3031 	ldr.w	r3, [ip, r1, lsl #3]
 8003648:	1b12      	subs	r2, r2, r4
 800364a:	2500      	movs	r5, #0
 800364c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8003650:	fbc9 4502 	smlal	r4, r5, r9, r2
 8003654:	105b      	asrs	r3, r3, #1
 8003656:	107f      	asrs	r7, r7, #1
 8003658:	1afe      	subs	r6, r7, r3
 800365a:	46ab      	mov	fp, r5
 800365c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8003660:	2500      	movs	r5, #0
 8003662:	fbc6 4509 	smlal	r4, r5, r6, r9
 8003666:	f04f 0a00 	mov.w	sl, #0
 800366a:	9505      	str	r5, [sp, #20]
 800366c:	4654      	mov	r4, sl
 800366e:	465d      	mov	r5, fp
 8003670:	fbc0 4506 	smlal	r4, r5, r0, r6
 8003674:	f8cd a010 	str.w	sl, [sp, #16]
 8003678:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800367c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8003680:	441f      	add	r7, r3
 8003682:	fb82 2300 	smull	r2, r3, r2, r0
 8003686:	1aa4      	subs	r4, r4, r2
 8003688:	eb65 0503 	sbc.w	r5, r5, r3
 800368c:	1078      	asrs	r0, r7, #1
 800368e:	4626      	mov	r6, r4
 8003690:	462f      	mov	r7, r5
 8003692:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8003696:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800369a:	f145 0500 	adc.w	r5, r5, #0
 800369e:	f116 4200 	adds.w	r2, r6, #2147483648	; 0x80000000
 80036a2:	f147 0300 	adc.w	r3, r7, #0
 80036a6:	f8ce 0004 	str.w	r0, [lr, #4]
 80036aa:	f84e 5031 	str.w	r5, [lr, r1, lsl #3]
 80036ae:	f84c 3031 	str.w	r3, [ip, r1, lsl #3]
 80036b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036b6:	f10e 0e08 	add.w	lr, lr, #8
 80036ba:	459e      	cmp	lr, r3
 80036bc:	4480      	add	r8, r0
 80036be:	f10c 0c08 	add.w	ip, ip, #8
 80036c2:	d1af      	bne.n	8003624 <arm_radix2_butterfly_q31+0x2c>
 80036c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	930c      	str	r3, [sp, #48]	; 0x30
 80036cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	f240 80ba 	bls.w	8003848 <arm_radix2_butterfly_q31+0x250>
 80036d4:	ea5f 0b53 	movs.w	fp, r3, lsr #1
 80036d8:	d060      	beq.n	800379c <arm_radix2_butterfly_q31+0x1a4>
 80036da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80036dc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80036de:	9106      	str	r1, [sp, #24]
 80036e0:	00d2      	lsls	r2, r2, #3
 80036e2:	9209      	str	r2, [sp, #36]	; 0x24
 80036e4:	eb01 02cb 	add.w	r2, r1, fp, lsl #3
 80036e8:	920a      	str	r2, [sp, #40]	; 0x28
 80036ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80036ec:	9204      	str	r2, [sp, #16]
 80036ee:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 80036f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80036f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80036fa:	9a04      	ldr	r2, [sp, #16]
 80036fc:	9b06      	ldr	r3, [sp, #24]
 80036fe:	6817      	ldr	r7, [r2, #0]
 8003700:	6856      	ldr	r6, [r2, #4]
 8003702:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8003706:	1d18      	adds	r0, r3, #4
 8003708:	4619      	mov	r1, r3
 800370a:	f851 303b 	ldr.w	r3, [r1, fp, lsl #3]
 800370e:	f850 4c04 	ldr.w	r4, [r0, #-4]
 8003712:	18e2      	adds	r2, r4, r3
 8003714:	1052      	asrs	r2, r2, #1
 8003716:	f840 2c04 	str.w	r2, [r0, #-4]
 800371a:	f850 503b 	ldr.w	r5, [r0, fp, lsl #3]
 800371e:	1ae4      	subs	r4, r4, r3
 8003720:	684b      	ldr	r3, [r1, #4]
 8003722:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003726:	ebc5 0e03 	rsb	lr, r5, r3
 800372a:	2300      	movs	r3, #0
 800372c:	fbc7 2304 	smlal	r2, r3, r7, r4
 8003730:	9301      	str	r3, [sp, #4]
 8003732:	2300      	movs	r3, #0
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800373a:	2300      	movs	r3, #0
 800373c:	fbc7 230e 	smlal	r2, r3, r7, lr
 8003740:	9303      	str	r3, [sp, #12]
 8003742:	2300      	movs	r3, #0
 8003744:	9302      	str	r3, [sp, #8]
 8003746:	684b      	ldr	r3, [r1, #4]
 8003748:	fb84 8906 	smull	r8, r9, r4, r6
 800374c:	442b      	add	r3, r5
 800374e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003752:	ebb4 0408 	subs.w	r4, r4, r8
 8003756:	eb65 0509 	sbc.w	r5, r5, r9
 800375a:	e9dd 8900 	ldrd	r8, r9, [sp]
 800375e:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8003762:	fbc6 890e 	smlal	r8, r9, r6, lr
 8003766:	f145 0500 	adc.w	r5, r5, #0
 800376a:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800376e:	f149 0900 	adc.w	r9, r9, #0
 8003772:	105b      	asrs	r3, r3, #1
 8003774:	f1bc 0c01 	subs.w	ip, ip, #1
 8003778:	604b      	str	r3, [r1, #4]
 800377a:	f841 903b 	str.w	r9, [r1, fp, lsl #3]
 800377e:	f840 503b 	str.w	r5, [r0, fp, lsl #3]
 8003782:	4451      	add	r1, sl
 8003784:	4450      	add	r0, sl
 8003786:	d1c0      	bne.n	800370a <arm_radix2_butterfly_q31+0x112>
 8003788:	9a04      	ldr	r2, [sp, #16]
 800378a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800378c:	9b06      	ldr	r3, [sp, #24]
 800378e:	440a      	add	r2, r1
 8003790:	9204      	str	r2, [sp, #16]
 8003792:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003794:	3308      	adds	r3, #8
 8003796:	4293      	cmp	r3, r2
 8003798:	9306      	str	r3, [sp, #24]
 800379a:	d1ae      	bne.n	80036fa <arm_radix2_butterfly_q31+0x102>
 800379c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800379e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	0852      	lsrs	r2, r2, #1
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2a02      	cmp	r2, #2
 80037a8:	930c      	str	r3, [sp, #48]	; 0x30
 80037aa:	920d      	str	r2, [sp, #52]	; 0x34
 80037ac:	465b      	mov	r3, fp
 80037ae:	d891      	bhi.n	80036d4 <arm_radix2_butterfly_q31+0xdc>
 80037b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80037b2:	ea4f 065b 	mov.w	r6, fp, lsr #1
 80037b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037b8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80037ba:	ea4f 1c0b 	mov.w	ip, fp, lsl #4
 80037be:	ea4f 084b 	mov.w	r8, fp, lsl #1
 80037c2:	f04f 0e00 	mov.w	lr, #0
 80037c6:	eb06 070b 	add.w	r7, r6, fp
 80037ca:	f852 9036 	ldr.w	r9, [r2, r6, lsl #3]
 80037ce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80037d2:	eb00 0109 	add.w	r1, r0, r9
 80037d6:	f843 1c04 	str.w	r1, [r3, #-4]
 80037da:	f853 5036 	ldr.w	r5, [r3, r6, lsl #3]
 80037de:	6851      	ldr	r1, [r2, #4]
 80037e0:	ebc9 0000 	rsb	r0, r9, r0
 80037e4:	eb01 0905 	add.w	r9, r1, r5
 80037e8:	1b49      	subs	r1, r1, r5
 80037ea:	f8c2 9004 	str.w	r9, [r2, #4]
 80037ee:	f842 0036 	str.w	r0, [r2, r6, lsl #3]
 80037f2:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
 80037f6:	f852 9037 	ldr.w	r9, [r2, r7, lsl #3]
 80037fa:	f852 003b 	ldr.w	r0, [r2, fp, lsl #3]
 80037fe:	eb00 0109 	add.w	r1, r0, r9
 8003802:	f842 103b 	str.w	r1, [r2, fp, lsl #3]
 8003806:	f853 5037 	ldr.w	r5, [r3, r7, lsl #3]
 800380a:	f853 103b 	ldr.w	r1, [r3, fp, lsl #3]
 800380e:	44c6      	add	lr, r8
 8003810:	ebc9 0000 	rsb	r0, r9, r0
 8003814:	4574      	cmp	r4, lr
 8003816:	eb01 0905 	add.w	r9, r1, r5
 800381a:	eba1 0105 	sub.w	r1, r1, r5
 800381e:	f843 903b 	str.w	r9, [r3, fp, lsl #3]
 8003822:	f842 0037 	str.w	r0, [r2, r7, lsl #3]
 8003826:	f843 1037 	str.w	r1, [r3, r7, lsl #3]
 800382a:	4462      	add	r2, ip
 800382c:	4463      	add	r3, ip
 800382e:	d8cc      	bhi.n	80037ca <arm_radix2_butterfly_q31+0x1d2>
 8003830:	b013      	add	sp, #76	; 0x4c
 8003832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003836:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003838:	468b      	mov	fp, r1
 800383a:	089e      	lsrs	r6, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f7      	beq.n	8003830 <arm_radix2_butterfly_q31+0x238>
 8003840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003842:	3304      	adds	r3, #4
 8003844:	9311      	str	r3, [sp, #68]	; 0x44
 8003846:	e7b6      	b.n	80037b6 <arm_radix2_butterfly_q31+0x1be>
 8003848:	469b      	mov	fp, r3
 800384a:	e7b1      	b.n	80037b0 <arm_radix2_butterfly_q31+0x1b8>

0800384c <arm_radix2_butterfly_inverse_q31>:
 800384c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003850:	b095      	sub	sp, #84	; 0x54
 8003852:	4682      	mov	sl, r0
 8003854:	9108      	str	r1, [sp, #32]
 8003856:	0849      	lsrs	r1, r1, #1
 8003858:	9212      	str	r2, [sp, #72]	; 0x48
 800385a:	9309      	str	r3, [sp, #36]	; 0x24
 800385c:	9111      	str	r1, [sp, #68]	; 0x44
 800385e:	f000 812c 	beq.w	8003aba <arm_radix2_butterfly_inverse_q31+0x26e>
 8003862:	3004      	adds	r0, #4
 8003864:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 8003868:	eb0a 09c1 	add.w	r9, sl, r1, lsl #3
 800386c:	9013      	str	r0, [sp, #76]	; 0x4c
 800386e:	4684      	mov	ip, r0
 8003870:	46d6      	mov	lr, sl
 8003872:	4690      	mov	r8, r2
 8003874:	460d      	mov	r5, r1
 8003876:	f8cd b018 	str.w	fp, [sp, #24]
 800387a:	f8cd 901c 	str.w	r9, [sp, #28]
 800387e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8003882:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 8003886:	f85e 3035 	ldr.w	r3, [lr, r5, lsl #3]
 800388a:	1048      	asrs	r0, r1, #1
 800388c:	105b      	asrs	r3, r3, #1
 800388e:	18c1      	adds	r1, r0, r3
 8003890:	1049      	asrs	r1, r1, #1
 8003892:	e898 0204 	ldmia.w	r8, {r2, r9}
 8003896:	f84c 1c04 	str.w	r1, [ip, #-4]
 800389a:	f8de 4004 	ldr.w	r4, [lr, #4]
 800389e:	f85c 1035 	ldr.w	r1, [ip, r5, lsl #3]
 80038a2:	1ac0      	subs	r0, r0, r3
 80038a4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80038a8:	2700      	movs	r7, #0
 80038aa:	fbc2 6700 	smlal	r6, r7, r2, r0
 80038ae:	1049      	asrs	r1, r1, #1
 80038b0:	1064      	asrs	r4, r4, #1
 80038b2:	1a63      	subs	r3, r4, r1
 80038b4:	46bb      	mov	fp, r7
 80038b6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80038ba:	2700      	movs	r7, #0
 80038bc:	fbc3 6702 	smlal	r6, r7, r3, r2
 80038c0:	f04f 0a00 	mov.w	sl, #0
 80038c4:	fb83 2309 	smull	r2, r3, r3, r9
 80038c8:	ebba 0202 	subs.w	r2, sl, r2
 80038cc:	9701      	str	r7, [sp, #4]
 80038ce:	f8cd a000 	str.w	sl, [sp]
 80038d2:	440c      	add	r4, r1
 80038d4:	eb6b 0303 	sbc.w	r3, fp, r3
 80038d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80038dc:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80038e0:	f143 0300 	adc.w	r3, r3, #0
 80038e4:	1064      	asrs	r4, r4, #1
 80038e6:	f8ce 4004 	str.w	r4, [lr, #4]
 80038ea:	f84e 3035 	str.w	r3, [lr, r5, lsl #3]
 80038ee:	9b06      	ldr	r3, [sp, #24]
 80038f0:	fbc9 6700 	smlal	r6, r7, r9, r0
 80038f4:	4630      	mov	r0, r6
 80038f6:	4498      	add	r8, r3
 80038f8:	9b07      	ldr	r3, [sp, #28]
 80038fa:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80038fe:	f10e 0e08 	add.w	lr, lr, #8
 8003902:	f147 0100 	adc.w	r1, r7, #0
 8003906:	459e      	cmp	lr, r3
 8003908:	f84c 1035 	str.w	r1, [ip, r5, lsl #3]
 800390c:	f10c 0c08 	add.w	ip, ip, #8
 8003910:	d1b7      	bne.n	8003882 <arm_radix2_butterfly_inverse_q31+0x36>
 8003912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003914:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	b29b      	uxth	r3, r3
 800391c:	9310      	str	r3, [sp, #64]	; 0x40
 800391e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003920:	2b02      	cmp	r3, #2
 8003922:	f240 80d2 	bls.w	8003aca <arm_radix2_butterfly_inverse_q31+0x27e>
 8003926:	930a      	str	r3, [sp, #40]	; 0x28
 8003928:	46d4      	mov	ip, sl
 800392a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800392c:	ea5f 0b53 	movs.w	fp, r3, lsr #1
 8003930:	d073      	beq.n	8003a1a <arm_radix2_butterfly_inverse_q31+0x1ce>
 8003932:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003934:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	930e      	str	r3, [sp, #56]	; 0x38
 800393c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800393e:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8003942:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003946:	930f      	str	r3, [sp, #60]	; 0x3c
 8003948:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800394a:	930c      	str	r3, [sp, #48]	; 0x30
 800394c:	2300      	movs	r3, #0
 800394e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003950:	4663      	mov	r3, ip
 8003952:	46d4      	mov	ip, sl
 8003954:	469a      	mov	sl, r3
 8003956:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003958:	9b08      	ldr	r3, [sp, #32]
 800395a:	e892 00c0 	ldmia.w	r2, {r6, r7}
 800395e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003960:	4293      	cmp	r3, r2
 8003962:	d94d      	bls.n	8003a00 <arm_radix2_butterfly_inverse_q31+0x1b4>
 8003964:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003966:	9607      	str	r6, [sp, #28]
 8003968:	4614      	mov	r4, r2
 800396a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800396c:	9709      	str	r7, [sp, #36]	; 0x24
 800396e:	189d      	adds	r5, r3, r2
 8003970:	4618      	mov	r0, r3
 8003972:	f85a 7034 	ldr.w	r7, [sl, r4, lsl #3]
 8003976:	f850 303b 	ldr.w	r3, [r0, fp, lsl #3]
 800397a:	18fa      	adds	r2, r7, r3
 800397c:	1052      	asrs	r2, r2, #1
 800397e:	f84a 2034 	str.w	r2, [sl, r4, lsl #3]
 8003982:	1afb      	subs	r3, r7, r3
 8003984:	6846      	ldr	r6, [r0, #4]
 8003986:	686a      	ldr	r2, [r5, #4]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	9f07      	ldr	r7, [sp, #28]
 800398c:	9900      	ldr	r1, [sp, #0]
 800398e:	9206      	str	r2, [sp, #24]
 8003990:	ebc2 0e06 	rsb	lr, r2, r6
 8003994:	2300      	movs	r3, #0
 8003996:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800399a:	fbc7 2301 	smlal	r2, r3, r7, r1
 800399e:	9303      	str	r3, [sp, #12]
 80039a0:	2300      	movs	r3, #0
 80039a2:	9302      	str	r3, [sp, #8]
 80039a4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80039a8:	2300      	movs	r3, #0
 80039aa:	fbc7 230e 	smlal	r2, r3, r7, lr
 80039ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80039b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80039b4:	9305      	str	r3, [sp, #20]
 80039b6:	fb8e 2307 	smull	r2, r3, lr, r7
 80039ba:	f8cd 8010 	str.w	r8, [sp, #16]
 80039be:	9906      	ldr	r1, [sp, #24]
 80039c0:	ebb8 0802 	subs.w	r8, r8, r2
 80039c4:	eb69 0903 	sbc.w	r9, r9, r3
 80039c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039cc:	4431      	add	r1, r6
 80039ce:	463e      	mov	r6, r7
 80039d0:	9f00      	ldr	r7, [sp, #0]
 80039d2:	fbc6 2307 	smlal	r2, r3, r6, r7
 80039d6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80039d8:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80039dc:	4434      	add	r4, r6
 80039de:	4646      	mov	r6, r8
 80039e0:	f143 0300 	adc.w	r3, r3, #0
 80039e4:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 80039e8:	f149 0700 	adc.w	r7, r9, #0
 80039ec:	1049      	asrs	r1, r1, #1
 80039ee:	6041      	str	r1, [r0, #4]
 80039f0:	f840 703b 	str.w	r7, [r0, fp, lsl #3]
 80039f4:	606b      	str	r3, [r5, #4]
 80039f6:	9b08      	ldr	r3, [sp, #32]
 80039f8:	42a3      	cmp	r3, r4
 80039fa:	4460      	add	r0, ip
 80039fc:	4465      	add	r5, ip
 80039fe:	d8b8      	bhi.n	8003972 <arm_radix2_butterfly_inverse_q31+0x126>
 8003a00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003a02:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003a04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a06:	440a      	add	r2, r1
 8003a08:	920c      	str	r2, [sp, #48]	; 0x30
 8003a0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	3208      	adds	r2, #8
 8003a10:	455b      	cmp	r3, fp
 8003a12:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a14:	920d      	str	r2, [sp, #52]	; 0x34
 8003a16:	d19e      	bne.n	8003956 <arm_radix2_butterfly_inverse_q31+0x10a>
 8003a18:	46d4      	mov	ip, sl
 8003a1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003a1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003a1e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8003a22:	0852      	lsrs	r2, r2, #1
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2a02      	cmp	r2, #2
 8003a2a:	9211      	str	r2, [sp, #68]	; 0x44
 8003a2c:	9310      	str	r3, [sp, #64]	; 0x40
 8003a2e:	f63f af7c 	bhi.w	800392a <arm_radix2_butterfly_inverse_q31+0xde>
 8003a32:	46e2      	mov	sl, ip
 8003a34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003a36:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8003a3a:	9c08      	ldr	r4, [sp, #32]
 8003a3c:	4652      	mov	r2, sl
 8003a3e:	ea4f 1c0b 	mov.w	ip, fp, lsl #4
 8003a42:	ea4f 084b 	mov.w	r8, fp, lsl #1
 8003a46:	f04f 0e00 	mov.w	lr, #0
 8003a4a:	eb06 070b 	add.w	r7, r6, fp
 8003a4e:	f852 9036 	ldr.w	r9, [r2, r6, lsl #3]
 8003a52:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8003a56:	eb00 0109 	add.w	r1, r0, r9
 8003a5a:	f843 1c04 	str.w	r1, [r3, #-4]
 8003a5e:	f853 5036 	ldr.w	r5, [r3, r6, lsl #3]
 8003a62:	6851      	ldr	r1, [r2, #4]
 8003a64:	ebc9 0000 	rsb	r0, r9, r0
 8003a68:	eb01 0905 	add.w	r9, r1, r5
 8003a6c:	1b49      	subs	r1, r1, r5
 8003a6e:	f8c2 9004 	str.w	r9, [r2, #4]
 8003a72:	f842 0036 	str.w	r0, [r2, r6, lsl #3]
 8003a76:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
 8003a7a:	f852 9037 	ldr.w	r9, [r2, r7, lsl #3]
 8003a7e:	f852 003b 	ldr.w	r0, [r2, fp, lsl #3]
 8003a82:	eb00 0109 	add.w	r1, r0, r9
 8003a86:	f842 103b 	str.w	r1, [r2, fp, lsl #3]
 8003a8a:	f853 5037 	ldr.w	r5, [r3, r7, lsl #3]
 8003a8e:	f853 103b 	ldr.w	r1, [r3, fp, lsl #3]
 8003a92:	44c6      	add	lr, r8
 8003a94:	ebc9 0000 	rsb	r0, r9, r0
 8003a98:	4574      	cmp	r4, lr
 8003a9a:	eb01 0905 	add.w	r9, r1, r5
 8003a9e:	eba1 0105 	sub.w	r1, r1, r5
 8003aa2:	f843 903b 	str.w	r9, [r3, fp, lsl #3]
 8003aa6:	f842 0037 	str.w	r0, [r2, r7, lsl #3]
 8003aaa:	f843 1037 	str.w	r1, [r3, r7, lsl #3]
 8003aae:	4462      	add	r2, ip
 8003ab0:	4463      	add	r3, ip
 8003ab2:	d8cc      	bhi.n	8003a4e <arm_radix2_butterfly_inverse_q31+0x202>
 8003ab4:	b015      	add	sp, #84	; 0x54
 8003ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aba:	9b08      	ldr	r3, [sp, #32]
 8003abc:	468b      	mov	fp, r1
 8003abe:	089e      	lsrs	r6, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f7      	beq.n	8003ab4 <arm_radix2_butterfly_inverse_q31+0x268>
 8003ac4:	1d03      	adds	r3, r0, #4
 8003ac6:	9313      	str	r3, [sp, #76]	; 0x4c
 8003ac8:	e7b7      	b.n	8003a3a <arm_radix2_butterfly_inverse_q31+0x1ee>
 8003aca:	469b      	mov	fp, r3
 8003acc:	e7b2      	b.n	8003a34 <arm_radix2_butterfly_inverse_q31+0x1e8>
 8003ace:	bf00      	nop

08003ad0 <arm_cfft_radix2_q31>:
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	7883      	ldrb	r3, [r0, #2]
 8003ad4:	4604      	mov	r4, r0
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	460d      	mov	r5, r1
 8003ada:	4608      	mov	r0, r1
 8003adc:	6862      	ldr	r2, [r4, #4]
 8003ade:	8821      	ldrh	r1, [r4, #0]
 8003ae0:	89a3      	ldrh	r3, [r4, #12]
 8003ae2:	d009      	beq.n	8003af8 <arm_cfft_radix2_q31+0x28>
 8003ae4:	f7ff fd88 	bl	80035f8 <arm_radix2_butterfly_q31>
 8003ae8:	4628      	mov	r0, r5
 8003aea:	8821      	ldrh	r1, [r4, #0]
 8003aec:	89e2      	ldrh	r2, [r4, #14]
 8003aee:	68a3      	ldr	r3, [r4, #8]
 8003af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003af4:	f000 b8b4 	b.w	8003c60 <arm_bitreversal_q31>
 8003af8:	f7ff fea8 	bl	800384c <arm_radix2_butterfly_inverse_q31>
 8003afc:	e7f4      	b.n	8003ae8 <arm_cfft_radix2_q31+0x18>
 8003afe:	bf00      	nop

08003b00 <arm_cfft_radix2_init_f32>:
 8003b00:	b410      	push	{r4}
 8003b02:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003b06:	4c4c      	ldr	r4, [pc, #304]	; (8003c38 <arm_cfft_radix2_init_f32+0x138>)
 8003b08:	7082      	strb	r2, [r0, #2]
 8003b0a:	70c3      	strb	r3, [r0, #3]
 8003b0c:	8001      	strh	r1, [r0, #0]
 8003b0e:	6044      	str	r4, [r0, #4]
 8003b10:	d072      	beq.n	8003bf8 <arm_cfft_radix2_init_f32+0xf8>
 8003b12:	d917      	bls.n	8003b44 <arm_cfft_radix2_init_f32+0x44>
 8003b14:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003b18:	d07b      	beq.n	8003c12 <arm_cfft_radix2_init_f32+0x112>
 8003b1a:	d950      	bls.n	8003bbe <arm_cfft_radix2_init_f32+0xbe>
 8003b1c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003b20:	d030      	beq.n	8003b84 <arm_cfft_radix2_init_f32+0x84>
 8003b22:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003b26:	f040 8081 	bne.w	8003c2c <arm_cfft_radix2_init_f32+0x12c>
 8003b2a:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 8003b2e:	6103      	str	r3, [r0, #16]
 8003b30:	4a42      	ldr	r2, [pc, #264]	; (8003c3c <arm_cfft_radix2_init_f32+0x13c>)
 8003b32:	6082      	str	r2, [r0, #8]
 8003b34:	2301      	movs	r3, #1
 8003b36:	8183      	strh	r3, [r0, #12]
 8003b38:	81c3      	strh	r3, [r0, #14]
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	b240      	sxtb	r0, r0
 8003b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	2920      	cmp	r1, #32
 8003b46:	d04a      	beq.n	8003bde <arm_cfft_radix2_init_f32+0xde>
 8003b48:	d929      	bls.n	8003b9e <arm_cfft_radix2_init_f32+0x9e>
 8003b4a:	2940      	cmp	r1, #64	; 0x40
 8003b4c:	d00e      	beq.n	8003b6c <arm_cfft_radix2_init_f32+0x6c>
 8003b4e:	2980      	cmp	r1, #128	; 0x80
 8003b50:	d16c      	bne.n	8003c2c <arm_cfft_radix2_init_f32+0x12c>
 8003b52:	f04f 5370 	mov.w	r3, #1006632960	; 0x3c000000
 8003b56:	6103      	str	r3, [r0, #16]
 8003b58:	4a39      	ldr	r2, [pc, #228]	; (8003c40 <arm_cfft_radix2_init_f32+0x140>)
 8003b5a:	6082      	str	r2, [r0, #8]
 8003b5c:	2320      	movs	r3, #32
 8003b5e:	8183      	strh	r3, [r0, #12]
 8003b60:	81c3      	strh	r3, [r0, #14]
 8003b62:	2000      	movs	r0, #0
 8003b64:	b240      	sxtb	r0, r0
 8003b66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 8003b70:	4b34      	ldr	r3, [pc, #208]	; (8003c44 <arm_cfft_radix2_init_f32+0x144>)
 8003b72:	8181      	strh	r1, [r0, #12]
 8003b74:	81c1      	strh	r1, [r0, #14]
 8003b76:	6102      	str	r2, [r0, #16]
 8003b78:	6083      	str	r3, [r0, #8]
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	b240      	sxtb	r0, r0
 8003b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	f04f 5368 	mov.w	r3, #973078528	; 0x3a000000
 8003b88:	6103      	str	r3, [r0, #16]
 8003b8a:	4a2f      	ldr	r2, [pc, #188]	; (8003c48 <arm_cfft_radix2_init_f32+0x148>)
 8003b8c:	6082      	str	r2, [r0, #8]
 8003b8e:	2302      	movs	r3, #2
 8003b90:	8183      	strh	r3, [r0, #12]
 8003b92:	81c3      	strh	r3, [r0, #14]
 8003b94:	2000      	movs	r0, #0
 8003b96:	b240      	sxtb	r0, r0
 8003b98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	2910      	cmp	r1, #16
 8003ba0:	d144      	bne.n	8003c2c <arm_cfft_radix2_init_f32+0x12c>
 8003ba2:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8003ba6:	6103      	str	r3, [r0, #16]
 8003ba8:	4a28      	ldr	r2, [pc, #160]	; (8003c4c <arm_cfft_radix2_init_f32+0x14c>)
 8003baa:	6082      	str	r2, [r0, #8]
 8003bac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bb0:	8183      	strh	r3, [r0, #12]
 8003bb2:	81c3      	strh	r3, [r0, #14]
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	b240      	sxtb	r0, r0
 8003bb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003bc2:	d133      	bne.n	8003c2c <arm_cfft_radix2_init_f32+0x12c>
 8003bc4:	f04f 536c 	mov.w	r3, #989855744	; 0x3b000000
 8003bc8:	6103      	str	r3, [r0, #16]
 8003bca:	4a21      	ldr	r2, [pc, #132]	; (8003c50 <arm_cfft_radix2_init_f32+0x150>)
 8003bcc:	6082      	str	r2, [r0, #8]
 8003bce:	2308      	movs	r3, #8
 8003bd0:	8183      	strh	r3, [r0, #12]
 8003bd2:	81c3      	strh	r3, [r0, #14]
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	b240      	sxtb	r0, r0
 8003bd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	f04f 5374 	mov.w	r3, #1023410176	; 0x3d000000
 8003be2:	6103      	str	r3, [r0, #16]
 8003be4:	4a1b      	ldr	r2, [pc, #108]	; (8003c54 <arm_cfft_radix2_init_f32+0x154>)
 8003be6:	6082      	str	r2, [r0, #8]
 8003be8:	2380      	movs	r3, #128	; 0x80
 8003bea:	8183      	strh	r3, [r0, #12]
 8003bec:	81c3      	strh	r3, [r0, #14]
 8003bee:	2000      	movs	r0, #0
 8003bf0:	b240      	sxtb	r0, r0
 8003bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 8003bfc:	6103      	str	r3, [r0, #16]
 8003bfe:	4a16      	ldr	r2, [pc, #88]	; (8003c58 <arm_cfft_radix2_init_f32+0x158>)
 8003c00:	6082      	str	r2, [r0, #8]
 8003c02:	2310      	movs	r3, #16
 8003c04:	8183      	strh	r3, [r0, #12]
 8003c06:	81c3      	strh	r3, [r0, #14]
 8003c08:	2000      	movs	r0, #0
 8003c0a:	b240      	sxtb	r0, r0
 8003c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	f04f 536a 	mov.w	r3, #981467136	; 0x3a800000
 8003c16:	6103      	str	r3, [r0, #16]
 8003c18:	4a10      	ldr	r2, [pc, #64]	; (8003c5c <arm_cfft_radix2_init_f32+0x15c>)
 8003c1a:	6082      	str	r2, [r0, #8]
 8003c1c:	2304      	movs	r3, #4
 8003c1e:	8183      	strh	r3, [r0, #12]
 8003c20:	81c3      	strh	r3, [r0, #14]
 8003c22:	2000      	movs	r0, #0
 8003c24:	b240      	sxtb	r0, r0
 8003c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	20ff      	movs	r0, #255	; 0xff
 8003c2e:	b240      	sxtb	r0, r0
 8003c30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	08007214 	.word	0x08007214
 8003c3c:	08006a14 	.word	0x08006a14
 8003c40:	08006a52 	.word	0x08006a52
 8003c44:	08006a92 	.word	0x08006a92
 8003c48:	08006a16 	.word	0x08006a16
 8003c4c:	08006c12 	.word	0x08006c12
 8003c50:	08006a22 	.word	0x08006a22
 8003c54:	08006b12 	.word	0x08006b12
 8003c58:	08006a32 	.word	0x08006a32
 8003c5c:	08006a1a 	.word	0x08006a1a

08003c60 <arm_bitreversal_q31>:
 8003c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c64:	b083      	sub	sp, #12
 8003c66:	0849      	lsrs	r1, r1, #1
 8003c68:	2600      	movs	r6, #0
 8003c6a:	0052      	lsls	r2, r2, #1
 8003c6c:	f101 0a01 	add.w	sl, r1, #1
 8003c70:	f1a1 0902 	sub.w	r9, r1, #2
 8003c74:	4605      	mov	r5, r0
 8003c76:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
 8003c7a:	4634      	mov	r4, r6
 8003c7c:	9201      	str	r2, [sp, #4]
 8003c7e:	e021      	b.n	8003cc4 <arm_bitreversal_q31+0x64>
 8003c80:	42b4      	cmp	r4, r6
 8003c82:	d91c      	bls.n	8003cbe <arm_bitreversal_q31+0x5e>
 8003c84:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003c88:	f8d5 b010 	ldr.w	fp, [r5, #16]
 8003c8c:	612a      	str	r2, [r5, #16]
 8003c8e:	f840 b034 	str.w	fp, [r0, r4, lsl #3]
 8003c92:	f850 200e 	ldr.w	r2, [r0, lr]
 8003c96:	f8d5 b014 	ldr.w	fp, [r5, #20]
 8003c9a:	616a      	str	r2, [r5, #20]
 8003c9c:	f840 b00e 	str.w	fp, [r0, lr]
 8003ca0:	f850 2038 	ldr.w	r2, [r0, r8, lsl #3]
 8003ca4:	f8dc e018 	ldr.w	lr, [ip, #24]
 8003ca8:	f8cc 2018 	str.w	r2, [ip, #24]
 8003cac:	f840 e038 	str.w	lr, [r0, r8, lsl #3]
 8003cb0:	59c2      	ldr	r2, [r0, r7]
 8003cb2:	f8dc e01c 	ldr.w	lr, [ip, #28]
 8003cb6:	f8cc 201c 	str.w	r2, [ip, #28]
 8003cba:	f840 e007 	str.w	lr, [r0, r7]
 8003cbe:	3510      	adds	r5, #16
 8003cc0:	f10c 0c10 	add.w	ip, ip, #16
 8003cc4:	440c      	add	r4, r1
 8003cc6:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8003cca:	f850 7034 	ldr.w	r7, [r0, r4, lsl #3]
 8003cce:	60af      	str	r7, [r5, #8]
 8003cd0:	00e7      	lsls	r7, r4, #3
 8003cd2:	f840 e034 	str.w	lr, [r0, r4, lsl #3]
 8003cd6:	3704      	adds	r7, #4
 8003cd8:	68ec      	ldr	r4, [r5, #12]
 8003cda:	59c2      	ldr	r2, [r0, r7]
 8003cdc:	60ea      	str	r2, [r5, #12]
 8003cde:	51c4      	str	r4, [r0, r7]
 8003ce0:	881c      	ldrh	r4, [r3, #0]
 8003ce2:	9a01      	ldr	r2, [sp, #4]
 8003ce4:	3602      	adds	r6, #2
 8003ce6:	eb04 080a 	add.w	r8, r4, sl
 8003cea:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 8003cee:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8003cf2:	454e      	cmp	r6, r9
 8003cf4:	f10e 0e04 	add.w	lr, lr, #4
 8003cf8:	f107 0704 	add.w	r7, r7, #4
 8003cfc:	4413      	add	r3, r2
 8003cfe:	d9bf      	bls.n	8003c80 <arm_bitreversal_q31+0x20>
 8003d00:	b003      	add	sp, #12
 8003d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d06:	bf00      	nop

08003d08 <calloc>:
 8003d08:	4b02      	ldr	r3, [pc, #8]	; (8003d14 <calloc+0xc>)
 8003d0a:	460a      	mov	r2, r1
 8003d0c:	4601      	mov	r1, r0
 8003d0e:	6818      	ldr	r0, [r3, #0]
 8003d10:	f000 b84a 	b.w	8003da8 <_calloc_r>
 8003d14:	2000000c 	.word	0x2000000c

08003d18 <__errno>:
 8003d18:	4b01      	ldr	r3, [pc, #4]	; (8003d20 <__errno+0x8>)
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	2000000c 	.word	0x2000000c

08003d24 <__libc_init_array>:
 8003d24:	b570      	push	{r4, r5, r6, lr}
 8003d26:	4d0d      	ldr	r5, [pc, #52]	; (8003d5c <__libc_init_array+0x38>)
 8003d28:	4c0d      	ldr	r4, [pc, #52]	; (8003d60 <__libc_init_array+0x3c>)
 8003d2a:	1b64      	subs	r4, r4, r5
 8003d2c:	10a4      	asrs	r4, r4, #2
 8003d2e:	2600      	movs	r6, #0
 8003d30:	42a6      	cmp	r6, r4
 8003d32:	d109      	bne.n	8003d48 <__libc_init_array+0x24>
 8003d34:	4d0b      	ldr	r5, [pc, #44]	; (8003d64 <__libc_init_array+0x40>)
 8003d36:	4c0c      	ldr	r4, [pc, #48]	; (8003d68 <__libc_init_array+0x44>)
 8003d38:	f002 fe20 	bl	800697c <_init>
 8003d3c:	1b64      	subs	r4, r4, r5
 8003d3e:	10a4      	asrs	r4, r4, #2
 8003d40:	2600      	movs	r6, #0
 8003d42:	42a6      	cmp	r6, r4
 8003d44:	d105      	bne.n	8003d52 <__libc_init_array+0x2e>
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
 8003d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d4c:	4798      	blx	r3
 8003d4e:	3601      	adds	r6, #1
 8003d50:	e7ee      	b.n	8003d30 <__libc_init_array+0xc>
 8003d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d56:	4798      	blx	r3
 8003d58:	3601      	adds	r6, #1
 8003d5a:	e7f2      	b.n	8003d42 <__libc_init_array+0x1e>
 8003d5c:	0800f5ec 	.word	0x0800f5ec
 8003d60:	0800f5ec 	.word	0x0800f5ec
 8003d64:	0800f5ec 	.word	0x0800f5ec
 8003d68:	0800f5f0 	.word	0x0800f5f0

08003d6c <malloc>:
 8003d6c:	4b02      	ldr	r3, [pc, #8]	; (8003d78 <malloc+0xc>)
 8003d6e:	4601      	mov	r1, r0
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	f000 b89b 	b.w	8003eac <_malloc_r>
 8003d76:	bf00      	nop
 8003d78:	2000000c 	.word	0x2000000c

08003d7c <memcpy>:
 8003d7c:	440a      	add	r2, r1
 8003d7e:	4291      	cmp	r1, r2
 8003d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d84:	d100      	bne.n	8003d88 <memcpy+0xc>
 8003d86:	4770      	bx	lr
 8003d88:	b510      	push	{r4, lr}
 8003d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d92:	4291      	cmp	r1, r2
 8003d94:	d1f9      	bne.n	8003d8a <memcpy+0xe>
 8003d96:	bd10      	pop	{r4, pc}

08003d98 <memset>:
 8003d98:	4402      	add	r2, r0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d100      	bne.n	8003da2 <memset+0xa>
 8003da0:	4770      	bx	lr
 8003da2:	f803 1b01 	strb.w	r1, [r3], #1
 8003da6:	e7f9      	b.n	8003d9c <memset+0x4>

08003da8 <_calloc_r>:
 8003da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003daa:	fba1 2402 	umull	r2, r4, r1, r2
 8003dae:	b94c      	cbnz	r4, 8003dc4 <_calloc_r+0x1c>
 8003db0:	4611      	mov	r1, r2
 8003db2:	9201      	str	r2, [sp, #4]
 8003db4:	f000 f87a 	bl	8003eac <_malloc_r>
 8003db8:	9a01      	ldr	r2, [sp, #4]
 8003dba:	4605      	mov	r5, r0
 8003dbc:	b930      	cbnz	r0, 8003dcc <_calloc_r+0x24>
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	b003      	add	sp, #12
 8003dc2:	bd30      	pop	{r4, r5, pc}
 8003dc4:	220c      	movs	r2, #12
 8003dc6:	6002      	str	r2, [r0, #0]
 8003dc8:	2500      	movs	r5, #0
 8003dca:	e7f8      	b.n	8003dbe <_calloc_r+0x16>
 8003dcc:	4621      	mov	r1, r4
 8003dce:	f7ff ffe3 	bl	8003d98 <memset>
 8003dd2:	e7f4      	b.n	8003dbe <_calloc_r+0x16>

08003dd4 <_free_r>:
 8003dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003dd6:	2900      	cmp	r1, #0
 8003dd8:	d044      	beq.n	8003e64 <_free_r+0x90>
 8003dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dde:	9001      	str	r0, [sp, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f1a1 0404 	sub.w	r4, r1, #4
 8003de6:	bfb8      	it	lt
 8003de8:	18e4      	addlt	r4, r4, r3
 8003dea:	f001 ff4f 	bl	8005c8c <__malloc_lock>
 8003dee:	4a1e      	ldr	r2, [pc, #120]	; (8003e68 <_free_r+0x94>)
 8003df0:	9801      	ldr	r0, [sp, #4]
 8003df2:	6813      	ldr	r3, [r2, #0]
 8003df4:	b933      	cbnz	r3, 8003e04 <_free_r+0x30>
 8003df6:	6063      	str	r3, [r4, #4]
 8003df8:	6014      	str	r4, [r2, #0]
 8003dfa:	b003      	add	sp, #12
 8003dfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e00:	f001 bf4a 	b.w	8005c98 <__malloc_unlock>
 8003e04:	42a3      	cmp	r3, r4
 8003e06:	d908      	bls.n	8003e1a <_free_r+0x46>
 8003e08:	6825      	ldr	r5, [r4, #0]
 8003e0a:	1961      	adds	r1, r4, r5
 8003e0c:	428b      	cmp	r3, r1
 8003e0e:	bf01      	itttt	eq
 8003e10:	6819      	ldreq	r1, [r3, #0]
 8003e12:	685b      	ldreq	r3, [r3, #4]
 8003e14:	1949      	addeq	r1, r1, r5
 8003e16:	6021      	streq	r1, [r4, #0]
 8003e18:	e7ed      	b.n	8003df6 <_free_r+0x22>
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	b10b      	cbz	r3, 8003e24 <_free_r+0x50>
 8003e20:	42a3      	cmp	r3, r4
 8003e22:	d9fa      	bls.n	8003e1a <_free_r+0x46>
 8003e24:	6811      	ldr	r1, [r2, #0]
 8003e26:	1855      	adds	r5, r2, r1
 8003e28:	42a5      	cmp	r5, r4
 8003e2a:	d10b      	bne.n	8003e44 <_free_r+0x70>
 8003e2c:	6824      	ldr	r4, [r4, #0]
 8003e2e:	4421      	add	r1, r4
 8003e30:	1854      	adds	r4, r2, r1
 8003e32:	42a3      	cmp	r3, r4
 8003e34:	6011      	str	r1, [r2, #0]
 8003e36:	d1e0      	bne.n	8003dfa <_free_r+0x26>
 8003e38:	681c      	ldr	r4, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	6053      	str	r3, [r2, #4]
 8003e3e:	4421      	add	r1, r4
 8003e40:	6011      	str	r1, [r2, #0]
 8003e42:	e7da      	b.n	8003dfa <_free_r+0x26>
 8003e44:	d902      	bls.n	8003e4c <_free_r+0x78>
 8003e46:	230c      	movs	r3, #12
 8003e48:	6003      	str	r3, [r0, #0]
 8003e4a:	e7d6      	b.n	8003dfa <_free_r+0x26>
 8003e4c:	6825      	ldr	r5, [r4, #0]
 8003e4e:	1961      	adds	r1, r4, r5
 8003e50:	428b      	cmp	r3, r1
 8003e52:	bf04      	itt	eq
 8003e54:	6819      	ldreq	r1, [r3, #0]
 8003e56:	685b      	ldreq	r3, [r3, #4]
 8003e58:	6063      	str	r3, [r4, #4]
 8003e5a:	bf04      	itt	eq
 8003e5c:	1949      	addeq	r1, r1, r5
 8003e5e:	6021      	streq	r1, [r4, #0]
 8003e60:	6054      	str	r4, [r2, #4]
 8003e62:	e7ca      	b.n	8003dfa <_free_r+0x26>
 8003e64:	b003      	add	sp, #12
 8003e66:	bd30      	pop	{r4, r5, pc}
 8003e68:	2000025c 	.word	0x2000025c

08003e6c <sbrk_aligned>:
 8003e6c:	b570      	push	{r4, r5, r6, lr}
 8003e6e:	4e0e      	ldr	r6, [pc, #56]	; (8003ea8 <sbrk_aligned+0x3c>)
 8003e70:	460c      	mov	r4, r1
 8003e72:	6831      	ldr	r1, [r6, #0]
 8003e74:	4605      	mov	r5, r0
 8003e76:	b911      	cbnz	r1, 8003e7e <sbrk_aligned+0x12>
 8003e78:	f000 fd9a 	bl	80049b0 <_sbrk_r>
 8003e7c:	6030      	str	r0, [r6, #0]
 8003e7e:	4621      	mov	r1, r4
 8003e80:	4628      	mov	r0, r5
 8003e82:	f000 fd95 	bl	80049b0 <_sbrk_r>
 8003e86:	1c43      	adds	r3, r0, #1
 8003e88:	d00a      	beq.n	8003ea0 <sbrk_aligned+0x34>
 8003e8a:	1cc4      	adds	r4, r0, #3
 8003e8c:	f024 0403 	bic.w	r4, r4, #3
 8003e90:	42a0      	cmp	r0, r4
 8003e92:	d007      	beq.n	8003ea4 <sbrk_aligned+0x38>
 8003e94:	1a21      	subs	r1, r4, r0
 8003e96:	4628      	mov	r0, r5
 8003e98:	f000 fd8a 	bl	80049b0 <_sbrk_r>
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	d101      	bne.n	8003ea4 <sbrk_aligned+0x38>
 8003ea0:	f04f 34ff 	mov.w	r4, #4294967295
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	bd70      	pop	{r4, r5, r6, pc}
 8003ea8:	20000260 	.word	0x20000260

08003eac <_malloc_r>:
 8003eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eb0:	1ccd      	adds	r5, r1, #3
 8003eb2:	f025 0503 	bic.w	r5, r5, #3
 8003eb6:	3508      	adds	r5, #8
 8003eb8:	2d0c      	cmp	r5, #12
 8003eba:	bf38      	it	cc
 8003ebc:	250c      	movcc	r5, #12
 8003ebe:	2d00      	cmp	r5, #0
 8003ec0:	4607      	mov	r7, r0
 8003ec2:	db01      	blt.n	8003ec8 <_malloc_r+0x1c>
 8003ec4:	42a9      	cmp	r1, r5
 8003ec6:	d905      	bls.n	8003ed4 <_malloc_r+0x28>
 8003ec8:	230c      	movs	r3, #12
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	2600      	movs	r6, #0
 8003ece:	4630      	mov	r0, r6
 8003ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ed4:	4e2e      	ldr	r6, [pc, #184]	; (8003f90 <_malloc_r+0xe4>)
 8003ed6:	f001 fed9 	bl	8005c8c <__malloc_lock>
 8003eda:	6833      	ldr	r3, [r6, #0]
 8003edc:	461c      	mov	r4, r3
 8003ede:	bb34      	cbnz	r4, 8003f2e <_malloc_r+0x82>
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	4638      	mov	r0, r7
 8003ee4:	f7ff ffc2 	bl	8003e6c <sbrk_aligned>
 8003ee8:	1c43      	adds	r3, r0, #1
 8003eea:	4604      	mov	r4, r0
 8003eec:	d14d      	bne.n	8003f8a <_malloc_r+0xde>
 8003eee:	6834      	ldr	r4, [r6, #0]
 8003ef0:	4626      	mov	r6, r4
 8003ef2:	2e00      	cmp	r6, #0
 8003ef4:	d140      	bne.n	8003f78 <_malloc_r+0xcc>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	4631      	mov	r1, r6
 8003efa:	4638      	mov	r0, r7
 8003efc:	eb04 0803 	add.w	r8, r4, r3
 8003f00:	f000 fd56 	bl	80049b0 <_sbrk_r>
 8003f04:	4580      	cmp	r8, r0
 8003f06:	d13a      	bne.n	8003f7e <_malloc_r+0xd2>
 8003f08:	6821      	ldr	r1, [r4, #0]
 8003f0a:	3503      	adds	r5, #3
 8003f0c:	1a6d      	subs	r5, r5, r1
 8003f0e:	f025 0503 	bic.w	r5, r5, #3
 8003f12:	3508      	adds	r5, #8
 8003f14:	2d0c      	cmp	r5, #12
 8003f16:	bf38      	it	cc
 8003f18:	250c      	movcc	r5, #12
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	4638      	mov	r0, r7
 8003f1e:	f7ff ffa5 	bl	8003e6c <sbrk_aligned>
 8003f22:	3001      	adds	r0, #1
 8003f24:	d02b      	beq.n	8003f7e <_malloc_r+0xd2>
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	442b      	add	r3, r5
 8003f2a:	6023      	str	r3, [r4, #0]
 8003f2c:	e00e      	b.n	8003f4c <_malloc_r+0xa0>
 8003f2e:	6822      	ldr	r2, [r4, #0]
 8003f30:	1b52      	subs	r2, r2, r5
 8003f32:	d41e      	bmi.n	8003f72 <_malloc_r+0xc6>
 8003f34:	2a0b      	cmp	r2, #11
 8003f36:	d916      	bls.n	8003f66 <_malloc_r+0xba>
 8003f38:	1961      	adds	r1, r4, r5
 8003f3a:	42a3      	cmp	r3, r4
 8003f3c:	6025      	str	r5, [r4, #0]
 8003f3e:	bf18      	it	ne
 8003f40:	6059      	strne	r1, [r3, #4]
 8003f42:	6863      	ldr	r3, [r4, #4]
 8003f44:	bf08      	it	eq
 8003f46:	6031      	streq	r1, [r6, #0]
 8003f48:	5162      	str	r2, [r4, r5]
 8003f4a:	604b      	str	r3, [r1, #4]
 8003f4c:	4638      	mov	r0, r7
 8003f4e:	f104 060b 	add.w	r6, r4, #11
 8003f52:	f001 fea1 	bl	8005c98 <__malloc_unlock>
 8003f56:	f026 0607 	bic.w	r6, r6, #7
 8003f5a:	1d23      	adds	r3, r4, #4
 8003f5c:	1af2      	subs	r2, r6, r3
 8003f5e:	d0b6      	beq.n	8003ece <_malloc_r+0x22>
 8003f60:	1b9b      	subs	r3, r3, r6
 8003f62:	50a3      	str	r3, [r4, r2]
 8003f64:	e7b3      	b.n	8003ece <_malloc_r+0x22>
 8003f66:	6862      	ldr	r2, [r4, #4]
 8003f68:	42a3      	cmp	r3, r4
 8003f6a:	bf0c      	ite	eq
 8003f6c:	6032      	streq	r2, [r6, #0]
 8003f6e:	605a      	strne	r2, [r3, #4]
 8003f70:	e7ec      	b.n	8003f4c <_malloc_r+0xa0>
 8003f72:	4623      	mov	r3, r4
 8003f74:	6864      	ldr	r4, [r4, #4]
 8003f76:	e7b2      	b.n	8003ede <_malloc_r+0x32>
 8003f78:	4634      	mov	r4, r6
 8003f7a:	6876      	ldr	r6, [r6, #4]
 8003f7c:	e7b9      	b.n	8003ef2 <_malloc_r+0x46>
 8003f7e:	230c      	movs	r3, #12
 8003f80:	603b      	str	r3, [r7, #0]
 8003f82:	4638      	mov	r0, r7
 8003f84:	f001 fe88 	bl	8005c98 <__malloc_unlock>
 8003f88:	e7a1      	b.n	8003ece <_malloc_r+0x22>
 8003f8a:	6025      	str	r5, [r4, #0]
 8003f8c:	e7de      	b.n	8003f4c <_malloc_r+0xa0>
 8003f8e:	bf00      	nop
 8003f90:	2000025c 	.word	0x2000025c

08003f94 <__cvt>:
 8003f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f98:	ec55 4b10 	vmov	r4, r5, d0
 8003f9c:	2d00      	cmp	r5, #0
 8003f9e:	460e      	mov	r6, r1
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	462b      	mov	r3, r5
 8003fa4:	bfbb      	ittet	lt
 8003fa6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003faa:	461d      	movlt	r5, r3
 8003fac:	2300      	movge	r3, #0
 8003fae:	232d      	movlt	r3, #45	; 0x2d
 8003fb0:	700b      	strb	r3, [r1, #0]
 8003fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003fb8:	4691      	mov	r9, r2
 8003fba:	f023 0820 	bic.w	r8, r3, #32
 8003fbe:	bfbc      	itt	lt
 8003fc0:	4622      	movlt	r2, r4
 8003fc2:	4614      	movlt	r4, r2
 8003fc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003fc8:	d005      	beq.n	8003fd6 <__cvt+0x42>
 8003fca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003fce:	d100      	bne.n	8003fd2 <__cvt+0x3e>
 8003fd0:	3601      	adds	r6, #1
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	e000      	b.n	8003fd8 <__cvt+0x44>
 8003fd6:	2103      	movs	r1, #3
 8003fd8:	ab03      	add	r3, sp, #12
 8003fda:	9301      	str	r3, [sp, #4]
 8003fdc:	ab02      	add	r3, sp, #8
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	ec45 4b10 	vmov	d0, r4, r5
 8003fe4:	4653      	mov	r3, sl
 8003fe6:	4632      	mov	r2, r6
 8003fe8:	f000 fe3e 	bl	8004c68 <_dtoa_r>
 8003fec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003ff0:	4607      	mov	r7, r0
 8003ff2:	d102      	bne.n	8003ffa <__cvt+0x66>
 8003ff4:	f019 0f01 	tst.w	r9, #1
 8003ff8:	d022      	beq.n	8004040 <__cvt+0xac>
 8003ffa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ffe:	eb07 0906 	add.w	r9, r7, r6
 8004002:	d110      	bne.n	8004026 <__cvt+0x92>
 8004004:	783b      	ldrb	r3, [r7, #0]
 8004006:	2b30      	cmp	r3, #48	; 0x30
 8004008:	d10a      	bne.n	8004020 <__cvt+0x8c>
 800400a:	2200      	movs	r2, #0
 800400c:	2300      	movs	r3, #0
 800400e:	4620      	mov	r0, r4
 8004010:	4629      	mov	r1, r5
 8004012:	f7fc fd59 	bl	8000ac8 <__aeabi_dcmpeq>
 8004016:	b918      	cbnz	r0, 8004020 <__cvt+0x8c>
 8004018:	f1c6 0601 	rsb	r6, r6, #1
 800401c:	f8ca 6000 	str.w	r6, [sl]
 8004020:	f8da 3000 	ldr.w	r3, [sl]
 8004024:	4499      	add	r9, r3
 8004026:	2200      	movs	r2, #0
 8004028:	2300      	movs	r3, #0
 800402a:	4620      	mov	r0, r4
 800402c:	4629      	mov	r1, r5
 800402e:	f7fc fd4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004032:	b108      	cbz	r0, 8004038 <__cvt+0xa4>
 8004034:	f8cd 900c 	str.w	r9, [sp, #12]
 8004038:	2230      	movs	r2, #48	; 0x30
 800403a:	9b03      	ldr	r3, [sp, #12]
 800403c:	454b      	cmp	r3, r9
 800403e:	d307      	bcc.n	8004050 <__cvt+0xbc>
 8004040:	9b03      	ldr	r3, [sp, #12]
 8004042:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004044:	1bdb      	subs	r3, r3, r7
 8004046:	4638      	mov	r0, r7
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	b004      	add	sp, #16
 800404c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004050:	1c59      	adds	r1, r3, #1
 8004052:	9103      	str	r1, [sp, #12]
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	e7f0      	b.n	800403a <__cvt+0xa6>

08004058 <__exponent>:
 8004058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800405a:	4603      	mov	r3, r0
 800405c:	2900      	cmp	r1, #0
 800405e:	bfb8      	it	lt
 8004060:	4249      	neglt	r1, r1
 8004062:	f803 2b02 	strb.w	r2, [r3], #2
 8004066:	bfb4      	ite	lt
 8004068:	222d      	movlt	r2, #45	; 0x2d
 800406a:	222b      	movge	r2, #43	; 0x2b
 800406c:	2909      	cmp	r1, #9
 800406e:	7042      	strb	r2, [r0, #1]
 8004070:	dd2a      	ble.n	80040c8 <__exponent+0x70>
 8004072:	f10d 0407 	add.w	r4, sp, #7
 8004076:	46a4      	mov	ip, r4
 8004078:	270a      	movs	r7, #10
 800407a:	46a6      	mov	lr, r4
 800407c:	460a      	mov	r2, r1
 800407e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004082:	fb07 1516 	mls	r5, r7, r6, r1
 8004086:	3530      	adds	r5, #48	; 0x30
 8004088:	2a63      	cmp	r2, #99	; 0x63
 800408a:	f104 34ff 	add.w	r4, r4, #4294967295
 800408e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004092:	4631      	mov	r1, r6
 8004094:	dcf1      	bgt.n	800407a <__exponent+0x22>
 8004096:	3130      	adds	r1, #48	; 0x30
 8004098:	f1ae 0502 	sub.w	r5, lr, #2
 800409c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80040a0:	1c44      	adds	r4, r0, #1
 80040a2:	4629      	mov	r1, r5
 80040a4:	4561      	cmp	r1, ip
 80040a6:	d30a      	bcc.n	80040be <__exponent+0x66>
 80040a8:	f10d 0209 	add.w	r2, sp, #9
 80040ac:	eba2 020e 	sub.w	r2, r2, lr
 80040b0:	4565      	cmp	r5, ip
 80040b2:	bf88      	it	hi
 80040b4:	2200      	movhi	r2, #0
 80040b6:	4413      	add	r3, r2
 80040b8:	1a18      	subs	r0, r3, r0
 80040ba:	b003      	add	sp, #12
 80040bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80040c6:	e7ed      	b.n	80040a4 <__exponent+0x4c>
 80040c8:	2330      	movs	r3, #48	; 0x30
 80040ca:	3130      	adds	r1, #48	; 0x30
 80040cc:	7083      	strb	r3, [r0, #2]
 80040ce:	70c1      	strb	r1, [r0, #3]
 80040d0:	1d03      	adds	r3, r0, #4
 80040d2:	e7f1      	b.n	80040b8 <__exponent+0x60>

080040d4 <_printf_float>:
 80040d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d8:	ed2d 8b02 	vpush	{d8}
 80040dc:	b08d      	sub	sp, #52	; 0x34
 80040de:	460c      	mov	r4, r1
 80040e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80040e4:	4616      	mov	r6, r2
 80040e6:	461f      	mov	r7, r3
 80040e8:	4605      	mov	r5, r0
 80040ea:	f001 fd63 	bl	8005bb4 <_localeconv_r>
 80040ee:	f8d0 a000 	ldr.w	sl, [r0]
 80040f2:	4650      	mov	r0, sl
 80040f4:	f7fc f86c 	bl	80001d0 <strlen>
 80040f8:	2300      	movs	r3, #0
 80040fa:	930a      	str	r3, [sp, #40]	; 0x28
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	9305      	str	r3, [sp, #20]
 8004100:	f8d8 3000 	ldr.w	r3, [r8]
 8004104:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004108:	3307      	adds	r3, #7
 800410a:	f023 0307 	bic.w	r3, r3, #7
 800410e:	f103 0208 	add.w	r2, r3, #8
 8004112:	f8c8 2000 	str.w	r2, [r8]
 8004116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800411e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004122:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004126:	9307      	str	r3, [sp, #28]
 8004128:	f8cd 8018 	str.w	r8, [sp, #24]
 800412c:	ee08 0a10 	vmov	s16, r0
 8004130:	4b9f      	ldr	r3, [pc, #636]	; (80043b0 <_printf_float+0x2dc>)
 8004132:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004136:	f04f 32ff 	mov.w	r2, #4294967295
 800413a:	f7fc fcf7 	bl	8000b2c <__aeabi_dcmpun>
 800413e:	bb88      	cbnz	r0, 80041a4 <_printf_float+0xd0>
 8004140:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004144:	4b9a      	ldr	r3, [pc, #616]	; (80043b0 <_printf_float+0x2dc>)
 8004146:	f04f 32ff 	mov.w	r2, #4294967295
 800414a:	f7fc fcd1 	bl	8000af0 <__aeabi_dcmple>
 800414e:	bb48      	cbnz	r0, 80041a4 <_printf_float+0xd0>
 8004150:	2200      	movs	r2, #0
 8004152:	2300      	movs	r3, #0
 8004154:	4640      	mov	r0, r8
 8004156:	4649      	mov	r1, r9
 8004158:	f7fc fcc0 	bl	8000adc <__aeabi_dcmplt>
 800415c:	b110      	cbz	r0, 8004164 <_printf_float+0x90>
 800415e:	232d      	movs	r3, #45	; 0x2d
 8004160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004164:	4b93      	ldr	r3, [pc, #588]	; (80043b4 <_printf_float+0x2e0>)
 8004166:	4894      	ldr	r0, [pc, #592]	; (80043b8 <_printf_float+0x2e4>)
 8004168:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800416c:	bf94      	ite	ls
 800416e:	4698      	movls	r8, r3
 8004170:	4680      	movhi	r8, r0
 8004172:	2303      	movs	r3, #3
 8004174:	6123      	str	r3, [r4, #16]
 8004176:	9b05      	ldr	r3, [sp, #20]
 8004178:	f023 0204 	bic.w	r2, r3, #4
 800417c:	6022      	str	r2, [r4, #0]
 800417e:	f04f 0900 	mov.w	r9, #0
 8004182:	9700      	str	r7, [sp, #0]
 8004184:	4633      	mov	r3, r6
 8004186:	aa0b      	add	r2, sp, #44	; 0x2c
 8004188:	4621      	mov	r1, r4
 800418a:	4628      	mov	r0, r5
 800418c:	f000 f9d8 	bl	8004540 <_printf_common>
 8004190:	3001      	adds	r0, #1
 8004192:	f040 8090 	bne.w	80042b6 <_printf_float+0x1e2>
 8004196:	f04f 30ff 	mov.w	r0, #4294967295
 800419a:	b00d      	add	sp, #52	; 0x34
 800419c:	ecbd 8b02 	vpop	{d8}
 80041a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041a4:	4642      	mov	r2, r8
 80041a6:	464b      	mov	r3, r9
 80041a8:	4640      	mov	r0, r8
 80041aa:	4649      	mov	r1, r9
 80041ac:	f7fc fcbe 	bl	8000b2c <__aeabi_dcmpun>
 80041b0:	b140      	cbz	r0, 80041c4 <_printf_float+0xf0>
 80041b2:	464b      	mov	r3, r9
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bfbc      	itt	lt
 80041b8:	232d      	movlt	r3, #45	; 0x2d
 80041ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80041be:	487f      	ldr	r0, [pc, #508]	; (80043bc <_printf_float+0x2e8>)
 80041c0:	4b7f      	ldr	r3, [pc, #508]	; (80043c0 <_printf_float+0x2ec>)
 80041c2:	e7d1      	b.n	8004168 <_printf_float+0x94>
 80041c4:	6863      	ldr	r3, [r4, #4]
 80041c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80041ca:	9206      	str	r2, [sp, #24]
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	d13f      	bne.n	8004250 <_printf_float+0x17c>
 80041d0:	2306      	movs	r3, #6
 80041d2:	6063      	str	r3, [r4, #4]
 80041d4:	9b05      	ldr	r3, [sp, #20]
 80041d6:	6861      	ldr	r1, [r4, #4]
 80041d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80041dc:	2300      	movs	r3, #0
 80041de:	9303      	str	r3, [sp, #12]
 80041e0:	ab0a      	add	r3, sp, #40	; 0x28
 80041e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80041e6:	ab09      	add	r3, sp, #36	; 0x24
 80041e8:	ec49 8b10 	vmov	d0, r8, r9
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	6022      	str	r2, [r4, #0]
 80041f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80041f4:	4628      	mov	r0, r5
 80041f6:	f7ff fecd 	bl	8003f94 <__cvt>
 80041fa:	9b06      	ldr	r3, [sp, #24]
 80041fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041fe:	2b47      	cmp	r3, #71	; 0x47
 8004200:	4680      	mov	r8, r0
 8004202:	d108      	bne.n	8004216 <_printf_float+0x142>
 8004204:	1cc8      	adds	r0, r1, #3
 8004206:	db02      	blt.n	800420e <_printf_float+0x13a>
 8004208:	6863      	ldr	r3, [r4, #4]
 800420a:	4299      	cmp	r1, r3
 800420c:	dd41      	ble.n	8004292 <_printf_float+0x1be>
 800420e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004212:	fa5f fb8b 	uxtb.w	fp, fp
 8004216:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800421a:	d820      	bhi.n	800425e <_printf_float+0x18a>
 800421c:	3901      	subs	r1, #1
 800421e:	465a      	mov	r2, fp
 8004220:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004224:	9109      	str	r1, [sp, #36]	; 0x24
 8004226:	f7ff ff17 	bl	8004058 <__exponent>
 800422a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800422c:	1813      	adds	r3, r2, r0
 800422e:	2a01      	cmp	r2, #1
 8004230:	4681      	mov	r9, r0
 8004232:	6123      	str	r3, [r4, #16]
 8004234:	dc02      	bgt.n	800423c <_printf_float+0x168>
 8004236:	6822      	ldr	r2, [r4, #0]
 8004238:	07d2      	lsls	r2, r2, #31
 800423a:	d501      	bpl.n	8004240 <_printf_float+0x16c>
 800423c:	3301      	adds	r3, #1
 800423e:	6123      	str	r3, [r4, #16]
 8004240:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004244:	2b00      	cmp	r3, #0
 8004246:	d09c      	beq.n	8004182 <_printf_float+0xae>
 8004248:	232d      	movs	r3, #45	; 0x2d
 800424a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800424e:	e798      	b.n	8004182 <_printf_float+0xae>
 8004250:	9a06      	ldr	r2, [sp, #24]
 8004252:	2a47      	cmp	r2, #71	; 0x47
 8004254:	d1be      	bne.n	80041d4 <_printf_float+0x100>
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1bc      	bne.n	80041d4 <_printf_float+0x100>
 800425a:	2301      	movs	r3, #1
 800425c:	e7b9      	b.n	80041d2 <_printf_float+0xfe>
 800425e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004262:	d118      	bne.n	8004296 <_printf_float+0x1c2>
 8004264:	2900      	cmp	r1, #0
 8004266:	6863      	ldr	r3, [r4, #4]
 8004268:	dd0b      	ble.n	8004282 <_printf_float+0x1ae>
 800426a:	6121      	str	r1, [r4, #16]
 800426c:	b913      	cbnz	r3, 8004274 <_printf_float+0x1a0>
 800426e:	6822      	ldr	r2, [r4, #0]
 8004270:	07d0      	lsls	r0, r2, #31
 8004272:	d502      	bpl.n	800427a <_printf_float+0x1a6>
 8004274:	3301      	adds	r3, #1
 8004276:	440b      	add	r3, r1
 8004278:	6123      	str	r3, [r4, #16]
 800427a:	65a1      	str	r1, [r4, #88]	; 0x58
 800427c:	f04f 0900 	mov.w	r9, #0
 8004280:	e7de      	b.n	8004240 <_printf_float+0x16c>
 8004282:	b913      	cbnz	r3, 800428a <_printf_float+0x1b6>
 8004284:	6822      	ldr	r2, [r4, #0]
 8004286:	07d2      	lsls	r2, r2, #31
 8004288:	d501      	bpl.n	800428e <_printf_float+0x1ba>
 800428a:	3302      	adds	r3, #2
 800428c:	e7f4      	b.n	8004278 <_printf_float+0x1a4>
 800428e:	2301      	movs	r3, #1
 8004290:	e7f2      	b.n	8004278 <_printf_float+0x1a4>
 8004292:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004298:	4299      	cmp	r1, r3
 800429a:	db05      	blt.n	80042a8 <_printf_float+0x1d4>
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	6121      	str	r1, [r4, #16]
 80042a0:	07d8      	lsls	r0, r3, #31
 80042a2:	d5ea      	bpl.n	800427a <_printf_float+0x1a6>
 80042a4:	1c4b      	adds	r3, r1, #1
 80042a6:	e7e7      	b.n	8004278 <_printf_float+0x1a4>
 80042a8:	2900      	cmp	r1, #0
 80042aa:	bfd4      	ite	le
 80042ac:	f1c1 0202 	rsble	r2, r1, #2
 80042b0:	2201      	movgt	r2, #1
 80042b2:	4413      	add	r3, r2
 80042b4:	e7e0      	b.n	8004278 <_printf_float+0x1a4>
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	055a      	lsls	r2, r3, #21
 80042ba:	d407      	bmi.n	80042cc <_printf_float+0x1f8>
 80042bc:	6923      	ldr	r3, [r4, #16]
 80042be:	4642      	mov	r2, r8
 80042c0:	4631      	mov	r1, r6
 80042c2:	4628      	mov	r0, r5
 80042c4:	47b8      	blx	r7
 80042c6:	3001      	adds	r0, #1
 80042c8:	d12c      	bne.n	8004324 <_printf_float+0x250>
 80042ca:	e764      	b.n	8004196 <_printf_float+0xc2>
 80042cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80042d0:	f240 80e0 	bls.w	8004494 <_printf_float+0x3c0>
 80042d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042d8:	2200      	movs	r2, #0
 80042da:	2300      	movs	r3, #0
 80042dc:	f7fc fbf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80042e0:	2800      	cmp	r0, #0
 80042e2:	d034      	beq.n	800434e <_printf_float+0x27a>
 80042e4:	4a37      	ldr	r2, [pc, #220]	; (80043c4 <_printf_float+0x2f0>)
 80042e6:	2301      	movs	r3, #1
 80042e8:	4631      	mov	r1, r6
 80042ea:	4628      	mov	r0, r5
 80042ec:	47b8      	blx	r7
 80042ee:	3001      	adds	r0, #1
 80042f0:	f43f af51 	beq.w	8004196 <_printf_float+0xc2>
 80042f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042f8:	429a      	cmp	r2, r3
 80042fa:	db02      	blt.n	8004302 <_printf_float+0x22e>
 80042fc:	6823      	ldr	r3, [r4, #0]
 80042fe:	07d8      	lsls	r0, r3, #31
 8004300:	d510      	bpl.n	8004324 <_printf_float+0x250>
 8004302:	ee18 3a10 	vmov	r3, s16
 8004306:	4652      	mov	r2, sl
 8004308:	4631      	mov	r1, r6
 800430a:	4628      	mov	r0, r5
 800430c:	47b8      	blx	r7
 800430e:	3001      	adds	r0, #1
 8004310:	f43f af41 	beq.w	8004196 <_printf_float+0xc2>
 8004314:	f04f 0800 	mov.w	r8, #0
 8004318:	f104 091a 	add.w	r9, r4, #26
 800431c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800431e:	3b01      	subs	r3, #1
 8004320:	4543      	cmp	r3, r8
 8004322:	dc09      	bgt.n	8004338 <_printf_float+0x264>
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	079b      	lsls	r3, r3, #30
 8004328:	f100 8105 	bmi.w	8004536 <_printf_float+0x462>
 800432c:	68e0      	ldr	r0, [r4, #12]
 800432e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004330:	4298      	cmp	r0, r3
 8004332:	bfb8      	it	lt
 8004334:	4618      	movlt	r0, r3
 8004336:	e730      	b.n	800419a <_printf_float+0xc6>
 8004338:	2301      	movs	r3, #1
 800433a:	464a      	mov	r2, r9
 800433c:	4631      	mov	r1, r6
 800433e:	4628      	mov	r0, r5
 8004340:	47b8      	blx	r7
 8004342:	3001      	adds	r0, #1
 8004344:	f43f af27 	beq.w	8004196 <_printf_float+0xc2>
 8004348:	f108 0801 	add.w	r8, r8, #1
 800434c:	e7e6      	b.n	800431c <_printf_float+0x248>
 800434e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004350:	2b00      	cmp	r3, #0
 8004352:	dc39      	bgt.n	80043c8 <_printf_float+0x2f4>
 8004354:	4a1b      	ldr	r2, [pc, #108]	; (80043c4 <_printf_float+0x2f0>)
 8004356:	2301      	movs	r3, #1
 8004358:	4631      	mov	r1, r6
 800435a:	4628      	mov	r0, r5
 800435c:	47b8      	blx	r7
 800435e:	3001      	adds	r0, #1
 8004360:	f43f af19 	beq.w	8004196 <_printf_float+0xc2>
 8004364:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004368:	4313      	orrs	r3, r2
 800436a:	d102      	bne.n	8004372 <_printf_float+0x29e>
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	07d9      	lsls	r1, r3, #31
 8004370:	d5d8      	bpl.n	8004324 <_printf_float+0x250>
 8004372:	ee18 3a10 	vmov	r3, s16
 8004376:	4652      	mov	r2, sl
 8004378:	4631      	mov	r1, r6
 800437a:	4628      	mov	r0, r5
 800437c:	47b8      	blx	r7
 800437e:	3001      	adds	r0, #1
 8004380:	f43f af09 	beq.w	8004196 <_printf_float+0xc2>
 8004384:	f04f 0900 	mov.w	r9, #0
 8004388:	f104 0a1a 	add.w	sl, r4, #26
 800438c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800438e:	425b      	negs	r3, r3
 8004390:	454b      	cmp	r3, r9
 8004392:	dc01      	bgt.n	8004398 <_printf_float+0x2c4>
 8004394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004396:	e792      	b.n	80042be <_printf_float+0x1ea>
 8004398:	2301      	movs	r3, #1
 800439a:	4652      	mov	r2, sl
 800439c:	4631      	mov	r1, r6
 800439e:	4628      	mov	r0, r5
 80043a0:	47b8      	blx	r7
 80043a2:	3001      	adds	r0, #1
 80043a4:	f43f aef7 	beq.w	8004196 <_printf_float+0xc2>
 80043a8:	f109 0901 	add.w	r9, r9, #1
 80043ac:	e7ee      	b.n	800438c <_printf_float+0x2b8>
 80043ae:	bf00      	nop
 80043b0:	7fefffff 	.word	0x7fefffff
 80043b4:	0800f218 	.word	0x0800f218
 80043b8:	0800f21c 	.word	0x0800f21c
 80043bc:	0800f224 	.word	0x0800f224
 80043c0:	0800f220 	.word	0x0800f220
 80043c4:	0800f228 	.word	0x0800f228
 80043c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043cc:	429a      	cmp	r2, r3
 80043ce:	bfa8      	it	ge
 80043d0:	461a      	movge	r2, r3
 80043d2:	2a00      	cmp	r2, #0
 80043d4:	4691      	mov	r9, r2
 80043d6:	dc37      	bgt.n	8004448 <_printf_float+0x374>
 80043d8:	f04f 0b00 	mov.w	fp, #0
 80043dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043e0:	f104 021a 	add.w	r2, r4, #26
 80043e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043e6:	9305      	str	r3, [sp, #20]
 80043e8:	eba3 0309 	sub.w	r3, r3, r9
 80043ec:	455b      	cmp	r3, fp
 80043ee:	dc33      	bgt.n	8004458 <_printf_float+0x384>
 80043f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043f4:	429a      	cmp	r2, r3
 80043f6:	db3b      	blt.n	8004470 <_printf_float+0x39c>
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	07da      	lsls	r2, r3, #31
 80043fc:	d438      	bmi.n	8004470 <_printf_float+0x39c>
 80043fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004400:	9a05      	ldr	r2, [sp, #20]
 8004402:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004404:	1a9a      	subs	r2, r3, r2
 8004406:	eba3 0901 	sub.w	r9, r3, r1
 800440a:	4591      	cmp	r9, r2
 800440c:	bfa8      	it	ge
 800440e:	4691      	movge	r9, r2
 8004410:	f1b9 0f00 	cmp.w	r9, #0
 8004414:	dc35      	bgt.n	8004482 <_printf_float+0x3ae>
 8004416:	f04f 0800 	mov.w	r8, #0
 800441a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800441e:	f104 0a1a 	add.w	sl, r4, #26
 8004422:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004426:	1a9b      	subs	r3, r3, r2
 8004428:	eba3 0309 	sub.w	r3, r3, r9
 800442c:	4543      	cmp	r3, r8
 800442e:	f77f af79 	ble.w	8004324 <_printf_float+0x250>
 8004432:	2301      	movs	r3, #1
 8004434:	4652      	mov	r2, sl
 8004436:	4631      	mov	r1, r6
 8004438:	4628      	mov	r0, r5
 800443a:	47b8      	blx	r7
 800443c:	3001      	adds	r0, #1
 800443e:	f43f aeaa 	beq.w	8004196 <_printf_float+0xc2>
 8004442:	f108 0801 	add.w	r8, r8, #1
 8004446:	e7ec      	b.n	8004422 <_printf_float+0x34e>
 8004448:	4613      	mov	r3, r2
 800444a:	4631      	mov	r1, r6
 800444c:	4642      	mov	r2, r8
 800444e:	4628      	mov	r0, r5
 8004450:	47b8      	blx	r7
 8004452:	3001      	adds	r0, #1
 8004454:	d1c0      	bne.n	80043d8 <_printf_float+0x304>
 8004456:	e69e      	b.n	8004196 <_printf_float+0xc2>
 8004458:	2301      	movs	r3, #1
 800445a:	4631      	mov	r1, r6
 800445c:	4628      	mov	r0, r5
 800445e:	9205      	str	r2, [sp, #20]
 8004460:	47b8      	blx	r7
 8004462:	3001      	adds	r0, #1
 8004464:	f43f ae97 	beq.w	8004196 <_printf_float+0xc2>
 8004468:	9a05      	ldr	r2, [sp, #20]
 800446a:	f10b 0b01 	add.w	fp, fp, #1
 800446e:	e7b9      	b.n	80043e4 <_printf_float+0x310>
 8004470:	ee18 3a10 	vmov	r3, s16
 8004474:	4652      	mov	r2, sl
 8004476:	4631      	mov	r1, r6
 8004478:	4628      	mov	r0, r5
 800447a:	47b8      	blx	r7
 800447c:	3001      	adds	r0, #1
 800447e:	d1be      	bne.n	80043fe <_printf_float+0x32a>
 8004480:	e689      	b.n	8004196 <_printf_float+0xc2>
 8004482:	9a05      	ldr	r2, [sp, #20]
 8004484:	464b      	mov	r3, r9
 8004486:	4442      	add	r2, r8
 8004488:	4631      	mov	r1, r6
 800448a:	4628      	mov	r0, r5
 800448c:	47b8      	blx	r7
 800448e:	3001      	adds	r0, #1
 8004490:	d1c1      	bne.n	8004416 <_printf_float+0x342>
 8004492:	e680      	b.n	8004196 <_printf_float+0xc2>
 8004494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004496:	2a01      	cmp	r2, #1
 8004498:	dc01      	bgt.n	800449e <_printf_float+0x3ca>
 800449a:	07db      	lsls	r3, r3, #31
 800449c:	d538      	bpl.n	8004510 <_printf_float+0x43c>
 800449e:	2301      	movs	r3, #1
 80044a0:	4642      	mov	r2, r8
 80044a2:	4631      	mov	r1, r6
 80044a4:	4628      	mov	r0, r5
 80044a6:	47b8      	blx	r7
 80044a8:	3001      	adds	r0, #1
 80044aa:	f43f ae74 	beq.w	8004196 <_printf_float+0xc2>
 80044ae:	ee18 3a10 	vmov	r3, s16
 80044b2:	4652      	mov	r2, sl
 80044b4:	4631      	mov	r1, r6
 80044b6:	4628      	mov	r0, r5
 80044b8:	47b8      	blx	r7
 80044ba:	3001      	adds	r0, #1
 80044bc:	f43f ae6b 	beq.w	8004196 <_printf_float+0xc2>
 80044c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80044c4:	2200      	movs	r2, #0
 80044c6:	2300      	movs	r3, #0
 80044c8:	f7fc fafe 	bl	8000ac8 <__aeabi_dcmpeq>
 80044cc:	b9d8      	cbnz	r0, 8004506 <_printf_float+0x432>
 80044ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044d0:	f108 0201 	add.w	r2, r8, #1
 80044d4:	3b01      	subs	r3, #1
 80044d6:	4631      	mov	r1, r6
 80044d8:	4628      	mov	r0, r5
 80044da:	47b8      	blx	r7
 80044dc:	3001      	adds	r0, #1
 80044de:	d10e      	bne.n	80044fe <_printf_float+0x42a>
 80044e0:	e659      	b.n	8004196 <_printf_float+0xc2>
 80044e2:	2301      	movs	r3, #1
 80044e4:	4652      	mov	r2, sl
 80044e6:	4631      	mov	r1, r6
 80044e8:	4628      	mov	r0, r5
 80044ea:	47b8      	blx	r7
 80044ec:	3001      	adds	r0, #1
 80044ee:	f43f ae52 	beq.w	8004196 <_printf_float+0xc2>
 80044f2:	f108 0801 	add.w	r8, r8, #1
 80044f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044f8:	3b01      	subs	r3, #1
 80044fa:	4543      	cmp	r3, r8
 80044fc:	dcf1      	bgt.n	80044e2 <_printf_float+0x40e>
 80044fe:	464b      	mov	r3, r9
 8004500:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004504:	e6dc      	b.n	80042c0 <_printf_float+0x1ec>
 8004506:	f04f 0800 	mov.w	r8, #0
 800450a:	f104 0a1a 	add.w	sl, r4, #26
 800450e:	e7f2      	b.n	80044f6 <_printf_float+0x422>
 8004510:	2301      	movs	r3, #1
 8004512:	4642      	mov	r2, r8
 8004514:	e7df      	b.n	80044d6 <_printf_float+0x402>
 8004516:	2301      	movs	r3, #1
 8004518:	464a      	mov	r2, r9
 800451a:	4631      	mov	r1, r6
 800451c:	4628      	mov	r0, r5
 800451e:	47b8      	blx	r7
 8004520:	3001      	adds	r0, #1
 8004522:	f43f ae38 	beq.w	8004196 <_printf_float+0xc2>
 8004526:	f108 0801 	add.w	r8, r8, #1
 800452a:	68e3      	ldr	r3, [r4, #12]
 800452c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800452e:	1a5b      	subs	r3, r3, r1
 8004530:	4543      	cmp	r3, r8
 8004532:	dcf0      	bgt.n	8004516 <_printf_float+0x442>
 8004534:	e6fa      	b.n	800432c <_printf_float+0x258>
 8004536:	f04f 0800 	mov.w	r8, #0
 800453a:	f104 0919 	add.w	r9, r4, #25
 800453e:	e7f4      	b.n	800452a <_printf_float+0x456>

08004540 <_printf_common>:
 8004540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004544:	4616      	mov	r6, r2
 8004546:	4699      	mov	r9, r3
 8004548:	688a      	ldr	r2, [r1, #8]
 800454a:	690b      	ldr	r3, [r1, #16]
 800454c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004550:	4293      	cmp	r3, r2
 8004552:	bfb8      	it	lt
 8004554:	4613      	movlt	r3, r2
 8004556:	6033      	str	r3, [r6, #0]
 8004558:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800455c:	4607      	mov	r7, r0
 800455e:	460c      	mov	r4, r1
 8004560:	b10a      	cbz	r2, 8004566 <_printf_common+0x26>
 8004562:	3301      	adds	r3, #1
 8004564:	6033      	str	r3, [r6, #0]
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	0699      	lsls	r1, r3, #26
 800456a:	bf42      	ittt	mi
 800456c:	6833      	ldrmi	r3, [r6, #0]
 800456e:	3302      	addmi	r3, #2
 8004570:	6033      	strmi	r3, [r6, #0]
 8004572:	6825      	ldr	r5, [r4, #0]
 8004574:	f015 0506 	ands.w	r5, r5, #6
 8004578:	d106      	bne.n	8004588 <_printf_common+0x48>
 800457a:	f104 0a19 	add.w	sl, r4, #25
 800457e:	68e3      	ldr	r3, [r4, #12]
 8004580:	6832      	ldr	r2, [r6, #0]
 8004582:	1a9b      	subs	r3, r3, r2
 8004584:	42ab      	cmp	r3, r5
 8004586:	dc26      	bgt.n	80045d6 <_printf_common+0x96>
 8004588:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800458c:	1e13      	subs	r3, r2, #0
 800458e:	6822      	ldr	r2, [r4, #0]
 8004590:	bf18      	it	ne
 8004592:	2301      	movne	r3, #1
 8004594:	0692      	lsls	r2, r2, #26
 8004596:	d42b      	bmi.n	80045f0 <_printf_common+0xb0>
 8004598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800459c:	4649      	mov	r1, r9
 800459e:	4638      	mov	r0, r7
 80045a0:	47c0      	blx	r8
 80045a2:	3001      	adds	r0, #1
 80045a4:	d01e      	beq.n	80045e4 <_printf_common+0xa4>
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	68e5      	ldr	r5, [r4, #12]
 80045aa:	6832      	ldr	r2, [r6, #0]
 80045ac:	f003 0306 	and.w	r3, r3, #6
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	bf08      	it	eq
 80045b4:	1aad      	subeq	r5, r5, r2
 80045b6:	68a3      	ldr	r3, [r4, #8]
 80045b8:	6922      	ldr	r2, [r4, #16]
 80045ba:	bf0c      	ite	eq
 80045bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045c0:	2500      	movne	r5, #0
 80045c2:	4293      	cmp	r3, r2
 80045c4:	bfc4      	itt	gt
 80045c6:	1a9b      	subgt	r3, r3, r2
 80045c8:	18ed      	addgt	r5, r5, r3
 80045ca:	2600      	movs	r6, #0
 80045cc:	341a      	adds	r4, #26
 80045ce:	42b5      	cmp	r5, r6
 80045d0:	d11a      	bne.n	8004608 <_printf_common+0xc8>
 80045d2:	2000      	movs	r0, #0
 80045d4:	e008      	b.n	80045e8 <_printf_common+0xa8>
 80045d6:	2301      	movs	r3, #1
 80045d8:	4652      	mov	r2, sl
 80045da:	4649      	mov	r1, r9
 80045dc:	4638      	mov	r0, r7
 80045de:	47c0      	blx	r8
 80045e0:	3001      	adds	r0, #1
 80045e2:	d103      	bne.n	80045ec <_printf_common+0xac>
 80045e4:	f04f 30ff 	mov.w	r0, #4294967295
 80045e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ec:	3501      	adds	r5, #1
 80045ee:	e7c6      	b.n	800457e <_printf_common+0x3e>
 80045f0:	18e1      	adds	r1, r4, r3
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	2030      	movs	r0, #48	; 0x30
 80045f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045fa:	4422      	add	r2, r4
 80045fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004600:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004604:	3302      	adds	r3, #2
 8004606:	e7c7      	b.n	8004598 <_printf_common+0x58>
 8004608:	2301      	movs	r3, #1
 800460a:	4622      	mov	r2, r4
 800460c:	4649      	mov	r1, r9
 800460e:	4638      	mov	r0, r7
 8004610:	47c0      	blx	r8
 8004612:	3001      	adds	r0, #1
 8004614:	d0e6      	beq.n	80045e4 <_printf_common+0xa4>
 8004616:	3601      	adds	r6, #1
 8004618:	e7d9      	b.n	80045ce <_printf_common+0x8e>
	...

0800461c <_printf_i>:
 800461c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004620:	7e0f      	ldrb	r7, [r1, #24]
 8004622:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004624:	2f78      	cmp	r7, #120	; 0x78
 8004626:	4691      	mov	r9, r2
 8004628:	4680      	mov	r8, r0
 800462a:	460c      	mov	r4, r1
 800462c:	469a      	mov	sl, r3
 800462e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004632:	d807      	bhi.n	8004644 <_printf_i+0x28>
 8004634:	2f62      	cmp	r7, #98	; 0x62
 8004636:	d80a      	bhi.n	800464e <_printf_i+0x32>
 8004638:	2f00      	cmp	r7, #0
 800463a:	f000 80d8 	beq.w	80047ee <_printf_i+0x1d2>
 800463e:	2f58      	cmp	r7, #88	; 0x58
 8004640:	f000 80a3 	beq.w	800478a <_printf_i+0x16e>
 8004644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800464c:	e03a      	b.n	80046c4 <_printf_i+0xa8>
 800464e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004652:	2b15      	cmp	r3, #21
 8004654:	d8f6      	bhi.n	8004644 <_printf_i+0x28>
 8004656:	a101      	add	r1, pc, #4	; (adr r1, 800465c <_printf_i+0x40>)
 8004658:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800465c:	080046b5 	.word	0x080046b5
 8004660:	080046c9 	.word	0x080046c9
 8004664:	08004645 	.word	0x08004645
 8004668:	08004645 	.word	0x08004645
 800466c:	08004645 	.word	0x08004645
 8004670:	08004645 	.word	0x08004645
 8004674:	080046c9 	.word	0x080046c9
 8004678:	08004645 	.word	0x08004645
 800467c:	08004645 	.word	0x08004645
 8004680:	08004645 	.word	0x08004645
 8004684:	08004645 	.word	0x08004645
 8004688:	080047d5 	.word	0x080047d5
 800468c:	080046f9 	.word	0x080046f9
 8004690:	080047b7 	.word	0x080047b7
 8004694:	08004645 	.word	0x08004645
 8004698:	08004645 	.word	0x08004645
 800469c:	080047f7 	.word	0x080047f7
 80046a0:	08004645 	.word	0x08004645
 80046a4:	080046f9 	.word	0x080046f9
 80046a8:	08004645 	.word	0x08004645
 80046ac:	08004645 	.word	0x08004645
 80046b0:	080047bf 	.word	0x080047bf
 80046b4:	682b      	ldr	r3, [r5, #0]
 80046b6:	1d1a      	adds	r2, r3, #4
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	602a      	str	r2, [r5, #0]
 80046bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0a3      	b.n	8004810 <_printf_i+0x1f4>
 80046c8:	6820      	ldr	r0, [r4, #0]
 80046ca:	6829      	ldr	r1, [r5, #0]
 80046cc:	0606      	lsls	r6, r0, #24
 80046ce:	f101 0304 	add.w	r3, r1, #4
 80046d2:	d50a      	bpl.n	80046ea <_printf_i+0xce>
 80046d4:	680e      	ldr	r6, [r1, #0]
 80046d6:	602b      	str	r3, [r5, #0]
 80046d8:	2e00      	cmp	r6, #0
 80046da:	da03      	bge.n	80046e4 <_printf_i+0xc8>
 80046dc:	232d      	movs	r3, #45	; 0x2d
 80046de:	4276      	negs	r6, r6
 80046e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046e4:	485e      	ldr	r0, [pc, #376]	; (8004860 <_printf_i+0x244>)
 80046e6:	230a      	movs	r3, #10
 80046e8:	e019      	b.n	800471e <_printf_i+0x102>
 80046ea:	680e      	ldr	r6, [r1, #0]
 80046ec:	602b      	str	r3, [r5, #0]
 80046ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046f2:	bf18      	it	ne
 80046f4:	b236      	sxthne	r6, r6
 80046f6:	e7ef      	b.n	80046d8 <_printf_i+0xbc>
 80046f8:	682b      	ldr	r3, [r5, #0]
 80046fa:	6820      	ldr	r0, [r4, #0]
 80046fc:	1d19      	adds	r1, r3, #4
 80046fe:	6029      	str	r1, [r5, #0]
 8004700:	0601      	lsls	r1, r0, #24
 8004702:	d501      	bpl.n	8004708 <_printf_i+0xec>
 8004704:	681e      	ldr	r6, [r3, #0]
 8004706:	e002      	b.n	800470e <_printf_i+0xf2>
 8004708:	0646      	lsls	r6, r0, #25
 800470a:	d5fb      	bpl.n	8004704 <_printf_i+0xe8>
 800470c:	881e      	ldrh	r6, [r3, #0]
 800470e:	4854      	ldr	r0, [pc, #336]	; (8004860 <_printf_i+0x244>)
 8004710:	2f6f      	cmp	r7, #111	; 0x6f
 8004712:	bf0c      	ite	eq
 8004714:	2308      	moveq	r3, #8
 8004716:	230a      	movne	r3, #10
 8004718:	2100      	movs	r1, #0
 800471a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800471e:	6865      	ldr	r5, [r4, #4]
 8004720:	60a5      	str	r5, [r4, #8]
 8004722:	2d00      	cmp	r5, #0
 8004724:	bfa2      	ittt	ge
 8004726:	6821      	ldrge	r1, [r4, #0]
 8004728:	f021 0104 	bicge.w	r1, r1, #4
 800472c:	6021      	strge	r1, [r4, #0]
 800472e:	b90e      	cbnz	r6, 8004734 <_printf_i+0x118>
 8004730:	2d00      	cmp	r5, #0
 8004732:	d04d      	beq.n	80047d0 <_printf_i+0x1b4>
 8004734:	4615      	mov	r5, r2
 8004736:	fbb6 f1f3 	udiv	r1, r6, r3
 800473a:	fb03 6711 	mls	r7, r3, r1, r6
 800473e:	5dc7      	ldrb	r7, [r0, r7]
 8004740:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004744:	4637      	mov	r7, r6
 8004746:	42bb      	cmp	r3, r7
 8004748:	460e      	mov	r6, r1
 800474a:	d9f4      	bls.n	8004736 <_printf_i+0x11a>
 800474c:	2b08      	cmp	r3, #8
 800474e:	d10b      	bne.n	8004768 <_printf_i+0x14c>
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	07de      	lsls	r6, r3, #31
 8004754:	d508      	bpl.n	8004768 <_printf_i+0x14c>
 8004756:	6923      	ldr	r3, [r4, #16]
 8004758:	6861      	ldr	r1, [r4, #4]
 800475a:	4299      	cmp	r1, r3
 800475c:	bfde      	ittt	le
 800475e:	2330      	movle	r3, #48	; 0x30
 8004760:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004764:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004768:	1b52      	subs	r2, r2, r5
 800476a:	6122      	str	r2, [r4, #16]
 800476c:	f8cd a000 	str.w	sl, [sp]
 8004770:	464b      	mov	r3, r9
 8004772:	aa03      	add	r2, sp, #12
 8004774:	4621      	mov	r1, r4
 8004776:	4640      	mov	r0, r8
 8004778:	f7ff fee2 	bl	8004540 <_printf_common>
 800477c:	3001      	adds	r0, #1
 800477e:	d14c      	bne.n	800481a <_printf_i+0x1fe>
 8004780:	f04f 30ff 	mov.w	r0, #4294967295
 8004784:	b004      	add	sp, #16
 8004786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800478a:	4835      	ldr	r0, [pc, #212]	; (8004860 <_printf_i+0x244>)
 800478c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004790:	6829      	ldr	r1, [r5, #0]
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	f851 6b04 	ldr.w	r6, [r1], #4
 8004798:	6029      	str	r1, [r5, #0]
 800479a:	061d      	lsls	r5, r3, #24
 800479c:	d514      	bpl.n	80047c8 <_printf_i+0x1ac>
 800479e:	07df      	lsls	r7, r3, #31
 80047a0:	bf44      	itt	mi
 80047a2:	f043 0320 	orrmi.w	r3, r3, #32
 80047a6:	6023      	strmi	r3, [r4, #0]
 80047a8:	b91e      	cbnz	r6, 80047b2 <_printf_i+0x196>
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	f023 0320 	bic.w	r3, r3, #32
 80047b0:	6023      	str	r3, [r4, #0]
 80047b2:	2310      	movs	r3, #16
 80047b4:	e7b0      	b.n	8004718 <_printf_i+0xfc>
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	f043 0320 	orr.w	r3, r3, #32
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	2378      	movs	r3, #120	; 0x78
 80047c0:	4828      	ldr	r0, [pc, #160]	; (8004864 <_printf_i+0x248>)
 80047c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047c6:	e7e3      	b.n	8004790 <_printf_i+0x174>
 80047c8:	0659      	lsls	r1, r3, #25
 80047ca:	bf48      	it	mi
 80047cc:	b2b6      	uxthmi	r6, r6
 80047ce:	e7e6      	b.n	800479e <_printf_i+0x182>
 80047d0:	4615      	mov	r5, r2
 80047d2:	e7bb      	b.n	800474c <_printf_i+0x130>
 80047d4:	682b      	ldr	r3, [r5, #0]
 80047d6:	6826      	ldr	r6, [r4, #0]
 80047d8:	6961      	ldr	r1, [r4, #20]
 80047da:	1d18      	adds	r0, r3, #4
 80047dc:	6028      	str	r0, [r5, #0]
 80047de:	0635      	lsls	r5, r6, #24
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	d501      	bpl.n	80047e8 <_printf_i+0x1cc>
 80047e4:	6019      	str	r1, [r3, #0]
 80047e6:	e002      	b.n	80047ee <_printf_i+0x1d2>
 80047e8:	0670      	lsls	r0, r6, #25
 80047ea:	d5fb      	bpl.n	80047e4 <_printf_i+0x1c8>
 80047ec:	8019      	strh	r1, [r3, #0]
 80047ee:	2300      	movs	r3, #0
 80047f0:	6123      	str	r3, [r4, #16]
 80047f2:	4615      	mov	r5, r2
 80047f4:	e7ba      	b.n	800476c <_printf_i+0x150>
 80047f6:	682b      	ldr	r3, [r5, #0]
 80047f8:	1d1a      	adds	r2, r3, #4
 80047fa:	602a      	str	r2, [r5, #0]
 80047fc:	681d      	ldr	r5, [r3, #0]
 80047fe:	6862      	ldr	r2, [r4, #4]
 8004800:	2100      	movs	r1, #0
 8004802:	4628      	mov	r0, r5
 8004804:	f7fb fcec 	bl	80001e0 <memchr>
 8004808:	b108      	cbz	r0, 800480e <_printf_i+0x1f2>
 800480a:	1b40      	subs	r0, r0, r5
 800480c:	6060      	str	r0, [r4, #4]
 800480e:	6863      	ldr	r3, [r4, #4]
 8004810:	6123      	str	r3, [r4, #16]
 8004812:	2300      	movs	r3, #0
 8004814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004818:	e7a8      	b.n	800476c <_printf_i+0x150>
 800481a:	6923      	ldr	r3, [r4, #16]
 800481c:	462a      	mov	r2, r5
 800481e:	4649      	mov	r1, r9
 8004820:	4640      	mov	r0, r8
 8004822:	47d0      	blx	sl
 8004824:	3001      	adds	r0, #1
 8004826:	d0ab      	beq.n	8004780 <_printf_i+0x164>
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	079b      	lsls	r3, r3, #30
 800482c:	d413      	bmi.n	8004856 <_printf_i+0x23a>
 800482e:	68e0      	ldr	r0, [r4, #12]
 8004830:	9b03      	ldr	r3, [sp, #12]
 8004832:	4298      	cmp	r0, r3
 8004834:	bfb8      	it	lt
 8004836:	4618      	movlt	r0, r3
 8004838:	e7a4      	b.n	8004784 <_printf_i+0x168>
 800483a:	2301      	movs	r3, #1
 800483c:	4632      	mov	r2, r6
 800483e:	4649      	mov	r1, r9
 8004840:	4640      	mov	r0, r8
 8004842:	47d0      	blx	sl
 8004844:	3001      	adds	r0, #1
 8004846:	d09b      	beq.n	8004780 <_printf_i+0x164>
 8004848:	3501      	adds	r5, #1
 800484a:	68e3      	ldr	r3, [r4, #12]
 800484c:	9903      	ldr	r1, [sp, #12]
 800484e:	1a5b      	subs	r3, r3, r1
 8004850:	42ab      	cmp	r3, r5
 8004852:	dcf2      	bgt.n	800483a <_printf_i+0x21e>
 8004854:	e7eb      	b.n	800482e <_printf_i+0x212>
 8004856:	2500      	movs	r5, #0
 8004858:	f104 0619 	add.w	r6, r4, #25
 800485c:	e7f5      	b.n	800484a <_printf_i+0x22e>
 800485e:	bf00      	nop
 8004860:	0800f22a 	.word	0x0800f22a
 8004864:	0800f23b 	.word	0x0800f23b

08004868 <iprintf>:
 8004868:	b40f      	push	{r0, r1, r2, r3}
 800486a:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <iprintf+0x2c>)
 800486c:	b513      	push	{r0, r1, r4, lr}
 800486e:	681c      	ldr	r4, [r3, #0]
 8004870:	b124      	cbz	r4, 800487c <iprintf+0x14>
 8004872:	69a3      	ldr	r3, [r4, #24]
 8004874:	b913      	cbnz	r3, 800487c <iprintf+0x14>
 8004876:	4620      	mov	r0, r4
 8004878:	f001 f8fe 	bl	8005a78 <__sinit>
 800487c:	ab05      	add	r3, sp, #20
 800487e:	9a04      	ldr	r2, [sp, #16]
 8004880:	68a1      	ldr	r1, [r4, #8]
 8004882:	9301      	str	r3, [sp, #4]
 8004884:	4620      	mov	r0, r4
 8004886:	f001 fdbb 	bl	8006400 <_vfiprintf_r>
 800488a:	b002      	add	sp, #8
 800488c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004890:	b004      	add	sp, #16
 8004892:	4770      	bx	lr
 8004894:	2000000c 	.word	0x2000000c

08004898 <putchar>:
 8004898:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <putchar+0x28>)
 800489a:	b513      	push	{r0, r1, r4, lr}
 800489c:	681c      	ldr	r4, [r3, #0]
 800489e:	4601      	mov	r1, r0
 80048a0:	b134      	cbz	r4, 80048b0 <putchar+0x18>
 80048a2:	69a3      	ldr	r3, [r4, #24]
 80048a4:	b923      	cbnz	r3, 80048b0 <putchar+0x18>
 80048a6:	9001      	str	r0, [sp, #4]
 80048a8:	4620      	mov	r0, r4
 80048aa:	f001 f8e5 	bl	8005a78 <__sinit>
 80048ae:	9901      	ldr	r1, [sp, #4]
 80048b0:	68a2      	ldr	r2, [r4, #8]
 80048b2:	4620      	mov	r0, r4
 80048b4:	b002      	add	sp, #8
 80048b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048ba:	f001 bed1 	b.w	8006660 <_putc_r>
 80048be:	bf00      	nop
 80048c0:	2000000c 	.word	0x2000000c

080048c4 <_puts_r>:
 80048c4:	b570      	push	{r4, r5, r6, lr}
 80048c6:	460e      	mov	r6, r1
 80048c8:	4605      	mov	r5, r0
 80048ca:	b118      	cbz	r0, 80048d4 <_puts_r+0x10>
 80048cc:	6983      	ldr	r3, [r0, #24]
 80048ce:	b90b      	cbnz	r3, 80048d4 <_puts_r+0x10>
 80048d0:	f001 f8d2 	bl	8005a78 <__sinit>
 80048d4:	69ab      	ldr	r3, [r5, #24]
 80048d6:	68ac      	ldr	r4, [r5, #8]
 80048d8:	b913      	cbnz	r3, 80048e0 <_puts_r+0x1c>
 80048da:	4628      	mov	r0, r5
 80048dc:	f001 f8cc 	bl	8005a78 <__sinit>
 80048e0:	4b2c      	ldr	r3, [pc, #176]	; (8004994 <_puts_r+0xd0>)
 80048e2:	429c      	cmp	r4, r3
 80048e4:	d120      	bne.n	8004928 <_puts_r+0x64>
 80048e6:	686c      	ldr	r4, [r5, #4]
 80048e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048ea:	07db      	lsls	r3, r3, #31
 80048ec:	d405      	bmi.n	80048fa <_puts_r+0x36>
 80048ee:	89a3      	ldrh	r3, [r4, #12]
 80048f0:	0598      	lsls	r0, r3, #22
 80048f2:	d402      	bmi.n	80048fa <_puts_r+0x36>
 80048f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048f6:	f001 f962 	bl	8005bbe <__retarget_lock_acquire_recursive>
 80048fa:	89a3      	ldrh	r3, [r4, #12]
 80048fc:	0719      	lsls	r1, r3, #28
 80048fe:	d51d      	bpl.n	800493c <_puts_r+0x78>
 8004900:	6923      	ldr	r3, [r4, #16]
 8004902:	b1db      	cbz	r3, 800493c <_puts_r+0x78>
 8004904:	3e01      	subs	r6, #1
 8004906:	68a3      	ldr	r3, [r4, #8]
 8004908:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800490c:	3b01      	subs	r3, #1
 800490e:	60a3      	str	r3, [r4, #8]
 8004910:	bb39      	cbnz	r1, 8004962 <_puts_r+0x9e>
 8004912:	2b00      	cmp	r3, #0
 8004914:	da38      	bge.n	8004988 <_puts_r+0xc4>
 8004916:	4622      	mov	r2, r4
 8004918:	210a      	movs	r1, #10
 800491a:	4628      	mov	r0, r5
 800491c:	f000 f858 	bl	80049d0 <__swbuf_r>
 8004920:	3001      	adds	r0, #1
 8004922:	d011      	beq.n	8004948 <_puts_r+0x84>
 8004924:	250a      	movs	r5, #10
 8004926:	e011      	b.n	800494c <_puts_r+0x88>
 8004928:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <_puts_r+0xd4>)
 800492a:	429c      	cmp	r4, r3
 800492c:	d101      	bne.n	8004932 <_puts_r+0x6e>
 800492e:	68ac      	ldr	r4, [r5, #8]
 8004930:	e7da      	b.n	80048e8 <_puts_r+0x24>
 8004932:	4b1a      	ldr	r3, [pc, #104]	; (800499c <_puts_r+0xd8>)
 8004934:	429c      	cmp	r4, r3
 8004936:	bf08      	it	eq
 8004938:	68ec      	ldreq	r4, [r5, #12]
 800493a:	e7d5      	b.n	80048e8 <_puts_r+0x24>
 800493c:	4621      	mov	r1, r4
 800493e:	4628      	mov	r0, r5
 8004940:	f000 f898 	bl	8004a74 <__swsetup_r>
 8004944:	2800      	cmp	r0, #0
 8004946:	d0dd      	beq.n	8004904 <_puts_r+0x40>
 8004948:	f04f 35ff 	mov.w	r5, #4294967295
 800494c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800494e:	07da      	lsls	r2, r3, #31
 8004950:	d405      	bmi.n	800495e <_puts_r+0x9a>
 8004952:	89a3      	ldrh	r3, [r4, #12]
 8004954:	059b      	lsls	r3, r3, #22
 8004956:	d402      	bmi.n	800495e <_puts_r+0x9a>
 8004958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800495a:	f001 f931 	bl	8005bc0 <__retarget_lock_release_recursive>
 800495e:	4628      	mov	r0, r5
 8004960:	bd70      	pop	{r4, r5, r6, pc}
 8004962:	2b00      	cmp	r3, #0
 8004964:	da04      	bge.n	8004970 <_puts_r+0xac>
 8004966:	69a2      	ldr	r2, [r4, #24]
 8004968:	429a      	cmp	r2, r3
 800496a:	dc06      	bgt.n	800497a <_puts_r+0xb6>
 800496c:	290a      	cmp	r1, #10
 800496e:	d004      	beq.n	800497a <_puts_r+0xb6>
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	6022      	str	r2, [r4, #0]
 8004976:	7019      	strb	r1, [r3, #0]
 8004978:	e7c5      	b.n	8004906 <_puts_r+0x42>
 800497a:	4622      	mov	r2, r4
 800497c:	4628      	mov	r0, r5
 800497e:	f000 f827 	bl	80049d0 <__swbuf_r>
 8004982:	3001      	adds	r0, #1
 8004984:	d1bf      	bne.n	8004906 <_puts_r+0x42>
 8004986:	e7df      	b.n	8004948 <_puts_r+0x84>
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	250a      	movs	r5, #10
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	6022      	str	r2, [r4, #0]
 8004990:	701d      	strb	r5, [r3, #0]
 8004992:	e7db      	b.n	800494c <_puts_r+0x88>
 8004994:	0800f2fc 	.word	0x0800f2fc
 8004998:	0800f31c 	.word	0x0800f31c
 800499c:	0800f2dc 	.word	0x0800f2dc

080049a0 <puts>:
 80049a0:	4b02      	ldr	r3, [pc, #8]	; (80049ac <puts+0xc>)
 80049a2:	4601      	mov	r1, r0
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	f7ff bf8d 	b.w	80048c4 <_puts_r>
 80049aa:	bf00      	nop
 80049ac:	2000000c 	.word	0x2000000c

080049b0 <_sbrk_r>:
 80049b0:	b538      	push	{r3, r4, r5, lr}
 80049b2:	4d06      	ldr	r5, [pc, #24]	; (80049cc <_sbrk_r+0x1c>)
 80049b4:	2300      	movs	r3, #0
 80049b6:	4604      	mov	r4, r0
 80049b8:	4608      	mov	r0, r1
 80049ba:	602b      	str	r3, [r5, #0]
 80049bc:	f7fc fbe4 	bl	8001188 <_sbrk>
 80049c0:	1c43      	adds	r3, r0, #1
 80049c2:	d102      	bne.n	80049ca <_sbrk_r+0x1a>
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	b103      	cbz	r3, 80049ca <_sbrk_r+0x1a>
 80049c8:	6023      	str	r3, [r4, #0]
 80049ca:	bd38      	pop	{r3, r4, r5, pc}
 80049cc:	20000268 	.word	0x20000268

080049d0 <__swbuf_r>:
 80049d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d2:	460e      	mov	r6, r1
 80049d4:	4614      	mov	r4, r2
 80049d6:	4605      	mov	r5, r0
 80049d8:	b118      	cbz	r0, 80049e2 <__swbuf_r+0x12>
 80049da:	6983      	ldr	r3, [r0, #24]
 80049dc:	b90b      	cbnz	r3, 80049e2 <__swbuf_r+0x12>
 80049de:	f001 f84b 	bl	8005a78 <__sinit>
 80049e2:	4b21      	ldr	r3, [pc, #132]	; (8004a68 <__swbuf_r+0x98>)
 80049e4:	429c      	cmp	r4, r3
 80049e6:	d12b      	bne.n	8004a40 <__swbuf_r+0x70>
 80049e8:	686c      	ldr	r4, [r5, #4]
 80049ea:	69a3      	ldr	r3, [r4, #24]
 80049ec:	60a3      	str	r3, [r4, #8]
 80049ee:	89a3      	ldrh	r3, [r4, #12]
 80049f0:	071a      	lsls	r2, r3, #28
 80049f2:	d52f      	bpl.n	8004a54 <__swbuf_r+0x84>
 80049f4:	6923      	ldr	r3, [r4, #16]
 80049f6:	b36b      	cbz	r3, 8004a54 <__swbuf_r+0x84>
 80049f8:	6923      	ldr	r3, [r4, #16]
 80049fa:	6820      	ldr	r0, [r4, #0]
 80049fc:	1ac0      	subs	r0, r0, r3
 80049fe:	6963      	ldr	r3, [r4, #20]
 8004a00:	b2f6      	uxtb	r6, r6
 8004a02:	4283      	cmp	r3, r0
 8004a04:	4637      	mov	r7, r6
 8004a06:	dc04      	bgt.n	8004a12 <__swbuf_r+0x42>
 8004a08:	4621      	mov	r1, r4
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	f000 ffa0 	bl	8005950 <_fflush_r>
 8004a10:	bb30      	cbnz	r0, 8004a60 <__swbuf_r+0x90>
 8004a12:	68a3      	ldr	r3, [r4, #8]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	60a3      	str	r3, [r4, #8]
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	6022      	str	r2, [r4, #0]
 8004a1e:	701e      	strb	r6, [r3, #0]
 8004a20:	6963      	ldr	r3, [r4, #20]
 8004a22:	3001      	adds	r0, #1
 8004a24:	4283      	cmp	r3, r0
 8004a26:	d004      	beq.n	8004a32 <__swbuf_r+0x62>
 8004a28:	89a3      	ldrh	r3, [r4, #12]
 8004a2a:	07db      	lsls	r3, r3, #31
 8004a2c:	d506      	bpl.n	8004a3c <__swbuf_r+0x6c>
 8004a2e:	2e0a      	cmp	r6, #10
 8004a30:	d104      	bne.n	8004a3c <__swbuf_r+0x6c>
 8004a32:	4621      	mov	r1, r4
 8004a34:	4628      	mov	r0, r5
 8004a36:	f000 ff8b 	bl	8005950 <_fflush_r>
 8004a3a:	b988      	cbnz	r0, 8004a60 <__swbuf_r+0x90>
 8004a3c:	4638      	mov	r0, r7
 8004a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a40:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <__swbuf_r+0x9c>)
 8004a42:	429c      	cmp	r4, r3
 8004a44:	d101      	bne.n	8004a4a <__swbuf_r+0x7a>
 8004a46:	68ac      	ldr	r4, [r5, #8]
 8004a48:	e7cf      	b.n	80049ea <__swbuf_r+0x1a>
 8004a4a:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <__swbuf_r+0xa0>)
 8004a4c:	429c      	cmp	r4, r3
 8004a4e:	bf08      	it	eq
 8004a50:	68ec      	ldreq	r4, [r5, #12]
 8004a52:	e7ca      	b.n	80049ea <__swbuf_r+0x1a>
 8004a54:	4621      	mov	r1, r4
 8004a56:	4628      	mov	r0, r5
 8004a58:	f000 f80c 	bl	8004a74 <__swsetup_r>
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	d0cb      	beq.n	80049f8 <__swbuf_r+0x28>
 8004a60:	f04f 37ff 	mov.w	r7, #4294967295
 8004a64:	e7ea      	b.n	8004a3c <__swbuf_r+0x6c>
 8004a66:	bf00      	nop
 8004a68:	0800f2fc 	.word	0x0800f2fc
 8004a6c:	0800f31c 	.word	0x0800f31c
 8004a70:	0800f2dc 	.word	0x0800f2dc

08004a74 <__swsetup_r>:
 8004a74:	4b32      	ldr	r3, [pc, #200]	; (8004b40 <__swsetup_r+0xcc>)
 8004a76:	b570      	push	{r4, r5, r6, lr}
 8004a78:	681d      	ldr	r5, [r3, #0]
 8004a7a:	4606      	mov	r6, r0
 8004a7c:	460c      	mov	r4, r1
 8004a7e:	b125      	cbz	r5, 8004a8a <__swsetup_r+0x16>
 8004a80:	69ab      	ldr	r3, [r5, #24]
 8004a82:	b913      	cbnz	r3, 8004a8a <__swsetup_r+0x16>
 8004a84:	4628      	mov	r0, r5
 8004a86:	f000 fff7 	bl	8005a78 <__sinit>
 8004a8a:	4b2e      	ldr	r3, [pc, #184]	; (8004b44 <__swsetup_r+0xd0>)
 8004a8c:	429c      	cmp	r4, r3
 8004a8e:	d10f      	bne.n	8004ab0 <__swsetup_r+0x3c>
 8004a90:	686c      	ldr	r4, [r5, #4]
 8004a92:	89a3      	ldrh	r3, [r4, #12]
 8004a94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a98:	0719      	lsls	r1, r3, #28
 8004a9a:	d42c      	bmi.n	8004af6 <__swsetup_r+0x82>
 8004a9c:	06dd      	lsls	r5, r3, #27
 8004a9e:	d411      	bmi.n	8004ac4 <__swsetup_r+0x50>
 8004aa0:	2309      	movs	r3, #9
 8004aa2:	6033      	str	r3, [r6, #0]
 8004aa4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004aa8:	81a3      	strh	r3, [r4, #12]
 8004aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8004aae:	e03e      	b.n	8004b2e <__swsetup_r+0xba>
 8004ab0:	4b25      	ldr	r3, [pc, #148]	; (8004b48 <__swsetup_r+0xd4>)
 8004ab2:	429c      	cmp	r4, r3
 8004ab4:	d101      	bne.n	8004aba <__swsetup_r+0x46>
 8004ab6:	68ac      	ldr	r4, [r5, #8]
 8004ab8:	e7eb      	b.n	8004a92 <__swsetup_r+0x1e>
 8004aba:	4b24      	ldr	r3, [pc, #144]	; (8004b4c <__swsetup_r+0xd8>)
 8004abc:	429c      	cmp	r4, r3
 8004abe:	bf08      	it	eq
 8004ac0:	68ec      	ldreq	r4, [r5, #12]
 8004ac2:	e7e6      	b.n	8004a92 <__swsetup_r+0x1e>
 8004ac4:	0758      	lsls	r0, r3, #29
 8004ac6:	d512      	bpl.n	8004aee <__swsetup_r+0x7a>
 8004ac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004aca:	b141      	cbz	r1, 8004ade <__swsetup_r+0x6a>
 8004acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ad0:	4299      	cmp	r1, r3
 8004ad2:	d002      	beq.n	8004ada <__swsetup_r+0x66>
 8004ad4:	4630      	mov	r0, r6
 8004ad6:	f7ff f97d 	bl	8003dd4 <_free_r>
 8004ada:	2300      	movs	r3, #0
 8004adc:	6363      	str	r3, [r4, #52]	; 0x34
 8004ade:	89a3      	ldrh	r3, [r4, #12]
 8004ae0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ae4:	81a3      	strh	r3, [r4, #12]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	6063      	str	r3, [r4, #4]
 8004aea:	6923      	ldr	r3, [r4, #16]
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	89a3      	ldrh	r3, [r4, #12]
 8004af0:	f043 0308 	orr.w	r3, r3, #8
 8004af4:	81a3      	strh	r3, [r4, #12]
 8004af6:	6923      	ldr	r3, [r4, #16]
 8004af8:	b94b      	cbnz	r3, 8004b0e <__swsetup_r+0x9a>
 8004afa:	89a3      	ldrh	r3, [r4, #12]
 8004afc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b04:	d003      	beq.n	8004b0e <__swsetup_r+0x9a>
 8004b06:	4621      	mov	r1, r4
 8004b08:	4630      	mov	r0, r6
 8004b0a:	f001 f87f 	bl	8005c0c <__smakebuf_r>
 8004b0e:	89a0      	ldrh	r0, [r4, #12]
 8004b10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b14:	f010 0301 	ands.w	r3, r0, #1
 8004b18:	d00a      	beq.n	8004b30 <__swsetup_r+0xbc>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60a3      	str	r3, [r4, #8]
 8004b1e:	6963      	ldr	r3, [r4, #20]
 8004b20:	425b      	negs	r3, r3
 8004b22:	61a3      	str	r3, [r4, #24]
 8004b24:	6923      	ldr	r3, [r4, #16]
 8004b26:	b943      	cbnz	r3, 8004b3a <__swsetup_r+0xc6>
 8004b28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b2c:	d1ba      	bne.n	8004aa4 <__swsetup_r+0x30>
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}
 8004b30:	0781      	lsls	r1, r0, #30
 8004b32:	bf58      	it	pl
 8004b34:	6963      	ldrpl	r3, [r4, #20]
 8004b36:	60a3      	str	r3, [r4, #8]
 8004b38:	e7f4      	b.n	8004b24 <__swsetup_r+0xb0>
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	e7f7      	b.n	8004b2e <__swsetup_r+0xba>
 8004b3e:	bf00      	nop
 8004b40:	2000000c 	.word	0x2000000c
 8004b44:	0800f2fc 	.word	0x0800f2fc
 8004b48:	0800f31c 	.word	0x0800f31c
 8004b4c:	0800f2dc 	.word	0x0800f2dc

08004b50 <quorem>:
 8004b50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b54:	6903      	ldr	r3, [r0, #16]
 8004b56:	690c      	ldr	r4, [r1, #16]
 8004b58:	42a3      	cmp	r3, r4
 8004b5a:	4607      	mov	r7, r0
 8004b5c:	f2c0 8081 	blt.w	8004c62 <quorem+0x112>
 8004b60:	3c01      	subs	r4, #1
 8004b62:	f101 0814 	add.w	r8, r1, #20
 8004b66:	f100 0514 	add.w	r5, r0, #20
 8004b6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b6e:	9301      	str	r3, [sp, #4]
 8004b70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b84:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b88:	d331      	bcc.n	8004bee <quorem+0x9e>
 8004b8a:	f04f 0e00 	mov.w	lr, #0
 8004b8e:	4640      	mov	r0, r8
 8004b90:	46ac      	mov	ip, r5
 8004b92:	46f2      	mov	sl, lr
 8004b94:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b98:	b293      	uxth	r3, r2
 8004b9a:	fb06 e303 	mla	r3, r6, r3, lr
 8004b9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	ebaa 0303 	sub.w	r3, sl, r3
 8004ba8:	f8dc a000 	ldr.w	sl, [ip]
 8004bac:	0c12      	lsrs	r2, r2, #16
 8004bae:	fa13 f38a 	uxtah	r3, r3, sl
 8004bb2:	fb06 e202 	mla	r2, r6, r2, lr
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	9b00      	ldr	r3, [sp, #0]
 8004bba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004bbe:	b292      	uxth	r2, r2
 8004bc0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004bc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bc8:	f8bd 3000 	ldrh.w	r3, [sp]
 8004bcc:	4581      	cmp	r9, r0
 8004bce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bd2:	f84c 3b04 	str.w	r3, [ip], #4
 8004bd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004bda:	d2db      	bcs.n	8004b94 <quorem+0x44>
 8004bdc:	f855 300b 	ldr.w	r3, [r5, fp]
 8004be0:	b92b      	cbnz	r3, 8004bee <quorem+0x9e>
 8004be2:	9b01      	ldr	r3, [sp, #4]
 8004be4:	3b04      	subs	r3, #4
 8004be6:	429d      	cmp	r5, r3
 8004be8:	461a      	mov	r2, r3
 8004bea:	d32e      	bcc.n	8004c4a <quorem+0xfa>
 8004bec:	613c      	str	r4, [r7, #16]
 8004bee:	4638      	mov	r0, r7
 8004bf0:	f001 fada 	bl	80061a8 <__mcmp>
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	db24      	blt.n	8004c42 <quorem+0xf2>
 8004bf8:	3601      	adds	r6, #1
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	f04f 0c00 	mov.w	ip, #0
 8004c00:	f858 2b04 	ldr.w	r2, [r8], #4
 8004c04:	f8d0 e000 	ldr.w	lr, [r0]
 8004c08:	b293      	uxth	r3, r2
 8004c0a:	ebac 0303 	sub.w	r3, ip, r3
 8004c0e:	0c12      	lsrs	r2, r2, #16
 8004c10:	fa13 f38e 	uxtah	r3, r3, lr
 8004c14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c22:	45c1      	cmp	r9, r8
 8004c24:	f840 3b04 	str.w	r3, [r0], #4
 8004c28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c2c:	d2e8      	bcs.n	8004c00 <quorem+0xb0>
 8004c2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c36:	b922      	cbnz	r2, 8004c42 <quorem+0xf2>
 8004c38:	3b04      	subs	r3, #4
 8004c3a:	429d      	cmp	r5, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	d30a      	bcc.n	8004c56 <quorem+0x106>
 8004c40:	613c      	str	r4, [r7, #16]
 8004c42:	4630      	mov	r0, r6
 8004c44:	b003      	add	sp, #12
 8004c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	3b04      	subs	r3, #4
 8004c4e:	2a00      	cmp	r2, #0
 8004c50:	d1cc      	bne.n	8004bec <quorem+0x9c>
 8004c52:	3c01      	subs	r4, #1
 8004c54:	e7c7      	b.n	8004be6 <quorem+0x96>
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	3b04      	subs	r3, #4
 8004c5a:	2a00      	cmp	r2, #0
 8004c5c:	d1f0      	bne.n	8004c40 <quorem+0xf0>
 8004c5e:	3c01      	subs	r4, #1
 8004c60:	e7eb      	b.n	8004c3a <quorem+0xea>
 8004c62:	2000      	movs	r0, #0
 8004c64:	e7ee      	b.n	8004c44 <quorem+0xf4>
	...

08004c68 <_dtoa_r>:
 8004c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6c:	ed2d 8b04 	vpush	{d8-d9}
 8004c70:	ec57 6b10 	vmov	r6, r7, d0
 8004c74:	b093      	sub	sp, #76	; 0x4c
 8004c76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004c7c:	9106      	str	r1, [sp, #24]
 8004c7e:	ee10 aa10 	vmov	sl, s0
 8004c82:	4604      	mov	r4, r0
 8004c84:	9209      	str	r2, [sp, #36]	; 0x24
 8004c86:	930c      	str	r3, [sp, #48]	; 0x30
 8004c88:	46bb      	mov	fp, r7
 8004c8a:	b975      	cbnz	r5, 8004caa <_dtoa_r+0x42>
 8004c8c:	2010      	movs	r0, #16
 8004c8e:	f7ff f86d 	bl	8003d6c <malloc>
 8004c92:	4602      	mov	r2, r0
 8004c94:	6260      	str	r0, [r4, #36]	; 0x24
 8004c96:	b920      	cbnz	r0, 8004ca2 <_dtoa_r+0x3a>
 8004c98:	4ba7      	ldr	r3, [pc, #668]	; (8004f38 <_dtoa_r+0x2d0>)
 8004c9a:	21ea      	movs	r1, #234	; 0xea
 8004c9c:	48a7      	ldr	r0, [pc, #668]	; (8004f3c <_dtoa_r+0x2d4>)
 8004c9e:	f001 fd7d 	bl	800679c <__assert_func>
 8004ca2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004ca6:	6005      	str	r5, [r0, #0]
 8004ca8:	60c5      	str	r5, [r0, #12]
 8004caa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cac:	6819      	ldr	r1, [r3, #0]
 8004cae:	b151      	cbz	r1, 8004cc6 <_dtoa_r+0x5e>
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	604a      	str	r2, [r1, #4]
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	4093      	lsls	r3, r2
 8004cb8:	608b      	str	r3, [r1, #8]
 8004cba:	4620      	mov	r0, r4
 8004cbc:	f001 f832 	bl	8005d24 <_Bfree>
 8004cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	1e3b      	subs	r3, r7, #0
 8004cc8:	bfaa      	itet	ge
 8004cca:	2300      	movge	r3, #0
 8004ccc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004cd0:	f8c8 3000 	strge.w	r3, [r8]
 8004cd4:	4b9a      	ldr	r3, [pc, #616]	; (8004f40 <_dtoa_r+0x2d8>)
 8004cd6:	bfbc      	itt	lt
 8004cd8:	2201      	movlt	r2, #1
 8004cda:	f8c8 2000 	strlt.w	r2, [r8]
 8004cde:	ea33 030b 	bics.w	r3, r3, fp
 8004ce2:	d11b      	bne.n	8004d1c <_dtoa_r+0xb4>
 8004ce4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ce6:	f242 730f 	movw	r3, #9999	; 0x270f
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004cf0:	4333      	orrs	r3, r6
 8004cf2:	f000 8592 	beq.w	800581a <_dtoa_r+0xbb2>
 8004cf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cf8:	b963      	cbnz	r3, 8004d14 <_dtoa_r+0xac>
 8004cfa:	4b92      	ldr	r3, [pc, #584]	; (8004f44 <_dtoa_r+0x2dc>)
 8004cfc:	e022      	b.n	8004d44 <_dtoa_r+0xdc>
 8004cfe:	4b92      	ldr	r3, [pc, #584]	; (8004f48 <_dtoa_r+0x2e0>)
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	3308      	adds	r3, #8
 8004d04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	9801      	ldr	r0, [sp, #4]
 8004d0a:	b013      	add	sp, #76	; 0x4c
 8004d0c:	ecbd 8b04 	vpop	{d8-d9}
 8004d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d14:	4b8b      	ldr	r3, [pc, #556]	; (8004f44 <_dtoa_r+0x2dc>)
 8004d16:	9301      	str	r3, [sp, #4]
 8004d18:	3303      	adds	r3, #3
 8004d1a:	e7f3      	b.n	8004d04 <_dtoa_r+0x9c>
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2300      	movs	r3, #0
 8004d20:	4650      	mov	r0, sl
 8004d22:	4659      	mov	r1, fp
 8004d24:	f7fb fed0 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d28:	ec4b ab19 	vmov	d9, sl, fp
 8004d2c:	4680      	mov	r8, r0
 8004d2e:	b158      	cbz	r0, 8004d48 <_dtoa_r+0xe0>
 8004d30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d32:	2301      	movs	r3, #1
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 856b 	beq.w	8005814 <_dtoa_r+0xbac>
 8004d3e:	4883      	ldr	r0, [pc, #524]	; (8004f4c <_dtoa_r+0x2e4>)
 8004d40:	6018      	str	r0, [r3, #0]
 8004d42:	1e43      	subs	r3, r0, #1
 8004d44:	9301      	str	r3, [sp, #4]
 8004d46:	e7df      	b.n	8004d08 <_dtoa_r+0xa0>
 8004d48:	ec4b ab10 	vmov	d0, sl, fp
 8004d4c:	aa10      	add	r2, sp, #64	; 0x40
 8004d4e:	a911      	add	r1, sp, #68	; 0x44
 8004d50:	4620      	mov	r0, r4
 8004d52:	f001 facf 	bl	80062f4 <__d2b>
 8004d56:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004d5a:	ee08 0a10 	vmov	s16, r0
 8004d5e:	2d00      	cmp	r5, #0
 8004d60:	f000 8084 	beq.w	8004e6c <_dtoa_r+0x204>
 8004d64:	ee19 3a90 	vmov	r3, s19
 8004d68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d6c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004d70:	4656      	mov	r6, sl
 8004d72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004d76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d7a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004d7e:	4b74      	ldr	r3, [pc, #464]	; (8004f50 <_dtoa_r+0x2e8>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	4630      	mov	r0, r6
 8004d84:	4639      	mov	r1, r7
 8004d86:	f7fb fa7f 	bl	8000288 <__aeabi_dsub>
 8004d8a:	a365      	add	r3, pc, #404	; (adr r3, 8004f20 <_dtoa_r+0x2b8>)
 8004d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d90:	f7fb fc32 	bl	80005f8 <__aeabi_dmul>
 8004d94:	a364      	add	r3, pc, #400	; (adr r3, 8004f28 <_dtoa_r+0x2c0>)
 8004d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9a:	f7fb fa77 	bl	800028c <__adddf3>
 8004d9e:	4606      	mov	r6, r0
 8004da0:	4628      	mov	r0, r5
 8004da2:	460f      	mov	r7, r1
 8004da4:	f7fb fbbe 	bl	8000524 <__aeabi_i2d>
 8004da8:	a361      	add	r3, pc, #388	; (adr r3, 8004f30 <_dtoa_r+0x2c8>)
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	f7fb fc23 	bl	80005f8 <__aeabi_dmul>
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	4630      	mov	r0, r6
 8004db8:	4639      	mov	r1, r7
 8004dba:	f7fb fa67 	bl	800028c <__adddf3>
 8004dbe:	4606      	mov	r6, r0
 8004dc0:	460f      	mov	r7, r1
 8004dc2:	f7fb fec9 	bl	8000b58 <__aeabi_d2iz>
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	9000      	str	r0, [sp, #0]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	4630      	mov	r0, r6
 8004dce:	4639      	mov	r1, r7
 8004dd0:	f7fb fe84 	bl	8000adc <__aeabi_dcmplt>
 8004dd4:	b150      	cbz	r0, 8004dec <_dtoa_r+0x184>
 8004dd6:	9800      	ldr	r0, [sp, #0]
 8004dd8:	f7fb fba4 	bl	8000524 <__aeabi_i2d>
 8004ddc:	4632      	mov	r2, r6
 8004dde:	463b      	mov	r3, r7
 8004de0:	f7fb fe72 	bl	8000ac8 <__aeabi_dcmpeq>
 8004de4:	b910      	cbnz	r0, 8004dec <_dtoa_r+0x184>
 8004de6:	9b00      	ldr	r3, [sp, #0]
 8004de8:	3b01      	subs	r3, #1
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	9b00      	ldr	r3, [sp, #0]
 8004dee:	2b16      	cmp	r3, #22
 8004df0:	d85a      	bhi.n	8004ea8 <_dtoa_r+0x240>
 8004df2:	9a00      	ldr	r2, [sp, #0]
 8004df4:	4b57      	ldr	r3, [pc, #348]	; (8004f54 <_dtoa_r+0x2ec>)
 8004df6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	ec51 0b19 	vmov	r0, r1, d9
 8004e02:	f7fb fe6b 	bl	8000adc <__aeabi_dcmplt>
 8004e06:	2800      	cmp	r0, #0
 8004e08:	d050      	beq.n	8004eac <_dtoa_r+0x244>
 8004e0a:	9b00      	ldr	r3, [sp, #0]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	2300      	movs	r3, #0
 8004e12:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e16:	1b5d      	subs	r5, r3, r5
 8004e18:	1e6b      	subs	r3, r5, #1
 8004e1a:	9305      	str	r3, [sp, #20]
 8004e1c:	bf45      	ittet	mi
 8004e1e:	f1c5 0301 	rsbmi	r3, r5, #1
 8004e22:	9304      	strmi	r3, [sp, #16]
 8004e24:	2300      	movpl	r3, #0
 8004e26:	2300      	movmi	r3, #0
 8004e28:	bf4c      	ite	mi
 8004e2a:	9305      	strmi	r3, [sp, #20]
 8004e2c:	9304      	strpl	r3, [sp, #16]
 8004e2e:	9b00      	ldr	r3, [sp, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	db3d      	blt.n	8004eb0 <_dtoa_r+0x248>
 8004e34:	9b05      	ldr	r3, [sp, #20]
 8004e36:	9a00      	ldr	r2, [sp, #0]
 8004e38:	920a      	str	r2, [sp, #40]	; 0x28
 8004e3a:	4413      	add	r3, r2
 8004e3c:	9305      	str	r3, [sp, #20]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	9307      	str	r3, [sp, #28]
 8004e42:	9b06      	ldr	r3, [sp, #24]
 8004e44:	2b09      	cmp	r3, #9
 8004e46:	f200 8089 	bhi.w	8004f5c <_dtoa_r+0x2f4>
 8004e4a:	2b05      	cmp	r3, #5
 8004e4c:	bfc4      	itt	gt
 8004e4e:	3b04      	subgt	r3, #4
 8004e50:	9306      	strgt	r3, [sp, #24]
 8004e52:	9b06      	ldr	r3, [sp, #24]
 8004e54:	f1a3 0302 	sub.w	r3, r3, #2
 8004e58:	bfcc      	ite	gt
 8004e5a:	2500      	movgt	r5, #0
 8004e5c:	2501      	movle	r5, #1
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	f200 8087 	bhi.w	8004f72 <_dtoa_r+0x30a>
 8004e64:	e8df f003 	tbb	[pc, r3]
 8004e68:	59383a2d 	.word	0x59383a2d
 8004e6c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004e70:	441d      	add	r5, r3
 8004e72:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	bfc1      	itttt	gt
 8004e7a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e7e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004e82:	fa0b f303 	lslgt.w	r3, fp, r3
 8004e86:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004e8a:	bfda      	itte	le
 8004e8c:	f1c3 0320 	rsble	r3, r3, #32
 8004e90:	fa06 f003 	lslle.w	r0, r6, r3
 8004e94:	4318      	orrgt	r0, r3
 8004e96:	f7fb fb35 	bl	8000504 <__aeabi_ui2d>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	4606      	mov	r6, r0
 8004e9e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004ea2:	3d01      	subs	r5, #1
 8004ea4:	930e      	str	r3, [sp, #56]	; 0x38
 8004ea6:	e76a      	b.n	8004d7e <_dtoa_r+0x116>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e7b2      	b.n	8004e12 <_dtoa_r+0x1aa>
 8004eac:	900b      	str	r0, [sp, #44]	; 0x2c
 8004eae:	e7b1      	b.n	8004e14 <_dtoa_r+0x1ac>
 8004eb0:	9b04      	ldr	r3, [sp, #16]
 8004eb2:	9a00      	ldr	r2, [sp, #0]
 8004eb4:	1a9b      	subs	r3, r3, r2
 8004eb6:	9304      	str	r3, [sp, #16]
 8004eb8:	4253      	negs	r3, r2
 8004eba:	9307      	str	r3, [sp, #28]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8004ec0:	e7bf      	b.n	8004e42 <_dtoa_r+0x1da>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	9308      	str	r3, [sp, #32]
 8004ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	dc55      	bgt.n	8004f78 <_dtoa_r+0x310>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ed6:	e00c      	b.n	8004ef2 <_dtoa_r+0x28a>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e7f3      	b.n	8004ec4 <_dtoa_r+0x25c>
 8004edc:	2300      	movs	r3, #0
 8004ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ee0:	9308      	str	r3, [sp, #32]
 8004ee2:	9b00      	ldr	r3, [sp, #0]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	9302      	str	r3, [sp, #8]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	9303      	str	r3, [sp, #12]
 8004eee:	bfb8      	it	lt
 8004ef0:	2301      	movlt	r3, #1
 8004ef2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	6042      	str	r2, [r0, #4]
 8004ef8:	2204      	movs	r2, #4
 8004efa:	f102 0614 	add.w	r6, r2, #20
 8004efe:	429e      	cmp	r6, r3
 8004f00:	6841      	ldr	r1, [r0, #4]
 8004f02:	d93d      	bls.n	8004f80 <_dtoa_r+0x318>
 8004f04:	4620      	mov	r0, r4
 8004f06:	f000 fecd 	bl	8005ca4 <_Balloc>
 8004f0a:	9001      	str	r0, [sp, #4]
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d13b      	bne.n	8004f88 <_dtoa_r+0x320>
 8004f10:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <_dtoa_r+0x2f0>)
 8004f12:	4602      	mov	r2, r0
 8004f14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004f18:	e6c0      	b.n	8004c9c <_dtoa_r+0x34>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e7df      	b.n	8004ede <_dtoa_r+0x276>
 8004f1e:	bf00      	nop
 8004f20:	636f4361 	.word	0x636f4361
 8004f24:	3fd287a7 	.word	0x3fd287a7
 8004f28:	8b60c8b3 	.word	0x8b60c8b3
 8004f2c:	3fc68a28 	.word	0x3fc68a28
 8004f30:	509f79fb 	.word	0x509f79fb
 8004f34:	3fd34413 	.word	0x3fd34413
 8004f38:	0800f259 	.word	0x0800f259
 8004f3c:	0800f270 	.word	0x0800f270
 8004f40:	7ff00000 	.word	0x7ff00000
 8004f44:	0800f255 	.word	0x0800f255
 8004f48:	0800f24c 	.word	0x0800f24c
 8004f4c:	0800f229 	.word	0x0800f229
 8004f50:	3ff80000 	.word	0x3ff80000
 8004f54:	0800f3c0 	.word	0x0800f3c0
 8004f58:	0800f2cb 	.word	0x0800f2cb
 8004f5c:	2501      	movs	r5, #1
 8004f5e:	2300      	movs	r3, #0
 8004f60:	9306      	str	r3, [sp, #24]
 8004f62:	9508      	str	r5, [sp, #32]
 8004f64:	f04f 33ff 	mov.w	r3, #4294967295
 8004f68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2312      	movs	r3, #18
 8004f70:	e7b0      	b.n	8004ed4 <_dtoa_r+0x26c>
 8004f72:	2301      	movs	r3, #1
 8004f74:	9308      	str	r3, [sp, #32]
 8004f76:	e7f5      	b.n	8004f64 <_dtoa_r+0x2fc>
 8004f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004f7e:	e7b8      	b.n	8004ef2 <_dtoa_r+0x28a>
 8004f80:	3101      	adds	r1, #1
 8004f82:	6041      	str	r1, [r0, #4]
 8004f84:	0052      	lsls	r2, r2, #1
 8004f86:	e7b8      	b.n	8004efa <_dtoa_r+0x292>
 8004f88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f8a:	9a01      	ldr	r2, [sp, #4]
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	9b03      	ldr	r3, [sp, #12]
 8004f90:	2b0e      	cmp	r3, #14
 8004f92:	f200 809d 	bhi.w	80050d0 <_dtoa_r+0x468>
 8004f96:	2d00      	cmp	r5, #0
 8004f98:	f000 809a 	beq.w	80050d0 <_dtoa_r+0x468>
 8004f9c:	9b00      	ldr	r3, [sp, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	dd32      	ble.n	8005008 <_dtoa_r+0x3a0>
 8004fa2:	4ab7      	ldr	r2, [pc, #732]	; (8005280 <_dtoa_r+0x618>)
 8004fa4:	f003 030f 	and.w	r3, r3, #15
 8004fa8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004fac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fb0:	9b00      	ldr	r3, [sp, #0]
 8004fb2:	05d8      	lsls	r0, r3, #23
 8004fb4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004fb8:	d516      	bpl.n	8004fe8 <_dtoa_r+0x380>
 8004fba:	4bb2      	ldr	r3, [pc, #712]	; (8005284 <_dtoa_r+0x61c>)
 8004fbc:	ec51 0b19 	vmov	r0, r1, d9
 8004fc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fc4:	f7fb fc42 	bl	800084c <__aeabi_ddiv>
 8004fc8:	f007 070f 	and.w	r7, r7, #15
 8004fcc:	4682      	mov	sl, r0
 8004fce:	468b      	mov	fp, r1
 8004fd0:	2503      	movs	r5, #3
 8004fd2:	4eac      	ldr	r6, [pc, #688]	; (8005284 <_dtoa_r+0x61c>)
 8004fd4:	b957      	cbnz	r7, 8004fec <_dtoa_r+0x384>
 8004fd6:	4642      	mov	r2, r8
 8004fd8:	464b      	mov	r3, r9
 8004fda:	4650      	mov	r0, sl
 8004fdc:	4659      	mov	r1, fp
 8004fde:	f7fb fc35 	bl	800084c <__aeabi_ddiv>
 8004fe2:	4682      	mov	sl, r0
 8004fe4:	468b      	mov	fp, r1
 8004fe6:	e028      	b.n	800503a <_dtoa_r+0x3d2>
 8004fe8:	2502      	movs	r5, #2
 8004fea:	e7f2      	b.n	8004fd2 <_dtoa_r+0x36a>
 8004fec:	07f9      	lsls	r1, r7, #31
 8004fee:	d508      	bpl.n	8005002 <_dtoa_r+0x39a>
 8004ff0:	4640      	mov	r0, r8
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ff8:	f7fb fafe 	bl	80005f8 <__aeabi_dmul>
 8004ffc:	3501      	adds	r5, #1
 8004ffe:	4680      	mov	r8, r0
 8005000:	4689      	mov	r9, r1
 8005002:	107f      	asrs	r7, r7, #1
 8005004:	3608      	adds	r6, #8
 8005006:	e7e5      	b.n	8004fd4 <_dtoa_r+0x36c>
 8005008:	f000 809b 	beq.w	8005142 <_dtoa_r+0x4da>
 800500c:	9b00      	ldr	r3, [sp, #0]
 800500e:	4f9d      	ldr	r7, [pc, #628]	; (8005284 <_dtoa_r+0x61c>)
 8005010:	425e      	negs	r6, r3
 8005012:	4b9b      	ldr	r3, [pc, #620]	; (8005280 <_dtoa_r+0x618>)
 8005014:	f006 020f 	and.w	r2, r6, #15
 8005018:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	ec51 0b19 	vmov	r0, r1, d9
 8005024:	f7fb fae8 	bl	80005f8 <__aeabi_dmul>
 8005028:	1136      	asrs	r6, r6, #4
 800502a:	4682      	mov	sl, r0
 800502c:	468b      	mov	fp, r1
 800502e:	2300      	movs	r3, #0
 8005030:	2502      	movs	r5, #2
 8005032:	2e00      	cmp	r6, #0
 8005034:	d17a      	bne.n	800512c <_dtoa_r+0x4c4>
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1d3      	bne.n	8004fe2 <_dtoa_r+0x37a>
 800503a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 8082 	beq.w	8005146 <_dtoa_r+0x4de>
 8005042:	4b91      	ldr	r3, [pc, #580]	; (8005288 <_dtoa_r+0x620>)
 8005044:	2200      	movs	r2, #0
 8005046:	4650      	mov	r0, sl
 8005048:	4659      	mov	r1, fp
 800504a:	f7fb fd47 	bl	8000adc <__aeabi_dcmplt>
 800504e:	2800      	cmp	r0, #0
 8005050:	d079      	beq.n	8005146 <_dtoa_r+0x4de>
 8005052:	9b03      	ldr	r3, [sp, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d076      	beq.n	8005146 <_dtoa_r+0x4de>
 8005058:	9b02      	ldr	r3, [sp, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	dd36      	ble.n	80050cc <_dtoa_r+0x464>
 800505e:	9b00      	ldr	r3, [sp, #0]
 8005060:	4650      	mov	r0, sl
 8005062:	4659      	mov	r1, fp
 8005064:	1e5f      	subs	r7, r3, #1
 8005066:	2200      	movs	r2, #0
 8005068:	4b88      	ldr	r3, [pc, #544]	; (800528c <_dtoa_r+0x624>)
 800506a:	f7fb fac5 	bl	80005f8 <__aeabi_dmul>
 800506e:	9e02      	ldr	r6, [sp, #8]
 8005070:	4682      	mov	sl, r0
 8005072:	468b      	mov	fp, r1
 8005074:	3501      	adds	r5, #1
 8005076:	4628      	mov	r0, r5
 8005078:	f7fb fa54 	bl	8000524 <__aeabi_i2d>
 800507c:	4652      	mov	r2, sl
 800507e:	465b      	mov	r3, fp
 8005080:	f7fb faba 	bl	80005f8 <__aeabi_dmul>
 8005084:	4b82      	ldr	r3, [pc, #520]	; (8005290 <_dtoa_r+0x628>)
 8005086:	2200      	movs	r2, #0
 8005088:	f7fb f900 	bl	800028c <__adddf3>
 800508c:	46d0      	mov	r8, sl
 800508e:	46d9      	mov	r9, fp
 8005090:	4682      	mov	sl, r0
 8005092:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005096:	2e00      	cmp	r6, #0
 8005098:	d158      	bne.n	800514c <_dtoa_r+0x4e4>
 800509a:	4b7e      	ldr	r3, [pc, #504]	; (8005294 <_dtoa_r+0x62c>)
 800509c:	2200      	movs	r2, #0
 800509e:	4640      	mov	r0, r8
 80050a0:	4649      	mov	r1, r9
 80050a2:	f7fb f8f1 	bl	8000288 <__aeabi_dsub>
 80050a6:	4652      	mov	r2, sl
 80050a8:	465b      	mov	r3, fp
 80050aa:	4680      	mov	r8, r0
 80050ac:	4689      	mov	r9, r1
 80050ae:	f7fb fd33 	bl	8000b18 <__aeabi_dcmpgt>
 80050b2:	2800      	cmp	r0, #0
 80050b4:	f040 8295 	bne.w	80055e2 <_dtoa_r+0x97a>
 80050b8:	4652      	mov	r2, sl
 80050ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80050be:	4640      	mov	r0, r8
 80050c0:	4649      	mov	r1, r9
 80050c2:	f7fb fd0b 	bl	8000adc <__aeabi_dcmplt>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	f040 8289 	bne.w	80055de <_dtoa_r+0x976>
 80050cc:	ec5b ab19 	vmov	sl, fp, d9
 80050d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f2c0 8148 	blt.w	8005368 <_dtoa_r+0x700>
 80050d8:	9a00      	ldr	r2, [sp, #0]
 80050da:	2a0e      	cmp	r2, #14
 80050dc:	f300 8144 	bgt.w	8005368 <_dtoa_r+0x700>
 80050e0:	4b67      	ldr	r3, [pc, #412]	; (8005280 <_dtoa_r+0x618>)
 80050e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f280 80d5 	bge.w	800529c <_dtoa_r+0x634>
 80050f2:	9b03      	ldr	r3, [sp, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f300 80d1 	bgt.w	800529c <_dtoa_r+0x634>
 80050fa:	f040 826f 	bne.w	80055dc <_dtoa_r+0x974>
 80050fe:	4b65      	ldr	r3, [pc, #404]	; (8005294 <_dtoa_r+0x62c>)
 8005100:	2200      	movs	r2, #0
 8005102:	4640      	mov	r0, r8
 8005104:	4649      	mov	r1, r9
 8005106:	f7fb fa77 	bl	80005f8 <__aeabi_dmul>
 800510a:	4652      	mov	r2, sl
 800510c:	465b      	mov	r3, fp
 800510e:	f7fb fcf9 	bl	8000b04 <__aeabi_dcmpge>
 8005112:	9e03      	ldr	r6, [sp, #12]
 8005114:	4637      	mov	r7, r6
 8005116:	2800      	cmp	r0, #0
 8005118:	f040 8245 	bne.w	80055a6 <_dtoa_r+0x93e>
 800511c:	9d01      	ldr	r5, [sp, #4]
 800511e:	2331      	movs	r3, #49	; 0x31
 8005120:	f805 3b01 	strb.w	r3, [r5], #1
 8005124:	9b00      	ldr	r3, [sp, #0]
 8005126:	3301      	adds	r3, #1
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	e240      	b.n	80055ae <_dtoa_r+0x946>
 800512c:	07f2      	lsls	r2, r6, #31
 800512e:	d505      	bpl.n	800513c <_dtoa_r+0x4d4>
 8005130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005134:	f7fb fa60 	bl	80005f8 <__aeabi_dmul>
 8005138:	3501      	adds	r5, #1
 800513a:	2301      	movs	r3, #1
 800513c:	1076      	asrs	r6, r6, #1
 800513e:	3708      	adds	r7, #8
 8005140:	e777      	b.n	8005032 <_dtoa_r+0x3ca>
 8005142:	2502      	movs	r5, #2
 8005144:	e779      	b.n	800503a <_dtoa_r+0x3d2>
 8005146:	9f00      	ldr	r7, [sp, #0]
 8005148:	9e03      	ldr	r6, [sp, #12]
 800514a:	e794      	b.n	8005076 <_dtoa_r+0x40e>
 800514c:	9901      	ldr	r1, [sp, #4]
 800514e:	4b4c      	ldr	r3, [pc, #304]	; (8005280 <_dtoa_r+0x618>)
 8005150:	4431      	add	r1, r6
 8005152:	910d      	str	r1, [sp, #52]	; 0x34
 8005154:	9908      	ldr	r1, [sp, #32]
 8005156:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800515a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800515e:	2900      	cmp	r1, #0
 8005160:	d043      	beq.n	80051ea <_dtoa_r+0x582>
 8005162:	494d      	ldr	r1, [pc, #308]	; (8005298 <_dtoa_r+0x630>)
 8005164:	2000      	movs	r0, #0
 8005166:	f7fb fb71 	bl	800084c <__aeabi_ddiv>
 800516a:	4652      	mov	r2, sl
 800516c:	465b      	mov	r3, fp
 800516e:	f7fb f88b 	bl	8000288 <__aeabi_dsub>
 8005172:	9d01      	ldr	r5, [sp, #4]
 8005174:	4682      	mov	sl, r0
 8005176:	468b      	mov	fp, r1
 8005178:	4649      	mov	r1, r9
 800517a:	4640      	mov	r0, r8
 800517c:	f7fb fcec 	bl	8000b58 <__aeabi_d2iz>
 8005180:	4606      	mov	r6, r0
 8005182:	f7fb f9cf 	bl	8000524 <__aeabi_i2d>
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4640      	mov	r0, r8
 800518c:	4649      	mov	r1, r9
 800518e:	f7fb f87b 	bl	8000288 <__aeabi_dsub>
 8005192:	3630      	adds	r6, #48	; 0x30
 8005194:	f805 6b01 	strb.w	r6, [r5], #1
 8005198:	4652      	mov	r2, sl
 800519a:	465b      	mov	r3, fp
 800519c:	4680      	mov	r8, r0
 800519e:	4689      	mov	r9, r1
 80051a0:	f7fb fc9c 	bl	8000adc <__aeabi_dcmplt>
 80051a4:	2800      	cmp	r0, #0
 80051a6:	d163      	bne.n	8005270 <_dtoa_r+0x608>
 80051a8:	4642      	mov	r2, r8
 80051aa:	464b      	mov	r3, r9
 80051ac:	4936      	ldr	r1, [pc, #216]	; (8005288 <_dtoa_r+0x620>)
 80051ae:	2000      	movs	r0, #0
 80051b0:	f7fb f86a 	bl	8000288 <__aeabi_dsub>
 80051b4:	4652      	mov	r2, sl
 80051b6:	465b      	mov	r3, fp
 80051b8:	f7fb fc90 	bl	8000adc <__aeabi_dcmplt>
 80051bc:	2800      	cmp	r0, #0
 80051be:	f040 80b5 	bne.w	800532c <_dtoa_r+0x6c4>
 80051c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051c4:	429d      	cmp	r5, r3
 80051c6:	d081      	beq.n	80050cc <_dtoa_r+0x464>
 80051c8:	4b30      	ldr	r3, [pc, #192]	; (800528c <_dtoa_r+0x624>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	4650      	mov	r0, sl
 80051ce:	4659      	mov	r1, fp
 80051d0:	f7fb fa12 	bl	80005f8 <__aeabi_dmul>
 80051d4:	4b2d      	ldr	r3, [pc, #180]	; (800528c <_dtoa_r+0x624>)
 80051d6:	4682      	mov	sl, r0
 80051d8:	468b      	mov	fp, r1
 80051da:	4640      	mov	r0, r8
 80051dc:	4649      	mov	r1, r9
 80051de:	2200      	movs	r2, #0
 80051e0:	f7fb fa0a 	bl	80005f8 <__aeabi_dmul>
 80051e4:	4680      	mov	r8, r0
 80051e6:	4689      	mov	r9, r1
 80051e8:	e7c6      	b.n	8005178 <_dtoa_r+0x510>
 80051ea:	4650      	mov	r0, sl
 80051ec:	4659      	mov	r1, fp
 80051ee:	f7fb fa03 	bl	80005f8 <__aeabi_dmul>
 80051f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051f4:	9d01      	ldr	r5, [sp, #4]
 80051f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80051f8:	4682      	mov	sl, r0
 80051fa:	468b      	mov	fp, r1
 80051fc:	4649      	mov	r1, r9
 80051fe:	4640      	mov	r0, r8
 8005200:	f7fb fcaa 	bl	8000b58 <__aeabi_d2iz>
 8005204:	4606      	mov	r6, r0
 8005206:	f7fb f98d 	bl	8000524 <__aeabi_i2d>
 800520a:	3630      	adds	r6, #48	; 0x30
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4640      	mov	r0, r8
 8005212:	4649      	mov	r1, r9
 8005214:	f7fb f838 	bl	8000288 <__aeabi_dsub>
 8005218:	f805 6b01 	strb.w	r6, [r5], #1
 800521c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800521e:	429d      	cmp	r5, r3
 8005220:	4680      	mov	r8, r0
 8005222:	4689      	mov	r9, r1
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	d124      	bne.n	8005274 <_dtoa_r+0x60c>
 800522a:	4b1b      	ldr	r3, [pc, #108]	; (8005298 <_dtoa_r+0x630>)
 800522c:	4650      	mov	r0, sl
 800522e:	4659      	mov	r1, fp
 8005230:	f7fb f82c 	bl	800028c <__adddf3>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4640      	mov	r0, r8
 800523a:	4649      	mov	r1, r9
 800523c:	f7fb fc6c 	bl	8000b18 <__aeabi_dcmpgt>
 8005240:	2800      	cmp	r0, #0
 8005242:	d173      	bne.n	800532c <_dtoa_r+0x6c4>
 8005244:	4652      	mov	r2, sl
 8005246:	465b      	mov	r3, fp
 8005248:	4913      	ldr	r1, [pc, #76]	; (8005298 <_dtoa_r+0x630>)
 800524a:	2000      	movs	r0, #0
 800524c:	f7fb f81c 	bl	8000288 <__aeabi_dsub>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4640      	mov	r0, r8
 8005256:	4649      	mov	r1, r9
 8005258:	f7fb fc40 	bl	8000adc <__aeabi_dcmplt>
 800525c:	2800      	cmp	r0, #0
 800525e:	f43f af35 	beq.w	80050cc <_dtoa_r+0x464>
 8005262:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005264:	1e6b      	subs	r3, r5, #1
 8005266:	930f      	str	r3, [sp, #60]	; 0x3c
 8005268:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800526c:	2b30      	cmp	r3, #48	; 0x30
 800526e:	d0f8      	beq.n	8005262 <_dtoa_r+0x5fa>
 8005270:	9700      	str	r7, [sp, #0]
 8005272:	e049      	b.n	8005308 <_dtoa_r+0x6a0>
 8005274:	4b05      	ldr	r3, [pc, #20]	; (800528c <_dtoa_r+0x624>)
 8005276:	f7fb f9bf 	bl	80005f8 <__aeabi_dmul>
 800527a:	4680      	mov	r8, r0
 800527c:	4689      	mov	r9, r1
 800527e:	e7bd      	b.n	80051fc <_dtoa_r+0x594>
 8005280:	0800f3c0 	.word	0x0800f3c0
 8005284:	0800f398 	.word	0x0800f398
 8005288:	3ff00000 	.word	0x3ff00000
 800528c:	40240000 	.word	0x40240000
 8005290:	401c0000 	.word	0x401c0000
 8005294:	40140000 	.word	0x40140000
 8005298:	3fe00000 	.word	0x3fe00000
 800529c:	9d01      	ldr	r5, [sp, #4]
 800529e:	4656      	mov	r6, sl
 80052a0:	465f      	mov	r7, fp
 80052a2:	4642      	mov	r2, r8
 80052a4:	464b      	mov	r3, r9
 80052a6:	4630      	mov	r0, r6
 80052a8:	4639      	mov	r1, r7
 80052aa:	f7fb facf 	bl	800084c <__aeabi_ddiv>
 80052ae:	f7fb fc53 	bl	8000b58 <__aeabi_d2iz>
 80052b2:	4682      	mov	sl, r0
 80052b4:	f7fb f936 	bl	8000524 <__aeabi_i2d>
 80052b8:	4642      	mov	r2, r8
 80052ba:	464b      	mov	r3, r9
 80052bc:	f7fb f99c 	bl	80005f8 <__aeabi_dmul>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4630      	mov	r0, r6
 80052c6:	4639      	mov	r1, r7
 80052c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80052cc:	f7fa ffdc 	bl	8000288 <__aeabi_dsub>
 80052d0:	f805 6b01 	strb.w	r6, [r5], #1
 80052d4:	9e01      	ldr	r6, [sp, #4]
 80052d6:	9f03      	ldr	r7, [sp, #12]
 80052d8:	1bae      	subs	r6, r5, r6
 80052da:	42b7      	cmp	r7, r6
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	d135      	bne.n	800534e <_dtoa_r+0x6e6>
 80052e2:	f7fa ffd3 	bl	800028c <__adddf3>
 80052e6:	4642      	mov	r2, r8
 80052e8:	464b      	mov	r3, r9
 80052ea:	4606      	mov	r6, r0
 80052ec:	460f      	mov	r7, r1
 80052ee:	f7fb fc13 	bl	8000b18 <__aeabi_dcmpgt>
 80052f2:	b9d0      	cbnz	r0, 800532a <_dtoa_r+0x6c2>
 80052f4:	4642      	mov	r2, r8
 80052f6:	464b      	mov	r3, r9
 80052f8:	4630      	mov	r0, r6
 80052fa:	4639      	mov	r1, r7
 80052fc:	f7fb fbe4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005300:	b110      	cbz	r0, 8005308 <_dtoa_r+0x6a0>
 8005302:	f01a 0f01 	tst.w	sl, #1
 8005306:	d110      	bne.n	800532a <_dtoa_r+0x6c2>
 8005308:	4620      	mov	r0, r4
 800530a:	ee18 1a10 	vmov	r1, s16
 800530e:	f000 fd09 	bl	8005d24 <_Bfree>
 8005312:	2300      	movs	r3, #0
 8005314:	9800      	ldr	r0, [sp, #0]
 8005316:	702b      	strb	r3, [r5, #0]
 8005318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800531a:	3001      	adds	r0, #1
 800531c:	6018      	str	r0, [r3, #0]
 800531e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005320:	2b00      	cmp	r3, #0
 8005322:	f43f acf1 	beq.w	8004d08 <_dtoa_r+0xa0>
 8005326:	601d      	str	r5, [r3, #0]
 8005328:	e4ee      	b.n	8004d08 <_dtoa_r+0xa0>
 800532a:	9f00      	ldr	r7, [sp, #0]
 800532c:	462b      	mov	r3, r5
 800532e:	461d      	mov	r5, r3
 8005330:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005334:	2a39      	cmp	r2, #57	; 0x39
 8005336:	d106      	bne.n	8005346 <_dtoa_r+0x6de>
 8005338:	9a01      	ldr	r2, [sp, #4]
 800533a:	429a      	cmp	r2, r3
 800533c:	d1f7      	bne.n	800532e <_dtoa_r+0x6c6>
 800533e:	9901      	ldr	r1, [sp, #4]
 8005340:	2230      	movs	r2, #48	; 0x30
 8005342:	3701      	adds	r7, #1
 8005344:	700a      	strb	r2, [r1, #0]
 8005346:	781a      	ldrb	r2, [r3, #0]
 8005348:	3201      	adds	r2, #1
 800534a:	701a      	strb	r2, [r3, #0]
 800534c:	e790      	b.n	8005270 <_dtoa_r+0x608>
 800534e:	4ba6      	ldr	r3, [pc, #664]	; (80055e8 <_dtoa_r+0x980>)
 8005350:	2200      	movs	r2, #0
 8005352:	f7fb f951 	bl	80005f8 <__aeabi_dmul>
 8005356:	2200      	movs	r2, #0
 8005358:	2300      	movs	r3, #0
 800535a:	4606      	mov	r6, r0
 800535c:	460f      	mov	r7, r1
 800535e:	f7fb fbb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005362:	2800      	cmp	r0, #0
 8005364:	d09d      	beq.n	80052a2 <_dtoa_r+0x63a>
 8005366:	e7cf      	b.n	8005308 <_dtoa_r+0x6a0>
 8005368:	9a08      	ldr	r2, [sp, #32]
 800536a:	2a00      	cmp	r2, #0
 800536c:	f000 80d7 	beq.w	800551e <_dtoa_r+0x8b6>
 8005370:	9a06      	ldr	r2, [sp, #24]
 8005372:	2a01      	cmp	r2, #1
 8005374:	f300 80ba 	bgt.w	80054ec <_dtoa_r+0x884>
 8005378:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800537a:	2a00      	cmp	r2, #0
 800537c:	f000 80b2 	beq.w	80054e4 <_dtoa_r+0x87c>
 8005380:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005384:	9e07      	ldr	r6, [sp, #28]
 8005386:	9d04      	ldr	r5, [sp, #16]
 8005388:	9a04      	ldr	r2, [sp, #16]
 800538a:	441a      	add	r2, r3
 800538c:	9204      	str	r2, [sp, #16]
 800538e:	9a05      	ldr	r2, [sp, #20]
 8005390:	2101      	movs	r1, #1
 8005392:	441a      	add	r2, r3
 8005394:	4620      	mov	r0, r4
 8005396:	9205      	str	r2, [sp, #20]
 8005398:	f000 fd7c 	bl	8005e94 <__i2b>
 800539c:	4607      	mov	r7, r0
 800539e:	2d00      	cmp	r5, #0
 80053a0:	dd0c      	ble.n	80053bc <_dtoa_r+0x754>
 80053a2:	9b05      	ldr	r3, [sp, #20]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	dd09      	ble.n	80053bc <_dtoa_r+0x754>
 80053a8:	42ab      	cmp	r3, r5
 80053aa:	9a04      	ldr	r2, [sp, #16]
 80053ac:	bfa8      	it	ge
 80053ae:	462b      	movge	r3, r5
 80053b0:	1ad2      	subs	r2, r2, r3
 80053b2:	9204      	str	r2, [sp, #16]
 80053b4:	9a05      	ldr	r2, [sp, #20]
 80053b6:	1aed      	subs	r5, r5, r3
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	9305      	str	r3, [sp, #20]
 80053bc:	9b07      	ldr	r3, [sp, #28]
 80053be:	b31b      	cbz	r3, 8005408 <_dtoa_r+0x7a0>
 80053c0:	9b08      	ldr	r3, [sp, #32]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 80af 	beq.w	8005526 <_dtoa_r+0x8be>
 80053c8:	2e00      	cmp	r6, #0
 80053ca:	dd13      	ble.n	80053f4 <_dtoa_r+0x78c>
 80053cc:	4639      	mov	r1, r7
 80053ce:	4632      	mov	r2, r6
 80053d0:	4620      	mov	r0, r4
 80053d2:	f000 fe1f 	bl	8006014 <__pow5mult>
 80053d6:	ee18 2a10 	vmov	r2, s16
 80053da:	4601      	mov	r1, r0
 80053dc:	4607      	mov	r7, r0
 80053de:	4620      	mov	r0, r4
 80053e0:	f000 fd6e 	bl	8005ec0 <__multiply>
 80053e4:	ee18 1a10 	vmov	r1, s16
 80053e8:	4680      	mov	r8, r0
 80053ea:	4620      	mov	r0, r4
 80053ec:	f000 fc9a 	bl	8005d24 <_Bfree>
 80053f0:	ee08 8a10 	vmov	s16, r8
 80053f4:	9b07      	ldr	r3, [sp, #28]
 80053f6:	1b9a      	subs	r2, r3, r6
 80053f8:	d006      	beq.n	8005408 <_dtoa_r+0x7a0>
 80053fa:	ee18 1a10 	vmov	r1, s16
 80053fe:	4620      	mov	r0, r4
 8005400:	f000 fe08 	bl	8006014 <__pow5mult>
 8005404:	ee08 0a10 	vmov	s16, r0
 8005408:	2101      	movs	r1, #1
 800540a:	4620      	mov	r0, r4
 800540c:	f000 fd42 	bl	8005e94 <__i2b>
 8005410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005412:	2b00      	cmp	r3, #0
 8005414:	4606      	mov	r6, r0
 8005416:	f340 8088 	ble.w	800552a <_dtoa_r+0x8c2>
 800541a:	461a      	mov	r2, r3
 800541c:	4601      	mov	r1, r0
 800541e:	4620      	mov	r0, r4
 8005420:	f000 fdf8 	bl	8006014 <__pow5mult>
 8005424:	9b06      	ldr	r3, [sp, #24]
 8005426:	2b01      	cmp	r3, #1
 8005428:	4606      	mov	r6, r0
 800542a:	f340 8081 	ble.w	8005530 <_dtoa_r+0x8c8>
 800542e:	f04f 0800 	mov.w	r8, #0
 8005432:	6933      	ldr	r3, [r6, #16]
 8005434:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005438:	6918      	ldr	r0, [r3, #16]
 800543a:	f000 fcdb 	bl	8005df4 <__hi0bits>
 800543e:	f1c0 0020 	rsb	r0, r0, #32
 8005442:	9b05      	ldr	r3, [sp, #20]
 8005444:	4418      	add	r0, r3
 8005446:	f010 001f 	ands.w	r0, r0, #31
 800544a:	f000 8092 	beq.w	8005572 <_dtoa_r+0x90a>
 800544e:	f1c0 0320 	rsb	r3, r0, #32
 8005452:	2b04      	cmp	r3, #4
 8005454:	f340 808a 	ble.w	800556c <_dtoa_r+0x904>
 8005458:	f1c0 001c 	rsb	r0, r0, #28
 800545c:	9b04      	ldr	r3, [sp, #16]
 800545e:	4403      	add	r3, r0
 8005460:	9304      	str	r3, [sp, #16]
 8005462:	9b05      	ldr	r3, [sp, #20]
 8005464:	4403      	add	r3, r0
 8005466:	4405      	add	r5, r0
 8005468:	9305      	str	r3, [sp, #20]
 800546a:	9b04      	ldr	r3, [sp, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	dd07      	ble.n	8005480 <_dtoa_r+0x818>
 8005470:	ee18 1a10 	vmov	r1, s16
 8005474:	461a      	mov	r2, r3
 8005476:	4620      	mov	r0, r4
 8005478:	f000 fe26 	bl	80060c8 <__lshift>
 800547c:	ee08 0a10 	vmov	s16, r0
 8005480:	9b05      	ldr	r3, [sp, #20]
 8005482:	2b00      	cmp	r3, #0
 8005484:	dd05      	ble.n	8005492 <_dtoa_r+0x82a>
 8005486:	4631      	mov	r1, r6
 8005488:	461a      	mov	r2, r3
 800548a:	4620      	mov	r0, r4
 800548c:	f000 fe1c 	bl	80060c8 <__lshift>
 8005490:	4606      	mov	r6, r0
 8005492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d06e      	beq.n	8005576 <_dtoa_r+0x90e>
 8005498:	ee18 0a10 	vmov	r0, s16
 800549c:	4631      	mov	r1, r6
 800549e:	f000 fe83 	bl	80061a8 <__mcmp>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	da67      	bge.n	8005576 <_dtoa_r+0x90e>
 80054a6:	9b00      	ldr	r3, [sp, #0]
 80054a8:	3b01      	subs	r3, #1
 80054aa:	ee18 1a10 	vmov	r1, s16
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	220a      	movs	r2, #10
 80054b2:	2300      	movs	r3, #0
 80054b4:	4620      	mov	r0, r4
 80054b6:	f000 fc57 	bl	8005d68 <__multadd>
 80054ba:	9b08      	ldr	r3, [sp, #32]
 80054bc:	ee08 0a10 	vmov	s16, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 81b1 	beq.w	8005828 <_dtoa_r+0xbc0>
 80054c6:	2300      	movs	r3, #0
 80054c8:	4639      	mov	r1, r7
 80054ca:	220a      	movs	r2, #10
 80054cc:	4620      	mov	r0, r4
 80054ce:	f000 fc4b 	bl	8005d68 <__multadd>
 80054d2:	9b02      	ldr	r3, [sp, #8]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	4607      	mov	r7, r0
 80054d8:	f300 808e 	bgt.w	80055f8 <_dtoa_r+0x990>
 80054dc:	9b06      	ldr	r3, [sp, #24]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	dc51      	bgt.n	8005586 <_dtoa_r+0x91e>
 80054e2:	e089      	b.n	80055f8 <_dtoa_r+0x990>
 80054e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80054e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80054ea:	e74b      	b.n	8005384 <_dtoa_r+0x71c>
 80054ec:	9b03      	ldr	r3, [sp, #12]
 80054ee:	1e5e      	subs	r6, r3, #1
 80054f0:	9b07      	ldr	r3, [sp, #28]
 80054f2:	42b3      	cmp	r3, r6
 80054f4:	bfbf      	itttt	lt
 80054f6:	9b07      	ldrlt	r3, [sp, #28]
 80054f8:	9607      	strlt	r6, [sp, #28]
 80054fa:	1af2      	sublt	r2, r6, r3
 80054fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80054fe:	bfb6      	itet	lt
 8005500:	189b      	addlt	r3, r3, r2
 8005502:	1b9e      	subge	r6, r3, r6
 8005504:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005506:	9b03      	ldr	r3, [sp, #12]
 8005508:	bfb8      	it	lt
 800550a:	2600      	movlt	r6, #0
 800550c:	2b00      	cmp	r3, #0
 800550e:	bfb7      	itett	lt
 8005510:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005514:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005518:	1a9d      	sublt	r5, r3, r2
 800551a:	2300      	movlt	r3, #0
 800551c:	e734      	b.n	8005388 <_dtoa_r+0x720>
 800551e:	9e07      	ldr	r6, [sp, #28]
 8005520:	9d04      	ldr	r5, [sp, #16]
 8005522:	9f08      	ldr	r7, [sp, #32]
 8005524:	e73b      	b.n	800539e <_dtoa_r+0x736>
 8005526:	9a07      	ldr	r2, [sp, #28]
 8005528:	e767      	b.n	80053fa <_dtoa_r+0x792>
 800552a:	9b06      	ldr	r3, [sp, #24]
 800552c:	2b01      	cmp	r3, #1
 800552e:	dc18      	bgt.n	8005562 <_dtoa_r+0x8fa>
 8005530:	f1ba 0f00 	cmp.w	sl, #0
 8005534:	d115      	bne.n	8005562 <_dtoa_r+0x8fa>
 8005536:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800553a:	b993      	cbnz	r3, 8005562 <_dtoa_r+0x8fa>
 800553c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005540:	0d1b      	lsrs	r3, r3, #20
 8005542:	051b      	lsls	r3, r3, #20
 8005544:	b183      	cbz	r3, 8005568 <_dtoa_r+0x900>
 8005546:	9b04      	ldr	r3, [sp, #16]
 8005548:	3301      	adds	r3, #1
 800554a:	9304      	str	r3, [sp, #16]
 800554c:	9b05      	ldr	r3, [sp, #20]
 800554e:	3301      	adds	r3, #1
 8005550:	9305      	str	r3, [sp, #20]
 8005552:	f04f 0801 	mov.w	r8, #1
 8005556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005558:	2b00      	cmp	r3, #0
 800555a:	f47f af6a 	bne.w	8005432 <_dtoa_r+0x7ca>
 800555e:	2001      	movs	r0, #1
 8005560:	e76f      	b.n	8005442 <_dtoa_r+0x7da>
 8005562:	f04f 0800 	mov.w	r8, #0
 8005566:	e7f6      	b.n	8005556 <_dtoa_r+0x8ee>
 8005568:	4698      	mov	r8, r3
 800556a:	e7f4      	b.n	8005556 <_dtoa_r+0x8ee>
 800556c:	f43f af7d 	beq.w	800546a <_dtoa_r+0x802>
 8005570:	4618      	mov	r0, r3
 8005572:	301c      	adds	r0, #28
 8005574:	e772      	b.n	800545c <_dtoa_r+0x7f4>
 8005576:	9b03      	ldr	r3, [sp, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	dc37      	bgt.n	80055ec <_dtoa_r+0x984>
 800557c:	9b06      	ldr	r3, [sp, #24]
 800557e:	2b02      	cmp	r3, #2
 8005580:	dd34      	ble.n	80055ec <_dtoa_r+0x984>
 8005582:	9b03      	ldr	r3, [sp, #12]
 8005584:	9302      	str	r3, [sp, #8]
 8005586:	9b02      	ldr	r3, [sp, #8]
 8005588:	b96b      	cbnz	r3, 80055a6 <_dtoa_r+0x93e>
 800558a:	4631      	mov	r1, r6
 800558c:	2205      	movs	r2, #5
 800558e:	4620      	mov	r0, r4
 8005590:	f000 fbea 	bl	8005d68 <__multadd>
 8005594:	4601      	mov	r1, r0
 8005596:	4606      	mov	r6, r0
 8005598:	ee18 0a10 	vmov	r0, s16
 800559c:	f000 fe04 	bl	80061a8 <__mcmp>
 80055a0:	2800      	cmp	r0, #0
 80055a2:	f73f adbb 	bgt.w	800511c <_dtoa_r+0x4b4>
 80055a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055a8:	9d01      	ldr	r5, [sp, #4]
 80055aa:	43db      	mvns	r3, r3
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	f04f 0800 	mov.w	r8, #0
 80055b2:	4631      	mov	r1, r6
 80055b4:	4620      	mov	r0, r4
 80055b6:	f000 fbb5 	bl	8005d24 <_Bfree>
 80055ba:	2f00      	cmp	r7, #0
 80055bc:	f43f aea4 	beq.w	8005308 <_dtoa_r+0x6a0>
 80055c0:	f1b8 0f00 	cmp.w	r8, #0
 80055c4:	d005      	beq.n	80055d2 <_dtoa_r+0x96a>
 80055c6:	45b8      	cmp	r8, r7
 80055c8:	d003      	beq.n	80055d2 <_dtoa_r+0x96a>
 80055ca:	4641      	mov	r1, r8
 80055cc:	4620      	mov	r0, r4
 80055ce:	f000 fba9 	bl	8005d24 <_Bfree>
 80055d2:	4639      	mov	r1, r7
 80055d4:	4620      	mov	r0, r4
 80055d6:	f000 fba5 	bl	8005d24 <_Bfree>
 80055da:	e695      	b.n	8005308 <_dtoa_r+0x6a0>
 80055dc:	2600      	movs	r6, #0
 80055de:	4637      	mov	r7, r6
 80055e0:	e7e1      	b.n	80055a6 <_dtoa_r+0x93e>
 80055e2:	9700      	str	r7, [sp, #0]
 80055e4:	4637      	mov	r7, r6
 80055e6:	e599      	b.n	800511c <_dtoa_r+0x4b4>
 80055e8:	40240000 	.word	0x40240000
 80055ec:	9b08      	ldr	r3, [sp, #32]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 80ca 	beq.w	8005788 <_dtoa_r+0xb20>
 80055f4:	9b03      	ldr	r3, [sp, #12]
 80055f6:	9302      	str	r3, [sp, #8]
 80055f8:	2d00      	cmp	r5, #0
 80055fa:	dd05      	ble.n	8005608 <_dtoa_r+0x9a0>
 80055fc:	4639      	mov	r1, r7
 80055fe:	462a      	mov	r2, r5
 8005600:	4620      	mov	r0, r4
 8005602:	f000 fd61 	bl	80060c8 <__lshift>
 8005606:	4607      	mov	r7, r0
 8005608:	f1b8 0f00 	cmp.w	r8, #0
 800560c:	d05b      	beq.n	80056c6 <_dtoa_r+0xa5e>
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	4620      	mov	r0, r4
 8005612:	f000 fb47 	bl	8005ca4 <_Balloc>
 8005616:	4605      	mov	r5, r0
 8005618:	b928      	cbnz	r0, 8005626 <_dtoa_r+0x9be>
 800561a:	4b87      	ldr	r3, [pc, #540]	; (8005838 <_dtoa_r+0xbd0>)
 800561c:	4602      	mov	r2, r0
 800561e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005622:	f7ff bb3b 	b.w	8004c9c <_dtoa_r+0x34>
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	3202      	adds	r2, #2
 800562a:	0092      	lsls	r2, r2, #2
 800562c:	f107 010c 	add.w	r1, r7, #12
 8005630:	300c      	adds	r0, #12
 8005632:	f7fe fba3 	bl	8003d7c <memcpy>
 8005636:	2201      	movs	r2, #1
 8005638:	4629      	mov	r1, r5
 800563a:	4620      	mov	r0, r4
 800563c:	f000 fd44 	bl	80060c8 <__lshift>
 8005640:	9b01      	ldr	r3, [sp, #4]
 8005642:	f103 0901 	add.w	r9, r3, #1
 8005646:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800564a:	4413      	add	r3, r2
 800564c:	9305      	str	r3, [sp, #20]
 800564e:	f00a 0301 	and.w	r3, sl, #1
 8005652:	46b8      	mov	r8, r7
 8005654:	9304      	str	r3, [sp, #16]
 8005656:	4607      	mov	r7, r0
 8005658:	4631      	mov	r1, r6
 800565a:	ee18 0a10 	vmov	r0, s16
 800565e:	f7ff fa77 	bl	8004b50 <quorem>
 8005662:	4641      	mov	r1, r8
 8005664:	9002      	str	r0, [sp, #8]
 8005666:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800566a:	ee18 0a10 	vmov	r0, s16
 800566e:	f000 fd9b 	bl	80061a8 <__mcmp>
 8005672:	463a      	mov	r2, r7
 8005674:	9003      	str	r0, [sp, #12]
 8005676:	4631      	mov	r1, r6
 8005678:	4620      	mov	r0, r4
 800567a:	f000 fdb1 	bl	80061e0 <__mdiff>
 800567e:	68c2      	ldr	r2, [r0, #12]
 8005680:	f109 3bff 	add.w	fp, r9, #4294967295
 8005684:	4605      	mov	r5, r0
 8005686:	bb02      	cbnz	r2, 80056ca <_dtoa_r+0xa62>
 8005688:	4601      	mov	r1, r0
 800568a:	ee18 0a10 	vmov	r0, s16
 800568e:	f000 fd8b 	bl	80061a8 <__mcmp>
 8005692:	4602      	mov	r2, r0
 8005694:	4629      	mov	r1, r5
 8005696:	4620      	mov	r0, r4
 8005698:	9207      	str	r2, [sp, #28]
 800569a:	f000 fb43 	bl	8005d24 <_Bfree>
 800569e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80056a2:	ea43 0102 	orr.w	r1, r3, r2
 80056a6:	9b04      	ldr	r3, [sp, #16]
 80056a8:	430b      	orrs	r3, r1
 80056aa:	464d      	mov	r5, r9
 80056ac:	d10f      	bne.n	80056ce <_dtoa_r+0xa66>
 80056ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80056b2:	d02a      	beq.n	800570a <_dtoa_r+0xaa2>
 80056b4:	9b03      	ldr	r3, [sp, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	dd02      	ble.n	80056c0 <_dtoa_r+0xa58>
 80056ba:	9b02      	ldr	r3, [sp, #8]
 80056bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80056c0:	f88b a000 	strb.w	sl, [fp]
 80056c4:	e775      	b.n	80055b2 <_dtoa_r+0x94a>
 80056c6:	4638      	mov	r0, r7
 80056c8:	e7ba      	b.n	8005640 <_dtoa_r+0x9d8>
 80056ca:	2201      	movs	r2, #1
 80056cc:	e7e2      	b.n	8005694 <_dtoa_r+0xa2c>
 80056ce:	9b03      	ldr	r3, [sp, #12]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	db04      	blt.n	80056de <_dtoa_r+0xa76>
 80056d4:	9906      	ldr	r1, [sp, #24]
 80056d6:	430b      	orrs	r3, r1
 80056d8:	9904      	ldr	r1, [sp, #16]
 80056da:	430b      	orrs	r3, r1
 80056dc:	d122      	bne.n	8005724 <_dtoa_r+0xabc>
 80056de:	2a00      	cmp	r2, #0
 80056e0:	ddee      	ble.n	80056c0 <_dtoa_r+0xa58>
 80056e2:	ee18 1a10 	vmov	r1, s16
 80056e6:	2201      	movs	r2, #1
 80056e8:	4620      	mov	r0, r4
 80056ea:	f000 fced 	bl	80060c8 <__lshift>
 80056ee:	4631      	mov	r1, r6
 80056f0:	ee08 0a10 	vmov	s16, r0
 80056f4:	f000 fd58 	bl	80061a8 <__mcmp>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	dc03      	bgt.n	8005704 <_dtoa_r+0xa9c>
 80056fc:	d1e0      	bne.n	80056c0 <_dtoa_r+0xa58>
 80056fe:	f01a 0f01 	tst.w	sl, #1
 8005702:	d0dd      	beq.n	80056c0 <_dtoa_r+0xa58>
 8005704:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005708:	d1d7      	bne.n	80056ba <_dtoa_r+0xa52>
 800570a:	2339      	movs	r3, #57	; 0x39
 800570c:	f88b 3000 	strb.w	r3, [fp]
 8005710:	462b      	mov	r3, r5
 8005712:	461d      	mov	r5, r3
 8005714:	3b01      	subs	r3, #1
 8005716:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800571a:	2a39      	cmp	r2, #57	; 0x39
 800571c:	d071      	beq.n	8005802 <_dtoa_r+0xb9a>
 800571e:	3201      	adds	r2, #1
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	e746      	b.n	80055b2 <_dtoa_r+0x94a>
 8005724:	2a00      	cmp	r2, #0
 8005726:	dd07      	ble.n	8005738 <_dtoa_r+0xad0>
 8005728:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800572c:	d0ed      	beq.n	800570a <_dtoa_r+0xaa2>
 800572e:	f10a 0301 	add.w	r3, sl, #1
 8005732:	f88b 3000 	strb.w	r3, [fp]
 8005736:	e73c      	b.n	80055b2 <_dtoa_r+0x94a>
 8005738:	9b05      	ldr	r3, [sp, #20]
 800573a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800573e:	4599      	cmp	r9, r3
 8005740:	d047      	beq.n	80057d2 <_dtoa_r+0xb6a>
 8005742:	ee18 1a10 	vmov	r1, s16
 8005746:	2300      	movs	r3, #0
 8005748:	220a      	movs	r2, #10
 800574a:	4620      	mov	r0, r4
 800574c:	f000 fb0c 	bl	8005d68 <__multadd>
 8005750:	45b8      	cmp	r8, r7
 8005752:	ee08 0a10 	vmov	s16, r0
 8005756:	f04f 0300 	mov.w	r3, #0
 800575a:	f04f 020a 	mov.w	r2, #10
 800575e:	4641      	mov	r1, r8
 8005760:	4620      	mov	r0, r4
 8005762:	d106      	bne.n	8005772 <_dtoa_r+0xb0a>
 8005764:	f000 fb00 	bl	8005d68 <__multadd>
 8005768:	4680      	mov	r8, r0
 800576a:	4607      	mov	r7, r0
 800576c:	f109 0901 	add.w	r9, r9, #1
 8005770:	e772      	b.n	8005658 <_dtoa_r+0x9f0>
 8005772:	f000 faf9 	bl	8005d68 <__multadd>
 8005776:	4639      	mov	r1, r7
 8005778:	4680      	mov	r8, r0
 800577a:	2300      	movs	r3, #0
 800577c:	220a      	movs	r2, #10
 800577e:	4620      	mov	r0, r4
 8005780:	f000 faf2 	bl	8005d68 <__multadd>
 8005784:	4607      	mov	r7, r0
 8005786:	e7f1      	b.n	800576c <_dtoa_r+0xb04>
 8005788:	9b03      	ldr	r3, [sp, #12]
 800578a:	9302      	str	r3, [sp, #8]
 800578c:	9d01      	ldr	r5, [sp, #4]
 800578e:	ee18 0a10 	vmov	r0, s16
 8005792:	4631      	mov	r1, r6
 8005794:	f7ff f9dc 	bl	8004b50 <quorem>
 8005798:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800579c:	9b01      	ldr	r3, [sp, #4]
 800579e:	f805 ab01 	strb.w	sl, [r5], #1
 80057a2:	1aea      	subs	r2, r5, r3
 80057a4:	9b02      	ldr	r3, [sp, #8]
 80057a6:	4293      	cmp	r3, r2
 80057a8:	dd09      	ble.n	80057be <_dtoa_r+0xb56>
 80057aa:	ee18 1a10 	vmov	r1, s16
 80057ae:	2300      	movs	r3, #0
 80057b0:	220a      	movs	r2, #10
 80057b2:	4620      	mov	r0, r4
 80057b4:	f000 fad8 	bl	8005d68 <__multadd>
 80057b8:	ee08 0a10 	vmov	s16, r0
 80057bc:	e7e7      	b.n	800578e <_dtoa_r+0xb26>
 80057be:	9b02      	ldr	r3, [sp, #8]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	bfc8      	it	gt
 80057c4:	461d      	movgt	r5, r3
 80057c6:	9b01      	ldr	r3, [sp, #4]
 80057c8:	bfd8      	it	le
 80057ca:	2501      	movle	r5, #1
 80057cc:	441d      	add	r5, r3
 80057ce:	f04f 0800 	mov.w	r8, #0
 80057d2:	ee18 1a10 	vmov	r1, s16
 80057d6:	2201      	movs	r2, #1
 80057d8:	4620      	mov	r0, r4
 80057da:	f000 fc75 	bl	80060c8 <__lshift>
 80057de:	4631      	mov	r1, r6
 80057e0:	ee08 0a10 	vmov	s16, r0
 80057e4:	f000 fce0 	bl	80061a8 <__mcmp>
 80057e8:	2800      	cmp	r0, #0
 80057ea:	dc91      	bgt.n	8005710 <_dtoa_r+0xaa8>
 80057ec:	d102      	bne.n	80057f4 <_dtoa_r+0xb8c>
 80057ee:	f01a 0f01 	tst.w	sl, #1
 80057f2:	d18d      	bne.n	8005710 <_dtoa_r+0xaa8>
 80057f4:	462b      	mov	r3, r5
 80057f6:	461d      	mov	r5, r3
 80057f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057fc:	2a30      	cmp	r2, #48	; 0x30
 80057fe:	d0fa      	beq.n	80057f6 <_dtoa_r+0xb8e>
 8005800:	e6d7      	b.n	80055b2 <_dtoa_r+0x94a>
 8005802:	9a01      	ldr	r2, [sp, #4]
 8005804:	429a      	cmp	r2, r3
 8005806:	d184      	bne.n	8005712 <_dtoa_r+0xaaa>
 8005808:	9b00      	ldr	r3, [sp, #0]
 800580a:	3301      	adds	r3, #1
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	2331      	movs	r3, #49	; 0x31
 8005810:	7013      	strb	r3, [r2, #0]
 8005812:	e6ce      	b.n	80055b2 <_dtoa_r+0x94a>
 8005814:	4b09      	ldr	r3, [pc, #36]	; (800583c <_dtoa_r+0xbd4>)
 8005816:	f7ff ba95 	b.w	8004d44 <_dtoa_r+0xdc>
 800581a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800581c:	2b00      	cmp	r3, #0
 800581e:	f47f aa6e 	bne.w	8004cfe <_dtoa_r+0x96>
 8005822:	4b07      	ldr	r3, [pc, #28]	; (8005840 <_dtoa_r+0xbd8>)
 8005824:	f7ff ba8e 	b.w	8004d44 <_dtoa_r+0xdc>
 8005828:	9b02      	ldr	r3, [sp, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	dcae      	bgt.n	800578c <_dtoa_r+0xb24>
 800582e:	9b06      	ldr	r3, [sp, #24]
 8005830:	2b02      	cmp	r3, #2
 8005832:	f73f aea8 	bgt.w	8005586 <_dtoa_r+0x91e>
 8005836:	e7a9      	b.n	800578c <_dtoa_r+0xb24>
 8005838:	0800f2cb 	.word	0x0800f2cb
 800583c:	0800f228 	.word	0x0800f228
 8005840:	0800f24c 	.word	0x0800f24c

08005844 <__sflush_r>:
 8005844:	898a      	ldrh	r2, [r1, #12]
 8005846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800584a:	4605      	mov	r5, r0
 800584c:	0710      	lsls	r0, r2, #28
 800584e:	460c      	mov	r4, r1
 8005850:	d458      	bmi.n	8005904 <__sflush_r+0xc0>
 8005852:	684b      	ldr	r3, [r1, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	dc05      	bgt.n	8005864 <__sflush_r+0x20>
 8005858:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800585a:	2b00      	cmp	r3, #0
 800585c:	dc02      	bgt.n	8005864 <__sflush_r+0x20>
 800585e:	2000      	movs	r0, #0
 8005860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005864:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005866:	2e00      	cmp	r6, #0
 8005868:	d0f9      	beq.n	800585e <__sflush_r+0x1a>
 800586a:	2300      	movs	r3, #0
 800586c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005870:	682f      	ldr	r7, [r5, #0]
 8005872:	602b      	str	r3, [r5, #0]
 8005874:	d032      	beq.n	80058dc <__sflush_r+0x98>
 8005876:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005878:	89a3      	ldrh	r3, [r4, #12]
 800587a:	075a      	lsls	r2, r3, #29
 800587c:	d505      	bpl.n	800588a <__sflush_r+0x46>
 800587e:	6863      	ldr	r3, [r4, #4]
 8005880:	1ac0      	subs	r0, r0, r3
 8005882:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005884:	b10b      	cbz	r3, 800588a <__sflush_r+0x46>
 8005886:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005888:	1ac0      	subs	r0, r0, r3
 800588a:	2300      	movs	r3, #0
 800588c:	4602      	mov	r2, r0
 800588e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005890:	6a21      	ldr	r1, [r4, #32]
 8005892:	4628      	mov	r0, r5
 8005894:	47b0      	blx	r6
 8005896:	1c43      	adds	r3, r0, #1
 8005898:	89a3      	ldrh	r3, [r4, #12]
 800589a:	d106      	bne.n	80058aa <__sflush_r+0x66>
 800589c:	6829      	ldr	r1, [r5, #0]
 800589e:	291d      	cmp	r1, #29
 80058a0:	d82c      	bhi.n	80058fc <__sflush_r+0xb8>
 80058a2:	4a2a      	ldr	r2, [pc, #168]	; (800594c <__sflush_r+0x108>)
 80058a4:	40ca      	lsrs	r2, r1
 80058a6:	07d6      	lsls	r6, r2, #31
 80058a8:	d528      	bpl.n	80058fc <__sflush_r+0xb8>
 80058aa:	2200      	movs	r2, #0
 80058ac:	6062      	str	r2, [r4, #4]
 80058ae:	04d9      	lsls	r1, r3, #19
 80058b0:	6922      	ldr	r2, [r4, #16]
 80058b2:	6022      	str	r2, [r4, #0]
 80058b4:	d504      	bpl.n	80058c0 <__sflush_r+0x7c>
 80058b6:	1c42      	adds	r2, r0, #1
 80058b8:	d101      	bne.n	80058be <__sflush_r+0x7a>
 80058ba:	682b      	ldr	r3, [r5, #0]
 80058bc:	b903      	cbnz	r3, 80058c0 <__sflush_r+0x7c>
 80058be:	6560      	str	r0, [r4, #84]	; 0x54
 80058c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058c2:	602f      	str	r7, [r5, #0]
 80058c4:	2900      	cmp	r1, #0
 80058c6:	d0ca      	beq.n	800585e <__sflush_r+0x1a>
 80058c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058cc:	4299      	cmp	r1, r3
 80058ce:	d002      	beq.n	80058d6 <__sflush_r+0x92>
 80058d0:	4628      	mov	r0, r5
 80058d2:	f7fe fa7f 	bl	8003dd4 <_free_r>
 80058d6:	2000      	movs	r0, #0
 80058d8:	6360      	str	r0, [r4, #52]	; 0x34
 80058da:	e7c1      	b.n	8005860 <__sflush_r+0x1c>
 80058dc:	6a21      	ldr	r1, [r4, #32]
 80058de:	2301      	movs	r3, #1
 80058e0:	4628      	mov	r0, r5
 80058e2:	47b0      	blx	r6
 80058e4:	1c41      	adds	r1, r0, #1
 80058e6:	d1c7      	bne.n	8005878 <__sflush_r+0x34>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0c4      	beq.n	8005878 <__sflush_r+0x34>
 80058ee:	2b1d      	cmp	r3, #29
 80058f0:	d001      	beq.n	80058f6 <__sflush_r+0xb2>
 80058f2:	2b16      	cmp	r3, #22
 80058f4:	d101      	bne.n	80058fa <__sflush_r+0xb6>
 80058f6:	602f      	str	r7, [r5, #0]
 80058f8:	e7b1      	b.n	800585e <__sflush_r+0x1a>
 80058fa:	89a3      	ldrh	r3, [r4, #12]
 80058fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005900:	81a3      	strh	r3, [r4, #12]
 8005902:	e7ad      	b.n	8005860 <__sflush_r+0x1c>
 8005904:	690f      	ldr	r7, [r1, #16]
 8005906:	2f00      	cmp	r7, #0
 8005908:	d0a9      	beq.n	800585e <__sflush_r+0x1a>
 800590a:	0793      	lsls	r3, r2, #30
 800590c:	680e      	ldr	r6, [r1, #0]
 800590e:	bf08      	it	eq
 8005910:	694b      	ldreq	r3, [r1, #20]
 8005912:	600f      	str	r7, [r1, #0]
 8005914:	bf18      	it	ne
 8005916:	2300      	movne	r3, #0
 8005918:	eba6 0807 	sub.w	r8, r6, r7
 800591c:	608b      	str	r3, [r1, #8]
 800591e:	f1b8 0f00 	cmp.w	r8, #0
 8005922:	dd9c      	ble.n	800585e <__sflush_r+0x1a>
 8005924:	6a21      	ldr	r1, [r4, #32]
 8005926:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005928:	4643      	mov	r3, r8
 800592a:	463a      	mov	r2, r7
 800592c:	4628      	mov	r0, r5
 800592e:	47b0      	blx	r6
 8005930:	2800      	cmp	r0, #0
 8005932:	dc06      	bgt.n	8005942 <__sflush_r+0xfe>
 8005934:	89a3      	ldrh	r3, [r4, #12]
 8005936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800593a:	81a3      	strh	r3, [r4, #12]
 800593c:	f04f 30ff 	mov.w	r0, #4294967295
 8005940:	e78e      	b.n	8005860 <__sflush_r+0x1c>
 8005942:	4407      	add	r7, r0
 8005944:	eba8 0800 	sub.w	r8, r8, r0
 8005948:	e7e9      	b.n	800591e <__sflush_r+0xda>
 800594a:	bf00      	nop
 800594c:	20400001 	.word	0x20400001

08005950 <_fflush_r>:
 8005950:	b538      	push	{r3, r4, r5, lr}
 8005952:	690b      	ldr	r3, [r1, #16]
 8005954:	4605      	mov	r5, r0
 8005956:	460c      	mov	r4, r1
 8005958:	b913      	cbnz	r3, 8005960 <_fflush_r+0x10>
 800595a:	2500      	movs	r5, #0
 800595c:	4628      	mov	r0, r5
 800595e:	bd38      	pop	{r3, r4, r5, pc}
 8005960:	b118      	cbz	r0, 800596a <_fflush_r+0x1a>
 8005962:	6983      	ldr	r3, [r0, #24]
 8005964:	b90b      	cbnz	r3, 800596a <_fflush_r+0x1a>
 8005966:	f000 f887 	bl	8005a78 <__sinit>
 800596a:	4b14      	ldr	r3, [pc, #80]	; (80059bc <_fflush_r+0x6c>)
 800596c:	429c      	cmp	r4, r3
 800596e:	d11b      	bne.n	80059a8 <_fflush_r+0x58>
 8005970:	686c      	ldr	r4, [r5, #4]
 8005972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0ef      	beq.n	800595a <_fflush_r+0xa>
 800597a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800597c:	07d0      	lsls	r0, r2, #31
 800597e:	d404      	bmi.n	800598a <_fflush_r+0x3a>
 8005980:	0599      	lsls	r1, r3, #22
 8005982:	d402      	bmi.n	800598a <_fflush_r+0x3a>
 8005984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005986:	f000 f91a 	bl	8005bbe <__retarget_lock_acquire_recursive>
 800598a:	4628      	mov	r0, r5
 800598c:	4621      	mov	r1, r4
 800598e:	f7ff ff59 	bl	8005844 <__sflush_r>
 8005992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005994:	07da      	lsls	r2, r3, #31
 8005996:	4605      	mov	r5, r0
 8005998:	d4e0      	bmi.n	800595c <_fflush_r+0xc>
 800599a:	89a3      	ldrh	r3, [r4, #12]
 800599c:	059b      	lsls	r3, r3, #22
 800599e:	d4dd      	bmi.n	800595c <_fflush_r+0xc>
 80059a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059a2:	f000 f90d 	bl	8005bc0 <__retarget_lock_release_recursive>
 80059a6:	e7d9      	b.n	800595c <_fflush_r+0xc>
 80059a8:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <_fflush_r+0x70>)
 80059aa:	429c      	cmp	r4, r3
 80059ac:	d101      	bne.n	80059b2 <_fflush_r+0x62>
 80059ae:	68ac      	ldr	r4, [r5, #8]
 80059b0:	e7df      	b.n	8005972 <_fflush_r+0x22>
 80059b2:	4b04      	ldr	r3, [pc, #16]	; (80059c4 <_fflush_r+0x74>)
 80059b4:	429c      	cmp	r4, r3
 80059b6:	bf08      	it	eq
 80059b8:	68ec      	ldreq	r4, [r5, #12]
 80059ba:	e7da      	b.n	8005972 <_fflush_r+0x22>
 80059bc:	0800f2fc 	.word	0x0800f2fc
 80059c0:	0800f31c 	.word	0x0800f31c
 80059c4:	0800f2dc 	.word	0x0800f2dc

080059c8 <std>:
 80059c8:	2300      	movs	r3, #0
 80059ca:	b510      	push	{r4, lr}
 80059cc:	4604      	mov	r4, r0
 80059ce:	e9c0 3300 	strd	r3, r3, [r0]
 80059d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059d6:	6083      	str	r3, [r0, #8]
 80059d8:	8181      	strh	r1, [r0, #12]
 80059da:	6643      	str	r3, [r0, #100]	; 0x64
 80059dc:	81c2      	strh	r2, [r0, #14]
 80059de:	6183      	str	r3, [r0, #24]
 80059e0:	4619      	mov	r1, r3
 80059e2:	2208      	movs	r2, #8
 80059e4:	305c      	adds	r0, #92	; 0x5c
 80059e6:	f7fe f9d7 	bl	8003d98 <memset>
 80059ea:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <std+0x38>)
 80059ec:	6263      	str	r3, [r4, #36]	; 0x24
 80059ee:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <std+0x3c>)
 80059f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80059f2:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <std+0x40>)
 80059f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059f6:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <std+0x44>)
 80059f8:	6224      	str	r4, [r4, #32]
 80059fa:	6323      	str	r3, [r4, #48]	; 0x30
 80059fc:	bd10      	pop	{r4, pc}
 80059fe:	bf00      	nop
 8005a00:	080066f1 	.word	0x080066f1
 8005a04:	08006713 	.word	0x08006713
 8005a08:	0800674b 	.word	0x0800674b
 8005a0c:	0800676f 	.word	0x0800676f

08005a10 <_cleanup_r>:
 8005a10:	4901      	ldr	r1, [pc, #4]	; (8005a18 <_cleanup_r+0x8>)
 8005a12:	f000 b8af 	b.w	8005b74 <_fwalk_reent>
 8005a16:	bf00      	nop
 8005a18:	08005951 	.word	0x08005951

08005a1c <__sfmoreglue>:
 8005a1c:	b570      	push	{r4, r5, r6, lr}
 8005a1e:	2268      	movs	r2, #104	; 0x68
 8005a20:	1e4d      	subs	r5, r1, #1
 8005a22:	4355      	muls	r5, r2
 8005a24:	460e      	mov	r6, r1
 8005a26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a2a:	f7fe fa3f 	bl	8003eac <_malloc_r>
 8005a2e:	4604      	mov	r4, r0
 8005a30:	b140      	cbz	r0, 8005a44 <__sfmoreglue+0x28>
 8005a32:	2100      	movs	r1, #0
 8005a34:	e9c0 1600 	strd	r1, r6, [r0]
 8005a38:	300c      	adds	r0, #12
 8005a3a:	60a0      	str	r0, [r4, #8]
 8005a3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a40:	f7fe f9aa 	bl	8003d98 <memset>
 8005a44:	4620      	mov	r0, r4
 8005a46:	bd70      	pop	{r4, r5, r6, pc}

08005a48 <__sfp_lock_acquire>:
 8005a48:	4801      	ldr	r0, [pc, #4]	; (8005a50 <__sfp_lock_acquire+0x8>)
 8005a4a:	f000 b8b8 	b.w	8005bbe <__retarget_lock_acquire_recursive>
 8005a4e:	bf00      	nop
 8005a50:	20000265 	.word	0x20000265

08005a54 <__sfp_lock_release>:
 8005a54:	4801      	ldr	r0, [pc, #4]	; (8005a5c <__sfp_lock_release+0x8>)
 8005a56:	f000 b8b3 	b.w	8005bc0 <__retarget_lock_release_recursive>
 8005a5a:	bf00      	nop
 8005a5c:	20000265 	.word	0x20000265

08005a60 <__sinit_lock_acquire>:
 8005a60:	4801      	ldr	r0, [pc, #4]	; (8005a68 <__sinit_lock_acquire+0x8>)
 8005a62:	f000 b8ac 	b.w	8005bbe <__retarget_lock_acquire_recursive>
 8005a66:	bf00      	nop
 8005a68:	20000266 	.word	0x20000266

08005a6c <__sinit_lock_release>:
 8005a6c:	4801      	ldr	r0, [pc, #4]	; (8005a74 <__sinit_lock_release+0x8>)
 8005a6e:	f000 b8a7 	b.w	8005bc0 <__retarget_lock_release_recursive>
 8005a72:	bf00      	nop
 8005a74:	20000266 	.word	0x20000266

08005a78 <__sinit>:
 8005a78:	b510      	push	{r4, lr}
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	f7ff fff0 	bl	8005a60 <__sinit_lock_acquire>
 8005a80:	69a3      	ldr	r3, [r4, #24]
 8005a82:	b11b      	cbz	r3, 8005a8c <__sinit+0x14>
 8005a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a88:	f7ff bff0 	b.w	8005a6c <__sinit_lock_release>
 8005a8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a90:	6523      	str	r3, [r4, #80]	; 0x50
 8005a92:	4b13      	ldr	r3, [pc, #76]	; (8005ae0 <__sinit+0x68>)
 8005a94:	4a13      	ldr	r2, [pc, #76]	; (8005ae4 <__sinit+0x6c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a9a:	42a3      	cmp	r3, r4
 8005a9c:	bf04      	itt	eq
 8005a9e:	2301      	moveq	r3, #1
 8005aa0:	61a3      	streq	r3, [r4, #24]
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f000 f820 	bl	8005ae8 <__sfp>
 8005aa8:	6060      	str	r0, [r4, #4]
 8005aaa:	4620      	mov	r0, r4
 8005aac:	f000 f81c 	bl	8005ae8 <__sfp>
 8005ab0:	60a0      	str	r0, [r4, #8]
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f000 f818 	bl	8005ae8 <__sfp>
 8005ab8:	2200      	movs	r2, #0
 8005aba:	60e0      	str	r0, [r4, #12]
 8005abc:	2104      	movs	r1, #4
 8005abe:	6860      	ldr	r0, [r4, #4]
 8005ac0:	f7ff ff82 	bl	80059c8 <std>
 8005ac4:	68a0      	ldr	r0, [r4, #8]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	2109      	movs	r1, #9
 8005aca:	f7ff ff7d 	bl	80059c8 <std>
 8005ace:	68e0      	ldr	r0, [r4, #12]
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	2112      	movs	r1, #18
 8005ad4:	f7ff ff78 	bl	80059c8 <std>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	61a3      	str	r3, [r4, #24]
 8005adc:	e7d2      	b.n	8005a84 <__sinit+0xc>
 8005ade:	bf00      	nop
 8005ae0:	0800f214 	.word	0x0800f214
 8005ae4:	08005a11 	.word	0x08005a11

08005ae8 <__sfp>:
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	4607      	mov	r7, r0
 8005aec:	f7ff ffac 	bl	8005a48 <__sfp_lock_acquire>
 8005af0:	4b1e      	ldr	r3, [pc, #120]	; (8005b6c <__sfp+0x84>)
 8005af2:	681e      	ldr	r6, [r3, #0]
 8005af4:	69b3      	ldr	r3, [r6, #24]
 8005af6:	b913      	cbnz	r3, 8005afe <__sfp+0x16>
 8005af8:	4630      	mov	r0, r6
 8005afa:	f7ff ffbd 	bl	8005a78 <__sinit>
 8005afe:	3648      	adds	r6, #72	; 0x48
 8005b00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	d503      	bpl.n	8005b10 <__sfp+0x28>
 8005b08:	6833      	ldr	r3, [r6, #0]
 8005b0a:	b30b      	cbz	r3, 8005b50 <__sfp+0x68>
 8005b0c:	6836      	ldr	r6, [r6, #0]
 8005b0e:	e7f7      	b.n	8005b00 <__sfp+0x18>
 8005b10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b14:	b9d5      	cbnz	r5, 8005b4c <__sfp+0x64>
 8005b16:	4b16      	ldr	r3, [pc, #88]	; (8005b70 <__sfp+0x88>)
 8005b18:	60e3      	str	r3, [r4, #12]
 8005b1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b1e:	6665      	str	r5, [r4, #100]	; 0x64
 8005b20:	f000 f84c 	bl	8005bbc <__retarget_lock_init_recursive>
 8005b24:	f7ff ff96 	bl	8005a54 <__sfp_lock_release>
 8005b28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b30:	6025      	str	r5, [r4, #0]
 8005b32:	61a5      	str	r5, [r4, #24]
 8005b34:	2208      	movs	r2, #8
 8005b36:	4629      	mov	r1, r5
 8005b38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b3c:	f7fe f92c 	bl	8003d98 <memset>
 8005b40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b48:	4620      	mov	r0, r4
 8005b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b4c:	3468      	adds	r4, #104	; 0x68
 8005b4e:	e7d9      	b.n	8005b04 <__sfp+0x1c>
 8005b50:	2104      	movs	r1, #4
 8005b52:	4638      	mov	r0, r7
 8005b54:	f7ff ff62 	bl	8005a1c <__sfmoreglue>
 8005b58:	4604      	mov	r4, r0
 8005b5a:	6030      	str	r0, [r6, #0]
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d1d5      	bne.n	8005b0c <__sfp+0x24>
 8005b60:	f7ff ff78 	bl	8005a54 <__sfp_lock_release>
 8005b64:	230c      	movs	r3, #12
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	e7ee      	b.n	8005b48 <__sfp+0x60>
 8005b6a:	bf00      	nop
 8005b6c:	0800f214 	.word	0x0800f214
 8005b70:	ffff0001 	.word	0xffff0001

08005b74 <_fwalk_reent>:
 8005b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b78:	4606      	mov	r6, r0
 8005b7a:	4688      	mov	r8, r1
 8005b7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b80:	2700      	movs	r7, #0
 8005b82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b86:	f1b9 0901 	subs.w	r9, r9, #1
 8005b8a:	d505      	bpl.n	8005b98 <_fwalk_reent+0x24>
 8005b8c:	6824      	ldr	r4, [r4, #0]
 8005b8e:	2c00      	cmp	r4, #0
 8005b90:	d1f7      	bne.n	8005b82 <_fwalk_reent+0xe>
 8005b92:	4638      	mov	r0, r7
 8005b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b98:	89ab      	ldrh	r3, [r5, #12]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d907      	bls.n	8005bae <_fwalk_reent+0x3a>
 8005b9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	d003      	beq.n	8005bae <_fwalk_reent+0x3a>
 8005ba6:	4629      	mov	r1, r5
 8005ba8:	4630      	mov	r0, r6
 8005baa:	47c0      	blx	r8
 8005bac:	4307      	orrs	r7, r0
 8005bae:	3568      	adds	r5, #104	; 0x68
 8005bb0:	e7e9      	b.n	8005b86 <_fwalk_reent+0x12>
	...

08005bb4 <_localeconv_r>:
 8005bb4:	4800      	ldr	r0, [pc, #0]	; (8005bb8 <_localeconv_r+0x4>)
 8005bb6:	4770      	bx	lr
 8005bb8:	20000160 	.word	0x20000160

08005bbc <__retarget_lock_init_recursive>:
 8005bbc:	4770      	bx	lr

08005bbe <__retarget_lock_acquire_recursive>:
 8005bbe:	4770      	bx	lr

08005bc0 <__retarget_lock_release_recursive>:
 8005bc0:	4770      	bx	lr

08005bc2 <__swhatbuf_r>:
 8005bc2:	b570      	push	{r4, r5, r6, lr}
 8005bc4:	460e      	mov	r6, r1
 8005bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bca:	2900      	cmp	r1, #0
 8005bcc:	b096      	sub	sp, #88	; 0x58
 8005bce:	4614      	mov	r4, r2
 8005bd0:	461d      	mov	r5, r3
 8005bd2:	da08      	bge.n	8005be6 <__swhatbuf_r+0x24>
 8005bd4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	602a      	str	r2, [r5, #0]
 8005bdc:	061a      	lsls	r2, r3, #24
 8005bde:	d410      	bmi.n	8005c02 <__swhatbuf_r+0x40>
 8005be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005be4:	e00e      	b.n	8005c04 <__swhatbuf_r+0x42>
 8005be6:	466a      	mov	r2, sp
 8005be8:	f000 fe18 	bl	800681c <_fstat_r>
 8005bec:	2800      	cmp	r0, #0
 8005bee:	dbf1      	blt.n	8005bd4 <__swhatbuf_r+0x12>
 8005bf0:	9a01      	ldr	r2, [sp, #4]
 8005bf2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005bf6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005bfa:	425a      	negs	r2, r3
 8005bfc:	415a      	adcs	r2, r3
 8005bfe:	602a      	str	r2, [r5, #0]
 8005c00:	e7ee      	b.n	8005be0 <__swhatbuf_r+0x1e>
 8005c02:	2340      	movs	r3, #64	; 0x40
 8005c04:	2000      	movs	r0, #0
 8005c06:	6023      	str	r3, [r4, #0]
 8005c08:	b016      	add	sp, #88	; 0x58
 8005c0a:	bd70      	pop	{r4, r5, r6, pc}

08005c0c <__smakebuf_r>:
 8005c0c:	898b      	ldrh	r3, [r1, #12]
 8005c0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c10:	079d      	lsls	r5, r3, #30
 8005c12:	4606      	mov	r6, r0
 8005c14:	460c      	mov	r4, r1
 8005c16:	d507      	bpl.n	8005c28 <__smakebuf_r+0x1c>
 8005c18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	6123      	str	r3, [r4, #16]
 8005c20:	2301      	movs	r3, #1
 8005c22:	6163      	str	r3, [r4, #20]
 8005c24:	b002      	add	sp, #8
 8005c26:	bd70      	pop	{r4, r5, r6, pc}
 8005c28:	ab01      	add	r3, sp, #4
 8005c2a:	466a      	mov	r2, sp
 8005c2c:	f7ff ffc9 	bl	8005bc2 <__swhatbuf_r>
 8005c30:	9900      	ldr	r1, [sp, #0]
 8005c32:	4605      	mov	r5, r0
 8005c34:	4630      	mov	r0, r6
 8005c36:	f7fe f939 	bl	8003eac <_malloc_r>
 8005c3a:	b948      	cbnz	r0, 8005c50 <__smakebuf_r+0x44>
 8005c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c40:	059a      	lsls	r2, r3, #22
 8005c42:	d4ef      	bmi.n	8005c24 <__smakebuf_r+0x18>
 8005c44:	f023 0303 	bic.w	r3, r3, #3
 8005c48:	f043 0302 	orr.w	r3, r3, #2
 8005c4c:	81a3      	strh	r3, [r4, #12]
 8005c4e:	e7e3      	b.n	8005c18 <__smakebuf_r+0xc>
 8005c50:	4b0d      	ldr	r3, [pc, #52]	; (8005c88 <__smakebuf_r+0x7c>)
 8005c52:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c54:	89a3      	ldrh	r3, [r4, #12]
 8005c56:	6020      	str	r0, [r4, #0]
 8005c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c5c:	81a3      	strh	r3, [r4, #12]
 8005c5e:	9b00      	ldr	r3, [sp, #0]
 8005c60:	6163      	str	r3, [r4, #20]
 8005c62:	9b01      	ldr	r3, [sp, #4]
 8005c64:	6120      	str	r0, [r4, #16]
 8005c66:	b15b      	cbz	r3, 8005c80 <__smakebuf_r+0x74>
 8005c68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	f000 fde7 	bl	8006840 <_isatty_r>
 8005c72:	b128      	cbz	r0, 8005c80 <__smakebuf_r+0x74>
 8005c74:	89a3      	ldrh	r3, [r4, #12]
 8005c76:	f023 0303 	bic.w	r3, r3, #3
 8005c7a:	f043 0301 	orr.w	r3, r3, #1
 8005c7e:	81a3      	strh	r3, [r4, #12]
 8005c80:	89a0      	ldrh	r0, [r4, #12]
 8005c82:	4305      	orrs	r5, r0
 8005c84:	81a5      	strh	r5, [r4, #12]
 8005c86:	e7cd      	b.n	8005c24 <__smakebuf_r+0x18>
 8005c88:	08005a11 	.word	0x08005a11

08005c8c <__malloc_lock>:
 8005c8c:	4801      	ldr	r0, [pc, #4]	; (8005c94 <__malloc_lock+0x8>)
 8005c8e:	f7ff bf96 	b.w	8005bbe <__retarget_lock_acquire_recursive>
 8005c92:	bf00      	nop
 8005c94:	20000264 	.word	0x20000264

08005c98 <__malloc_unlock>:
 8005c98:	4801      	ldr	r0, [pc, #4]	; (8005ca0 <__malloc_unlock+0x8>)
 8005c9a:	f7ff bf91 	b.w	8005bc0 <__retarget_lock_release_recursive>
 8005c9e:	bf00      	nop
 8005ca0:	20000264 	.word	0x20000264

08005ca4 <_Balloc>:
 8005ca4:	b570      	push	{r4, r5, r6, lr}
 8005ca6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005ca8:	4604      	mov	r4, r0
 8005caa:	460d      	mov	r5, r1
 8005cac:	b976      	cbnz	r6, 8005ccc <_Balloc+0x28>
 8005cae:	2010      	movs	r0, #16
 8005cb0:	f7fe f85c 	bl	8003d6c <malloc>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	6260      	str	r0, [r4, #36]	; 0x24
 8005cb8:	b920      	cbnz	r0, 8005cc4 <_Balloc+0x20>
 8005cba:	4b18      	ldr	r3, [pc, #96]	; (8005d1c <_Balloc+0x78>)
 8005cbc:	4818      	ldr	r0, [pc, #96]	; (8005d20 <_Balloc+0x7c>)
 8005cbe:	2166      	movs	r1, #102	; 0x66
 8005cc0:	f000 fd6c 	bl	800679c <__assert_func>
 8005cc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cc8:	6006      	str	r6, [r0, #0]
 8005cca:	60c6      	str	r6, [r0, #12]
 8005ccc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005cce:	68f3      	ldr	r3, [r6, #12]
 8005cd0:	b183      	cbz	r3, 8005cf4 <_Balloc+0x50>
 8005cd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005cda:	b9b8      	cbnz	r0, 8005d0c <_Balloc+0x68>
 8005cdc:	2101      	movs	r1, #1
 8005cde:	fa01 f605 	lsl.w	r6, r1, r5
 8005ce2:	1d72      	adds	r2, r6, #5
 8005ce4:	0092      	lsls	r2, r2, #2
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f7fe f85e 	bl	8003da8 <_calloc_r>
 8005cec:	b160      	cbz	r0, 8005d08 <_Balloc+0x64>
 8005cee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005cf2:	e00e      	b.n	8005d12 <_Balloc+0x6e>
 8005cf4:	2221      	movs	r2, #33	; 0x21
 8005cf6:	2104      	movs	r1, #4
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f7fe f855 	bl	8003da8 <_calloc_r>
 8005cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d00:	60f0      	str	r0, [r6, #12]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1e4      	bne.n	8005cd2 <_Balloc+0x2e>
 8005d08:	2000      	movs	r0, #0
 8005d0a:	bd70      	pop	{r4, r5, r6, pc}
 8005d0c:	6802      	ldr	r2, [r0, #0]
 8005d0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d12:	2300      	movs	r3, #0
 8005d14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d18:	e7f7      	b.n	8005d0a <_Balloc+0x66>
 8005d1a:	bf00      	nop
 8005d1c:	0800f259 	.word	0x0800f259
 8005d20:	0800f33c 	.word	0x0800f33c

08005d24 <_Bfree>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d28:	4605      	mov	r5, r0
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	b976      	cbnz	r6, 8005d4c <_Bfree+0x28>
 8005d2e:	2010      	movs	r0, #16
 8005d30:	f7fe f81c 	bl	8003d6c <malloc>
 8005d34:	4602      	mov	r2, r0
 8005d36:	6268      	str	r0, [r5, #36]	; 0x24
 8005d38:	b920      	cbnz	r0, 8005d44 <_Bfree+0x20>
 8005d3a:	4b09      	ldr	r3, [pc, #36]	; (8005d60 <_Bfree+0x3c>)
 8005d3c:	4809      	ldr	r0, [pc, #36]	; (8005d64 <_Bfree+0x40>)
 8005d3e:	218a      	movs	r1, #138	; 0x8a
 8005d40:	f000 fd2c 	bl	800679c <__assert_func>
 8005d44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d48:	6006      	str	r6, [r0, #0]
 8005d4a:	60c6      	str	r6, [r0, #12]
 8005d4c:	b13c      	cbz	r4, 8005d5e <_Bfree+0x3a>
 8005d4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d50:	6862      	ldr	r2, [r4, #4]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d58:	6021      	str	r1, [r4, #0]
 8005d5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d5e:	bd70      	pop	{r4, r5, r6, pc}
 8005d60:	0800f259 	.word	0x0800f259
 8005d64:	0800f33c 	.word	0x0800f33c

08005d68 <__multadd>:
 8005d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6c:	690d      	ldr	r5, [r1, #16]
 8005d6e:	4607      	mov	r7, r0
 8005d70:	460c      	mov	r4, r1
 8005d72:	461e      	mov	r6, r3
 8005d74:	f101 0c14 	add.w	ip, r1, #20
 8005d78:	2000      	movs	r0, #0
 8005d7a:	f8dc 3000 	ldr.w	r3, [ip]
 8005d7e:	b299      	uxth	r1, r3
 8005d80:	fb02 6101 	mla	r1, r2, r1, r6
 8005d84:	0c1e      	lsrs	r6, r3, #16
 8005d86:	0c0b      	lsrs	r3, r1, #16
 8005d88:	fb02 3306 	mla	r3, r2, r6, r3
 8005d8c:	b289      	uxth	r1, r1
 8005d8e:	3001      	adds	r0, #1
 8005d90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d94:	4285      	cmp	r5, r0
 8005d96:	f84c 1b04 	str.w	r1, [ip], #4
 8005d9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d9e:	dcec      	bgt.n	8005d7a <__multadd+0x12>
 8005da0:	b30e      	cbz	r6, 8005de6 <__multadd+0x7e>
 8005da2:	68a3      	ldr	r3, [r4, #8]
 8005da4:	42ab      	cmp	r3, r5
 8005da6:	dc19      	bgt.n	8005ddc <__multadd+0x74>
 8005da8:	6861      	ldr	r1, [r4, #4]
 8005daa:	4638      	mov	r0, r7
 8005dac:	3101      	adds	r1, #1
 8005dae:	f7ff ff79 	bl	8005ca4 <_Balloc>
 8005db2:	4680      	mov	r8, r0
 8005db4:	b928      	cbnz	r0, 8005dc2 <__multadd+0x5a>
 8005db6:	4602      	mov	r2, r0
 8005db8:	4b0c      	ldr	r3, [pc, #48]	; (8005dec <__multadd+0x84>)
 8005dba:	480d      	ldr	r0, [pc, #52]	; (8005df0 <__multadd+0x88>)
 8005dbc:	21b5      	movs	r1, #181	; 0xb5
 8005dbe:	f000 fced 	bl	800679c <__assert_func>
 8005dc2:	6922      	ldr	r2, [r4, #16]
 8005dc4:	3202      	adds	r2, #2
 8005dc6:	f104 010c 	add.w	r1, r4, #12
 8005dca:	0092      	lsls	r2, r2, #2
 8005dcc:	300c      	adds	r0, #12
 8005dce:	f7fd ffd5 	bl	8003d7c <memcpy>
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	4638      	mov	r0, r7
 8005dd6:	f7ff ffa5 	bl	8005d24 <_Bfree>
 8005dda:	4644      	mov	r4, r8
 8005ddc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005de0:	3501      	adds	r5, #1
 8005de2:	615e      	str	r6, [r3, #20]
 8005de4:	6125      	str	r5, [r4, #16]
 8005de6:	4620      	mov	r0, r4
 8005de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dec:	0800f2cb 	.word	0x0800f2cb
 8005df0:	0800f33c 	.word	0x0800f33c

08005df4 <__hi0bits>:
 8005df4:	0c03      	lsrs	r3, r0, #16
 8005df6:	041b      	lsls	r3, r3, #16
 8005df8:	b9d3      	cbnz	r3, 8005e30 <__hi0bits+0x3c>
 8005dfa:	0400      	lsls	r0, r0, #16
 8005dfc:	2310      	movs	r3, #16
 8005dfe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005e02:	bf04      	itt	eq
 8005e04:	0200      	lsleq	r0, r0, #8
 8005e06:	3308      	addeq	r3, #8
 8005e08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005e0c:	bf04      	itt	eq
 8005e0e:	0100      	lsleq	r0, r0, #4
 8005e10:	3304      	addeq	r3, #4
 8005e12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005e16:	bf04      	itt	eq
 8005e18:	0080      	lsleq	r0, r0, #2
 8005e1a:	3302      	addeq	r3, #2
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	db05      	blt.n	8005e2c <__hi0bits+0x38>
 8005e20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005e24:	f103 0301 	add.w	r3, r3, #1
 8005e28:	bf08      	it	eq
 8005e2a:	2320      	moveq	r3, #32
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	4770      	bx	lr
 8005e30:	2300      	movs	r3, #0
 8005e32:	e7e4      	b.n	8005dfe <__hi0bits+0xa>

08005e34 <__lo0bits>:
 8005e34:	6803      	ldr	r3, [r0, #0]
 8005e36:	f013 0207 	ands.w	r2, r3, #7
 8005e3a:	4601      	mov	r1, r0
 8005e3c:	d00b      	beq.n	8005e56 <__lo0bits+0x22>
 8005e3e:	07da      	lsls	r2, r3, #31
 8005e40:	d423      	bmi.n	8005e8a <__lo0bits+0x56>
 8005e42:	0798      	lsls	r0, r3, #30
 8005e44:	bf49      	itett	mi
 8005e46:	085b      	lsrmi	r3, r3, #1
 8005e48:	089b      	lsrpl	r3, r3, #2
 8005e4a:	2001      	movmi	r0, #1
 8005e4c:	600b      	strmi	r3, [r1, #0]
 8005e4e:	bf5c      	itt	pl
 8005e50:	600b      	strpl	r3, [r1, #0]
 8005e52:	2002      	movpl	r0, #2
 8005e54:	4770      	bx	lr
 8005e56:	b298      	uxth	r0, r3
 8005e58:	b9a8      	cbnz	r0, 8005e86 <__lo0bits+0x52>
 8005e5a:	0c1b      	lsrs	r3, r3, #16
 8005e5c:	2010      	movs	r0, #16
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	b90a      	cbnz	r2, 8005e66 <__lo0bits+0x32>
 8005e62:	3008      	adds	r0, #8
 8005e64:	0a1b      	lsrs	r3, r3, #8
 8005e66:	071a      	lsls	r2, r3, #28
 8005e68:	bf04      	itt	eq
 8005e6a:	091b      	lsreq	r3, r3, #4
 8005e6c:	3004      	addeq	r0, #4
 8005e6e:	079a      	lsls	r2, r3, #30
 8005e70:	bf04      	itt	eq
 8005e72:	089b      	lsreq	r3, r3, #2
 8005e74:	3002      	addeq	r0, #2
 8005e76:	07da      	lsls	r2, r3, #31
 8005e78:	d403      	bmi.n	8005e82 <__lo0bits+0x4e>
 8005e7a:	085b      	lsrs	r3, r3, #1
 8005e7c:	f100 0001 	add.w	r0, r0, #1
 8005e80:	d005      	beq.n	8005e8e <__lo0bits+0x5a>
 8005e82:	600b      	str	r3, [r1, #0]
 8005e84:	4770      	bx	lr
 8005e86:	4610      	mov	r0, r2
 8005e88:	e7e9      	b.n	8005e5e <__lo0bits+0x2a>
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	4770      	bx	lr
 8005e8e:	2020      	movs	r0, #32
 8005e90:	4770      	bx	lr
	...

08005e94 <__i2b>:
 8005e94:	b510      	push	{r4, lr}
 8005e96:	460c      	mov	r4, r1
 8005e98:	2101      	movs	r1, #1
 8005e9a:	f7ff ff03 	bl	8005ca4 <_Balloc>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	b928      	cbnz	r0, 8005eae <__i2b+0x1a>
 8005ea2:	4b05      	ldr	r3, [pc, #20]	; (8005eb8 <__i2b+0x24>)
 8005ea4:	4805      	ldr	r0, [pc, #20]	; (8005ebc <__i2b+0x28>)
 8005ea6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005eaa:	f000 fc77 	bl	800679c <__assert_func>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	6144      	str	r4, [r0, #20]
 8005eb2:	6103      	str	r3, [r0, #16]
 8005eb4:	bd10      	pop	{r4, pc}
 8005eb6:	bf00      	nop
 8005eb8:	0800f2cb 	.word	0x0800f2cb
 8005ebc:	0800f33c 	.word	0x0800f33c

08005ec0 <__multiply>:
 8005ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec4:	4691      	mov	r9, r2
 8005ec6:	690a      	ldr	r2, [r1, #16]
 8005ec8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	bfb8      	it	lt
 8005ed0:	460b      	movlt	r3, r1
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	bfbc      	itt	lt
 8005ed6:	464c      	movlt	r4, r9
 8005ed8:	4699      	movlt	r9, r3
 8005eda:	6927      	ldr	r7, [r4, #16]
 8005edc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ee0:	68a3      	ldr	r3, [r4, #8]
 8005ee2:	6861      	ldr	r1, [r4, #4]
 8005ee4:	eb07 060a 	add.w	r6, r7, sl
 8005ee8:	42b3      	cmp	r3, r6
 8005eea:	b085      	sub	sp, #20
 8005eec:	bfb8      	it	lt
 8005eee:	3101      	addlt	r1, #1
 8005ef0:	f7ff fed8 	bl	8005ca4 <_Balloc>
 8005ef4:	b930      	cbnz	r0, 8005f04 <__multiply+0x44>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	4b44      	ldr	r3, [pc, #272]	; (800600c <__multiply+0x14c>)
 8005efa:	4845      	ldr	r0, [pc, #276]	; (8006010 <__multiply+0x150>)
 8005efc:	f240 115d 	movw	r1, #349	; 0x15d
 8005f00:	f000 fc4c 	bl	800679c <__assert_func>
 8005f04:	f100 0514 	add.w	r5, r0, #20
 8005f08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f0c:	462b      	mov	r3, r5
 8005f0e:	2200      	movs	r2, #0
 8005f10:	4543      	cmp	r3, r8
 8005f12:	d321      	bcc.n	8005f58 <__multiply+0x98>
 8005f14:	f104 0314 	add.w	r3, r4, #20
 8005f18:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005f1c:	f109 0314 	add.w	r3, r9, #20
 8005f20:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005f24:	9202      	str	r2, [sp, #8]
 8005f26:	1b3a      	subs	r2, r7, r4
 8005f28:	3a15      	subs	r2, #21
 8005f2a:	f022 0203 	bic.w	r2, r2, #3
 8005f2e:	3204      	adds	r2, #4
 8005f30:	f104 0115 	add.w	r1, r4, #21
 8005f34:	428f      	cmp	r7, r1
 8005f36:	bf38      	it	cc
 8005f38:	2204      	movcc	r2, #4
 8005f3a:	9201      	str	r2, [sp, #4]
 8005f3c:	9a02      	ldr	r2, [sp, #8]
 8005f3e:	9303      	str	r3, [sp, #12]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d80c      	bhi.n	8005f5e <__multiply+0x9e>
 8005f44:	2e00      	cmp	r6, #0
 8005f46:	dd03      	ble.n	8005f50 <__multiply+0x90>
 8005f48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d05a      	beq.n	8006006 <__multiply+0x146>
 8005f50:	6106      	str	r6, [r0, #16]
 8005f52:	b005      	add	sp, #20
 8005f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f58:	f843 2b04 	str.w	r2, [r3], #4
 8005f5c:	e7d8      	b.n	8005f10 <__multiply+0x50>
 8005f5e:	f8b3 a000 	ldrh.w	sl, [r3]
 8005f62:	f1ba 0f00 	cmp.w	sl, #0
 8005f66:	d024      	beq.n	8005fb2 <__multiply+0xf2>
 8005f68:	f104 0e14 	add.w	lr, r4, #20
 8005f6c:	46a9      	mov	r9, r5
 8005f6e:	f04f 0c00 	mov.w	ip, #0
 8005f72:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005f76:	f8d9 1000 	ldr.w	r1, [r9]
 8005f7a:	fa1f fb82 	uxth.w	fp, r2
 8005f7e:	b289      	uxth	r1, r1
 8005f80:	fb0a 110b 	mla	r1, sl, fp, r1
 8005f84:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005f88:	f8d9 2000 	ldr.w	r2, [r9]
 8005f8c:	4461      	add	r1, ip
 8005f8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f92:	fb0a c20b 	mla	r2, sl, fp, ip
 8005f96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005f9a:	b289      	uxth	r1, r1
 8005f9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005fa0:	4577      	cmp	r7, lr
 8005fa2:	f849 1b04 	str.w	r1, [r9], #4
 8005fa6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005faa:	d8e2      	bhi.n	8005f72 <__multiply+0xb2>
 8005fac:	9a01      	ldr	r2, [sp, #4]
 8005fae:	f845 c002 	str.w	ip, [r5, r2]
 8005fb2:	9a03      	ldr	r2, [sp, #12]
 8005fb4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	f1b9 0f00 	cmp.w	r9, #0
 8005fbe:	d020      	beq.n	8006002 <__multiply+0x142>
 8005fc0:	6829      	ldr	r1, [r5, #0]
 8005fc2:	f104 0c14 	add.w	ip, r4, #20
 8005fc6:	46ae      	mov	lr, r5
 8005fc8:	f04f 0a00 	mov.w	sl, #0
 8005fcc:	f8bc b000 	ldrh.w	fp, [ip]
 8005fd0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005fd4:	fb09 220b 	mla	r2, r9, fp, r2
 8005fd8:	4492      	add	sl, r2
 8005fda:	b289      	uxth	r1, r1
 8005fdc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005fe0:	f84e 1b04 	str.w	r1, [lr], #4
 8005fe4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005fe8:	f8be 1000 	ldrh.w	r1, [lr]
 8005fec:	0c12      	lsrs	r2, r2, #16
 8005fee:	fb09 1102 	mla	r1, r9, r2, r1
 8005ff2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005ff6:	4567      	cmp	r7, ip
 8005ff8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005ffc:	d8e6      	bhi.n	8005fcc <__multiply+0x10c>
 8005ffe:	9a01      	ldr	r2, [sp, #4]
 8006000:	50a9      	str	r1, [r5, r2]
 8006002:	3504      	adds	r5, #4
 8006004:	e79a      	b.n	8005f3c <__multiply+0x7c>
 8006006:	3e01      	subs	r6, #1
 8006008:	e79c      	b.n	8005f44 <__multiply+0x84>
 800600a:	bf00      	nop
 800600c:	0800f2cb 	.word	0x0800f2cb
 8006010:	0800f33c 	.word	0x0800f33c

08006014 <__pow5mult>:
 8006014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006018:	4615      	mov	r5, r2
 800601a:	f012 0203 	ands.w	r2, r2, #3
 800601e:	4606      	mov	r6, r0
 8006020:	460f      	mov	r7, r1
 8006022:	d007      	beq.n	8006034 <__pow5mult+0x20>
 8006024:	4c25      	ldr	r4, [pc, #148]	; (80060bc <__pow5mult+0xa8>)
 8006026:	3a01      	subs	r2, #1
 8006028:	2300      	movs	r3, #0
 800602a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800602e:	f7ff fe9b 	bl	8005d68 <__multadd>
 8006032:	4607      	mov	r7, r0
 8006034:	10ad      	asrs	r5, r5, #2
 8006036:	d03d      	beq.n	80060b4 <__pow5mult+0xa0>
 8006038:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800603a:	b97c      	cbnz	r4, 800605c <__pow5mult+0x48>
 800603c:	2010      	movs	r0, #16
 800603e:	f7fd fe95 	bl	8003d6c <malloc>
 8006042:	4602      	mov	r2, r0
 8006044:	6270      	str	r0, [r6, #36]	; 0x24
 8006046:	b928      	cbnz	r0, 8006054 <__pow5mult+0x40>
 8006048:	4b1d      	ldr	r3, [pc, #116]	; (80060c0 <__pow5mult+0xac>)
 800604a:	481e      	ldr	r0, [pc, #120]	; (80060c4 <__pow5mult+0xb0>)
 800604c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006050:	f000 fba4 	bl	800679c <__assert_func>
 8006054:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006058:	6004      	str	r4, [r0, #0]
 800605a:	60c4      	str	r4, [r0, #12]
 800605c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006060:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006064:	b94c      	cbnz	r4, 800607a <__pow5mult+0x66>
 8006066:	f240 2171 	movw	r1, #625	; 0x271
 800606a:	4630      	mov	r0, r6
 800606c:	f7ff ff12 	bl	8005e94 <__i2b>
 8006070:	2300      	movs	r3, #0
 8006072:	f8c8 0008 	str.w	r0, [r8, #8]
 8006076:	4604      	mov	r4, r0
 8006078:	6003      	str	r3, [r0, #0]
 800607a:	f04f 0900 	mov.w	r9, #0
 800607e:	07eb      	lsls	r3, r5, #31
 8006080:	d50a      	bpl.n	8006098 <__pow5mult+0x84>
 8006082:	4639      	mov	r1, r7
 8006084:	4622      	mov	r2, r4
 8006086:	4630      	mov	r0, r6
 8006088:	f7ff ff1a 	bl	8005ec0 <__multiply>
 800608c:	4639      	mov	r1, r7
 800608e:	4680      	mov	r8, r0
 8006090:	4630      	mov	r0, r6
 8006092:	f7ff fe47 	bl	8005d24 <_Bfree>
 8006096:	4647      	mov	r7, r8
 8006098:	106d      	asrs	r5, r5, #1
 800609a:	d00b      	beq.n	80060b4 <__pow5mult+0xa0>
 800609c:	6820      	ldr	r0, [r4, #0]
 800609e:	b938      	cbnz	r0, 80060b0 <__pow5mult+0x9c>
 80060a0:	4622      	mov	r2, r4
 80060a2:	4621      	mov	r1, r4
 80060a4:	4630      	mov	r0, r6
 80060a6:	f7ff ff0b 	bl	8005ec0 <__multiply>
 80060aa:	6020      	str	r0, [r4, #0]
 80060ac:	f8c0 9000 	str.w	r9, [r0]
 80060b0:	4604      	mov	r4, r0
 80060b2:	e7e4      	b.n	800607e <__pow5mult+0x6a>
 80060b4:	4638      	mov	r0, r7
 80060b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ba:	bf00      	nop
 80060bc:	0800f488 	.word	0x0800f488
 80060c0:	0800f259 	.word	0x0800f259
 80060c4:	0800f33c 	.word	0x0800f33c

080060c8 <__lshift>:
 80060c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060cc:	460c      	mov	r4, r1
 80060ce:	6849      	ldr	r1, [r1, #4]
 80060d0:	6923      	ldr	r3, [r4, #16]
 80060d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80060d6:	68a3      	ldr	r3, [r4, #8]
 80060d8:	4607      	mov	r7, r0
 80060da:	4691      	mov	r9, r2
 80060dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060e0:	f108 0601 	add.w	r6, r8, #1
 80060e4:	42b3      	cmp	r3, r6
 80060e6:	db0b      	blt.n	8006100 <__lshift+0x38>
 80060e8:	4638      	mov	r0, r7
 80060ea:	f7ff fddb 	bl	8005ca4 <_Balloc>
 80060ee:	4605      	mov	r5, r0
 80060f0:	b948      	cbnz	r0, 8006106 <__lshift+0x3e>
 80060f2:	4602      	mov	r2, r0
 80060f4:	4b2a      	ldr	r3, [pc, #168]	; (80061a0 <__lshift+0xd8>)
 80060f6:	482b      	ldr	r0, [pc, #172]	; (80061a4 <__lshift+0xdc>)
 80060f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80060fc:	f000 fb4e 	bl	800679c <__assert_func>
 8006100:	3101      	adds	r1, #1
 8006102:	005b      	lsls	r3, r3, #1
 8006104:	e7ee      	b.n	80060e4 <__lshift+0x1c>
 8006106:	2300      	movs	r3, #0
 8006108:	f100 0114 	add.w	r1, r0, #20
 800610c:	f100 0210 	add.w	r2, r0, #16
 8006110:	4618      	mov	r0, r3
 8006112:	4553      	cmp	r3, sl
 8006114:	db37      	blt.n	8006186 <__lshift+0xbe>
 8006116:	6920      	ldr	r0, [r4, #16]
 8006118:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800611c:	f104 0314 	add.w	r3, r4, #20
 8006120:	f019 091f 	ands.w	r9, r9, #31
 8006124:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006128:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800612c:	d02f      	beq.n	800618e <__lshift+0xc6>
 800612e:	f1c9 0e20 	rsb	lr, r9, #32
 8006132:	468a      	mov	sl, r1
 8006134:	f04f 0c00 	mov.w	ip, #0
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	fa02 f209 	lsl.w	r2, r2, r9
 800613e:	ea42 020c 	orr.w	r2, r2, ip
 8006142:	f84a 2b04 	str.w	r2, [sl], #4
 8006146:	f853 2b04 	ldr.w	r2, [r3], #4
 800614a:	4298      	cmp	r0, r3
 800614c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006150:	d8f2      	bhi.n	8006138 <__lshift+0x70>
 8006152:	1b03      	subs	r3, r0, r4
 8006154:	3b15      	subs	r3, #21
 8006156:	f023 0303 	bic.w	r3, r3, #3
 800615a:	3304      	adds	r3, #4
 800615c:	f104 0215 	add.w	r2, r4, #21
 8006160:	4290      	cmp	r0, r2
 8006162:	bf38      	it	cc
 8006164:	2304      	movcc	r3, #4
 8006166:	f841 c003 	str.w	ip, [r1, r3]
 800616a:	f1bc 0f00 	cmp.w	ip, #0
 800616e:	d001      	beq.n	8006174 <__lshift+0xac>
 8006170:	f108 0602 	add.w	r6, r8, #2
 8006174:	3e01      	subs	r6, #1
 8006176:	4638      	mov	r0, r7
 8006178:	612e      	str	r6, [r5, #16]
 800617a:	4621      	mov	r1, r4
 800617c:	f7ff fdd2 	bl	8005d24 <_Bfree>
 8006180:	4628      	mov	r0, r5
 8006182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006186:	f842 0f04 	str.w	r0, [r2, #4]!
 800618a:	3301      	adds	r3, #1
 800618c:	e7c1      	b.n	8006112 <__lshift+0x4a>
 800618e:	3904      	subs	r1, #4
 8006190:	f853 2b04 	ldr.w	r2, [r3], #4
 8006194:	f841 2f04 	str.w	r2, [r1, #4]!
 8006198:	4298      	cmp	r0, r3
 800619a:	d8f9      	bhi.n	8006190 <__lshift+0xc8>
 800619c:	e7ea      	b.n	8006174 <__lshift+0xac>
 800619e:	bf00      	nop
 80061a0:	0800f2cb 	.word	0x0800f2cb
 80061a4:	0800f33c 	.word	0x0800f33c

080061a8 <__mcmp>:
 80061a8:	b530      	push	{r4, r5, lr}
 80061aa:	6902      	ldr	r2, [r0, #16]
 80061ac:	690c      	ldr	r4, [r1, #16]
 80061ae:	1b12      	subs	r2, r2, r4
 80061b0:	d10e      	bne.n	80061d0 <__mcmp+0x28>
 80061b2:	f100 0314 	add.w	r3, r0, #20
 80061b6:	3114      	adds	r1, #20
 80061b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80061bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80061c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80061c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80061c8:	42a5      	cmp	r5, r4
 80061ca:	d003      	beq.n	80061d4 <__mcmp+0x2c>
 80061cc:	d305      	bcc.n	80061da <__mcmp+0x32>
 80061ce:	2201      	movs	r2, #1
 80061d0:	4610      	mov	r0, r2
 80061d2:	bd30      	pop	{r4, r5, pc}
 80061d4:	4283      	cmp	r3, r0
 80061d6:	d3f3      	bcc.n	80061c0 <__mcmp+0x18>
 80061d8:	e7fa      	b.n	80061d0 <__mcmp+0x28>
 80061da:	f04f 32ff 	mov.w	r2, #4294967295
 80061de:	e7f7      	b.n	80061d0 <__mcmp+0x28>

080061e0 <__mdiff>:
 80061e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e4:	460c      	mov	r4, r1
 80061e6:	4606      	mov	r6, r0
 80061e8:	4611      	mov	r1, r2
 80061ea:	4620      	mov	r0, r4
 80061ec:	4690      	mov	r8, r2
 80061ee:	f7ff ffdb 	bl	80061a8 <__mcmp>
 80061f2:	1e05      	subs	r5, r0, #0
 80061f4:	d110      	bne.n	8006218 <__mdiff+0x38>
 80061f6:	4629      	mov	r1, r5
 80061f8:	4630      	mov	r0, r6
 80061fa:	f7ff fd53 	bl	8005ca4 <_Balloc>
 80061fe:	b930      	cbnz	r0, 800620e <__mdiff+0x2e>
 8006200:	4b3a      	ldr	r3, [pc, #232]	; (80062ec <__mdiff+0x10c>)
 8006202:	4602      	mov	r2, r0
 8006204:	f240 2132 	movw	r1, #562	; 0x232
 8006208:	4839      	ldr	r0, [pc, #228]	; (80062f0 <__mdiff+0x110>)
 800620a:	f000 fac7 	bl	800679c <__assert_func>
 800620e:	2301      	movs	r3, #1
 8006210:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006214:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006218:	bfa4      	itt	ge
 800621a:	4643      	movge	r3, r8
 800621c:	46a0      	movge	r8, r4
 800621e:	4630      	mov	r0, r6
 8006220:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006224:	bfa6      	itte	ge
 8006226:	461c      	movge	r4, r3
 8006228:	2500      	movge	r5, #0
 800622a:	2501      	movlt	r5, #1
 800622c:	f7ff fd3a 	bl	8005ca4 <_Balloc>
 8006230:	b920      	cbnz	r0, 800623c <__mdiff+0x5c>
 8006232:	4b2e      	ldr	r3, [pc, #184]	; (80062ec <__mdiff+0x10c>)
 8006234:	4602      	mov	r2, r0
 8006236:	f44f 7110 	mov.w	r1, #576	; 0x240
 800623a:	e7e5      	b.n	8006208 <__mdiff+0x28>
 800623c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006240:	6926      	ldr	r6, [r4, #16]
 8006242:	60c5      	str	r5, [r0, #12]
 8006244:	f104 0914 	add.w	r9, r4, #20
 8006248:	f108 0514 	add.w	r5, r8, #20
 800624c:	f100 0e14 	add.w	lr, r0, #20
 8006250:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006254:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006258:	f108 0210 	add.w	r2, r8, #16
 800625c:	46f2      	mov	sl, lr
 800625e:	2100      	movs	r1, #0
 8006260:	f859 3b04 	ldr.w	r3, [r9], #4
 8006264:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006268:	fa1f f883 	uxth.w	r8, r3
 800626c:	fa11 f18b 	uxtah	r1, r1, fp
 8006270:	0c1b      	lsrs	r3, r3, #16
 8006272:	eba1 0808 	sub.w	r8, r1, r8
 8006276:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800627a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800627e:	fa1f f888 	uxth.w	r8, r8
 8006282:	1419      	asrs	r1, r3, #16
 8006284:	454e      	cmp	r6, r9
 8006286:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800628a:	f84a 3b04 	str.w	r3, [sl], #4
 800628e:	d8e7      	bhi.n	8006260 <__mdiff+0x80>
 8006290:	1b33      	subs	r3, r6, r4
 8006292:	3b15      	subs	r3, #21
 8006294:	f023 0303 	bic.w	r3, r3, #3
 8006298:	3304      	adds	r3, #4
 800629a:	3415      	adds	r4, #21
 800629c:	42a6      	cmp	r6, r4
 800629e:	bf38      	it	cc
 80062a0:	2304      	movcc	r3, #4
 80062a2:	441d      	add	r5, r3
 80062a4:	4473      	add	r3, lr
 80062a6:	469e      	mov	lr, r3
 80062a8:	462e      	mov	r6, r5
 80062aa:	4566      	cmp	r6, ip
 80062ac:	d30e      	bcc.n	80062cc <__mdiff+0xec>
 80062ae:	f10c 0203 	add.w	r2, ip, #3
 80062b2:	1b52      	subs	r2, r2, r5
 80062b4:	f022 0203 	bic.w	r2, r2, #3
 80062b8:	3d03      	subs	r5, #3
 80062ba:	45ac      	cmp	ip, r5
 80062bc:	bf38      	it	cc
 80062be:	2200      	movcc	r2, #0
 80062c0:	441a      	add	r2, r3
 80062c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80062c6:	b17b      	cbz	r3, 80062e8 <__mdiff+0x108>
 80062c8:	6107      	str	r7, [r0, #16]
 80062ca:	e7a3      	b.n	8006214 <__mdiff+0x34>
 80062cc:	f856 8b04 	ldr.w	r8, [r6], #4
 80062d0:	fa11 f288 	uxtah	r2, r1, r8
 80062d4:	1414      	asrs	r4, r2, #16
 80062d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80062da:	b292      	uxth	r2, r2
 80062dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80062e0:	f84e 2b04 	str.w	r2, [lr], #4
 80062e4:	1421      	asrs	r1, r4, #16
 80062e6:	e7e0      	b.n	80062aa <__mdiff+0xca>
 80062e8:	3f01      	subs	r7, #1
 80062ea:	e7ea      	b.n	80062c2 <__mdiff+0xe2>
 80062ec:	0800f2cb 	.word	0x0800f2cb
 80062f0:	0800f33c 	.word	0x0800f33c

080062f4 <__d2b>:
 80062f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80062f8:	4689      	mov	r9, r1
 80062fa:	2101      	movs	r1, #1
 80062fc:	ec57 6b10 	vmov	r6, r7, d0
 8006300:	4690      	mov	r8, r2
 8006302:	f7ff fccf 	bl	8005ca4 <_Balloc>
 8006306:	4604      	mov	r4, r0
 8006308:	b930      	cbnz	r0, 8006318 <__d2b+0x24>
 800630a:	4602      	mov	r2, r0
 800630c:	4b25      	ldr	r3, [pc, #148]	; (80063a4 <__d2b+0xb0>)
 800630e:	4826      	ldr	r0, [pc, #152]	; (80063a8 <__d2b+0xb4>)
 8006310:	f240 310a 	movw	r1, #778	; 0x30a
 8006314:	f000 fa42 	bl	800679c <__assert_func>
 8006318:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800631c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006320:	bb35      	cbnz	r5, 8006370 <__d2b+0x7c>
 8006322:	2e00      	cmp	r6, #0
 8006324:	9301      	str	r3, [sp, #4]
 8006326:	d028      	beq.n	800637a <__d2b+0x86>
 8006328:	4668      	mov	r0, sp
 800632a:	9600      	str	r6, [sp, #0]
 800632c:	f7ff fd82 	bl	8005e34 <__lo0bits>
 8006330:	9900      	ldr	r1, [sp, #0]
 8006332:	b300      	cbz	r0, 8006376 <__d2b+0x82>
 8006334:	9a01      	ldr	r2, [sp, #4]
 8006336:	f1c0 0320 	rsb	r3, r0, #32
 800633a:	fa02 f303 	lsl.w	r3, r2, r3
 800633e:	430b      	orrs	r3, r1
 8006340:	40c2      	lsrs	r2, r0
 8006342:	6163      	str	r3, [r4, #20]
 8006344:	9201      	str	r2, [sp, #4]
 8006346:	9b01      	ldr	r3, [sp, #4]
 8006348:	61a3      	str	r3, [r4, #24]
 800634a:	2b00      	cmp	r3, #0
 800634c:	bf14      	ite	ne
 800634e:	2202      	movne	r2, #2
 8006350:	2201      	moveq	r2, #1
 8006352:	6122      	str	r2, [r4, #16]
 8006354:	b1d5      	cbz	r5, 800638c <__d2b+0x98>
 8006356:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800635a:	4405      	add	r5, r0
 800635c:	f8c9 5000 	str.w	r5, [r9]
 8006360:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006364:	f8c8 0000 	str.w	r0, [r8]
 8006368:	4620      	mov	r0, r4
 800636a:	b003      	add	sp, #12
 800636c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006370:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006374:	e7d5      	b.n	8006322 <__d2b+0x2e>
 8006376:	6161      	str	r1, [r4, #20]
 8006378:	e7e5      	b.n	8006346 <__d2b+0x52>
 800637a:	a801      	add	r0, sp, #4
 800637c:	f7ff fd5a 	bl	8005e34 <__lo0bits>
 8006380:	9b01      	ldr	r3, [sp, #4]
 8006382:	6163      	str	r3, [r4, #20]
 8006384:	2201      	movs	r2, #1
 8006386:	6122      	str	r2, [r4, #16]
 8006388:	3020      	adds	r0, #32
 800638a:	e7e3      	b.n	8006354 <__d2b+0x60>
 800638c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006390:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006394:	f8c9 0000 	str.w	r0, [r9]
 8006398:	6918      	ldr	r0, [r3, #16]
 800639a:	f7ff fd2b 	bl	8005df4 <__hi0bits>
 800639e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80063a2:	e7df      	b.n	8006364 <__d2b+0x70>
 80063a4:	0800f2cb 	.word	0x0800f2cb
 80063a8:	0800f33c 	.word	0x0800f33c

080063ac <__sfputc_r>:
 80063ac:	6893      	ldr	r3, [r2, #8]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	b410      	push	{r4}
 80063b4:	6093      	str	r3, [r2, #8]
 80063b6:	da08      	bge.n	80063ca <__sfputc_r+0x1e>
 80063b8:	6994      	ldr	r4, [r2, #24]
 80063ba:	42a3      	cmp	r3, r4
 80063bc:	db01      	blt.n	80063c2 <__sfputc_r+0x16>
 80063be:	290a      	cmp	r1, #10
 80063c0:	d103      	bne.n	80063ca <__sfputc_r+0x1e>
 80063c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063c6:	f7fe bb03 	b.w	80049d0 <__swbuf_r>
 80063ca:	6813      	ldr	r3, [r2, #0]
 80063cc:	1c58      	adds	r0, r3, #1
 80063ce:	6010      	str	r0, [r2, #0]
 80063d0:	7019      	strb	r1, [r3, #0]
 80063d2:	4608      	mov	r0, r1
 80063d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063d8:	4770      	bx	lr

080063da <__sfputs_r>:
 80063da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063dc:	4606      	mov	r6, r0
 80063de:	460f      	mov	r7, r1
 80063e0:	4614      	mov	r4, r2
 80063e2:	18d5      	adds	r5, r2, r3
 80063e4:	42ac      	cmp	r4, r5
 80063e6:	d101      	bne.n	80063ec <__sfputs_r+0x12>
 80063e8:	2000      	movs	r0, #0
 80063ea:	e007      	b.n	80063fc <__sfputs_r+0x22>
 80063ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063f0:	463a      	mov	r2, r7
 80063f2:	4630      	mov	r0, r6
 80063f4:	f7ff ffda 	bl	80063ac <__sfputc_r>
 80063f8:	1c43      	adds	r3, r0, #1
 80063fa:	d1f3      	bne.n	80063e4 <__sfputs_r+0xa>
 80063fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006400 <_vfiprintf_r>:
 8006400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006404:	460d      	mov	r5, r1
 8006406:	b09d      	sub	sp, #116	; 0x74
 8006408:	4614      	mov	r4, r2
 800640a:	4698      	mov	r8, r3
 800640c:	4606      	mov	r6, r0
 800640e:	b118      	cbz	r0, 8006418 <_vfiprintf_r+0x18>
 8006410:	6983      	ldr	r3, [r0, #24]
 8006412:	b90b      	cbnz	r3, 8006418 <_vfiprintf_r+0x18>
 8006414:	f7ff fb30 	bl	8005a78 <__sinit>
 8006418:	4b89      	ldr	r3, [pc, #548]	; (8006640 <_vfiprintf_r+0x240>)
 800641a:	429d      	cmp	r5, r3
 800641c:	d11b      	bne.n	8006456 <_vfiprintf_r+0x56>
 800641e:	6875      	ldr	r5, [r6, #4]
 8006420:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006422:	07d9      	lsls	r1, r3, #31
 8006424:	d405      	bmi.n	8006432 <_vfiprintf_r+0x32>
 8006426:	89ab      	ldrh	r3, [r5, #12]
 8006428:	059a      	lsls	r2, r3, #22
 800642a:	d402      	bmi.n	8006432 <_vfiprintf_r+0x32>
 800642c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800642e:	f7ff fbc6 	bl	8005bbe <__retarget_lock_acquire_recursive>
 8006432:	89ab      	ldrh	r3, [r5, #12]
 8006434:	071b      	lsls	r3, r3, #28
 8006436:	d501      	bpl.n	800643c <_vfiprintf_r+0x3c>
 8006438:	692b      	ldr	r3, [r5, #16]
 800643a:	b9eb      	cbnz	r3, 8006478 <_vfiprintf_r+0x78>
 800643c:	4629      	mov	r1, r5
 800643e:	4630      	mov	r0, r6
 8006440:	f7fe fb18 	bl	8004a74 <__swsetup_r>
 8006444:	b1c0      	cbz	r0, 8006478 <_vfiprintf_r+0x78>
 8006446:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006448:	07dc      	lsls	r4, r3, #31
 800644a:	d50e      	bpl.n	800646a <_vfiprintf_r+0x6a>
 800644c:	f04f 30ff 	mov.w	r0, #4294967295
 8006450:	b01d      	add	sp, #116	; 0x74
 8006452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006456:	4b7b      	ldr	r3, [pc, #492]	; (8006644 <_vfiprintf_r+0x244>)
 8006458:	429d      	cmp	r5, r3
 800645a:	d101      	bne.n	8006460 <_vfiprintf_r+0x60>
 800645c:	68b5      	ldr	r5, [r6, #8]
 800645e:	e7df      	b.n	8006420 <_vfiprintf_r+0x20>
 8006460:	4b79      	ldr	r3, [pc, #484]	; (8006648 <_vfiprintf_r+0x248>)
 8006462:	429d      	cmp	r5, r3
 8006464:	bf08      	it	eq
 8006466:	68f5      	ldreq	r5, [r6, #12]
 8006468:	e7da      	b.n	8006420 <_vfiprintf_r+0x20>
 800646a:	89ab      	ldrh	r3, [r5, #12]
 800646c:	0598      	lsls	r0, r3, #22
 800646e:	d4ed      	bmi.n	800644c <_vfiprintf_r+0x4c>
 8006470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006472:	f7ff fba5 	bl	8005bc0 <__retarget_lock_release_recursive>
 8006476:	e7e9      	b.n	800644c <_vfiprintf_r+0x4c>
 8006478:	2300      	movs	r3, #0
 800647a:	9309      	str	r3, [sp, #36]	; 0x24
 800647c:	2320      	movs	r3, #32
 800647e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006482:	f8cd 800c 	str.w	r8, [sp, #12]
 8006486:	2330      	movs	r3, #48	; 0x30
 8006488:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800664c <_vfiprintf_r+0x24c>
 800648c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006490:	f04f 0901 	mov.w	r9, #1
 8006494:	4623      	mov	r3, r4
 8006496:	469a      	mov	sl, r3
 8006498:	f813 2b01 	ldrb.w	r2, [r3], #1
 800649c:	b10a      	cbz	r2, 80064a2 <_vfiprintf_r+0xa2>
 800649e:	2a25      	cmp	r2, #37	; 0x25
 80064a0:	d1f9      	bne.n	8006496 <_vfiprintf_r+0x96>
 80064a2:	ebba 0b04 	subs.w	fp, sl, r4
 80064a6:	d00b      	beq.n	80064c0 <_vfiprintf_r+0xc0>
 80064a8:	465b      	mov	r3, fp
 80064aa:	4622      	mov	r2, r4
 80064ac:	4629      	mov	r1, r5
 80064ae:	4630      	mov	r0, r6
 80064b0:	f7ff ff93 	bl	80063da <__sfputs_r>
 80064b4:	3001      	adds	r0, #1
 80064b6:	f000 80aa 	beq.w	800660e <_vfiprintf_r+0x20e>
 80064ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064bc:	445a      	add	r2, fp
 80064be:	9209      	str	r2, [sp, #36]	; 0x24
 80064c0:	f89a 3000 	ldrb.w	r3, [sl]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 80a2 	beq.w	800660e <_vfiprintf_r+0x20e>
 80064ca:	2300      	movs	r3, #0
 80064cc:	f04f 32ff 	mov.w	r2, #4294967295
 80064d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064d4:	f10a 0a01 	add.w	sl, sl, #1
 80064d8:	9304      	str	r3, [sp, #16]
 80064da:	9307      	str	r3, [sp, #28]
 80064dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064e0:	931a      	str	r3, [sp, #104]	; 0x68
 80064e2:	4654      	mov	r4, sl
 80064e4:	2205      	movs	r2, #5
 80064e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064ea:	4858      	ldr	r0, [pc, #352]	; (800664c <_vfiprintf_r+0x24c>)
 80064ec:	f7f9 fe78 	bl	80001e0 <memchr>
 80064f0:	9a04      	ldr	r2, [sp, #16]
 80064f2:	b9d8      	cbnz	r0, 800652c <_vfiprintf_r+0x12c>
 80064f4:	06d1      	lsls	r1, r2, #27
 80064f6:	bf44      	itt	mi
 80064f8:	2320      	movmi	r3, #32
 80064fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064fe:	0713      	lsls	r3, r2, #28
 8006500:	bf44      	itt	mi
 8006502:	232b      	movmi	r3, #43	; 0x2b
 8006504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006508:	f89a 3000 	ldrb.w	r3, [sl]
 800650c:	2b2a      	cmp	r3, #42	; 0x2a
 800650e:	d015      	beq.n	800653c <_vfiprintf_r+0x13c>
 8006510:	9a07      	ldr	r2, [sp, #28]
 8006512:	4654      	mov	r4, sl
 8006514:	2000      	movs	r0, #0
 8006516:	f04f 0c0a 	mov.w	ip, #10
 800651a:	4621      	mov	r1, r4
 800651c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006520:	3b30      	subs	r3, #48	; 0x30
 8006522:	2b09      	cmp	r3, #9
 8006524:	d94e      	bls.n	80065c4 <_vfiprintf_r+0x1c4>
 8006526:	b1b0      	cbz	r0, 8006556 <_vfiprintf_r+0x156>
 8006528:	9207      	str	r2, [sp, #28]
 800652a:	e014      	b.n	8006556 <_vfiprintf_r+0x156>
 800652c:	eba0 0308 	sub.w	r3, r0, r8
 8006530:	fa09 f303 	lsl.w	r3, r9, r3
 8006534:	4313      	orrs	r3, r2
 8006536:	9304      	str	r3, [sp, #16]
 8006538:	46a2      	mov	sl, r4
 800653a:	e7d2      	b.n	80064e2 <_vfiprintf_r+0xe2>
 800653c:	9b03      	ldr	r3, [sp, #12]
 800653e:	1d19      	adds	r1, r3, #4
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	9103      	str	r1, [sp, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	bfbb      	ittet	lt
 8006548:	425b      	neglt	r3, r3
 800654a:	f042 0202 	orrlt.w	r2, r2, #2
 800654e:	9307      	strge	r3, [sp, #28]
 8006550:	9307      	strlt	r3, [sp, #28]
 8006552:	bfb8      	it	lt
 8006554:	9204      	strlt	r2, [sp, #16]
 8006556:	7823      	ldrb	r3, [r4, #0]
 8006558:	2b2e      	cmp	r3, #46	; 0x2e
 800655a:	d10c      	bne.n	8006576 <_vfiprintf_r+0x176>
 800655c:	7863      	ldrb	r3, [r4, #1]
 800655e:	2b2a      	cmp	r3, #42	; 0x2a
 8006560:	d135      	bne.n	80065ce <_vfiprintf_r+0x1ce>
 8006562:	9b03      	ldr	r3, [sp, #12]
 8006564:	1d1a      	adds	r2, r3, #4
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	9203      	str	r2, [sp, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	bfb8      	it	lt
 800656e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006572:	3402      	adds	r4, #2
 8006574:	9305      	str	r3, [sp, #20]
 8006576:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800665c <_vfiprintf_r+0x25c>
 800657a:	7821      	ldrb	r1, [r4, #0]
 800657c:	2203      	movs	r2, #3
 800657e:	4650      	mov	r0, sl
 8006580:	f7f9 fe2e 	bl	80001e0 <memchr>
 8006584:	b140      	cbz	r0, 8006598 <_vfiprintf_r+0x198>
 8006586:	2340      	movs	r3, #64	; 0x40
 8006588:	eba0 000a 	sub.w	r0, r0, sl
 800658c:	fa03 f000 	lsl.w	r0, r3, r0
 8006590:	9b04      	ldr	r3, [sp, #16]
 8006592:	4303      	orrs	r3, r0
 8006594:	3401      	adds	r4, #1
 8006596:	9304      	str	r3, [sp, #16]
 8006598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800659c:	482c      	ldr	r0, [pc, #176]	; (8006650 <_vfiprintf_r+0x250>)
 800659e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065a2:	2206      	movs	r2, #6
 80065a4:	f7f9 fe1c 	bl	80001e0 <memchr>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d03f      	beq.n	800662c <_vfiprintf_r+0x22c>
 80065ac:	4b29      	ldr	r3, [pc, #164]	; (8006654 <_vfiprintf_r+0x254>)
 80065ae:	bb1b      	cbnz	r3, 80065f8 <_vfiprintf_r+0x1f8>
 80065b0:	9b03      	ldr	r3, [sp, #12]
 80065b2:	3307      	adds	r3, #7
 80065b4:	f023 0307 	bic.w	r3, r3, #7
 80065b8:	3308      	adds	r3, #8
 80065ba:	9303      	str	r3, [sp, #12]
 80065bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065be:	443b      	add	r3, r7
 80065c0:	9309      	str	r3, [sp, #36]	; 0x24
 80065c2:	e767      	b.n	8006494 <_vfiprintf_r+0x94>
 80065c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80065c8:	460c      	mov	r4, r1
 80065ca:	2001      	movs	r0, #1
 80065cc:	e7a5      	b.n	800651a <_vfiprintf_r+0x11a>
 80065ce:	2300      	movs	r3, #0
 80065d0:	3401      	adds	r4, #1
 80065d2:	9305      	str	r3, [sp, #20]
 80065d4:	4619      	mov	r1, r3
 80065d6:	f04f 0c0a 	mov.w	ip, #10
 80065da:	4620      	mov	r0, r4
 80065dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065e0:	3a30      	subs	r2, #48	; 0x30
 80065e2:	2a09      	cmp	r2, #9
 80065e4:	d903      	bls.n	80065ee <_vfiprintf_r+0x1ee>
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d0c5      	beq.n	8006576 <_vfiprintf_r+0x176>
 80065ea:	9105      	str	r1, [sp, #20]
 80065ec:	e7c3      	b.n	8006576 <_vfiprintf_r+0x176>
 80065ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80065f2:	4604      	mov	r4, r0
 80065f4:	2301      	movs	r3, #1
 80065f6:	e7f0      	b.n	80065da <_vfiprintf_r+0x1da>
 80065f8:	ab03      	add	r3, sp, #12
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	462a      	mov	r2, r5
 80065fe:	4b16      	ldr	r3, [pc, #88]	; (8006658 <_vfiprintf_r+0x258>)
 8006600:	a904      	add	r1, sp, #16
 8006602:	4630      	mov	r0, r6
 8006604:	f7fd fd66 	bl	80040d4 <_printf_float>
 8006608:	4607      	mov	r7, r0
 800660a:	1c78      	adds	r0, r7, #1
 800660c:	d1d6      	bne.n	80065bc <_vfiprintf_r+0x1bc>
 800660e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006610:	07d9      	lsls	r1, r3, #31
 8006612:	d405      	bmi.n	8006620 <_vfiprintf_r+0x220>
 8006614:	89ab      	ldrh	r3, [r5, #12]
 8006616:	059a      	lsls	r2, r3, #22
 8006618:	d402      	bmi.n	8006620 <_vfiprintf_r+0x220>
 800661a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800661c:	f7ff fad0 	bl	8005bc0 <__retarget_lock_release_recursive>
 8006620:	89ab      	ldrh	r3, [r5, #12]
 8006622:	065b      	lsls	r3, r3, #25
 8006624:	f53f af12 	bmi.w	800644c <_vfiprintf_r+0x4c>
 8006628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800662a:	e711      	b.n	8006450 <_vfiprintf_r+0x50>
 800662c:	ab03      	add	r3, sp, #12
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	462a      	mov	r2, r5
 8006632:	4b09      	ldr	r3, [pc, #36]	; (8006658 <_vfiprintf_r+0x258>)
 8006634:	a904      	add	r1, sp, #16
 8006636:	4630      	mov	r0, r6
 8006638:	f7fd fff0 	bl	800461c <_printf_i>
 800663c:	e7e4      	b.n	8006608 <_vfiprintf_r+0x208>
 800663e:	bf00      	nop
 8006640:	0800f2fc 	.word	0x0800f2fc
 8006644:	0800f31c 	.word	0x0800f31c
 8006648:	0800f2dc 	.word	0x0800f2dc
 800664c:	0800f494 	.word	0x0800f494
 8006650:	0800f49e 	.word	0x0800f49e
 8006654:	080040d5 	.word	0x080040d5
 8006658:	080063db 	.word	0x080063db
 800665c:	0800f49a 	.word	0x0800f49a

08006660 <_putc_r>:
 8006660:	b570      	push	{r4, r5, r6, lr}
 8006662:	460d      	mov	r5, r1
 8006664:	4614      	mov	r4, r2
 8006666:	4606      	mov	r6, r0
 8006668:	b118      	cbz	r0, 8006672 <_putc_r+0x12>
 800666a:	6983      	ldr	r3, [r0, #24]
 800666c:	b90b      	cbnz	r3, 8006672 <_putc_r+0x12>
 800666e:	f7ff fa03 	bl	8005a78 <__sinit>
 8006672:	4b1c      	ldr	r3, [pc, #112]	; (80066e4 <_putc_r+0x84>)
 8006674:	429c      	cmp	r4, r3
 8006676:	d124      	bne.n	80066c2 <_putc_r+0x62>
 8006678:	6874      	ldr	r4, [r6, #4]
 800667a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800667c:	07d8      	lsls	r0, r3, #31
 800667e:	d405      	bmi.n	800668c <_putc_r+0x2c>
 8006680:	89a3      	ldrh	r3, [r4, #12]
 8006682:	0599      	lsls	r1, r3, #22
 8006684:	d402      	bmi.n	800668c <_putc_r+0x2c>
 8006686:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006688:	f7ff fa99 	bl	8005bbe <__retarget_lock_acquire_recursive>
 800668c:	68a3      	ldr	r3, [r4, #8]
 800668e:	3b01      	subs	r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	60a3      	str	r3, [r4, #8]
 8006694:	da05      	bge.n	80066a2 <_putc_r+0x42>
 8006696:	69a2      	ldr	r2, [r4, #24]
 8006698:	4293      	cmp	r3, r2
 800669a:	db1c      	blt.n	80066d6 <_putc_r+0x76>
 800669c:	b2eb      	uxtb	r3, r5
 800669e:	2b0a      	cmp	r3, #10
 80066a0:	d019      	beq.n	80066d6 <_putc_r+0x76>
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	1c5a      	adds	r2, r3, #1
 80066a6:	6022      	str	r2, [r4, #0]
 80066a8:	701d      	strb	r5, [r3, #0]
 80066aa:	b2ed      	uxtb	r5, r5
 80066ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066ae:	07da      	lsls	r2, r3, #31
 80066b0:	d405      	bmi.n	80066be <_putc_r+0x5e>
 80066b2:	89a3      	ldrh	r3, [r4, #12]
 80066b4:	059b      	lsls	r3, r3, #22
 80066b6:	d402      	bmi.n	80066be <_putc_r+0x5e>
 80066b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066ba:	f7ff fa81 	bl	8005bc0 <__retarget_lock_release_recursive>
 80066be:	4628      	mov	r0, r5
 80066c0:	bd70      	pop	{r4, r5, r6, pc}
 80066c2:	4b09      	ldr	r3, [pc, #36]	; (80066e8 <_putc_r+0x88>)
 80066c4:	429c      	cmp	r4, r3
 80066c6:	d101      	bne.n	80066cc <_putc_r+0x6c>
 80066c8:	68b4      	ldr	r4, [r6, #8]
 80066ca:	e7d6      	b.n	800667a <_putc_r+0x1a>
 80066cc:	4b07      	ldr	r3, [pc, #28]	; (80066ec <_putc_r+0x8c>)
 80066ce:	429c      	cmp	r4, r3
 80066d0:	bf08      	it	eq
 80066d2:	68f4      	ldreq	r4, [r6, #12]
 80066d4:	e7d1      	b.n	800667a <_putc_r+0x1a>
 80066d6:	4629      	mov	r1, r5
 80066d8:	4622      	mov	r2, r4
 80066da:	4630      	mov	r0, r6
 80066dc:	f7fe f978 	bl	80049d0 <__swbuf_r>
 80066e0:	4605      	mov	r5, r0
 80066e2:	e7e3      	b.n	80066ac <_putc_r+0x4c>
 80066e4:	0800f2fc 	.word	0x0800f2fc
 80066e8:	0800f31c 	.word	0x0800f31c
 80066ec:	0800f2dc 	.word	0x0800f2dc

080066f0 <__sread>:
 80066f0:	b510      	push	{r4, lr}
 80066f2:	460c      	mov	r4, r1
 80066f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066f8:	f000 f8d6 	bl	80068a8 <_read_r>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	bfab      	itete	ge
 8006700:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006702:	89a3      	ldrhlt	r3, [r4, #12]
 8006704:	181b      	addge	r3, r3, r0
 8006706:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800670a:	bfac      	ite	ge
 800670c:	6563      	strge	r3, [r4, #84]	; 0x54
 800670e:	81a3      	strhlt	r3, [r4, #12]
 8006710:	bd10      	pop	{r4, pc}

08006712 <__swrite>:
 8006712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006716:	461f      	mov	r7, r3
 8006718:	898b      	ldrh	r3, [r1, #12]
 800671a:	05db      	lsls	r3, r3, #23
 800671c:	4605      	mov	r5, r0
 800671e:	460c      	mov	r4, r1
 8006720:	4616      	mov	r6, r2
 8006722:	d505      	bpl.n	8006730 <__swrite+0x1e>
 8006724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006728:	2302      	movs	r3, #2
 800672a:	2200      	movs	r2, #0
 800672c:	f000 f898 	bl	8006860 <_lseek_r>
 8006730:	89a3      	ldrh	r3, [r4, #12]
 8006732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006736:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800673a:	81a3      	strh	r3, [r4, #12]
 800673c:	4632      	mov	r2, r6
 800673e:	463b      	mov	r3, r7
 8006740:	4628      	mov	r0, r5
 8006742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006746:	f000 b817 	b.w	8006778 <_write_r>

0800674a <__sseek>:
 800674a:	b510      	push	{r4, lr}
 800674c:	460c      	mov	r4, r1
 800674e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006752:	f000 f885 	bl	8006860 <_lseek_r>
 8006756:	1c43      	adds	r3, r0, #1
 8006758:	89a3      	ldrh	r3, [r4, #12]
 800675a:	bf15      	itete	ne
 800675c:	6560      	strne	r0, [r4, #84]	; 0x54
 800675e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006762:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006766:	81a3      	strheq	r3, [r4, #12]
 8006768:	bf18      	it	ne
 800676a:	81a3      	strhne	r3, [r4, #12]
 800676c:	bd10      	pop	{r4, pc}

0800676e <__sclose>:
 800676e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006772:	f000 b831 	b.w	80067d8 <_close_r>
	...

08006778 <_write_r>:
 8006778:	b538      	push	{r3, r4, r5, lr}
 800677a:	4d07      	ldr	r5, [pc, #28]	; (8006798 <_write_r+0x20>)
 800677c:	4604      	mov	r4, r0
 800677e:	4608      	mov	r0, r1
 8006780:	4611      	mov	r1, r2
 8006782:	2200      	movs	r2, #0
 8006784:	602a      	str	r2, [r5, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	f7fa fcad 	bl	80010e6 <_write>
 800678c:	1c43      	adds	r3, r0, #1
 800678e:	d102      	bne.n	8006796 <_write_r+0x1e>
 8006790:	682b      	ldr	r3, [r5, #0]
 8006792:	b103      	cbz	r3, 8006796 <_write_r+0x1e>
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	bd38      	pop	{r3, r4, r5, pc}
 8006798:	20000268 	.word	0x20000268

0800679c <__assert_func>:
 800679c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800679e:	4614      	mov	r4, r2
 80067a0:	461a      	mov	r2, r3
 80067a2:	4b09      	ldr	r3, [pc, #36]	; (80067c8 <__assert_func+0x2c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4605      	mov	r5, r0
 80067a8:	68d8      	ldr	r0, [r3, #12]
 80067aa:	b14c      	cbz	r4, 80067c0 <__assert_func+0x24>
 80067ac:	4b07      	ldr	r3, [pc, #28]	; (80067cc <__assert_func+0x30>)
 80067ae:	9100      	str	r1, [sp, #0]
 80067b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80067b4:	4906      	ldr	r1, [pc, #24]	; (80067d0 <__assert_func+0x34>)
 80067b6:	462b      	mov	r3, r5
 80067b8:	f000 f81e 	bl	80067f8 <fiprintf>
 80067bc:	f000 f893 	bl	80068e6 <abort>
 80067c0:	4b04      	ldr	r3, [pc, #16]	; (80067d4 <__assert_func+0x38>)
 80067c2:	461c      	mov	r4, r3
 80067c4:	e7f3      	b.n	80067ae <__assert_func+0x12>
 80067c6:	bf00      	nop
 80067c8:	2000000c 	.word	0x2000000c
 80067cc:	0800f4a5 	.word	0x0800f4a5
 80067d0:	0800f4b2 	.word	0x0800f4b2
 80067d4:	0800f4e0 	.word	0x0800f4e0

080067d8 <_close_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4d06      	ldr	r5, [pc, #24]	; (80067f4 <_close_r+0x1c>)
 80067dc:	2300      	movs	r3, #0
 80067de:	4604      	mov	r4, r0
 80067e0:	4608      	mov	r0, r1
 80067e2:	602b      	str	r3, [r5, #0]
 80067e4:	f7fa fc9b 	bl	800111e <_close>
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	d102      	bne.n	80067f2 <_close_r+0x1a>
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	b103      	cbz	r3, 80067f2 <_close_r+0x1a>
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	bd38      	pop	{r3, r4, r5, pc}
 80067f4:	20000268 	.word	0x20000268

080067f8 <fiprintf>:
 80067f8:	b40e      	push	{r1, r2, r3}
 80067fa:	b503      	push	{r0, r1, lr}
 80067fc:	4601      	mov	r1, r0
 80067fe:	ab03      	add	r3, sp, #12
 8006800:	4805      	ldr	r0, [pc, #20]	; (8006818 <fiprintf+0x20>)
 8006802:	f853 2b04 	ldr.w	r2, [r3], #4
 8006806:	6800      	ldr	r0, [r0, #0]
 8006808:	9301      	str	r3, [sp, #4]
 800680a:	f7ff fdf9 	bl	8006400 <_vfiprintf_r>
 800680e:	b002      	add	sp, #8
 8006810:	f85d eb04 	ldr.w	lr, [sp], #4
 8006814:	b003      	add	sp, #12
 8006816:	4770      	bx	lr
 8006818:	2000000c 	.word	0x2000000c

0800681c <_fstat_r>:
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	4d07      	ldr	r5, [pc, #28]	; (800683c <_fstat_r+0x20>)
 8006820:	2300      	movs	r3, #0
 8006822:	4604      	mov	r4, r0
 8006824:	4608      	mov	r0, r1
 8006826:	4611      	mov	r1, r2
 8006828:	602b      	str	r3, [r5, #0]
 800682a:	f7fa fc84 	bl	8001136 <_fstat>
 800682e:	1c43      	adds	r3, r0, #1
 8006830:	d102      	bne.n	8006838 <_fstat_r+0x1c>
 8006832:	682b      	ldr	r3, [r5, #0]
 8006834:	b103      	cbz	r3, 8006838 <_fstat_r+0x1c>
 8006836:	6023      	str	r3, [r4, #0]
 8006838:	bd38      	pop	{r3, r4, r5, pc}
 800683a:	bf00      	nop
 800683c:	20000268 	.word	0x20000268

08006840 <_isatty_r>:
 8006840:	b538      	push	{r3, r4, r5, lr}
 8006842:	4d06      	ldr	r5, [pc, #24]	; (800685c <_isatty_r+0x1c>)
 8006844:	2300      	movs	r3, #0
 8006846:	4604      	mov	r4, r0
 8006848:	4608      	mov	r0, r1
 800684a:	602b      	str	r3, [r5, #0]
 800684c:	f7fa fc83 	bl	8001156 <_isatty>
 8006850:	1c43      	adds	r3, r0, #1
 8006852:	d102      	bne.n	800685a <_isatty_r+0x1a>
 8006854:	682b      	ldr	r3, [r5, #0]
 8006856:	b103      	cbz	r3, 800685a <_isatty_r+0x1a>
 8006858:	6023      	str	r3, [r4, #0]
 800685a:	bd38      	pop	{r3, r4, r5, pc}
 800685c:	20000268 	.word	0x20000268

08006860 <_lseek_r>:
 8006860:	b538      	push	{r3, r4, r5, lr}
 8006862:	4d07      	ldr	r5, [pc, #28]	; (8006880 <_lseek_r+0x20>)
 8006864:	4604      	mov	r4, r0
 8006866:	4608      	mov	r0, r1
 8006868:	4611      	mov	r1, r2
 800686a:	2200      	movs	r2, #0
 800686c:	602a      	str	r2, [r5, #0]
 800686e:	461a      	mov	r2, r3
 8006870:	f7fa fc7c 	bl	800116c <_lseek>
 8006874:	1c43      	adds	r3, r0, #1
 8006876:	d102      	bne.n	800687e <_lseek_r+0x1e>
 8006878:	682b      	ldr	r3, [r5, #0]
 800687a:	b103      	cbz	r3, 800687e <_lseek_r+0x1e>
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	bd38      	pop	{r3, r4, r5, pc}
 8006880:	20000268 	.word	0x20000268

08006884 <__ascii_mbtowc>:
 8006884:	b082      	sub	sp, #8
 8006886:	b901      	cbnz	r1, 800688a <__ascii_mbtowc+0x6>
 8006888:	a901      	add	r1, sp, #4
 800688a:	b142      	cbz	r2, 800689e <__ascii_mbtowc+0x1a>
 800688c:	b14b      	cbz	r3, 80068a2 <__ascii_mbtowc+0x1e>
 800688e:	7813      	ldrb	r3, [r2, #0]
 8006890:	600b      	str	r3, [r1, #0]
 8006892:	7812      	ldrb	r2, [r2, #0]
 8006894:	1e10      	subs	r0, r2, #0
 8006896:	bf18      	it	ne
 8006898:	2001      	movne	r0, #1
 800689a:	b002      	add	sp, #8
 800689c:	4770      	bx	lr
 800689e:	4610      	mov	r0, r2
 80068a0:	e7fb      	b.n	800689a <__ascii_mbtowc+0x16>
 80068a2:	f06f 0001 	mvn.w	r0, #1
 80068a6:	e7f8      	b.n	800689a <__ascii_mbtowc+0x16>

080068a8 <_read_r>:
 80068a8:	b538      	push	{r3, r4, r5, lr}
 80068aa:	4d07      	ldr	r5, [pc, #28]	; (80068c8 <_read_r+0x20>)
 80068ac:	4604      	mov	r4, r0
 80068ae:	4608      	mov	r0, r1
 80068b0:	4611      	mov	r1, r2
 80068b2:	2200      	movs	r2, #0
 80068b4:	602a      	str	r2, [r5, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	f7fa fbf8 	bl	80010ac <_read>
 80068bc:	1c43      	adds	r3, r0, #1
 80068be:	d102      	bne.n	80068c6 <_read_r+0x1e>
 80068c0:	682b      	ldr	r3, [r5, #0]
 80068c2:	b103      	cbz	r3, 80068c6 <_read_r+0x1e>
 80068c4:	6023      	str	r3, [r4, #0]
 80068c6:	bd38      	pop	{r3, r4, r5, pc}
 80068c8:	20000268 	.word	0x20000268

080068cc <__ascii_wctomb>:
 80068cc:	b149      	cbz	r1, 80068e2 <__ascii_wctomb+0x16>
 80068ce:	2aff      	cmp	r2, #255	; 0xff
 80068d0:	bf85      	ittet	hi
 80068d2:	238a      	movhi	r3, #138	; 0x8a
 80068d4:	6003      	strhi	r3, [r0, #0]
 80068d6:	700a      	strbls	r2, [r1, #0]
 80068d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80068dc:	bf98      	it	ls
 80068de:	2001      	movls	r0, #1
 80068e0:	4770      	bx	lr
 80068e2:	4608      	mov	r0, r1
 80068e4:	4770      	bx	lr

080068e6 <abort>:
 80068e6:	b508      	push	{r3, lr}
 80068e8:	2006      	movs	r0, #6
 80068ea:	f000 f82b 	bl	8006944 <raise>
 80068ee:	2001      	movs	r0, #1
 80068f0:	f7fa fbd2 	bl	8001098 <_exit>

080068f4 <_raise_r>:
 80068f4:	291f      	cmp	r1, #31
 80068f6:	b538      	push	{r3, r4, r5, lr}
 80068f8:	4604      	mov	r4, r0
 80068fa:	460d      	mov	r5, r1
 80068fc:	d904      	bls.n	8006908 <_raise_r+0x14>
 80068fe:	2316      	movs	r3, #22
 8006900:	6003      	str	r3, [r0, #0]
 8006902:	f04f 30ff 	mov.w	r0, #4294967295
 8006906:	bd38      	pop	{r3, r4, r5, pc}
 8006908:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800690a:	b112      	cbz	r2, 8006912 <_raise_r+0x1e>
 800690c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006910:	b94b      	cbnz	r3, 8006926 <_raise_r+0x32>
 8006912:	4620      	mov	r0, r4
 8006914:	f000 f830 	bl	8006978 <_getpid_r>
 8006918:	462a      	mov	r2, r5
 800691a:	4601      	mov	r1, r0
 800691c:	4620      	mov	r0, r4
 800691e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006922:	f000 b817 	b.w	8006954 <_kill_r>
 8006926:	2b01      	cmp	r3, #1
 8006928:	d00a      	beq.n	8006940 <_raise_r+0x4c>
 800692a:	1c59      	adds	r1, r3, #1
 800692c:	d103      	bne.n	8006936 <_raise_r+0x42>
 800692e:	2316      	movs	r3, #22
 8006930:	6003      	str	r3, [r0, #0]
 8006932:	2001      	movs	r0, #1
 8006934:	e7e7      	b.n	8006906 <_raise_r+0x12>
 8006936:	2400      	movs	r4, #0
 8006938:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800693c:	4628      	mov	r0, r5
 800693e:	4798      	blx	r3
 8006940:	2000      	movs	r0, #0
 8006942:	e7e0      	b.n	8006906 <_raise_r+0x12>

08006944 <raise>:
 8006944:	4b02      	ldr	r3, [pc, #8]	; (8006950 <raise+0xc>)
 8006946:	4601      	mov	r1, r0
 8006948:	6818      	ldr	r0, [r3, #0]
 800694a:	f7ff bfd3 	b.w	80068f4 <_raise_r>
 800694e:	bf00      	nop
 8006950:	2000000c 	.word	0x2000000c

08006954 <_kill_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	4d07      	ldr	r5, [pc, #28]	; (8006974 <_kill_r+0x20>)
 8006958:	2300      	movs	r3, #0
 800695a:	4604      	mov	r4, r0
 800695c:	4608      	mov	r0, r1
 800695e:	4611      	mov	r1, r2
 8006960:	602b      	str	r3, [r5, #0]
 8006962:	f7fa fb89 	bl	8001078 <_kill>
 8006966:	1c43      	adds	r3, r0, #1
 8006968:	d102      	bne.n	8006970 <_kill_r+0x1c>
 800696a:	682b      	ldr	r3, [r5, #0]
 800696c:	b103      	cbz	r3, 8006970 <_kill_r+0x1c>
 800696e:	6023      	str	r3, [r4, #0]
 8006970:	bd38      	pop	{r3, r4, r5, pc}
 8006972:	bf00      	nop
 8006974:	20000268 	.word	0x20000268

08006978 <_getpid_r>:
 8006978:	f7fa bb76 	b.w	8001068 <_getpid>

0800697c <_init>:
 800697c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697e:	bf00      	nop
 8006980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006982:	bc08      	pop	{r3}
 8006984:	469e      	mov	lr, r3
 8006986:	4770      	bx	lr

08006988 <_fini>:
 8006988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698a:	bf00      	nop
 800698c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800698e:	bc08      	pop	{r3}
 8006990:	469e      	mov	lr, r3
 8006992:	4770      	bx	lr
