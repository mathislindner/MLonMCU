
FFTProfiling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075f4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008cc0  08007780  08007780  00017780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010440  08010440  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08010440  08010440  00020440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010448  08010448  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010448  08010448  00020448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801044c  0801044c  0002044c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08010450  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  200001dc  0801062c  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  0801062c  0003025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0a4  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d93  00000000  00000000  0003c2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000940  00000000  00000000  0003e048  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000848  00000000  00000000  0003e988  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000260a6  00000000  00000000  0003f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000866e  00000000  00000000  00065276  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e7e9e  00000000  00000000  0006d8e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  00155782  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003384  00000000  00000000  00155870  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000005c6  00000000  00000000  00158bf4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007764 	.word	0x08007764

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	08007764 	.word	0x08007764

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b972 	b.w	8000e9c <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9e08      	ldr	r6, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	4688      	mov	r8, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14b      	bne.n	8000c76 <__udivmoddi4+0xa6>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4615      	mov	r5, r2
 8000be2:	d967      	bls.n	8000cb4 <__udivmoddi4+0xe4>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b14a      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bea:	f1c2 0720 	rsb	r7, r2, #32
 8000bee:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf2:	fa20 f707 	lsr.w	r7, r0, r7
 8000bf6:	4095      	lsls	r5, r2
 8000bf8:	ea47 0803 	orr.w	r8, r7, r3
 8000bfc:	4094      	lsls	r4, r2
 8000bfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c02:	0c23      	lsrs	r3, r4, #16
 8000c04:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c08:	fa1f fc85 	uxth.w	ip, r5
 8000c0c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c10:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c14:	fb07 f10c 	mul.w	r1, r7, ip
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x60>
 8000c1c:	18eb      	adds	r3, r5, r3
 8000c1e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c22:	f080 811b 	bcs.w	8000e5c <__udivmoddi4+0x28c>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 8118 	bls.w	8000e5c <__udivmoddi4+0x28c>
 8000c2c:	3f02      	subs	r7, #2
 8000c2e:	442b      	add	r3, r5
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c44:	45a4      	cmp	ip, r4
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x8c>
 8000c48:	192c      	adds	r4, r5, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	f080 8107 	bcs.w	8000e60 <__udivmoddi4+0x290>
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	f240 8104 	bls.w	8000e60 <__udivmoddi4+0x290>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	442c      	add	r4, r5
 8000c5c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c60:	eba4 040c 	sub.w	r4, r4, ip
 8000c64:	2700      	movs	r7, #0
 8000c66:	b11e      	cbz	r6, 8000c70 <__udivmoddi4+0xa0>
 8000c68:	40d4      	lsrs	r4, r2
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c70:	4639      	mov	r1, r7
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d909      	bls.n	8000c8e <__udivmoddi4+0xbe>
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f000 80eb 	beq.w	8000e56 <__udivmoddi4+0x286>
 8000c80:	2700      	movs	r7, #0
 8000c82:	e9c6 0100 	strd	r0, r1, [r6]
 8000c86:	4638      	mov	r0, r7
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	fab3 f783 	clz	r7, r3
 8000c92:	2f00      	cmp	r7, #0
 8000c94:	d147      	bne.n	8000d26 <__udivmoddi4+0x156>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xd0>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 80fa 	bhi.w	8000e94 <__udivmoddi4+0x2c4>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4698      	mov	r8, r3
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d0e0      	beq.n	8000c70 <__udivmoddi4+0xa0>
 8000cae:	e9c6 4800 	strd	r4, r8, [r6]
 8000cb2:	e7dd      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000cb4:	b902      	cbnz	r2, 8000cb8 <__udivmoddi4+0xe8>
 8000cb6:	deff      	udf	#255	; 0xff
 8000cb8:	fab2 f282 	clz	r2, r2
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	f040 808f 	bne.w	8000de0 <__udivmoddi4+0x210>
 8000cc2:	1b49      	subs	r1, r1, r5
 8000cc4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc8:	fa1f f885 	uxth.w	r8, r5
 8000ccc:	2701      	movs	r7, #1
 8000cce:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cd2:	0c23      	lsrs	r3, r4, #16
 8000cd4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x124>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x122>
 8000cec:	4299      	cmp	r1, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2bc>
 8000cf2:	4684      	mov	ip, r0
 8000cf4:	1a59      	subs	r1, r3, r1
 8000cf6:	b2a3      	uxth	r3, r4
 8000cf8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cfc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d00:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d04:	fb08 f800 	mul.w	r8, r8, r0
 8000d08:	45a0      	cmp	r8, r4
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x14c>
 8000d0c:	192c      	adds	r4, r5, r4
 8000d0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x14a>
 8000d14:	45a0      	cmp	r8, r4
 8000d16:	f200 80b6 	bhi.w	8000e86 <__udivmoddi4+0x2b6>
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	eba4 0408 	sub.w	r4, r4, r8
 8000d20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d24:	e79f      	b.n	8000c66 <__udivmoddi4+0x96>
 8000d26:	f1c7 0c20 	rsb	ip, r7, #32
 8000d2a:	40bb      	lsls	r3, r7
 8000d2c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d30:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d34:	fa01 f407 	lsl.w	r4, r1, r7
 8000d38:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d3c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d40:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d44:	4325      	orrs	r5, r4
 8000d46:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d4a:	0c2c      	lsrs	r4, r5, #16
 8000d4c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d50:	fa1f fa8e 	uxth.w	sl, lr
 8000d54:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d58:	fb09 f40a 	mul.w	r4, r9, sl
 8000d5c:	429c      	cmp	r4, r3
 8000d5e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d62:	fa00 f107 	lsl.w	r1, r0, r7
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b0>
 8000d68:	eb1e 0303 	adds.w	r3, lr, r3
 8000d6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d70:	f080 8087 	bcs.w	8000e82 <__udivmoddi4+0x2b2>
 8000d74:	429c      	cmp	r4, r3
 8000d76:	f240 8084 	bls.w	8000e82 <__udivmoddi4+0x2b2>
 8000d7a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d7e:	4473      	add	r3, lr
 8000d80:	1b1b      	subs	r3, r3, r4
 8000d82:	b2ad      	uxth	r5, r5
 8000d84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d88:	fb08 3310 	mls	r3, r8, r0, r3
 8000d8c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d90:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d94:	45a2      	cmp	sl, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1da>
 8000d98:	eb1e 0404 	adds.w	r4, lr, r4
 8000d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da0:	d26b      	bcs.n	8000e7a <__udivmoddi4+0x2aa>
 8000da2:	45a2      	cmp	sl, r4
 8000da4:	d969      	bls.n	8000e7a <__udivmoddi4+0x2aa>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4474      	add	r4, lr
 8000daa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dae:	fba0 8902 	umull	r8, r9, r0, r2
 8000db2:	eba4 040a 	sub.w	r4, r4, sl
 8000db6:	454c      	cmp	r4, r9
 8000db8:	46c2      	mov	sl, r8
 8000dba:	464b      	mov	r3, r9
 8000dbc:	d354      	bcc.n	8000e68 <__udivmoddi4+0x298>
 8000dbe:	d051      	beq.n	8000e64 <__udivmoddi4+0x294>
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d069      	beq.n	8000e98 <__udivmoddi4+0x2c8>
 8000dc4:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dcc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd0:	40fd      	lsrs	r5, r7
 8000dd2:	40fc      	lsrs	r4, r7
 8000dd4:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd8:	e9c6 5400 	strd	r5, r4, [r6]
 8000ddc:	2700      	movs	r7, #0
 8000dde:	e747      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f703 	lsr.w	r7, r0, r3
 8000de8:	4095      	lsls	r5, r2
 8000dea:	fa01 f002 	lsl.w	r0, r1, r2
 8000dee:	fa21 f303 	lsr.w	r3, r1, r3
 8000df2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df6:	4338      	orrs	r0, r7
 8000df8:	0c01      	lsrs	r1, r0, #16
 8000dfa:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dfe:	fa1f f885 	uxth.w	r8, r5
 8000e02:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0a:	fb07 f308 	mul.w	r3, r7, r8
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x256>
 8000e16:	1869      	adds	r1, r5, r1
 8000e18:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e1c:	d22f      	bcs.n	8000e7e <__udivmoddi4+0x2ae>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d92d      	bls.n	8000e7e <__udivmoddi4+0x2ae>
 8000e22:	3f02      	subs	r7, #2
 8000e24:	4429      	add	r1, r5
 8000e26:	1acb      	subs	r3, r1, r3
 8000e28:	b281      	uxth	r1, r0
 8000e2a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e36:	fb00 f308 	mul.w	r3, r0, r8
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x27e>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e44:	d217      	bcs.n	8000e76 <__udivmoddi4+0x2a6>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d915      	bls.n	8000e76 <__udivmoddi4+0x2a6>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1ac9      	subs	r1, r1, r3
 8000e50:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e54:	e73b      	b.n	8000cce <__udivmoddi4+0xfe>
 8000e56:	4637      	mov	r7, r6
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e709      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000e5c:	4607      	mov	r7, r0
 8000e5e:	e6e7      	b.n	8000c30 <__udivmoddi4+0x60>
 8000e60:	4618      	mov	r0, r3
 8000e62:	e6fb      	b.n	8000c5c <__udivmoddi4+0x8c>
 8000e64:	4541      	cmp	r1, r8
 8000e66:	d2ab      	bcs.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e68:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e6c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e70:	3801      	subs	r0, #1
 8000e72:	4613      	mov	r3, r2
 8000e74:	e7a4      	b.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e76:	4660      	mov	r0, ip
 8000e78:	e7e9      	b.n	8000e4e <__udivmoddi4+0x27e>
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	e795      	b.n	8000daa <__udivmoddi4+0x1da>
 8000e7e:	4667      	mov	r7, ip
 8000e80:	e7d1      	b.n	8000e26 <__udivmoddi4+0x256>
 8000e82:	4681      	mov	r9, r0
 8000e84:	e77c      	b.n	8000d80 <__udivmoddi4+0x1b0>
 8000e86:	3802      	subs	r0, #2
 8000e88:	442c      	add	r4, r5
 8000e8a:	e747      	b.n	8000d1c <__udivmoddi4+0x14c>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	442b      	add	r3, r5
 8000e92:	e72f      	b.n	8000cf4 <__udivmoddi4+0x124>
 8000e94:	4638      	mov	r0, r7
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xda>
 8000e98:	4637      	mov	r7, r6
 8000e9a:	e6e9      	b.n	8000c70 <__udivmoddi4+0xa0>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <Fft_transform>:
// Private function prototypes
static size_t reverse_bits(size_t x, int n);
static void *memdup(const void *src, size_t n);


bool Fft_transform(float real[], float imag[], size_t n) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
	if (n == 0)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <Fft_transform+0x16>
		return true;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e012      	b.n	8000edc <Fft_transform+0x3c>
	else if ((n & (n - 1)) == 0)  // Is power of 2
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	1e5a      	subs	r2, r3, #1
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d106      	bne.n	8000ed0 <Fft_transform+0x30>
		return Fft_transformRadix2(real, imag, n);
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	f000 f84e 	bl	8000f68 <Fft_transformRadix2>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	e005      	b.n	8000edc <Fft_transform+0x3c>
	else  // More complicated algorithm for arbitrary sizes
		return Fft_transformBluestein(real, imag, n);
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	68b9      	ldr	r1, [r7, #8]
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f000 f9f3 	bl	80012c0 <Fft_transformBluestein>
 8000eda:	4603      	mov	r3, r0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <Fft_inverseTransform>:

bool Fft_inverseTransform(float real[], float imag[], size_t n) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
	bool returnValue = Fft_transform(imag, real, n);
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	68f9      	ldr	r1, [r7, #12]
 8000ef4:	68b8      	ldr	r0, [r7, #8]
 8000ef6:	f7ff ffd3 	bl	8000ea0 <Fft_transform>
 8000efa:	4603      	mov	r3, r0
 8000efc:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<n;i++){
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	e028      	b.n	8000f56 <Fft_inverseTransform+0x72>
        imag[i] /= n;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	edd3 6a00 	vldr	s13, [r3]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	ee07 3a90 	vmov	s15, r3
 8000f16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	4413      	add	r3, r2
 8000f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f26:	edc3 7a00 	vstr	s15, [r3]
        real[i] /= n;
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	4413      	add	r3, r2
 8000f32:	edd3 6a00 	vldr	s13, [r3]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	ee07 3a90 	vmov	s15, r3
 8000f3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f4c:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0;i<n;i++){
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3301      	adds	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d8d2      	bhi.n	8000f04 <Fft_inverseTransform+0x20>
	}
	return returnValue;
 8000f5e:	7cfb      	ldrb	r3, [r7, #19]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <Fft_transformRadix2>:

bool Fft_transformRadix2(float real[], float imag[], size_t n) {
 8000f68:	b5b0      	push	{r4, r5, r7, lr}
 8000f6a:	b098      	sub	sp, #96	; 0x60
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
	// Length variables
	bool status = false;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int levels = 0;  // Compute levels = floor(log2(n))
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
	for (size_t i = n; i > 1U; i >>= 1){
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	65bb      	str	r3, [r7, #88]	; 0x58
 8000f82:	e005      	b.n	8000f90 <Fft_transformRadix2+0x28>
		levels++;
 8000f84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f86:	3301      	adds	r3, #1
 8000f88:	65fb      	str	r3, [r7, #92]	; 0x5c
	for (size_t i = n; i > 1U; i >>= 1){
 8000f8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f8c:	085b      	lsrs	r3, r3, #1
 8000f8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000f90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d8f6      	bhi.n	8000f84 <Fft_transformRadix2+0x1c>
	}
	if ((size_t)1U << levels != n){
 8000f96:	2201      	movs	r2, #1
 8000f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d001      	beq.n	8000fa8 <Fft_transformRadix2+0x40>
		return false;  // n is not a power of 2
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	e180      	b.n	80012aa <Fft_transformRadix2+0x342>
	}
	// Trignometric tables
	if (SIZE_MAX / sizeof(float) < n / 2){
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	da01      	bge.n	8000fb2 <Fft_transformRadix2+0x4a>
		return false;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e17b      	b.n	80012aa <Fft_transformRadix2+0x342>
	}
	size_t size = (n / 2) * sizeof(float);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	085b      	lsrs	r3, r3, #1
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	63bb      	str	r3, [r7, #56]	; 0x38
	float *cos_table = malloc(size);
 8000fba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000fbc:	f003 f9fe 	bl	80043bc <malloc>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	637b      	str	r3, [r7, #52]	; 0x34
	float *sin_table = malloc(size);
 8000fc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000fc6:	f003 f9f9 	bl	80043bc <malloc>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	633b      	str	r3, [r7, #48]	; 0x30
	if (cos_table == NULL || sin_table == NULL){
 8000fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d002      	beq.n	8000fda <Fft_transformRadix2+0x72>
 8000fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d108      	bne.n	8000fec <Fft_transformRadix2+0x84>
			free(cos_table);
 8000fda:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000fdc:	f003 f9f6 	bl	80043cc <free>
			free(sin_table);
 8000fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000fe2:	f003 f9f3 	bl	80043cc <free>
			return status;
 8000fe6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000fea:	e15e      	b.n	80012aa <Fft_transformRadix2+0x342>
	}
	for (size_t i = 0; i < n / 2; i++) {
 8000fec:	2300      	movs	r3, #0
 8000fee:	657b      	str	r3, [r7, #84]	; 0x54
 8000ff0:	e054      	b.n	800109c <Fft_transformRadix2+0x134>
		cos_table[i] = cos(2 * PI * i / n);
 8000ff2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000ff4:	f7ff fa32 	bl	800045c <__aeabi_ui2d>
 8000ff8:	a3af      	add	r3, pc, #700	; (adr r3, 80012b8 <Fft_transformRadix2+0x350>)
 8000ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffe:	f7ff faa7 	bl	8000550 <__aeabi_dmul>
 8001002:	4603      	mov	r3, r0
 8001004:	460c      	mov	r4, r1
 8001006:	4625      	mov	r5, r4
 8001008:	461c      	mov	r4, r3
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff fa26 	bl	800045c <__aeabi_ui2d>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	4620      	mov	r0, r4
 8001016:	4629      	mov	r1, r5
 8001018:	f7ff fbc4 	bl	80007a4 <__aeabi_ddiv>
 800101c:	4603      	mov	r3, r0
 800101e:	460c      	mov	r4, r1
 8001020:	ec44 3b17 	vmov	d7, r3, r4
 8001024:	eeb0 0a47 	vmov.f32	s0, s14
 8001028:	eef0 0a67 	vmov.f32	s1, s15
 800102c:	f005 fb44 	bl	80066b8 <cos>
 8001030:	ec51 0b10 	vmov	r0, r1, d0
 8001034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800103a:	18d4      	adds	r4, r2, r3
 800103c:	f7ff fd60 	bl	8000b00 <__aeabi_d2f>
 8001040:	4603      	mov	r3, r0
 8001042:	6023      	str	r3, [r4, #0]
		sin_table[i] = sin(2 * PI * i / n);
 8001044:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001046:	f7ff fa09 	bl	800045c <__aeabi_ui2d>
 800104a:	a39b      	add	r3, pc, #620	; (adr r3, 80012b8 <Fft_transformRadix2+0x350>)
 800104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001050:	f7ff fa7e 	bl	8000550 <__aeabi_dmul>
 8001054:	4603      	mov	r3, r0
 8001056:	460c      	mov	r4, r1
 8001058:	4625      	mov	r5, r4
 800105a:	461c      	mov	r4, r3
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff f9fd 	bl	800045c <__aeabi_ui2d>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4620      	mov	r0, r4
 8001068:	4629      	mov	r1, r5
 800106a:	f7ff fb9b 	bl	80007a4 <__aeabi_ddiv>
 800106e:	4603      	mov	r3, r0
 8001070:	460c      	mov	r4, r1
 8001072:	ec44 3b17 	vmov	d7, r3, r4
 8001076:	eeb0 0a47 	vmov.f32	s0, s14
 800107a:	eef0 0a67 	vmov.f32	s1, s15
 800107e:	f005 fb5f 	bl	8006740 <sin>
 8001082:	ec51 0b10 	vmov	r0, r1, d0
 8001086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800108c:	18d4      	adds	r4, r2, r3
 800108e:	f7ff fd37 	bl	8000b00 <__aeabi_d2f>
 8001092:	4603      	mov	r3, r0
 8001094:	6023      	str	r3, [r4, #0]
	for (size_t i = 0; i < n / 2; i++) {
 8001096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001098:	3301      	adds	r3, #1
 800109a:	657b      	str	r3, [r7, #84]	; 0x54
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	085b      	lsrs	r3, r3, #1
 80010a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d3a5      	bcc.n	8000ff2 <Fft_transformRadix2+0x8a>
	}

	// Bit-reversed addressing permutation
	for (size_t i = 0; i < n; i++) {
 80010a6:	2300      	movs	r3, #0
 80010a8:	653b      	str	r3, [r7, #80]	; 0x50
 80010aa:	e037      	b.n	800111c <Fft_transformRadix2+0x1b4>
		size_t j = reverse_bits(i, levels);
 80010ac:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80010ae:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80010b0:	f000 fc05 	bl	80018be <reverse_bits>
 80010b4:	61b8      	str	r0, [r7, #24]
		if (j > i) {
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d92b      	bls.n	8001116 <Fft_transformRadix2+0x1ae>
			float temp = real[i];
 80010be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	4413      	add	r3, r2
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	617b      	str	r3, [r7, #20]
			real[i] = real[j];
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	441a      	add	r2, r3
 80010d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	68f9      	ldr	r1, [r7, #12]
 80010d8:	440b      	add	r3, r1
 80010da:	6812      	ldr	r2, [r2, #0]
 80010dc:	601a      	str	r2, [r3, #0]
			real[j] = temp;
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	4413      	add	r3, r2
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	601a      	str	r2, [r3, #0]
			temp = imag[i];
 80010ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	4413      	add	r3, r2
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	617b      	str	r3, [r7, #20]
			imag[i] = imag[j];
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	441a      	add	r2, r3
 80010fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	68b9      	ldr	r1, [r7, #8]
 8001104:	440b      	add	r3, r1
 8001106:	6812      	ldr	r2, [r2, #0]
 8001108:	601a      	str	r2, [r3, #0]
			imag[j] = temp;
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < n; i++) {
 8001116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001118:	3301      	adds	r3, #1
 800111a:	653b      	str	r3, [r7, #80]	; 0x50
 800111c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	429a      	cmp	r2, r3
 8001122:	d3c3      	bcc.n	80010ac <Fft_transformRadix2+0x144>
		}
	}

	// Cooley-Tukey decimation-in-time radix-2 FFT
	for (size_t size = 2; size <= n; size *= 2) {
 8001124:	2302      	movs	r3, #2
 8001126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001128:	e0b3      	b.n	8001292 <Fft_transformRadix2+0x32a>
		size_t halfsize = size / 2;
 800112a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800112c:	085b      	lsrs	r3, r3, #1
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
		size_t tablestep = n / size;
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001134:	fbb2 f3f3 	udiv	r3, r2, r3
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
		for (size_t i = 0; i < n; i += size) {
 800113a:	2300      	movs	r3, #0
 800113c:	64bb      	str	r3, [r7, #72]	; 0x48
 800113e:	e09c      	b.n	800127a <Fft_transformRadix2+0x312>
			for (size_t j = i, k = 0; j < i + halfsize; j++, k += tablestep) {
 8001140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001142:	647b      	str	r3, [r7, #68]	; 0x44
 8001144:	2300      	movs	r3, #0
 8001146:	643b      	str	r3, [r7, #64]	; 0x40
 8001148:	e08c      	b.n	8001264 <Fft_transformRadix2+0x2fc>
				size_t l = j + halfsize;
 800114a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800114c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114e:	4413      	add	r3, r2
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
				float tpre =  real[l] * cos_table[k] + imag[l] * sin_table[k];
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	4413      	add	r3, r2
 800115a:	ed93 7a00 	vldr	s14, [r3]
 800115e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001164:	4413      	add	r3, r2
 8001166:	edd3 7a00 	vldr	s15, [r3]
 800116a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	4413      	add	r3, r2
 8001176:	edd3 6a00 	vldr	s13, [r3]
 800117a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001180:	4413      	add	r3, r2
 8001182:	edd3 7a00 	vldr	s15, [r3]
 8001186:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800118a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800118e:	edc7 7a08 	vstr	s15, [r7, #32]
				float tpim = -real[l] * sin_table[k] + imag[l] * cos_table[k];
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	4413      	add	r3, r2
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	eeb1 7a67 	vneg.f32	s14, s15
 80011a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011a8:	4413      	add	r3, r2
 80011aa:	edd3 7a00 	vldr	s15, [r3]
 80011ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	4413      	add	r3, r2
 80011ba:	edd3 6a00 	vldr	s13, [r3]
 80011be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011c4:	4413      	add	r3, r2
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d2:	edc7 7a07 	vstr	s15, [r7, #28]
				real[l] = real[j] - tpre;
 80011d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	4413      	add	r3, r2
 80011de:	ed93 7a00 	vldr	s14, [r3]
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	4413      	add	r3, r2
 80011ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80011ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f2:	edc3 7a00 	vstr	s15, [r3]
				imag[l] = imag[j] - tpim;
 80011f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	4413      	add	r3, r2
 80011fe:	ed93 7a00 	vldr	s14, [r3]
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	4413      	add	r3, r2
 800120a:	edd7 7a07 	vldr	s15, [r7, #28]
 800120e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001212:	edc3 7a00 	vstr	s15, [r3]
				real[j] += tpre;
 8001216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	4413      	add	r3, r2
 800121e:	ed93 7a00 	vldr	s14, [r3]
 8001222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	4413      	add	r3, r2
 800122a:	edd7 7a08 	vldr	s15, [r7, #32]
 800122e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001232:	edc3 7a00 	vstr	s15, [r3]
				imag[j] += tpim;
 8001236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	4413      	add	r3, r2
 800123e:	ed93 7a00 	vldr	s14, [r3]
 8001242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	4413      	add	r3, r2
 800124a:	edd7 7a07 	vldr	s15, [r7, #28]
 800124e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001252:	edc3 7a00 	vstr	s15, [r3]
			for (size_t j = i, k = 0; j < i + halfsize; j++, k += tablestep) {
 8001256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001258:	3301      	adds	r3, #1
 800125a:	647b      	str	r3, [r7, #68]	; 0x44
 800125c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001260:	4413      	add	r3, r2
 8001262:	643b      	str	r3, [r7, #64]	; 0x40
 8001264:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001268:	4413      	add	r3, r2
 800126a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800126c:	429a      	cmp	r2, r3
 800126e:	f4ff af6c 	bcc.w	800114a <Fft_transformRadix2+0x1e2>
		for (size_t i = 0; i < n; i += size) {
 8001272:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001276:	4413      	add	r3, r2
 8001278:	64bb      	str	r3, [r7, #72]	; 0x48
 800127a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	429a      	cmp	r2, r3
 8001280:	f4ff af5e 	bcc.w	8001140 <Fft_transformRadix2+0x1d8>
			}
		}
		if (size == n)  // Prevent overflow in 'size *= 2'
 8001284:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	429a      	cmp	r2, r3
 800128a:	d008      	beq.n	800129e <Fft_transformRadix2+0x336>
	for (size_t size = 2; size <= n; size *= 2) {
 800128c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001292:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	429a      	cmp	r2, r3
 8001298:	f67f af47 	bls.w	800112a <Fft_transformRadix2+0x1c2>
 800129c:	e000      	b.n	80012a0 <Fft_transformRadix2+0x338>
			break;
 800129e:	bf00      	nop
	}
	status = true;
 80012a0:	2301      	movs	r3, #1
 80012a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	return status;
 80012a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3760      	adds	r7, #96	; 0x60
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bdb0      	pop	{r4, r5, r7, pc}
 80012b2:	bf00      	nop
 80012b4:	f3af 8000 	nop.w
 80012b8:	54442eea 	.word	0x54442eea
 80012bc:	401921fb 	.word	0x401921fb

080012c0 <Fft_transformBluestein>:


bool Fft_transformBluestein(float real[], float imag[], size_t n) {
 80012c0:	b5b0      	push	{r4, r5, r7, lr}
 80012c2:	b09c      	sub	sp, #112	; 0x70
 80012c4:	af04      	add	r7, sp, #16
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
	bool status = false;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	// Find a power-of-2 convolution length m such that m >= n * 2 + 1
	size_t m = 1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	65bb      	str	r3, [r7, #88]	; 0x58
	while (m / 2 <= n) {
 80012d6:	e007      	b.n	80012e8 <Fft_transformBluestein+0x28>
		if (m > SIZE_MAX / 2)
 80012d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012da:	2b00      	cmp	r3, #0
 80012dc:	da01      	bge.n	80012e2 <Fft_transformBluestein+0x22>
			return false;
 80012de:	2300      	movs	r3, #0
 80012e0:	e1e7      	b.n	80016b2 <Fft_transformBluestein+0x3f2>
		m *= 2;
 80012e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	65bb      	str	r3, [r7, #88]	; 0x58
	while (m / 2 <= n) {
 80012e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012ea:	085b      	lsrs	r3, r3, #1
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d2f2      	bcs.n	80012d8 <Fft_transformBluestein+0x18>
	}

	// Allocate memory
	if (SIZE_MAX / sizeof(float) < n || SIZE_MAX / sizeof(float) < m)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f8:	d203      	bcs.n	8001302 <Fft_transformBluestein+0x42>
 80012fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001300:	d301      	bcc.n	8001306 <Fft_transformBluestein+0x46>
		return false;
 8001302:	2300      	movs	r3, #0
 8001304:	e1d5      	b.n	80016b2 <Fft_transformBluestein+0x3f2>
	size_t size_n = n * sizeof(float);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	647b      	str	r3, [r7, #68]	; 0x44
	size_t size_m = m * sizeof(float);
 800130c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	643b      	str	r3, [r7, #64]	; 0x40
	float *cos_table = malloc(size_n);
 8001312:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001314:	f003 f852 	bl	80043bc <malloc>
 8001318:	4603      	mov	r3, r0
 800131a:	63fb      	str	r3, [r7, #60]	; 0x3c
	float *sin_table = malloc(size_n);
 800131c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800131e:	f003 f84d 	bl	80043bc <malloc>
 8001322:	4603      	mov	r3, r0
 8001324:	63bb      	str	r3, [r7, #56]	; 0x38
	float *areal = calloc(m, sizeof(float));
 8001326:	2104      	movs	r1, #4
 8001328:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800132a:	f003 f815 	bl	8004358 <calloc>
 800132e:	4603      	mov	r3, r0
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
	float *aimag = calloc(m, sizeof(float));
 8001332:	2104      	movs	r1, #4
 8001334:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001336:	f003 f80f 	bl	8004358 <calloc>
 800133a:	4603      	mov	r3, r0
 800133c:	633b      	str	r3, [r7, #48]	; 0x30
	float *breal = calloc(m, sizeof(float));
 800133e:	2104      	movs	r1, #4
 8001340:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001342:	f003 f809 	bl	8004358 <calloc>
 8001346:	4603      	mov	r3, r0
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
	float *bimag = calloc(m, sizeof(float));
 800134a:	2104      	movs	r1, #4
 800134c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800134e:	f003 f803 	bl	8004358 <calloc>
 8001352:	4603      	mov	r3, r0
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
	float *creal = malloc(size_m);
 8001356:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001358:	f003 f830 	bl	80043bc <malloc>
 800135c:	4603      	mov	r3, r0
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
	float *cimag = malloc(size_m);
 8001360:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001362:	f003 f82b 	bl	80043bc <malloc>
 8001366:	4603      	mov	r3, r0
 8001368:	623b      	str	r3, [r7, #32]
	if (cos_table == NULL || sin_table == NULL
 800136a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 8183 	beq.w	8001678 <Fft_transformBluestein+0x3b8>
 8001372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 817f 	beq.w	8001678 <Fft_transformBluestein+0x3b8>
			|| areal == NULL || aimag == NULL
 800137a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 817b 	beq.w	8001678 <Fft_transformBluestein+0x3b8>
 8001382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 8177 	beq.w	8001678 <Fft_transformBluestein+0x3b8>
			|| breal == NULL || bimag == NULL
 800138a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 8173 	beq.w	8001678 <Fft_transformBluestein+0x3b8>
 8001392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 816f 	beq.w	8001678 <Fft_transformBluestein+0x3b8>
			|| creal == NULL || cimag == NULL)
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 816b 	beq.w	8001678 <Fft_transformBluestein+0x3b8>
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 8167 	beq.w	8001678 <Fft_transformBluestein+0x3b8>
		goto cleanup;

	// Trignometric tables
	for (size_t i = 0; i < n; i++) {
 80013aa:	2300      	movs	r3, #0
 80013ac:	657b      	str	r3, [r7, #84]	; 0x54
 80013ae:	e06b      	b.n	8001488 <Fft_transformBluestein+0x1c8>
		unsigned long long temp = (unsigned long long)i * i;
 80013b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013b2:	4619      	mov	r1, r3
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ba:	f04f 0400 	mov.w	r4, #0
 80013be:	fb03 f502 	mul.w	r5, r3, r2
 80013c2:	fb01 f004 	mul.w	r0, r1, r4
 80013c6:	4428      	add	r0, r5
 80013c8:	fba1 3403 	umull	r3, r4, r1, r3
 80013cc:	1902      	adds	r2, r0, r4
 80013ce:	4614      	mov	r4, r2
 80013d0:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80013d4:	e9c7 3406 	strd	r3, r4, [r7, #24]
		temp %= (unsigned long long)n * 2;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4619      	mov	r1, r3
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	184b      	adds	r3, r1, r1
 80013e2:	eb42 0402 	adc.w	r4, r2, r2
 80013e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013ea:	461a      	mov	r2, r3
 80013ec:	4623      	mov	r3, r4
 80013ee:	f7ff fbd7 	bl	8000ba0 <__aeabi_uldivmod>
 80013f2:	461c      	mov	r4, r3
 80013f4:	4613      	mov	r3, r2
 80013f6:	e9c7 3406 	strd	r3, r4, [r7, #24]
		float angle = PI * temp / n;
 80013fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013fe:	f7ff f871 	bl	80004e4 <__aeabi_ul2d>
 8001402:	a3af      	add	r3, pc, #700	; (adr r3, 80016c0 <Fft_transformBluestein+0x400>)
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	f7ff f8a2 	bl	8000550 <__aeabi_dmul>
 800140c:	4603      	mov	r3, r0
 800140e:	460c      	mov	r4, r1
 8001410:	4625      	mov	r5, r4
 8001412:	461c      	mov	r4, r3
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff f821 	bl	800045c <__aeabi_ui2d>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4620      	mov	r0, r4
 8001420:	4629      	mov	r1, r5
 8001422:	f7ff f9bf 	bl	80007a4 <__aeabi_ddiv>
 8001426:	4603      	mov	r3, r0
 8001428:	460c      	mov	r4, r1
 800142a:	4618      	mov	r0, r3
 800142c:	4621      	mov	r1, r4
 800142e:	f7ff fb67 	bl	8000b00 <__aeabi_d2f>
 8001432:	4603      	mov	r3, r0
 8001434:	617b      	str	r3, [r7, #20]
		// Less accurate version if long long is unavailable: float angle = PI * i * i / n;
		cos_table[i] = cos(angle);
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff f832 	bl	80004a0 <__aeabi_f2d>
 800143c:	4603      	mov	r3, r0
 800143e:	460c      	mov	r4, r1
 8001440:	ec44 3b10 	vmov	d0, r3, r4
 8001444:	f005 f938 	bl	80066b8 <cos>
 8001448:	ec51 0b10 	vmov	r0, r1, d0
 800144c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001452:	18d4      	adds	r4, r2, r3
 8001454:	f7ff fb54 	bl	8000b00 <__aeabi_d2f>
 8001458:	4603      	mov	r3, r0
 800145a:	6023      	str	r3, [r4, #0]
		sin_table[i] = sin(angle);
 800145c:	6978      	ldr	r0, [r7, #20]
 800145e:	f7ff f81f 	bl	80004a0 <__aeabi_f2d>
 8001462:	4603      	mov	r3, r0
 8001464:	460c      	mov	r4, r1
 8001466:	ec44 3b10 	vmov	d0, r3, r4
 800146a:	f005 f969 	bl	8006740 <sin>
 800146e:	ec51 0b10 	vmov	r0, r1, d0
 8001472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001478:	18d4      	adds	r4, r2, r3
 800147a:	f7ff fb41 	bl	8000b00 <__aeabi_d2f>
 800147e:	4603      	mov	r3, r0
 8001480:	6023      	str	r3, [r4, #0]
	for (size_t i = 0; i < n; i++) {
 8001482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001484:	3301      	adds	r3, #1
 8001486:	657b      	str	r3, [r7, #84]	; 0x54
 8001488:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	429a      	cmp	r2, r3
 800148e:	d38f      	bcc.n	80013b0 <Fft_transformBluestein+0xf0>
	}

	// Temporary vectors and preprocessing
	for (size_t i = 0; i < n; i++) {
 8001490:	2300      	movs	r3, #0
 8001492:	653b      	str	r3, [r7, #80]	; 0x50
 8001494:	e04c      	b.n	8001530 <Fft_transformBluestein+0x270>
		areal[i] =  real[i] * cos_table[i] + imag[i] * sin_table[i];
 8001496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	4413      	add	r3, r2
 800149e:	ed93 7a00 	vldr	s14, [r3]
 80014a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014a8:	4413      	add	r3, r2
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	4413      	add	r3, r2
 80014ba:	edd3 6a00 	vldr	s13, [r3]
 80014be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014c4:	4413      	add	r3, r2
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014d4:	4413      	add	r3, r2
 80014d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014da:	edc3 7a00 	vstr	s15, [r3]
		aimag[i] = -real[i] * sin_table[i] + imag[i] * cos_table[i];
 80014de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	4413      	add	r3, r2
 80014e6:	edd3 7a00 	vldr	s15, [r3]
 80014ea:	eeb1 7a67 	vneg.f32	s14, s15
 80014ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014f4:	4413      	add	r3, r2
 80014f6:	edd3 7a00 	vldr	s15, [r3]
 80014fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	4413      	add	r3, r2
 8001506:	edd3 6a00 	vldr	s13, [r3]
 800150a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001510:	4413      	add	r3, r2
 8001512:	edd3 7a00 	vldr	s15, [r3]
 8001516:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800151a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001520:	4413      	add	r3, r2
 8001522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001526:	edc3 7a00 	vstr	s15, [r3]
	for (size_t i = 0; i < n; i++) {
 800152a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800152c:	3301      	adds	r3, #1
 800152e:	653b      	str	r3, [r7, #80]	; 0x50
 8001530:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	429a      	cmp	r2, r3
 8001536:	d3ae      	bcc.n	8001496 <Fft_transformBluestein+0x1d6>
	}
	breal[0] = cos_table[0];
 8001538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153e:	601a      	str	r2, [r3, #0]
	bimag[0] = sin_table[0];
 8001540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001546:	601a      	str	r2, [r3, #0]
	for (size_t i = 1; i < n; i++) {
 8001548:	2301      	movs	r3, #1
 800154a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800154c:	e026      	b.n	800159c <Fft_transformBluestein+0x2dc>
		breal[i] = breal[m - i] = cos_table[i];
 800154e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001554:	441a      	add	r2, r3
 8001556:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800155a:	1acb      	subs	r3, r1, r3
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001560:	440b      	add	r3, r1
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001568:	0092      	lsls	r2, r2, #2
 800156a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800156c:	440a      	add	r2, r1
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6013      	str	r3, [r2, #0]
		bimag[i] = bimag[m - i] = sin_table[i];
 8001572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001578:	441a      	add	r2, r3
 800157a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800157c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800157e:	1acb      	subs	r3, r1, r3
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001584:	440b      	add	r3, r1
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800158c:	0092      	lsls	r2, r2, #2
 800158e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001590:	440a      	add	r2, r1
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6013      	str	r3, [r2, #0]
	for (size_t i = 1; i < n; i++) {
 8001596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001598:	3301      	adds	r3, #1
 800159a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800159c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d3d4      	bcc.n	800154e <Fft_transformBluestein+0x28e>
	}

	// Convolution
	if (!Fft_convolveComplex(areal, aimag, breal, bimag, creal, cimag, m))
 80015a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015a6:	9302      	str	r3, [sp, #8]
 80015a8:	6a3b      	ldr	r3, [r7, #32]
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80015b8:	f000 f886 	bl	80016c8 <Fft_convolveComplex>
 80015bc:	4603      	mov	r3, r0
 80015be:	f083 0301 	eor.w	r3, r3, #1
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d159      	bne.n	800167c <Fft_transformBluestein+0x3bc>
		goto cleanup;

	// Postprocessing
	for (size_t i = 0; i < n; i++) {
 80015c8:	2300      	movs	r3, #0
 80015ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80015cc:	e04c      	b.n	8001668 <Fft_transformBluestein+0x3a8>
		real[i] =  creal[i] * cos_table[i] + cimag[i] * sin_table[i];
 80015ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d4:	4413      	add	r3, r2
 80015d6:	ed93 7a00 	vldr	s14, [r3]
 80015da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015e0:	4413      	add	r3, r2
 80015e2:	edd3 7a00 	vldr	s15, [r3]
 80015e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	6a3a      	ldr	r2, [r7, #32]
 80015f0:	4413      	add	r3, r2
 80015f2:	edd3 6a00 	vldr	s13, [r3]
 80015f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015fc:	4413      	add	r3, r2
 80015fe:	edd3 7a00 	vldr	s15, [r3]
 8001602:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	4413      	add	r3, r2
 800160e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001612:	edc3 7a00 	vstr	s15, [r3]
		imag[i] = -creal[i] * sin_table[i] + cimag[i] * cos_table[i];
 8001616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161c:	4413      	add	r3, r2
 800161e:	edd3 7a00 	vldr	s15, [r3]
 8001622:	eeb1 7a67 	vneg.f32	s14, s15
 8001626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800162c:	4413      	add	r3, r2
 800162e:	edd3 7a00 	vldr	s15, [r3]
 8001632:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	6a3a      	ldr	r2, [r7, #32]
 800163c:	4413      	add	r3, r2
 800163e:	edd3 6a00 	vldr	s13, [r3]
 8001642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001648:	4413      	add	r3, r2
 800164a:	edd3 7a00 	vldr	s15, [r3]
 800164e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	4413      	add	r3, r2
 800165a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800165e:	edc3 7a00 	vstr	s15, [r3]
	for (size_t i = 0; i < n; i++) {
 8001662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001664:	3301      	adds	r3, #1
 8001666:	64bb      	str	r3, [r7, #72]	; 0x48
 8001668:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	429a      	cmp	r2, r3
 800166e:	d3ae      	bcc.n	80015ce <Fft_transformBluestein+0x30e>
	}
	status = true;
 8001670:	2301      	movs	r3, #1
 8001672:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001676:	e002      	b.n	800167e <Fft_transformBluestein+0x3be>

	// Deallocation
cleanup:
 8001678:	bf00      	nop
 800167a:	e000      	b.n	800167e <Fft_transformBluestein+0x3be>
		goto cleanup;
 800167c:	bf00      	nop
	free(cimag);
 800167e:	6a38      	ldr	r0, [r7, #32]
 8001680:	f002 fea4 	bl	80043cc <free>
	free(creal);
 8001684:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001686:	f002 fea1 	bl	80043cc <free>
	free(bimag);
 800168a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800168c:	f002 fe9e 	bl	80043cc <free>
	free(breal);
 8001690:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001692:	f002 fe9b 	bl	80043cc <free>
	free(aimag);
 8001696:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001698:	f002 fe98 	bl	80043cc <free>
	free(areal);
 800169c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800169e:	f002 fe95 	bl	80043cc <free>
	free(sin_table);
 80016a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80016a4:	f002 fe92 	bl	80043cc <free>
	free(cos_table);
 80016a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80016aa:	f002 fe8f 	bl	80043cc <free>
	return status;
 80016ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3760      	adds	r7, #96	; 0x60
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bdb0      	pop	{r4, r5, r7, pc}
 80016ba:	bf00      	nop
 80016bc:	f3af 8000 	nop.w
 80016c0:	54442eea 	.word	0x54442eea
 80016c4:	400921fb 	.word	0x400921fb

080016c8 <Fft_convolveComplex>:


bool Fft_convolveComplex(
		const float xreal[], const float ximag[],
		const float yreal[], const float yimag[],
		float outreal[], float outimag[], size_t n) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08e      	sub	sp, #56	; 0x38
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
 80016d4:	603b      	str	r3, [r7, #0]

	bool status = false;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (SIZE_MAX / sizeof(float) < n)
 80016dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016e2:	d301      	bcc.n	80016e8 <Fft_convolveComplex+0x20>
		return false;
 80016e4:	2300      	movs	r3, #0
 80016e6:	e0e6      	b.n	80018b6 <Fft_convolveComplex+0x1ee>
	size_t size = n * sizeof(float);
 80016e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28

	float *xr = memdup(xreal, size);
 80016ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f000 f906 	bl	8001902 <memdup>
 80016f6:	6278      	str	r0, [r7, #36]	; 0x24
	float *xi = memdup(ximag, size);
 80016f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016fa:	68b8      	ldr	r0, [r7, #8]
 80016fc:	f000 f901 	bl	8001902 <memdup>
 8001700:	6238      	str	r0, [r7, #32]
	float *yr = memdup(yreal, size);
 8001702:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f8fc 	bl	8001902 <memdup>
 800170a:	61f8      	str	r0, [r7, #28]
	float *yi = memdup(yimag, size);
 800170c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800170e:	6838      	ldr	r0, [r7, #0]
 8001710:	f000 f8f7 	bl	8001902 <memdup>
 8001714:	61b8      	str	r0, [r7, #24]
	if (xr == NULL || xi == NULL || yr == NULL || yi == NULL)
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 80b7 	beq.w	800188c <Fft_convolveComplex+0x1c4>
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80b3 	beq.w	800188c <Fft_convolveComplex+0x1c4>
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80af 	beq.w	800188c <Fft_convolveComplex+0x1c4>
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 80ab 	beq.w	800188c <Fft_convolveComplex+0x1c4>
		goto cleanup;

	if (!Fft_transform(xr, xi, n))
 8001736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001738:	6a39      	ldr	r1, [r7, #32]
 800173a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800173c:	f7ff fbb0 	bl	8000ea0 <Fft_transform>
 8001740:	4603      	mov	r3, r0
 8001742:	f083 0301 	eor.w	r3, r3, #1
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	f040 80a1 	bne.w	8001890 <Fft_convolveComplex+0x1c8>
		goto cleanup;
	if (!Fft_transform(yr, yi, n))
 800174e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001750:	69b9      	ldr	r1, [r7, #24]
 8001752:	69f8      	ldr	r0, [r7, #28]
 8001754:	f7ff fba4 	bl	8000ea0 <Fft_transform>
 8001758:	4603      	mov	r3, r0
 800175a:	f083 0301 	eor.w	r3, r3, #1
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	f040 8097 	bne.w	8001894 <Fft_convolveComplex+0x1cc>
		goto cleanup;

	for (size_t i = 0; i < n; i++) {
 8001766:	2300      	movs	r3, #0
 8001768:	633b      	str	r3, [r7, #48]	; 0x30
 800176a:	e04c      	b.n	8001806 <Fft_convolveComplex+0x13e>
		float temp = xr[i] * yr[i] - xi[i] * yi[i];
 800176c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001772:	4413      	add	r3, r2
 8001774:	ed93 7a00 	vldr	s14, [r3]
 8001778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	69fa      	ldr	r2, [r7, #28]
 800177e:	4413      	add	r3, r2
 8001780:	edd3 7a00 	vldr	s15, [r3]
 8001784:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	6a3a      	ldr	r2, [r7, #32]
 800178e:	4413      	add	r3, r2
 8001790:	edd3 6a00 	vldr	s13, [r3]
 8001794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4413      	add	r3, r2
 800179c:	edd3 7a00 	vldr	s15, [r3]
 80017a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a8:	edc7 7a05 	vstr	s15, [r7, #20]
		xi[i] = xi[i] * yr[i] + xr[i] * yi[i];
 80017ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	6a3a      	ldr	r2, [r7, #32]
 80017b2:	4413      	add	r3, r2
 80017b4:	ed93 7a00 	vldr	s14, [r3]
 80017b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	4413      	add	r3, r2
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ce:	4413      	add	r3, r2
 80017d0:	edd3 6a00 	vldr	s13, [r3]
 80017d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4413      	add	r3, r2
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	6a3a      	ldr	r2, [r7, #32]
 80017ea:	4413      	add	r3, r2
 80017ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f0:	edc3 7a00 	vstr	s15, [r3]
		xr[i] = temp;
 80017f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017fa:	4413      	add	r3, r2
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < n; i++) {
 8001800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001802:	3301      	adds	r3, #1
 8001804:	633b      	str	r3, [r7, #48]	; 0x30
 8001806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800180a:	429a      	cmp	r2, r3
 800180c:	d3ae      	bcc.n	800176c <Fft_convolveComplex+0xa4>
	}
	if (!Fft_inverseTransform(xr, xi, n))
 800180e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001810:	6a39      	ldr	r1, [r7, #32]
 8001812:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001814:	f7ff fb66 	bl	8000ee4 <Fft_inverseTransform>
 8001818:	4603      	mov	r3, r0
 800181a:	f083 0301 	eor.w	r3, r3, #1
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d139      	bne.n	8001898 <Fft_convolveComplex+0x1d0>
		goto cleanup;

	for (size_t i = 0; i < n; i++) {  // Scaling (because this FFT implementation omits it)
 8001824:	2300      	movs	r3, #0
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001828:	e028      	b.n	800187c <Fft_convolveComplex+0x1b4>
		outreal[i] = xr[i] / n;
 800182a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001830:	4413      	add	r3, r2
 8001832:	edd3 6a00 	vldr	s13, [r3]
 8001836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001846:	4413      	add	r3, r2
 8001848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800184c:	edc3 7a00 	vstr	s15, [r3]
		outimag[i] = xi[i] / n;
 8001850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	6a3a      	ldr	r2, [r7, #32]
 8001856:	4413      	add	r3, r2
 8001858:	edd3 6a00 	vldr	s13, [r3]
 800185c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800185e:	ee07 3a90 	vmov	s15, r3
 8001862:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800186c:	4413      	add	r3, r2
 800186e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001872:	edc3 7a00 	vstr	s15, [r3]
	for (size_t i = 0; i < n; i++) {  // Scaling (because this FFT implementation omits it)
 8001876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001878:	3301      	adds	r3, #1
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800187c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800187e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001880:	429a      	cmp	r2, r3
 8001882:	d3d2      	bcc.n	800182a <Fft_convolveComplex+0x162>
	}
	status = true;
 8001884:	2301      	movs	r3, #1
 8001886:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800188a:	e006      	b.n	800189a <Fft_convolveComplex+0x1d2>

cleanup:
 800188c:	bf00      	nop
 800188e:	e004      	b.n	800189a <Fft_convolveComplex+0x1d2>
		goto cleanup;
 8001890:	bf00      	nop
 8001892:	e002      	b.n	800189a <Fft_convolveComplex+0x1d2>
		goto cleanup;
 8001894:	bf00      	nop
 8001896:	e000      	b.n	800189a <Fft_convolveComplex+0x1d2>
		goto cleanup;
 8001898:	bf00      	nop
	free(yi);
 800189a:	69b8      	ldr	r0, [r7, #24]
 800189c:	f002 fd96 	bl	80043cc <free>
	free(yr);
 80018a0:	69f8      	ldr	r0, [r7, #28]
 80018a2:	f002 fd93 	bl	80043cc <free>
	free(xi);
 80018a6:	6a38      	ldr	r0, [r7, #32]
 80018a8:	f002 fd90 	bl	80043cc <free>
	free(xr);
 80018ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018ae:	f002 fd8d 	bl	80043cc <free>
	return status;
 80018b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3738      	adds	r7, #56	; 0x38
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <reverse_bits>:


static size_t reverse_bits(size_t x, int n) {
 80018be:	b480      	push	{r7}
 80018c0:	b085      	sub	sp, #20
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
	size_t result = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < n; i++, x >>= 1)
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	e00c      	b.n	80018ec <reverse_bits+0x2e>
		result = (result << 1) | (x & 1U);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	005a      	lsls	r2, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	4313      	orrs	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < n; i++, x >>= 1)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	3301      	adds	r3, #1
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	085b      	lsrs	r3, r3, #1
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	dbee      	blt.n	80018d2 <reverse_bits+0x14>
	return result;
 80018f4:	68fb      	ldr	r3, [r7, #12]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <memdup>:


static void *memdup(const void *src, size_t n) {
 8001902:	b580      	push	{r7, lr}
 8001904:	b084      	sub	sp, #16
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
	void *dest = malloc(n);
 800190c:	6838      	ldr	r0, [r7, #0]
 800190e:	f002 fd55 	bl	80043bc <malloc>
 8001912:	4603      	mov	r3, r0
 8001914:	60fb      	str	r3, [r7, #12]
	if (n > 0 && dest != NULL)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d007      	beq.n	800192c <memdup+0x2a>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d004      	beq.n	800192c <memdup+0x2a>
		memcpy(dest, src, n);
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f002 fd58 	bl	80043dc <memcpy>
	return dest;
 800192c:	68fb      	ldr	r3, [r7, #12]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the serial port and Loop until the end of transmission */
  while (HAL_OK != HAL_USART_Transmit(&husart1, (uint8_t *) &ch, 1, 30000))
 8001940:	bf00      	nop
 8001942:	1d39      	adds	r1, r7, #4
 8001944:	f247 5330 	movw	r3, #30000	; 0x7530
 8001948:	2201      	movs	r2, #1
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <__io_putchar+0x28>)
 800194c:	f002 f8fe 	bl	8003b4c <HAL_USART_Transmit>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f5      	bne.n	8001942 <__io_putchar+0xa>
  {
    ;
  }
  return ch;
 8001956:	687b      	ldr	r3, [r7, #4]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000204 	.word	0x20000204

08001964 <__io_getchar>:
  * @brief Retargets the C library scanf function to the USART.
  * @param None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. readwrite a character to the USART2 and Loop until the end of transmission */
  uint8_t ch = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_USART_Receive(&husart1, (uint8_t *)&ch, 1, 30000))
 800196e:	bf00      	nop
 8001970:	1df9      	adds	r1, r7, #7
 8001972:	f247 5330 	movw	r3, #30000	; 0x7530
 8001976:	2201      	movs	r2, #1
 8001978:	4805      	ldr	r0, [pc, #20]	; (8001990 <__io_getchar+0x2c>)
 800197a:	f002 f995 	bl	8003ca8 <HAL_USART_Receive>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f5      	bne.n	8001970 <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 8001984:	79fb      	ldrb	r3, [r7, #7]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000204 	.word	0x20000204

08001994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	
	int naiveRuntime;
	int cmsisRuntime;
	
	arm_cfft_radix2_instance_f32* fft_struct = (arm_cfft_radix2_instance_f32*) calloc(1, sizeof(arm_cfft_radix2_instance_f32));
 800199a:	2114      	movs	r1, #20
 800199c:	2001      	movs	r0, #1
 800199e:	f002 fcdb 	bl	8004358 <calloc>
 80019a2:	4603      	mov	r3, r0
 80019a4:	60bb      	str	r3, [r7, #8]
	arm_cfft_radix2_init_f32(fft_struct, vectorSize, 0, 0);
 80019a6:	2300      	movs	r3, #0
 80019a8:	2200      	movs	r2, #0
 80019aa:	2140      	movs	r1, #64	; 0x40
 80019ac:	68b8      	ldr	r0, [r7, #8]
 80019ae:	f002 fc23 	bl	80041f8 <arm_cfft_radix2_init_f32>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019b2:	f000 fa84 	bl	8001ebe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019b6:	f000 f82f 	bl	8001a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ba:	f000 f8d1 	bl	8001b60 <MX_GPIO_Init>
  MX_USART1_Init();
 80019be:	f000 f8a3 	bl	8001b08 <MX_USART1_Init>
  /* USER CODE BEGIN 2 */

  printf("Starting FFT...\r\n");
 80019c2:	4814      	ldr	r0, [pc, #80]	; (8001a14 <main+0x80>)
 80019c4:	f003 f98e 	bl	8004ce4 <puts>

	/* NAIVE IMPLEMENTATION BEGIN */
	
	float* vectorReal = (float*) calloc(vectorSize, sizeof(float));
 80019c8:	2104      	movs	r1, #4
 80019ca:	2040      	movs	r0, #64	; 0x40
 80019cc:	f002 fcc4 	bl	8004358 <calloc>
 80019d0:	4603      	mov	r3, r0
 80019d2:	607b      	str	r3, [r7, #4]
	float* vectorImag = (float*) calloc(vectorSize, sizeof(float));
 80019d4:	2104      	movs	r1, #4
 80019d6:	2040      	movs	r0, #64	; 0x40
 80019d8:	f002 fcbe 	bl	8004358 <calloc>
 80019dc:	4603      	mov	r3, r0
 80019de:	603b      	str	r3, [r7, #0]
	
	for(int i=0;i<vectorSize;i++){
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	e009      	b.n	80019fa <main+0x66>
		vectorReal[i] = 1;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019f2:	601a      	str	r2, [r3, #0]
	for(int i=0;i<vectorSize;i++){
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3301      	adds	r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2b3f      	cmp	r3, #63	; 0x3f
 80019fe:	ddf2      	ble.n	80019e6 <main+0x52>
	}
	
	Fft_transform(vectorReal, vectorImag, vectorSize);
 8001a00:	2240      	movs	r2, #64	; 0x40
 8001a02:	6839      	ldr	r1, [r7, #0]
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff fa4b 	bl	8000ea0 <Fft_transform>
	
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	printf("\n");
 8001a0a:	200a      	movs	r0, #10
 8001a0c:	f003 f8fa 	bl	8004c04 <putchar>
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <main+0x7c>
 8001a12:	bf00      	nop
 8001a14:	08007780 	.word	0x08007780

08001a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b0b8      	sub	sp, #224	; 0xe0
 8001a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a22:	2244      	movs	r2, #68	; 0x44
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 fce3 	bl	80043f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a2c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	2288      	movs	r2, #136	; 0x88
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f002 fcd5 	bl	80043f2 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001a48:	2310      	movs	r3, #16
 8001a4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a5a:	2360      	movs	r3, #96	; 0x60
 8001a5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a60:	2302      	movs	r3, #2
 8001a62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001a66:	2301      	movs	r3, #1
 8001a68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001a72:	2328      	movs	r3, #40	; 0x28
 8001a74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a78:	2307      	movs	r3, #7
 8001a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a84:	2302      	movs	r3, #2
 8001a86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 fd78 	bl	8002584 <HAL_RCC_OscConfig>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001a9a:	f000 f879 	bl	8001b90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a9e:	230f      	movs	r3, #15
 8001aa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001abc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ac0:	2104      	movs	r1, #4
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 f944 	bl	8002d50 <HAL_RCC_ClockConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001ace:	f000 f85f 	bl	8001b90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ada:	463b      	mov	r3, r7
 8001adc:	4618      	mov	r0, r3
 8001ade:	f001 fb3b 	bl	8003158 <HAL_RCCEx_PeriphCLKConfig>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001ae8:	f000 f852 	bl	8001b90 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001aec:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001af0:	f000 fcf2 	bl	80024d8 <HAL_PWREx_ControlVoltageScaling>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001afa:	f000 f849 	bl	8001b90 <Error_Handler>
  }
}
 8001afe:	bf00      	nop
 8001b00:	37e0      	adds	r7, #224	; 0xe0
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <MX_USART1_Init+0x50>)
 8001b0e:	4a13      	ldr	r2, [pc, #76]	; (8001b5c <MX_USART1_Init+0x54>)
 8001b10:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <MX_USART1_Init+0x50>)
 8001b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b18:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_USART1_Init+0x50>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <MX_USART1_Init+0x50>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8001b26:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <MX_USART1_Init+0x50>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <MX_USART1_Init+0x50>)
 8001b2e:	220c      	movs	r2, #12
 8001b30:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <MX_USART1_Init+0x50>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <MX_USART1_Init+0x50>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <MX_USART1_Init+0x50>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8001b44:	4804      	ldr	r0, [pc, #16]	; (8001b58 <MX_USART1_Init+0x50>)
 8001b46:	f001 ffb7 	bl	8003ab8 <HAL_USART_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8001b50:	f000 f81e 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000204 	.word	0x20000204
 8001b5c:	40013800 	.word	0x40013800

08001b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <MX_GPIO_Init+0x2c>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <MX_GPIO_Init+0x2c>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <MX_GPIO_Init+0x2c>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]

}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40021000 	.word	0x40021000

08001b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <HAL_MspInit+0x44>)
 8001ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001baa:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <HAL_MspInit+0x44>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6613      	str	r3, [r2, #96]	; 0x60
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_MspInit+0x44>)
 8001bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_MspInit+0x44>)
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	4a08      	ldr	r2, [pc, #32]	; (8001be4 <HAL_MspInit+0x44>)
 8001bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_MspInit+0x44>)
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000

08001be8 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a17      	ldr	r2, [pc, #92]	; (8001c64 <HAL_USART_MspInit+0x7c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d127      	bne.n	8001c5a <HAL_USART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <HAL_USART_MspInit+0x80>)
 8001c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0e:	4a16      	ldr	r2, [pc, #88]	; (8001c68 <HAL_USART_MspInit+0x80>)
 8001c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c14:	6613      	str	r3, [r2, #96]	; 0x60
 8001c16:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <HAL_USART_MspInit+0x80>)
 8001c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_USART_MspInit+0x80>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c26:	4a10      	ldr	r2, [pc, #64]	; (8001c68 <HAL_USART_MspInit+0x80>)
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <HAL_USART_MspInit+0x80>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB5     ------> USART1_CK
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c3a:	23e0      	movs	r3, #224	; 0xe0
 8001c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c4a:	2307      	movs	r3, #7
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	4805      	ldr	r0, [pc, #20]	; (8001c6c <HAL_USART_MspInit+0x84>)
 8001c56:	f000 fa89 	bl	800216c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c5a:	bf00      	nop
 8001c5c:	3728      	adds	r7, #40	; 0x28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40013800 	.word	0x40013800
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	48000400 	.word	0x48000400

08001c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c82:	e7fe      	b.n	8001c82 <HardFault_Handler+0x4>

08001c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <MemManage_Handler+0x4>

08001c8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <BusFault_Handler+0x4>

08001c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <UsageFault_Handler+0x4>

08001c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc4:	f000 f94e 	bl	8001f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	e00a      	b.n	8001cf4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cde:	f7ff fe41 	bl	8001964 <__io_getchar>
 8001ce2:	4601      	mov	r1, r0
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	60ba      	str	r2, [r7, #8]
 8001cea:	b2ca      	uxtb	r2, r1
 8001cec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	dbf0      	blt.n	8001cde <_read+0x12>
	}

return len;
 8001cfc:	687b      	ldr	r3, [r7, #4]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	e009      	b.n	8001d2c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	60ba      	str	r2, [r7, #8]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fe09 	bl	8001938 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	dbf1      	blt.n	8001d18 <_write+0x12>
	}
	return len;
 8001d34:	687b      	ldr	r3, [r7, #4]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <_close>:

int _close(int file)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
	return -1;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d66:	605a      	str	r2, [r3, #4]
	return 0;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <_isatty>:

int _isatty(int file)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d7e:	2301      	movs	r3, #1
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
	return 0;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <_sbrk+0x50>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <_sbrk+0x16>
		heap_end = &end;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <_sbrk+0x50>)
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <_sbrk+0x54>)
 8001dbc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <_sbrk+0x50>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <_sbrk+0x50>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	466a      	mov	r2, sp
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d907      	bls.n	8001de2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001dd2:	f002 fac9 	bl	8004368 <__errno>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	230c      	movs	r3, #12
 8001dda:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8001de0:	e006      	b.n	8001df0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001de2:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <_sbrk+0x50>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	4a03      	ldr	r2, [pc, #12]	; (8001df8 <_sbrk+0x50>)
 8001dec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001dee:	68fb      	ldr	r3, [r7, #12]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	200001f8 	.word	0x200001f8
 8001dfc:	20000260 	.word	0x20000260

08001e00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <SystemInit+0x64>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0a:	4a16      	ldr	r2, [pc, #88]	; (8001e64 <SystemInit+0x64>)
 8001e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <SystemInit+0x68>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a13      	ldr	r2, [pc, #76]	; (8001e68 <SystemInit+0x68>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <SystemInit+0x68>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <SystemInit+0x68>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a0f      	ldr	r2, [pc, #60]	; (8001e68 <SystemInit+0x68>)
 8001e2c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001e30:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001e34:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <SystemInit+0x68>)
 8001e38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e3c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <SystemInit+0x68>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a09      	ldr	r2, [pc, #36]	; (8001e68 <SystemInit+0x68>)
 8001e44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e48:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <SystemInit+0x68>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <SystemInit+0x64>)
 8001e52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e56:	609a      	str	r2, [r3, #8]
#endif
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000ed00 	.word	0xe000ed00
 8001e68:	40021000 	.word	0x40021000

08001e6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e70:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e72:	e003      	b.n	8001e7c <LoopCopyDataInit>

08001e74 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e76:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e78:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e7a:	3104      	adds	r1, #4

08001e7c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e7c:	480b      	ldr	r0, [pc, #44]	; (8001eac <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e80:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e82:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e84:	d3f6      	bcc.n	8001e74 <CopyDataInit>
	ldr	r2, =_sbss
 8001e86:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e88:	e002      	b.n	8001e90 <LoopFillZerobss>

08001e8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e8a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e8c:	f842 3b04 	str.w	r3, [r2], #4

08001e90 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e90:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <LoopForever+0x16>)
	cmp	r2, r3
 8001e92:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e94:	d3f9      	bcc.n	8001e8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e96:	f7ff ffb3 	bl	8001e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e9a:	f002 fa6b 	bl	8004374 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e9e:	f7ff fd79 	bl	8001994 <main>

08001ea2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ea2:	e7fe      	b.n	8001ea2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ea4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001ea8:	08010450 	.word	0x08010450
	ldr	r0, =_sdata
 8001eac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001eb0:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001eb4:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001eb8:	2000025c 	.word	0x2000025c

08001ebc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ebc:	e7fe      	b.n	8001ebc <ADC1_2_IRQHandler>

08001ebe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f000 f91b 	bl	8002104 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f000 f80e 	bl	8001ef0 <HAL_InitTick>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d002      	beq.n	8001ee0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	71fb      	strb	r3, [r7, #7]
 8001ede:	e001      	b.n	8001ee4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ee0:	f7ff fe5e 	bl	8001ba0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <HAL_InitTick+0x68>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d022      	beq.n	8001f4a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f04:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <HAL_InitTick+0x6c>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <HAL_InitTick+0x68>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f10:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 f91a 	bl	8002152 <HAL_SYSTICK_Config>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10f      	bne.n	8001f44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b0f      	cmp	r3, #15
 8001f28:	d809      	bhi.n	8001f3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f32:	f000 f8f2 	bl	800211a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f36:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <HAL_InitTick+0x70>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	e007      	b.n	8001f4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	73fb      	strb	r3, [r7, #15]
 8001f42:	e004      	b.n	8001f4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	e001      	b.n	8001f4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000008 	.word	0x20000008
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	20000004 	.word	0x20000004

08001f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <HAL_IncTick+0x1c>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <HAL_IncTick+0x20>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4413      	add	r3, r2
 8001f72:	4a03      	ldr	r2, [pc, #12]	; (8001f80 <HAL_IncTick+0x1c>)
 8001f74:	6013      	str	r3, [r2, #0]
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	20000254 	.word	0x20000254
 8001f84:	20000008 	.word	0x20000008

08001f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <HAL_GetTick+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000254 	.word	0x20000254

08001fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60d3      	str	r3, [r2, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <__NVIC_GetPriorityGrouping+0x18>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	f003 0307 	and.w	r3, r3, #7
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	6039      	str	r1, [r7, #0]
 800200e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	2b00      	cmp	r3, #0
 8002016:	db0a      	blt.n	800202e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	490c      	ldr	r1, [pc, #48]	; (8002050 <__NVIC_SetPriority+0x4c>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	440b      	add	r3, r1
 8002028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800202c:	e00a      	b.n	8002044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4908      	ldr	r1, [pc, #32]	; (8002054 <__NVIC_SetPriority+0x50>)
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	3b04      	subs	r3, #4
 800203c:	0112      	lsls	r2, r2, #4
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	440b      	add	r3, r1
 8002042:	761a      	strb	r2, [r3, #24]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000e100 	.word	0xe000e100
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	; 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f1c3 0307 	rsb	r3, r3, #7
 8002072:	2b04      	cmp	r3, #4
 8002074:	bf28      	it	cs
 8002076:	2304      	movcs	r3, #4
 8002078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3304      	adds	r3, #4
 800207e:	2b06      	cmp	r3, #6
 8002080:	d902      	bls.n	8002088 <NVIC_EncodePriority+0x30>
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3b03      	subs	r3, #3
 8002086:	e000      	b.n	800208a <NVIC_EncodePriority+0x32>
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	f04f 32ff 	mov.w	r2, #4294967295
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43da      	mvns	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	401a      	ands	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a0:	f04f 31ff 	mov.w	r1, #4294967295
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	43d9      	mvns	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	4313      	orrs	r3, r2
         );
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3724      	adds	r7, #36	; 0x24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d0:	d301      	bcc.n	80020d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00f      	b.n	80020f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <SysTick_Config+0x40>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3b01      	subs	r3, #1
 80020dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020de:	210f      	movs	r1, #15
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295
 80020e4:	f7ff ff8e 	bl	8002004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <SysTick_Config+0x40>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ee:	4b04      	ldr	r3, [pc, #16]	; (8002100 <SysTick_Config+0x40>)
 80020f0:	2207      	movs	r2, #7
 80020f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	e000e010 	.word	0xe000e010

08002104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff47 	bl	8001fa0 <__NVIC_SetPriorityGrouping>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b086      	sub	sp, #24
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800212c:	f7ff ff5c 	bl	8001fe8 <__NVIC_GetPriorityGrouping>
 8002130:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	6978      	ldr	r0, [r7, #20]
 8002138:	f7ff ff8e 	bl	8002058 <NVIC_EncodePriority>
 800213c:	4602      	mov	r2, r0
 800213e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff5d 	bl	8002004 <__NVIC_SetPriority>
}
 800214a:	bf00      	nop
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ffb0 	bl	80020c0 <SysTick_Config>
 8002160:	4603      	mov	r3, r0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800216c:	b480      	push	{r7}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800217a:	e17f      	b.n	800247c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	2101      	movs	r1, #1
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	4013      	ands	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 8171 	beq.w	8002476 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x38>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b12      	cmp	r3, #18
 80021a2:	d123      	bne.n	80021ec <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	08da      	lsrs	r2, r3, #3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3208      	adds	r2, #8
 80021ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	220f      	movs	r2, #15
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	08da      	lsrs	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3208      	adds	r2, #8
 80021e6:	6939      	ldr	r1, [r7, #16]
 80021e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2203      	movs	r2, #3
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0203 	and.w	r2, r3, #3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d00b      	beq.n	8002240 <HAL_GPIO_Init+0xd4>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d007      	beq.n	8002240 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002234:	2b11      	cmp	r3, #17
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b12      	cmp	r3, #18
 800223e:	d130      	bne.n	80022a2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	2203      	movs	r2, #3
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002276:	2201      	movs	r2, #1
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	f003 0201 	and.w	r2, r3, #1
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d118      	bne.n	80022e0 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80022b4:	2201      	movs	r2, #1
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	08db      	lsrs	r3, r3, #3
 80022ca:	f003 0201 	and.w	r2, r3, #1
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80ac 	beq.w	8002476 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231e:	4b5e      	ldr	r3, [pc, #376]	; (8002498 <HAL_GPIO_Init+0x32c>)
 8002320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002322:	4a5d      	ldr	r2, [pc, #372]	; (8002498 <HAL_GPIO_Init+0x32c>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6613      	str	r3, [r2, #96]	; 0x60
 800232a:	4b5b      	ldr	r3, [pc, #364]	; (8002498 <HAL_GPIO_Init+0x32c>)
 800232c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002336:	4a59      	ldr	r2, [pc, #356]	; (800249c <HAL_GPIO_Init+0x330>)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	3302      	adds	r3, #2
 800233e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002342:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	220f      	movs	r2, #15
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002360:	d025      	beq.n	80023ae <HAL_GPIO_Init+0x242>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4e      	ldr	r2, [pc, #312]	; (80024a0 <HAL_GPIO_Init+0x334>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01f      	beq.n	80023aa <HAL_GPIO_Init+0x23e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a4d      	ldr	r2, [pc, #308]	; (80024a4 <HAL_GPIO_Init+0x338>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d019      	beq.n	80023a6 <HAL_GPIO_Init+0x23a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4c      	ldr	r2, [pc, #304]	; (80024a8 <HAL_GPIO_Init+0x33c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <HAL_GPIO_Init+0x236>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4b      	ldr	r2, [pc, #300]	; (80024ac <HAL_GPIO_Init+0x340>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00d      	beq.n	800239e <HAL_GPIO_Init+0x232>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a4a      	ldr	r2, [pc, #296]	; (80024b0 <HAL_GPIO_Init+0x344>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d007      	beq.n	800239a <HAL_GPIO_Init+0x22e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a49      	ldr	r2, [pc, #292]	; (80024b4 <HAL_GPIO_Init+0x348>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d101      	bne.n	8002396 <HAL_GPIO_Init+0x22a>
 8002392:	2306      	movs	r3, #6
 8002394:	e00c      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 8002396:	2307      	movs	r3, #7
 8002398:	e00a      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 800239a:	2305      	movs	r3, #5
 800239c:	e008      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 800239e:	2304      	movs	r3, #4
 80023a0:	e006      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 80023a2:	2303      	movs	r3, #3
 80023a4:	e004      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e002      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 80023ae:	2300      	movs	r3, #0
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	f002 0203 	and.w	r2, r2, #3
 80023b6:	0092      	lsls	r2, r2, #2
 80023b8:	4093      	lsls	r3, r2
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023c0:	4936      	ldr	r1, [pc, #216]	; (800249c <HAL_GPIO_Init+0x330>)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	3302      	adds	r3, #2
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023ce:	4b3a      	ldr	r3, [pc, #232]	; (80024b8 <HAL_GPIO_Init+0x34c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4013      	ands	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023f2:	4a31      	ldr	r2, [pc, #196]	; (80024b8 <HAL_GPIO_Init+0x34c>)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80023f8:	4b2f      	ldr	r3, [pc, #188]	; (80024b8 <HAL_GPIO_Init+0x34c>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	43db      	mvns	r3, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800241c:	4a26      	ldr	r2, [pc, #152]	; (80024b8 <HAL_GPIO_Init+0x34c>)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002422:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <HAL_GPIO_Init+0x34c>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	43db      	mvns	r3, r3
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002446:	4a1c      	ldr	r2, [pc, #112]	; (80024b8 <HAL_GPIO_Init+0x34c>)
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800244c:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <HAL_GPIO_Init+0x34c>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	43db      	mvns	r3, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002470:	4a11      	ldr	r2, [pc, #68]	; (80024b8 <HAL_GPIO_Init+0x34c>)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	3301      	adds	r3, #1
 800247a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	f47f ae78 	bne.w	800217c <HAL_GPIO_Init+0x10>
  }
}
 800248c:	bf00      	nop
 800248e:	371c      	adds	r7, #28
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	40021000 	.word	0x40021000
 800249c:	40010000 	.word	0x40010000
 80024a0:	48000400 	.word	0x48000400
 80024a4:	48000800 	.word	0x48000800
 80024a8:	48000c00 	.word	0x48000c00
 80024ac:	48001000 	.word	0x48001000
 80024b0:	48001400 	.word	0x48001400
 80024b4:	48001800 	.word	0x48001800
 80024b8:	40010400 	.word	0x40010400

080024bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40007000 	.word	0x40007000

080024d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024e6:	d130      	bne.n	800254a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024e8:	4b23      	ldr	r3, [pc, #140]	; (8002578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024f4:	d038      	beq.n	8002568 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024f6:	4b20      	ldr	r3, [pc, #128]	; (8002578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024fe:	4a1e      	ldr	r2, [pc, #120]	; (8002578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002500:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002504:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2232      	movs	r2, #50	; 0x32
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	4a1b      	ldr	r2, [pc, #108]	; (8002580 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	0c9b      	lsrs	r3, r3, #18
 8002518:	3301      	adds	r3, #1
 800251a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800251c:	e002      	b.n	8002524 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	3b01      	subs	r3, #1
 8002522:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002524:	4b14      	ldr	r3, [pc, #80]	; (8002578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002530:	d102      	bne.n	8002538 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f2      	bne.n	800251e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002544:	d110      	bne.n	8002568 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e00f      	b.n	800256a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002556:	d007      	beq.n	8002568 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002560:	4a05      	ldr	r2, [pc, #20]	; (8002578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002566:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40007000 	.word	0x40007000
 800257c:	20000000 	.word	0x20000000
 8002580:	431bde83 	.word	0x431bde83

08002584 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e3d4      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002596:	4ba1      	ldr	r3, [pc, #644]	; (800281c <HAL_RCC_OscConfig+0x298>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025a0:	4b9e      	ldr	r3, [pc, #632]	; (800281c <HAL_RCC_OscConfig+0x298>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 80e4 	beq.w	8002780 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d007      	beq.n	80025ce <HAL_RCC_OscConfig+0x4a>
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	2b0c      	cmp	r3, #12
 80025c2:	f040 808b 	bne.w	80026dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	f040 8087 	bne.w	80026dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025ce:	4b93      	ldr	r3, [pc, #588]	; (800281c <HAL_RCC_OscConfig+0x298>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_RCC_OscConfig+0x62>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e3ac      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1a      	ldr	r2, [r3, #32]
 80025ea:	4b8c      	ldr	r3, [pc, #560]	; (800281c <HAL_RCC_OscConfig+0x298>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d004      	beq.n	8002600 <HAL_RCC_OscConfig+0x7c>
 80025f6:	4b89      	ldr	r3, [pc, #548]	; (800281c <HAL_RCC_OscConfig+0x298>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025fe:	e005      	b.n	800260c <HAL_RCC_OscConfig+0x88>
 8002600:	4b86      	ldr	r3, [pc, #536]	; (800281c <HAL_RCC_OscConfig+0x298>)
 8002602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002606:	091b      	lsrs	r3, r3, #4
 8002608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800260c:	4293      	cmp	r3, r2
 800260e:	d223      	bcs.n	8002658 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	4618      	mov	r0, r3
 8002616:	f000 fd3f 	bl	8003098 <RCC_SetFlashLatencyFromMSIRange>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e38d      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002624:	4b7d      	ldr	r3, [pc, #500]	; (800281c <HAL_RCC_OscConfig+0x298>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a7c      	ldr	r2, [pc, #496]	; (800281c <HAL_RCC_OscConfig+0x298>)
 800262a:	f043 0308 	orr.w	r3, r3, #8
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	4b7a      	ldr	r3, [pc, #488]	; (800281c <HAL_RCC_OscConfig+0x298>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	4977      	ldr	r1, [pc, #476]	; (800281c <HAL_RCC_OscConfig+0x298>)
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002642:	4b76      	ldr	r3, [pc, #472]	; (800281c <HAL_RCC_OscConfig+0x298>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	4972      	ldr	r1, [pc, #456]	; (800281c <HAL_RCC_OscConfig+0x298>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
 8002656:	e025      	b.n	80026a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002658:	4b70      	ldr	r3, [pc, #448]	; (800281c <HAL_RCC_OscConfig+0x298>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a6f      	ldr	r2, [pc, #444]	; (800281c <HAL_RCC_OscConfig+0x298>)
 800265e:	f043 0308 	orr.w	r3, r3, #8
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	4b6d      	ldr	r3, [pc, #436]	; (800281c <HAL_RCC_OscConfig+0x298>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	496a      	ldr	r1, [pc, #424]	; (800281c <HAL_RCC_OscConfig+0x298>)
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002676:	4b69      	ldr	r3, [pc, #420]	; (800281c <HAL_RCC_OscConfig+0x298>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	021b      	lsls	r3, r3, #8
 8002684:	4965      	ldr	r1, [pc, #404]	; (800281c <HAL_RCC_OscConfig+0x298>)
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d109      	bne.n	80026a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4618      	mov	r0, r3
 8002696:	f000 fcff 	bl	8003098 <RCC_SetFlashLatencyFromMSIRange>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e34d      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026a4:	f000 fc36 	bl	8002f14 <HAL_RCC_GetSysClockFreq>
 80026a8:	4601      	mov	r1, r0
 80026aa:	4b5c      	ldr	r3, [pc, #368]	; (800281c <HAL_RCC_OscConfig+0x298>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	4a5a      	ldr	r2, [pc, #360]	; (8002820 <HAL_RCC_OscConfig+0x29c>)
 80026b6:	5cd3      	ldrb	r3, [r2, r3]
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	fa21 f303 	lsr.w	r3, r1, r3
 80026c0:	4a58      	ldr	r2, [pc, #352]	; (8002824 <HAL_RCC_OscConfig+0x2a0>)
 80026c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026c4:	4b58      	ldr	r3, [pc, #352]	; (8002828 <HAL_RCC_OscConfig+0x2a4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff fc11 	bl	8001ef0 <HAL_InitTick>
 80026ce:	4603      	mov	r3, r0
 80026d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d052      	beq.n	800277e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	e331      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d032      	beq.n	800274a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026e4:	4b4d      	ldr	r3, [pc, #308]	; (800281c <HAL_RCC_OscConfig+0x298>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a4c      	ldr	r2, [pc, #304]	; (800281c <HAL_RCC_OscConfig+0x298>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026f0:	f7ff fc4a 	bl	8001f88 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026f8:	f7ff fc46 	bl	8001f88 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e31a      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800270a:	4b44      	ldr	r3, [pc, #272]	; (800281c <HAL_RCC_OscConfig+0x298>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f0      	beq.n	80026f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002716:	4b41      	ldr	r3, [pc, #260]	; (800281c <HAL_RCC_OscConfig+0x298>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a40      	ldr	r2, [pc, #256]	; (800281c <HAL_RCC_OscConfig+0x298>)
 800271c:	f043 0308 	orr.w	r3, r3, #8
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	4b3e      	ldr	r3, [pc, #248]	; (800281c <HAL_RCC_OscConfig+0x298>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	493b      	ldr	r1, [pc, #236]	; (800281c <HAL_RCC_OscConfig+0x298>)
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002734:	4b39      	ldr	r3, [pc, #228]	; (800281c <HAL_RCC_OscConfig+0x298>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	4936      	ldr	r1, [pc, #216]	; (800281c <HAL_RCC_OscConfig+0x298>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
 8002748:	e01a      	b.n	8002780 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800274a:	4b34      	ldr	r3, [pc, #208]	; (800281c <HAL_RCC_OscConfig+0x298>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a33      	ldr	r2, [pc, #204]	; (800281c <HAL_RCC_OscConfig+0x298>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002756:	f7ff fc17 	bl	8001f88 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800275e:	f7ff fc13 	bl	8001f88 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e2e7      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002770:	4b2a      	ldr	r3, [pc, #168]	; (800281c <HAL_RCC_OscConfig+0x298>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x1da>
 800277c:	e000      	b.n	8002780 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800277e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d074      	beq.n	8002876 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2b08      	cmp	r3, #8
 8002790:	d005      	beq.n	800279e <HAL_RCC_OscConfig+0x21a>
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	2b0c      	cmp	r3, #12
 8002796:	d10e      	bne.n	80027b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2b03      	cmp	r3, #3
 800279c:	d10b      	bne.n	80027b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800279e:	4b1f      	ldr	r3, [pc, #124]	; (800281c <HAL_RCC_OscConfig+0x298>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d064      	beq.n	8002874 <HAL_RCC_OscConfig+0x2f0>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d160      	bne.n	8002874 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e2c4      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027be:	d106      	bne.n	80027ce <HAL_RCC_OscConfig+0x24a>
 80027c0:	4b16      	ldr	r3, [pc, #88]	; (800281c <HAL_RCC_OscConfig+0x298>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a15      	ldr	r2, [pc, #84]	; (800281c <HAL_RCC_OscConfig+0x298>)
 80027c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	e01d      	b.n	800280a <HAL_RCC_OscConfig+0x286>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027d6:	d10c      	bne.n	80027f2 <HAL_RCC_OscConfig+0x26e>
 80027d8:	4b10      	ldr	r3, [pc, #64]	; (800281c <HAL_RCC_OscConfig+0x298>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a0f      	ldr	r2, [pc, #60]	; (800281c <HAL_RCC_OscConfig+0x298>)
 80027de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	4b0d      	ldr	r3, [pc, #52]	; (800281c <HAL_RCC_OscConfig+0x298>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0c      	ldr	r2, [pc, #48]	; (800281c <HAL_RCC_OscConfig+0x298>)
 80027ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	e00b      	b.n	800280a <HAL_RCC_OscConfig+0x286>
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_RCC_OscConfig+0x298>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a09      	ldr	r2, [pc, #36]	; (800281c <HAL_RCC_OscConfig+0x298>)
 80027f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	4b07      	ldr	r3, [pc, #28]	; (800281c <HAL_RCC_OscConfig+0x298>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a06      	ldr	r2, [pc, #24]	; (800281c <HAL_RCC_OscConfig+0x298>)
 8002804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002808:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d01c      	beq.n	800284c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002812:	f7ff fbb9 	bl	8001f88 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002818:	e011      	b.n	800283e <HAL_RCC_OscConfig+0x2ba>
 800281a:	bf00      	nop
 800281c:	40021000 	.word	0x40021000
 8002820:	08007794 	.word	0x08007794
 8002824:	20000000 	.word	0x20000000
 8002828:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800282c:	f7ff fbac 	bl	8001f88 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	; 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e280      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800283e:	4baf      	ldr	r3, [pc, #700]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0x2a8>
 800284a:	e014      	b.n	8002876 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7ff fb9c 	bl	8001f88 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002854:	f7ff fb98 	bl	8001f88 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e26c      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002866:	4ba5      	ldr	r3, [pc, #660]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x2d0>
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d060      	beq.n	8002944 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	2b04      	cmp	r3, #4
 8002886:	d005      	beq.n	8002894 <HAL_RCC_OscConfig+0x310>
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d119      	bne.n	80028c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d116      	bne.n	80028c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002894:	4b99      	ldr	r3, [pc, #612]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_RCC_OscConfig+0x328>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e249      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ac:	4b93      	ldr	r3, [pc, #588]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	061b      	lsls	r3, r3, #24
 80028ba:	4990      	ldr	r1, [pc, #576]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028c0:	e040      	b.n	8002944 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d023      	beq.n	8002912 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ca:	4b8c      	ldr	r3, [pc, #560]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a8b      	ldr	r2, [pc, #556]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 80028d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d6:	f7ff fb57 	bl	8001f88 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028de:	f7ff fb53 	bl	8001f88 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e227      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028f0:	4b82      	ldr	r3, [pc, #520]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fc:	4b7f      	ldr	r3, [pc, #508]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	061b      	lsls	r3, r3, #24
 800290a:	497c      	ldr	r1, [pc, #496]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
 8002910:	e018      	b.n	8002944 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002912:	4b7a      	ldr	r3, [pc, #488]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a79      	ldr	r2, [pc, #484]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 8002918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800291c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291e:	f7ff fb33 	bl	8001f88 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002926:	f7ff fb2f 	bl	8001f88 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e203      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002938:	4b70      	ldr	r3, [pc, #448]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f0      	bne.n	8002926 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d03c      	beq.n	80029ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01c      	beq.n	8002992 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002958:	4b68      	ldr	r3, [pc, #416]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 800295a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295e:	4a67      	ldr	r2, [pc, #412]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7ff fb0e 	bl	8001f88 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002970:	f7ff fb0a 	bl	8001f88 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e1de      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002982:	4b5e      	ldr	r3, [pc, #376]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 8002984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0ef      	beq.n	8002970 <HAL_RCC_OscConfig+0x3ec>
 8002990:	e01b      	b.n	80029ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002992:	4b5a      	ldr	r3, [pc, #360]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 8002994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002998:	4a58      	ldr	r2, [pc, #352]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 800299a:	f023 0301 	bic.w	r3, r3, #1
 800299e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a2:	f7ff faf1 	bl	8001f88 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029aa:	f7ff faed 	bl	8001f88 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e1c1      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029bc:	4b4f      	ldr	r3, [pc, #316]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 80029be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1ef      	bne.n	80029aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0304 	and.w	r3, r3, #4
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 80a6 	beq.w	8002b24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d8:	2300      	movs	r3, #0
 80029da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029dc:	4b47      	ldr	r3, [pc, #284]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 80029de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10d      	bne.n	8002a04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e8:	4b44      	ldr	r3, [pc, #272]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 80029ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ec:	4a43      	ldr	r2, [pc, #268]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 80029ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f2:	6593      	str	r3, [r2, #88]	; 0x58
 80029f4:	4b41      	ldr	r3, [pc, #260]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 80029f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a00:	2301      	movs	r3, #1
 8002a02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a04:	4b3e      	ldr	r3, [pc, #248]	; (8002b00 <HAL_RCC_OscConfig+0x57c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d118      	bne.n	8002a42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a10:	4b3b      	ldr	r3, [pc, #236]	; (8002b00 <HAL_RCC_OscConfig+0x57c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a3a      	ldr	r2, [pc, #232]	; (8002b00 <HAL_RCC_OscConfig+0x57c>)
 8002a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1c:	f7ff fab4 	bl	8001f88 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a24:	f7ff fab0 	bl	8001f88 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e184      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a36:	4b32      	ldr	r3, [pc, #200]	; (8002b00 <HAL_RCC_OscConfig+0x57c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d108      	bne.n	8002a5c <HAL_RCC_OscConfig+0x4d8>
 8002a4a:	4b2c      	ldr	r3, [pc, #176]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 8002a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a50:	4a2a      	ldr	r2, [pc, #168]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a5a:	e024      	b.n	8002aa6 <HAL_RCC_OscConfig+0x522>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2b05      	cmp	r3, #5
 8002a62:	d110      	bne.n	8002a86 <HAL_RCC_OscConfig+0x502>
 8002a64:	4b25      	ldr	r3, [pc, #148]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6a:	4a24      	ldr	r2, [pc, #144]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 8002a6c:	f043 0304 	orr.w	r3, r3, #4
 8002a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a74:	4b21      	ldr	r3, [pc, #132]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7a:	4a20      	ldr	r2, [pc, #128]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a84:	e00f      	b.n	8002aa6 <HAL_RCC_OscConfig+0x522>
 8002a86:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8c:	4a1b      	ldr	r2, [pc, #108]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 8002a8e:	f023 0301 	bic.w	r3, r3, #1
 8002a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a96:	4b19      	ldr	r3, [pc, #100]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 8002a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9c:	4a17      	ldr	r2, [pc, #92]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 8002a9e:	f023 0304 	bic.w	r3, r3, #4
 8002aa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d016      	beq.n	8002adc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aae:	f7ff fa6b 	bl	8001f88 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ab4:	e00a      	b.n	8002acc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab6:	f7ff fa67 	bl	8001f88 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e139      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_RCC_OscConfig+0x578>)
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0ed      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x532>
 8002ada:	e01a      	b.n	8002b12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002adc:	f7ff fa54 	bl	8001f88 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ae2:	e00f      	b.n	8002b04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae4:	f7ff fa50 	bl	8001f88 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d906      	bls.n	8002b04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e122      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b04:	4b90      	ldr	r3, [pc, #576]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1e8      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b12:	7ffb      	ldrb	r3, [r7, #31]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d105      	bne.n	8002b24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b18:	4b8b      	ldr	r3, [pc, #556]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1c:	4a8a      	ldr	r2, [pc, #552]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b22:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8108 	beq.w	8002d3e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	f040 80d0 	bne.w	8002cd8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b38:	4b83      	ldr	r3, [pc, #524]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f003 0203 	and.w	r2, r3, #3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d130      	bne.n	8002bae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	3b01      	subs	r3, #1
 8002b58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d127      	bne.n	8002bae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b68:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d11f      	bne.n	8002bae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b78:	2a07      	cmp	r2, #7
 8002b7a:	bf14      	ite	ne
 8002b7c:	2201      	movne	r2, #1
 8002b7e:	2200      	moveq	r2, #0
 8002b80:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d113      	bne.n	8002bae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b90:	085b      	lsrs	r3, r3, #1
 8002b92:	3b01      	subs	r3, #1
 8002b94:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d109      	bne.n	8002bae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	085b      	lsrs	r3, r3, #1
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d06e      	beq.n	8002c8c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	2b0c      	cmp	r3, #12
 8002bb2:	d069      	beq.n	8002c88 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bb4:	4b64      	ldr	r3, [pc, #400]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d105      	bne.n	8002bcc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002bc0:	4b61      	ldr	r3, [pc, #388]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0b7      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bd0:	4b5d      	ldr	r3, [pc, #372]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a5c      	ldr	r2, [pc, #368]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bda:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bdc:	f7ff f9d4 	bl	8001f88 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be4:	f7ff f9d0 	bl	8001f88 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e0a4      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf6:	4b54      	ldr	r3, [pc, #336]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c02:	4b51      	ldr	r3, [pc, #324]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	4b51      	ldr	r3, [pc, #324]	; (8002d4c <HAL_RCC_OscConfig+0x7c8>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c12:	3a01      	subs	r2, #1
 8002c14:	0112      	lsls	r2, r2, #4
 8002c16:	4311      	orrs	r1, r2
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c1c:	0212      	lsls	r2, r2, #8
 8002c1e:	4311      	orrs	r1, r2
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c24:	0852      	lsrs	r2, r2, #1
 8002c26:	3a01      	subs	r2, #1
 8002c28:	0552      	lsls	r2, r2, #21
 8002c2a:	4311      	orrs	r1, r2
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c30:	0852      	lsrs	r2, r2, #1
 8002c32:	3a01      	subs	r2, #1
 8002c34:	0652      	lsls	r2, r2, #25
 8002c36:	4311      	orrs	r1, r2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c3c:	0912      	lsrs	r2, r2, #4
 8002c3e:	0452      	lsls	r2, r2, #17
 8002c40:	430a      	orrs	r2, r1
 8002c42:	4941      	ldr	r1, [pc, #260]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c48:	4b3f      	ldr	r3, [pc, #252]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a3e      	ldr	r2, [pc, #248]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c54:	4b3c      	ldr	r3, [pc, #240]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4a3b      	ldr	r2, [pc, #236]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c60:	f7ff f992 	bl	8001f88 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c68:	f7ff f98e 	bl	8001f88 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e062      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c7a:	4b33      	ldr	r3, [pc, #204]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c86:	e05a      	b.n	8002d3e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e059      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8c:	4b2e      	ldr	r3, [pc, #184]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d152      	bne.n	8002d3e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c98:	4b2b      	ldr	r3, [pc, #172]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a2a      	ldr	r2, [pc, #168]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ca2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ca4:	4b28      	ldr	r3, [pc, #160]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4a27      	ldr	r2, [pc, #156]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cb0:	f7ff f96a 	bl	8001f88 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7ff f966 	bl	8001f88 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e03a      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cca:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x734>
 8002cd6:	e032      	b.n	8002d3e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	d02d      	beq.n	8002d3a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cde:	4b1a      	ldr	r3, [pc, #104]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a19      	ldr	r2, [pc, #100]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002ce4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ce8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002cea:	4b17      	ldr	r3, [pc, #92]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d105      	bne.n	8002d02 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002cf6:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	4a13      	ldr	r2, [pc, #76]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002cfc:	f023 0303 	bic.w	r3, r3, #3
 8002d00:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d02:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	4a10      	ldr	r2, [pc, #64]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002d08:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d10:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d12:	f7ff f939 	bl	8001f88 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1a:	f7ff f935 	bl	8001f88 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e009      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_RCC_OscConfig+0x7c4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f0      	bne.n	8002d1a <HAL_RCC_OscConfig+0x796>
 8002d38:	e001      	b.n	8002d3e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3720      	adds	r7, #32
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	f99d808c 	.word	0xf99d808c

08002d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0c8      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d64:	4b66      	ldr	r3, [pc, #408]	; (8002f00 <HAL_RCC_ClockConfig+0x1b0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d910      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d72:	4b63      	ldr	r3, [pc, #396]	; (8002f00 <HAL_RCC_ClockConfig+0x1b0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 0207 	bic.w	r2, r3, #7
 8002d7a:	4961      	ldr	r1, [pc, #388]	; (8002f00 <HAL_RCC_ClockConfig+0x1b0>)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b5f      	ldr	r3, [pc, #380]	; (8002f00 <HAL_RCC_ClockConfig+0x1b0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0b0      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d04c      	beq.n	8002e3a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d107      	bne.n	8002db8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002da8:	4b56      	ldr	r3, [pc, #344]	; (8002f04 <HAL_RCC_ClockConfig+0x1b4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d121      	bne.n	8002df8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e09e      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d107      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dc0:	4b50      	ldr	r3, [pc, #320]	; (8002f04 <HAL_RCC_ClockConfig+0x1b4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d115      	bne.n	8002df8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e092      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d107      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dd8:	4b4a      	ldr	r3, [pc, #296]	; (8002f04 <HAL_RCC_ClockConfig+0x1b4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d109      	bne.n	8002df8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e086      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de8:	4b46      	ldr	r3, [pc, #280]	; (8002f04 <HAL_RCC_ClockConfig+0x1b4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e07e      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002df8:	4b42      	ldr	r3, [pc, #264]	; (8002f04 <HAL_RCC_ClockConfig+0x1b4>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f023 0203 	bic.w	r2, r3, #3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	493f      	ldr	r1, [pc, #252]	; (8002f04 <HAL_RCC_ClockConfig+0x1b4>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e0a:	f7ff f8bd 	bl	8001f88 <HAL_GetTick>
 8002e0e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e10:	e00a      	b.n	8002e28 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e12:	f7ff f8b9 	bl	8001f88 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e066      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e28:	4b36      	ldr	r3, [pc, #216]	; (8002f04 <HAL_RCC_ClockConfig+0x1b4>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 020c 	and.w	r2, r3, #12
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d1eb      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d008      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e46:	4b2f      	ldr	r3, [pc, #188]	; (8002f04 <HAL_RCC_ClockConfig+0x1b4>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	492c      	ldr	r1, [pc, #176]	; (8002f04 <HAL_RCC_ClockConfig+0x1b4>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e58:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <HAL_RCC_ClockConfig+0x1b0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d210      	bcs.n	8002e88 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	4b26      	ldr	r3, [pc, #152]	; (8002f00 <HAL_RCC_ClockConfig+0x1b0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 0207 	bic.w	r2, r3, #7
 8002e6e:	4924      	ldr	r1, [pc, #144]	; (8002f00 <HAL_RCC_ClockConfig+0x1b0>)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e76:	4b22      	ldr	r3, [pc, #136]	; (8002f00 <HAL_RCC_ClockConfig+0x1b0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e036      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e94:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <HAL_RCC_ClockConfig+0x1b4>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4918      	ldr	r1, [pc, #96]	; (8002f04 <HAL_RCC_ClockConfig+0x1b4>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d009      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eb2:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <HAL_RCC_ClockConfig+0x1b4>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4910      	ldr	r1, [pc, #64]	; (8002f04 <HAL_RCC_ClockConfig+0x1b4>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ec6:	f000 f825 	bl	8002f14 <HAL_RCC_GetSysClockFreq>
 8002eca:	4601      	mov	r1, r0
 8002ecc:	4b0d      	ldr	r3, [pc, #52]	; (8002f04 <HAL_RCC_ClockConfig+0x1b4>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	4a0c      	ldr	r2, [pc, #48]	; (8002f08 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	5cd3      	ldrb	r3, [r2, r3]
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	fa21 f303 	lsr.w	r3, r1, r3
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff f800 	bl	8001ef0 <HAL_InitTick>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ef4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40022000 	.word	0x40022000
 8002f04:	40021000 	.word	0x40021000
 8002f08:	08007794 	.word	0x08007794
 8002f0c:	20000000 	.word	0x20000000
 8002f10:	20000004 	.word	0x20000004

08002f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b089      	sub	sp, #36	; 0x24
 8002f18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f22:	4b3d      	ldr	r3, [pc, #244]	; (8003018 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f2c:	4b3a      	ldr	r3, [pc, #232]	; (8003018 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_GetSysClockFreq+0x34>
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	2b0c      	cmp	r3, #12
 8002f40:	d121      	bne.n	8002f86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d11e      	bne.n	8002f86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f48:	4b33      	ldr	r3, [pc, #204]	; (8003018 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d107      	bne.n	8002f64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f54:	4b30      	ldr	r3, [pc, #192]	; (8003018 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f5a:	0a1b      	lsrs	r3, r3, #8
 8002f5c:	f003 030f 	and.w	r3, r3, #15
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	e005      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f64:	4b2c      	ldr	r3, [pc, #176]	; (8003018 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f70:	4a2a      	ldr	r2, [pc, #168]	; (800301c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10d      	bne.n	8002f9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f84:	e00a      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d102      	bne.n	8002f92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f8c:	4b24      	ldr	r3, [pc, #144]	; (8003020 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f8e:	61bb      	str	r3, [r7, #24]
 8002f90:	e004      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d101      	bne.n	8002f9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f98:	4b22      	ldr	r3, [pc, #136]	; (8003024 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2b0c      	cmp	r3, #12
 8002fa0:	d133      	bne.n	800300a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fa2:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d002      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xa4>
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d003      	beq.n	8002fbe <HAL_RCC_GetSysClockFreq+0xaa>
 8002fb6:	e005      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fb8:	4b19      	ldr	r3, [pc, #100]	; (8003020 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fba:	617b      	str	r3, [r7, #20]
      break;
 8002fbc:	e005      	b.n	8002fca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fbe:	4b19      	ldr	r3, [pc, #100]	; (8003024 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fc0:	617b      	str	r3, [r7, #20]
      break;
 8002fc2:	e002      	b.n	8002fca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	617b      	str	r3, [r7, #20]
      break;
 8002fc8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fca:	4b13      	ldr	r3, [pc, #76]	; (8003018 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fd8:	4b0f      	ldr	r3, [pc, #60]	; (8003018 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	fb02 f203 	mul.w	r2, r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fee:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ff0:	4b09      	ldr	r3, [pc, #36]	; (8003018 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	0e5b      	lsrs	r3, r3, #25
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	fbb2 f3f3 	udiv	r3, r2, r3
 8003008:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800300a:	69bb      	ldr	r3, [r7, #24]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3724      	adds	r7, #36	; 0x24
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	40021000 	.word	0x40021000
 800301c:	080077ac 	.word	0x080077ac
 8003020:	00f42400 	.word	0x00f42400
 8003024:	007a1200 	.word	0x007a1200

08003028 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <HAL_RCC_GetHCLKFreq+0x14>)
 800302e:	681b      	ldr	r3, [r3, #0]
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20000000 	.word	0x20000000

08003040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003044:	f7ff fff0 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8003048:	4601      	mov	r1, r0
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x24>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	0a1b      	lsrs	r3, r3, #8
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	4a04      	ldr	r2, [pc, #16]	; (8003068 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003056:	5cd3      	ldrb	r3, [r2, r3]
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40021000 	.word	0x40021000
 8003068:	080077a4 	.word	0x080077a4

0800306c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003070:	f7ff ffda 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8003074:	4601      	mov	r1, r0
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	0adb      	lsrs	r3, r3, #11
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	4a04      	ldr	r2, [pc, #16]	; (8003094 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003082:	5cd3      	ldrb	r3, [r2, r3]
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	fa21 f303 	lsr.w	r3, r1, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000
 8003094:	080077a4 	.word	0x080077a4

08003098 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030a0:	2300      	movs	r3, #0
 80030a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030a4:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030b0:	f7ff fa04 	bl	80024bc <HAL_PWREx_GetVoltageRange>
 80030b4:	6178      	str	r0, [r7, #20]
 80030b6:	e014      	b.n	80030e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030b8:	4b25      	ldr	r3, [pc, #148]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030bc:	4a24      	ldr	r2, [pc, #144]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c2:	6593      	str	r3, [r2, #88]	; 0x58
 80030c4:	4b22      	ldr	r3, [pc, #136]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030d0:	f7ff f9f4 	bl	80024bc <HAL_PWREx_GetVoltageRange>
 80030d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030d6:	4b1e      	ldr	r3, [pc, #120]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030da:	4a1d      	ldr	r2, [pc, #116]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e8:	d10b      	bne.n	8003102 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b80      	cmp	r3, #128	; 0x80
 80030ee:	d919      	bls.n	8003124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2ba0      	cmp	r3, #160	; 0xa0
 80030f4:	d902      	bls.n	80030fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030f6:	2302      	movs	r3, #2
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	e013      	b.n	8003124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030fc:	2301      	movs	r3, #1
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	e010      	b.n	8003124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b80      	cmp	r3, #128	; 0x80
 8003106:	d902      	bls.n	800310e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003108:	2303      	movs	r3, #3
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	e00a      	b.n	8003124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b80      	cmp	r3, #128	; 0x80
 8003112:	d102      	bne.n	800311a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003114:	2302      	movs	r3, #2
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	e004      	b.n	8003124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b70      	cmp	r3, #112	; 0x70
 800311e:	d101      	bne.n	8003124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003120:	2301      	movs	r3, #1
 8003122:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f023 0207 	bic.w	r2, r3, #7
 800312c:	4909      	ldr	r1, [pc, #36]	; (8003154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003134:	4b07      	ldr	r3, [pc, #28]	; (8003154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	429a      	cmp	r2, r3
 8003140:	d001      	beq.n	8003146 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40021000 	.word	0x40021000
 8003154:	40022000 	.word	0x40022000

08003158 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003160:	2300      	movs	r3, #0
 8003162:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003164:	2300      	movs	r3, #0
 8003166:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003170:	2b00      	cmp	r3, #0
 8003172:	d03f      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800317c:	d01c      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800317e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003182:	d802      	bhi.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00e      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003188:	e01f      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x72>
 800318a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800318e:	d003      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003190:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003194:	d01c      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003196:	e018      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003198:	4b85      	ldr	r3, [pc, #532]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4a84      	ldr	r2, [pc, #528]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800319e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031a4:	e015      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3304      	adds	r3, #4
 80031aa:	2100      	movs	r1, #0
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fab9 	bl	8003724 <RCCEx_PLLSAI1_Config>
 80031b2:	4603      	mov	r3, r0
 80031b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031b6:	e00c      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3320      	adds	r3, #32
 80031bc:	2100      	movs	r1, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fba0 	bl	8003904 <RCCEx_PLLSAI2_Config>
 80031c4:	4603      	mov	r3, r0
 80031c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031c8:	e003      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	74fb      	strb	r3, [r7, #19]
      break;
 80031ce:	e000      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80031d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031d2:	7cfb      	ldrb	r3, [r7, #19]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10b      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031d8:	4b75      	ldr	r3, [pc, #468]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031e6:	4972      	ldr	r1, [pc, #456]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031ee:	e001      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f0:	7cfb      	ldrb	r3, [r7, #19]
 80031f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d03f      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003208:	d01c      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800320a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800320e:	d802      	bhi.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00e      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003214:	e01f      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003216:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800321a:	d003      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800321c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003220:	d01c      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003222:	e018      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003224:	4b62      	ldr	r3, [pc, #392]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4a61      	ldr	r2, [pc, #388]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800322a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003230:	e015      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3304      	adds	r3, #4
 8003236:	2100      	movs	r1, #0
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fa73 	bl	8003724 <RCCEx_PLLSAI1_Config>
 800323e:	4603      	mov	r3, r0
 8003240:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003242:	e00c      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3320      	adds	r3, #32
 8003248:	2100      	movs	r1, #0
 800324a:	4618      	mov	r0, r3
 800324c:	f000 fb5a 	bl	8003904 <RCCEx_PLLSAI2_Config>
 8003250:	4603      	mov	r3, r0
 8003252:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003254:	e003      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	74fb      	strb	r3, [r7, #19]
      break;
 800325a:	e000      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800325c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800325e:	7cfb      	ldrb	r3, [r7, #19]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10b      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003264:	4b52      	ldr	r3, [pc, #328]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003272:	494f      	ldr	r1, [pc, #316]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800327a:	e001      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800327c:	7cfb      	ldrb	r3, [r7, #19]
 800327e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80a0 	beq.w	80033ce <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800328e:	2300      	movs	r3, #0
 8003290:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003292:	4b47      	ldr	r3, [pc, #284]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80032a2:	2300      	movs	r3, #0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00d      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a8:	4b41      	ldr	r3, [pc, #260]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ac:	4a40      	ldr	r2, [pc, #256]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b2:	6593      	str	r3, [r2, #88]	; 0x58
 80032b4:	4b3e      	ldr	r3, [pc, #248]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032c0:	2301      	movs	r3, #1
 80032c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032c4:	4b3b      	ldr	r3, [pc, #236]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a3a      	ldr	r2, [pc, #232]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80032ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032d0:	f7fe fe5a 	bl	8001f88 <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032d6:	e009      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d8:	f7fe fe56 	bl	8001f88 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d902      	bls.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	74fb      	strb	r3, [r7, #19]
        break;
 80032ea:	e005      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032ec:	4b31      	ldr	r3, [pc, #196]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0ef      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80032f8:	7cfb      	ldrb	r3, [r7, #19]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d15c      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032fe:	4b2c      	ldr	r3, [pc, #176]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003308:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d01f      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	429a      	cmp	r2, r3
 800331a:	d019      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800331c:	4b24      	ldr	r3, [pc, #144]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003326:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003328:	4b21      	ldr	r3, [pc, #132]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332e:	4a20      	ldr	r2, [pc, #128]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003338:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800333a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333e:	4a1c      	ldr	r2, [pc, #112]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003348:	4a19      	ldr	r2, [pc, #100]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d016      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335a:	f7fe fe15 	bl	8001f88 <HAL_GetTick>
 800335e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003360:	e00b      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003362:	f7fe fe11 	bl	8001f88 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003370:	4293      	cmp	r3, r2
 8003372:	d902      	bls.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	74fb      	strb	r3, [r7, #19]
            break;
 8003378:	e006      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800337a:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800337c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ec      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003388:	7cfb      	ldrb	r3, [r7, #19]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10c      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003394:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800339e:	4904      	ldr	r1, [pc, #16]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033a6:	e009      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033a8:	7cfb      	ldrb	r3, [r7, #19]
 80033aa:	74bb      	strb	r3, [r7, #18]
 80033ac:	e006      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033bc:	7c7b      	ldrb	r3, [r7, #17]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d105      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c2:	4b9e      	ldr	r3, [pc, #632]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c6:	4a9d      	ldr	r2, [pc, #628]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033da:	4b98      	ldr	r3, [pc, #608]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e0:	f023 0203 	bic.w	r2, r3, #3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	4994      	ldr	r1, [pc, #592]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033fc:	4b8f      	ldr	r3, [pc, #572]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003402:	f023 020c 	bic.w	r2, r3, #12
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340a:	498c      	ldr	r1, [pc, #560]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800341e:	4b87      	ldr	r3, [pc, #540]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003424:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	4983      	ldr	r1, [pc, #524]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003440:	4b7e      	ldr	r3, [pc, #504]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003446:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	497b      	ldr	r1, [pc, #492]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003462:	4b76      	ldr	r3, [pc, #472]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003470:	4972      	ldr	r1, [pc, #456]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003484:	4b6d      	ldr	r3, [pc, #436]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003492:	496a      	ldr	r1, [pc, #424]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034a6:	4b65      	ldr	r3, [pc, #404]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b4:	4961      	ldr	r1, [pc, #388]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034c8:	4b5c      	ldr	r3, [pc, #368]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d6:	4959      	ldr	r1, [pc, #356]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034ea:	4b54      	ldr	r3, [pc, #336]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f8:	4950      	ldr	r1, [pc, #320]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800350c:	4b4b      	ldr	r3, [pc, #300]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003512:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	4948      	ldr	r1, [pc, #288]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800352e:	4b43      	ldr	r3, [pc, #268]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003534:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353c:	493f      	ldr	r1, [pc, #252]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d028      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003550:	4b3a      	ldr	r3, [pc, #232]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800355e:	4937      	ldr	r1, [pc, #220]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800356a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800356e:	d106      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003570:	4b32      	ldr	r3, [pc, #200]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	4a31      	ldr	r2, [pc, #196]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800357a:	60d3      	str	r3, [r2, #12]
 800357c:	e011      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003582:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003586:	d10c      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3304      	adds	r3, #4
 800358c:	2101      	movs	r1, #1
 800358e:	4618      	mov	r0, r3
 8003590:	f000 f8c8 	bl	8003724 <RCCEx_PLLSAI1_Config>
 8003594:	4603      	mov	r3, r0
 8003596:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003598:	7cfb      	ldrb	r3, [r7, #19]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800359e:	7cfb      	ldrb	r3, [r7, #19]
 80035a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d028      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035ae:	4b23      	ldr	r3, [pc, #140]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	491f      	ldr	r1, [pc, #124]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035cc:	d106      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ce:	4b1b      	ldr	r3, [pc, #108]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	4a1a      	ldr	r2, [pc, #104]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035d8:	60d3      	str	r3, [r2, #12]
 80035da:	e011      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035e4:	d10c      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3304      	adds	r3, #4
 80035ea:	2101      	movs	r1, #1
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 f899 	bl	8003724 <RCCEx_PLLSAI1_Config>
 80035f2:	4603      	mov	r3, r0
 80035f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035f6:	7cfb      	ldrb	r3, [r7, #19]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80035fc:	7cfb      	ldrb	r3, [r7, #19]
 80035fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d02b      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800360c:	4b0b      	ldr	r3, [pc, #44]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003612:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361a:	4908      	ldr	r1, [pc, #32]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003626:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800362a:	d109      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a02      	ldr	r2, [pc, #8]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003636:	60d3      	str	r3, [r2, #12]
 8003638:	e014      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800363a:	bf00      	nop
 800363c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003644:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003648:	d10c      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3304      	adds	r3, #4
 800364e:	2101      	movs	r1, #1
 8003650:	4618      	mov	r0, r3
 8003652:	f000 f867 	bl	8003724 <RCCEx_PLLSAI1_Config>
 8003656:	4603      	mov	r3, r0
 8003658:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800365a:	7cfb      	ldrb	r3, [r7, #19]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d02f      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003670:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003676:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800367e:	4928      	ldr	r1, [pc, #160]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800368a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800368e:	d10d      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3304      	adds	r3, #4
 8003694:	2102      	movs	r1, #2
 8003696:	4618      	mov	r0, r3
 8003698:	f000 f844 	bl	8003724 <RCCEx_PLLSAI1_Config>
 800369c:	4603      	mov	r3, r0
 800369e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036a0:	7cfb      	ldrb	r3, [r7, #19]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d014      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80036a6:	7cfb      	ldrb	r3, [r7, #19]
 80036a8:	74bb      	strb	r3, [r7, #18]
 80036aa:	e011      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3320      	adds	r3, #32
 80036ba:	2102      	movs	r1, #2
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 f921 	bl	8003904 <RCCEx_PLLSAI2_Config>
 80036c2:	4603      	mov	r3, r0
 80036c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036c6:	7cfb      	ldrb	r3, [r7, #19]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80036cc:	7cfb      	ldrb	r3, [r7, #19]
 80036ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036dc:	4b10      	ldr	r3, [pc, #64]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ea:	490d      	ldr	r1, [pc, #52]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00b      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036fe:	4b08      	ldr	r3, [pc, #32]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003704:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800370e:	4904      	ldr	r1, [pc, #16]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003716:	7cbb      	ldrb	r3, [r7, #18]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40021000 	.word	0x40021000

08003724 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003732:	4b73      	ldr	r3, [pc, #460]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d018      	beq.n	8003770 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800373e:	4b70      	ldr	r3, [pc, #448]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f003 0203 	and.w	r2, r3, #3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d10d      	bne.n	800376a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
       ||
 8003752:	2b00      	cmp	r3, #0
 8003754:	d009      	beq.n	800376a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003756:	4b6a      	ldr	r3, [pc, #424]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	091b      	lsrs	r3, r3, #4
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
       ||
 8003766:	429a      	cmp	r2, r3
 8003768:	d044      	beq.n	80037f4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
 800376e:	e041      	b.n	80037f4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b02      	cmp	r3, #2
 8003776:	d00c      	beq.n	8003792 <RCCEx_PLLSAI1_Config+0x6e>
 8003778:	2b03      	cmp	r3, #3
 800377a:	d013      	beq.n	80037a4 <RCCEx_PLLSAI1_Config+0x80>
 800377c:	2b01      	cmp	r3, #1
 800377e:	d120      	bne.n	80037c2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003780:	4b5f      	ldr	r3, [pc, #380]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d11d      	bne.n	80037c8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003790:	e01a      	b.n	80037c8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003792:	4b5b      	ldr	r3, [pc, #364]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379a:	2b00      	cmp	r3, #0
 800379c:	d116      	bne.n	80037cc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a2:	e013      	b.n	80037cc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037a4:	4b56      	ldr	r3, [pc, #344]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10f      	bne.n	80037d0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037b0:	4b53      	ldr	r3, [pc, #332]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d109      	bne.n	80037d0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037c0:	e006      	b.n	80037d0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
      break;
 80037c6:	e004      	b.n	80037d2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80037c8:	bf00      	nop
 80037ca:	e002      	b.n	80037d2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80037cc:	bf00      	nop
 80037ce:	e000      	b.n	80037d2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80037d0:	bf00      	nop
    }

    if(status == HAL_OK)
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10d      	bne.n	80037f4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037d8:	4b49      	ldr	r3, [pc, #292]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6819      	ldr	r1, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	3b01      	subs	r3, #1
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	430b      	orrs	r3, r1
 80037ee:	4944      	ldr	r1, [pc, #272]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d17d      	bne.n	80038f6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037fa:	4b41      	ldr	r3, [pc, #260]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a40      	ldr	r2, [pc, #256]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003800:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003806:	f7fe fbbf 	bl	8001f88 <HAL_GetTick>
 800380a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800380c:	e009      	b.n	8003822 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800380e:	f7fe fbbb 	bl	8001f88 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d902      	bls.n	8003822 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	73fb      	strb	r3, [r7, #15]
        break;
 8003820:	e005      	b.n	800382e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003822:	4b37      	ldr	r3, [pc, #220]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1ef      	bne.n	800380e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d160      	bne.n	80038f6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d111      	bne.n	800385e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800383a:	4b31      	ldr	r3, [pc, #196]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6892      	ldr	r2, [r2, #8]
 800384a:	0211      	lsls	r1, r2, #8
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	68d2      	ldr	r2, [r2, #12]
 8003850:	0912      	lsrs	r2, r2, #4
 8003852:	0452      	lsls	r2, r2, #17
 8003854:	430a      	orrs	r2, r1
 8003856:	492a      	ldr	r1, [pc, #168]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003858:	4313      	orrs	r3, r2
 800385a:	610b      	str	r3, [r1, #16]
 800385c:	e027      	b.n	80038ae <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d112      	bne.n	800388a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003864:	4b26      	ldr	r3, [pc, #152]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800386c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6892      	ldr	r2, [r2, #8]
 8003874:	0211      	lsls	r1, r2, #8
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6912      	ldr	r2, [r2, #16]
 800387a:	0852      	lsrs	r2, r2, #1
 800387c:	3a01      	subs	r2, #1
 800387e:	0552      	lsls	r2, r2, #21
 8003880:	430a      	orrs	r2, r1
 8003882:	491f      	ldr	r1, [pc, #124]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003884:	4313      	orrs	r3, r2
 8003886:	610b      	str	r3, [r1, #16]
 8003888:	e011      	b.n	80038ae <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800388a:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003892:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6892      	ldr	r2, [r2, #8]
 800389a:	0211      	lsls	r1, r2, #8
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6952      	ldr	r2, [r2, #20]
 80038a0:	0852      	lsrs	r2, r2, #1
 80038a2:	3a01      	subs	r2, #1
 80038a4:	0652      	lsls	r2, r2, #25
 80038a6:	430a      	orrs	r2, r1
 80038a8:	4915      	ldr	r1, [pc, #84]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038ae:	4b14      	ldr	r3, [pc, #80]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a13      	ldr	r2, [pc, #76]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ba:	f7fe fb65 	bl	8001f88 <HAL_GetTick>
 80038be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038c0:	e009      	b.n	80038d6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038c2:	f7fe fb61 	bl	8001f88 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d902      	bls.n	80038d6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	73fb      	strb	r3, [r7, #15]
          break;
 80038d4:	e005      	b.n	80038e2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038d6:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0ef      	beq.n	80038c2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d106      	bne.n	80038f6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	4903      	ldr	r1, [pc, #12]	; (8003900 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40021000 	.word	0x40021000

08003904 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003912:	4b68      	ldr	r3, [pc, #416]	; (8003ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d018      	beq.n	8003950 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800391e:	4b65      	ldr	r3, [pc, #404]	; (8003ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f003 0203 	and.w	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d10d      	bne.n	800394a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
       ||
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003936:	4b5f      	ldr	r3, [pc, #380]	; (8003ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	091b      	lsrs	r3, r3, #4
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
       ||
 8003946:	429a      	cmp	r2, r3
 8003948:	d044      	beq.n	80039d4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	73fb      	strb	r3, [r7, #15]
 800394e:	e041      	b.n	80039d4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d00c      	beq.n	8003972 <RCCEx_PLLSAI2_Config+0x6e>
 8003958:	2b03      	cmp	r3, #3
 800395a:	d013      	beq.n	8003984 <RCCEx_PLLSAI2_Config+0x80>
 800395c:	2b01      	cmp	r3, #1
 800395e:	d120      	bne.n	80039a2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003960:	4b54      	ldr	r3, [pc, #336]	; (8003ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d11d      	bne.n	80039a8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003970:	e01a      	b.n	80039a8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003972:	4b50      	ldr	r3, [pc, #320]	; (8003ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397a:	2b00      	cmp	r3, #0
 800397c:	d116      	bne.n	80039ac <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003982:	e013      	b.n	80039ac <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003984:	4b4b      	ldr	r3, [pc, #300]	; (8003ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10f      	bne.n	80039b0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003990:	4b48      	ldr	r3, [pc, #288]	; (8003ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d109      	bne.n	80039b0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039a0:	e006      	b.n	80039b0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	73fb      	strb	r3, [r7, #15]
      break;
 80039a6:	e004      	b.n	80039b2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80039a8:	bf00      	nop
 80039aa:	e002      	b.n	80039b2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80039ac:	bf00      	nop
 80039ae:	e000      	b.n	80039b2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80039b0:	bf00      	nop
    }

    if(status == HAL_OK)
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10d      	bne.n	80039d4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039b8:	4b3e      	ldr	r3, [pc, #248]	; (8003ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6819      	ldr	r1, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	3b01      	subs	r3, #1
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	430b      	orrs	r3, r1
 80039ce:	4939      	ldr	r1, [pc, #228]	; (8003ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d167      	bne.n	8003aaa <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039da:	4b36      	ldr	r3, [pc, #216]	; (8003ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a35      	ldr	r2, [pc, #212]	; (8003ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e6:	f7fe facf 	bl	8001f88 <HAL_GetTick>
 80039ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039ec:	e009      	b.n	8003a02 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039ee:	f7fe facb 	bl	8001f88 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d902      	bls.n	8003a02 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	73fb      	strb	r3, [r7, #15]
        break;
 8003a00:	e005      	b.n	8003a0e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a02:	4b2c      	ldr	r3, [pc, #176]	; (8003ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1ef      	bne.n	80039ee <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d14a      	bne.n	8003aaa <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d111      	bne.n	8003a3e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a1a:	4b26      	ldr	r3, [pc, #152]	; (8003ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6892      	ldr	r2, [r2, #8]
 8003a2a:	0211      	lsls	r1, r2, #8
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	68d2      	ldr	r2, [r2, #12]
 8003a30:	0912      	lsrs	r2, r2, #4
 8003a32:	0452      	lsls	r2, r2, #17
 8003a34:	430a      	orrs	r2, r1
 8003a36:	491f      	ldr	r1, [pc, #124]	; (8003ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	614b      	str	r3, [r1, #20]
 8003a3c:	e011      	b.n	8003a62 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a3e:	4b1d      	ldr	r3, [pc, #116]	; (8003ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a46:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6892      	ldr	r2, [r2, #8]
 8003a4e:	0211      	lsls	r1, r2, #8
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6912      	ldr	r2, [r2, #16]
 8003a54:	0852      	lsrs	r2, r2, #1
 8003a56:	3a01      	subs	r2, #1
 8003a58:	0652      	lsls	r2, r2, #25
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	4915      	ldr	r1, [pc, #84]	; (8003ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a62:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a13      	ldr	r2, [pc, #76]	; (8003ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a6c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6e:	f7fe fa8b 	bl	8001f88 <HAL_GetTick>
 8003a72:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a74:	e009      	b.n	8003a8a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a76:	f7fe fa87 	bl	8001f88 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d902      	bls.n	8003a8a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	73fb      	strb	r3, [r7, #15]
          break;
 8003a88:	e005      	b.n	8003a96 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a8a:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0ef      	beq.n	8003a76 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d106      	bne.n	8003aaa <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a9c:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a9e:	695a      	ldr	r2, [r3, #20]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	4903      	ldr	r1, [pc, #12]	; (8003ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40021000 	.word	0x40021000

08003ab8 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e03c      	b.n	8003b44 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fe f882 	bl	8001be8 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0201 	bic.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f9df 	bl	8003ec0 <USART_SetConfig>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e01b      	b.n	8003b44 <HAL_USART_Init+0x8c>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b1a:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b2a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fb17 	bl	8004170 <USART_CheckIdleState>
 8003b42:	4603      	mov	r3, r0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	; 0x28
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	f040 809a 	bne.w	8003c9e <HAL_USART_Transmit+0x152>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <HAL_USART_Transmit+0x2a>
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e092      	b.n	8003ca0 <HAL_USART_Transmit+0x154>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_USART_Transmit+0x3c>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e08b      	b.n	8003ca0 <HAL_USART_Transmit+0x154>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2212      	movs	r2, #18
 8003b9a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003b9e:	f7fe f9f3 	bl	8001f88 <HAL_GetTick>
 8003ba2:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	88fa      	ldrh	r2, [r7, #6]
 8003ba8:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	88fa      	ldrh	r2, [r7, #6]
 8003bae:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb8:	d108      	bne.n	8003bcc <HAL_USART_Transmit+0x80>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d104      	bne.n	8003bcc <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	e003      	b.n	8003bd4 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8003bd4:	e02b      	b.n	8003c2e <HAL_USART_Transmit+0xe2>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2180      	movs	r1, #128	; 0x80
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f936 	bl	8003e52 <USART_WaitOnFlagUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e057      	b.n	8003ca0 <HAL_USART_Transmit+0x154>
      }
      if (ptxdata8bits == NULL)
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10b      	bne.n	8003c0e <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	881a      	ldrh	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c02:	b292      	uxth	r2, r2
 8003c04:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	3302      	adds	r3, #2
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	e008      	b.n	8003c20 <HAL_USART_Transmit+0xd4>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	781a      	ldrb	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	b292      	uxth	r2, r2
 8003c18:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1ce      	bne.n	8003bd6 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2140      	movs	r1, #64	; 0x40
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f905 	bl	8003e52 <USART_WaitOnFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_USART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e026      	b.n	8003ca0 <HAL_USART_Transmit+0x154>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2240      	movs	r2, #64	; 0x40
 8003c58:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2208      	movs	r2, #8
 8003c60:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	8b1b      	ldrh	r3, [r3, #24]
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0208 	orr.w	r2, r2, #8
 8003c72:	b292      	uxth	r2, r2
 8003c74:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	8b1b      	ldrh	r3, [r3, #24]
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0210 	orr.w	r2, r2, #16
 8003c86:	b292      	uxth	r2, r2
 8003c88:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e000      	b.n	8003ca0 <HAL_USART_Transmit+0x154>
  }
  else
  {
    return HAL_BUSY;
 8003c9e:	2302      	movs	r3, #2
  }
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3720      	adds	r7, #32
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_USART_Receive>:
  * @param Size Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08a      	sub	sp, #40	; 0x28
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *prxdata8bits;
  uint16_t *prxdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	f040 80c1 	bne.w	8003e48 <HAL_USART_Receive+0x1a0>
  {
    if ((pRxData == NULL) || (Size == 0U))
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_USART_Receive+0x2a>
 8003ccc:	88fb      	ldrh	r3, [r7, #6]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_USART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e0b9      	b.n	8003e4a <HAL_USART_Receive+0x1a2>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <HAL_USART_Receive+0x3c>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	e0b2      	b.n	8003e4a <HAL_USART_Receive+0x1a2>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_RX;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2222      	movs	r2, #34	; 0x22
 8003cf6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003cfa:	f7fe f945 	bl	8001f88 <HAL_GetTick>
 8003cfe:	6178      	str	r0, [r7, #20]

    husart->RxXferSize = Size;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	88fa      	ldrh	r2, [r7, #6]
 8003d04:	861a      	strh	r2, [r3, #48]	; 0x30
    husart->RxXferCount = Size;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	88fa      	ldrh	r2, [r7, #6]
 8003d0a:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Computation of USART mask to apply to RDR register */
    USART_MASK_COMPUTATION(husart);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d14:	d10c      	bne.n	8003d30 <HAL_USART_Receive+0x88>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d104      	bne.n	8003d28 <HAL_USART_Receive+0x80>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003d24:	869a      	strh	r2, [r3, #52]	; 0x34
 8003d26:	e027      	b.n	8003d78 <HAL_USART_Receive+0xd0>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	22ff      	movs	r2, #255	; 0xff
 8003d2c:	869a      	strh	r2, [r3, #52]	; 0x34
 8003d2e:	e023      	b.n	8003d78 <HAL_USART_Receive+0xd0>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10b      	bne.n	8003d50 <HAL_USART_Receive+0xa8>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d103      	bne.n	8003d48 <HAL_USART_Receive+0xa0>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	22ff      	movs	r2, #255	; 0xff
 8003d44:	869a      	strh	r2, [r3, #52]	; 0x34
 8003d46:	e017      	b.n	8003d78 <HAL_USART_Receive+0xd0>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	227f      	movs	r2, #127	; 0x7f
 8003d4c:	869a      	strh	r2, [r3, #52]	; 0x34
 8003d4e:	e013      	b.n	8003d78 <HAL_USART_Receive+0xd0>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d58:	d10b      	bne.n	8003d72 <HAL_USART_Receive+0xca>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d103      	bne.n	8003d6a <HAL_USART_Receive+0xc2>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	227f      	movs	r2, #127	; 0x7f
 8003d66:	869a      	strh	r2, [r3, #52]	; 0x34
 8003d68:	e006      	b.n	8003d78 <HAL_USART_Receive+0xd0>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	223f      	movs	r2, #63	; 0x3f
 8003d6e:	869a      	strh	r2, [r3, #52]	; 0x34
 8003d70:	e002      	b.n	8003d78 <HAL_USART_Receive+0xd0>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	869a      	strh	r2, [r3, #52]	; 0x34
    uhMask = husart->Mask;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003d7c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d86:	d108      	bne.n	8003d9a <HAL_USART_Receive+0xf2>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d104      	bne.n	8003d9a <HAL_USART_Receive+0xf2>
    {
      prxdata8bits  = NULL;
 8003d90:	2300      	movs	r3, #0
 8003d92:	61fb      	str	r3, [r7, #28]
      prxdata16bits = (uint16_t *) pRxData;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	61bb      	str	r3, [r7, #24]
 8003d98:	e003      	b.n	8003da2 <HAL_USART_Receive+0xfa>
    }
    else
    {
      prxdata8bits  = pRxData;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	61fb      	str	r3, [r7, #28]
      prxdata16bits = NULL;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (husart->RxXferCount > 0U)
 8003da2:	e042      	b.n	8003e2a <HAL_USART_Receive+0x182>
      {
        /* Wait until TXE flag is set to send dummy byte in order to generate the
        * clock for the slave to send data.
        * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
        * can be written for all the cases. */
        if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	2200      	movs	r2, #0
 8003dac:	2180      	movs	r1, #128	; 0x80
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f84f 	bl	8003e52 <USART_WaitOnFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_USART_Receive+0x116>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e045      	b.n	8003e4a <HAL_USART_Receive+0x1a2>
        }
        husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x0FF);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	22ff      	movs	r2, #255	; 0xff
 8003dc4:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait for RXNE Flag */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2120      	movs	r1, #32
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f83e 	bl	8003e52 <USART_WaitOnFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_USART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e034      	b.n	8003e4a <HAL_USART_Receive+0x1a2>
      }

      if (prxdata8bits == NULL)
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10c      	bne.n	8003e00 <HAL_USART_Receive+0x158>
      {
        *prxdata16bits = (uint16_t)(husart->Instance->RDR & uhMask);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	8a7b      	ldrh	r3, [r7, #18]
 8003df0:	4013      	ands	r3, r2
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	801a      	strh	r2, [r3, #0]
        prxdata16bits++;
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	3302      	adds	r3, #2
 8003dfc:	61bb      	str	r3, [r7, #24]
 8003dfe:	e00d      	b.n	8003e1c <HAL_USART_Receive+0x174>
      }
      else
      {
        *prxdata8bits = (uint8_t)(husart->Instance->RDR & (uint8_t)(uhMask & 0xFFU));
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	8a7b      	ldrh	r3, [r7, #18]
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	4013      	ands	r3, r2
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	701a      	strb	r2, [r3, #0]
        prxdata8bits++;
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	61fb      	str	r3, [r7, #28]
      }

      husart->RxXferCount--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	865a      	strh	r2, [r3, #50]	; 0x32
    while (husart->RxXferCount > 0U)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1b7      	bne.n	8003da4 <HAL_USART_Receive+0xfc>
      __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR2_SLVEN */

    /* At end of Rx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	e000      	b.n	8003e4a <HAL_USART_Receive+0x1a2>
  }
  else
  {
    return HAL_BUSY;
 8003e48:	2302      	movs	r3, #2
  }
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	603b      	str	r3, [r7, #0]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003e62:	e018      	b.n	8003e96 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6a:	d014      	beq.n	8003e96 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e6c:	f7fe f88c 	bl	8001f88 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d302      	bcc.n	8003e82 <USART_WaitOnFlagUntilTimeout+0x30>
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e00f      	b.n	8003eb6 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	bf0c      	ite	eq
 8003ea6:	2301      	moveq	r3, #1
 8003ea8:	2300      	movne	r3, #0
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d0d7      	beq.n	8003e64 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b088      	sub	sp, #32
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	4b9b      	ldr	r3, [pc, #620]	; (800415c <USART_SetConfig+0x29c>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6812      	ldr	r2, [r2, #0]
 8003ef4:	6979      	ldr	r1, [r7, #20]
 8003ef6:	430b      	orrs	r3, r1
 8003ef8:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8003efa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003efe:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a88      	ldr	r2, [pc, #544]	; (8004160 <USART_SetConfig+0x2a0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d122      	bne.n	8003f88 <USART_SetConfig+0xc8>
 8003f42:	4b88      	ldr	r3, [pc, #544]	; (8004164 <USART_SetConfig+0x2a4>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	d817      	bhi.n	8003f80 <USART_SetConfig+0xc0>
 8003f50:	a201      	add	r2, pc, #4	; (adr r2, 8003f58 <USART_SetConfig+0x98>)
 8003f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f56:	bf00      	nop
 8003f58:	08003f69 	.word	0x08003f69
 8003f5c:	08003f75 	.word	0x08003f75
 8003f60:	08003f6f 	.word	0x08003f6f
 8003f64:	08003f7b 	.word	0x08003f7b
 8003f68:	2301      	movs	r3, #1
 8003f6a:	77fb      	strb	r3, [r7, #31]
 8003f6c:	e06e      	b.n	800404c <USART_SetConfig+0x18c>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	77fb      	strb	r3, [r7, #31]
 8003f72:	e06b      	b.n	800404c <USART_SetConfig+0x18c>
 8003f74:	2304      	movs	r3, #4
 8003f76:	77fb      	strb	r3, [r7, #31]
 8003f78:	e068      	b.n	800404c <USART_SetConfig+0x18c>
 8003f7a:	2308      	movs	r3, #8
 8003f7c:	77fb      	strb	r3, [r7, #31]
 8003f7e:	e065      	b.n	800404c <USART_SetConfig+0x18c>
 8003f80:	2310      	movs	r3, #16
 8003f82:	77fb      	strb	r3, [r7, #31]
 8003f84:	bf00      	nop
 8003f86:	e061      	b.n	800404c <USART_SetConfig+0x18c>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a76      	ldr	r2, [pc, #472]	; (8004168 <USART_SetConfig+0x2a8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d134      	bne.n	8003ffc <USART_SetConfig+0x13c>
 8003f92:	4b74      	ldr	r3, [pc, #464]	; (8004164 <USART_SetConfig+0x2a4>)
 8003f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f98:	f003 030c 	and.w	r3, r3, #12
 8003f9c:	2b0c      	cmp	r3, #12
 8003f9e:	d829      	bhi.n	8003ff4 <USART_SetConfig+0x134>
 8003fa0:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <USART_SetConfig+0xe8>)
 8003fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa6:	bf00      	nop
 8003fa8:	08003fdd 	.word	0x08003fdd
 8003fac:	08003ff5 	.word	0x08003ff5
 8003fb0:	08003ff5 	.word	0x08003ff5
 8003fb4:	08003ff5 	.word	0x08003ff5
 8003fb8:	08003fe9 	.word	0x08003fe9
 8003fbc:	08003ff5 	.word	0x08003ff5
 8003fc0:	08003ff5 	.word	0x08003ff5
 8003fc4:	08003ff5 	.word	0x08003ff5
 8003fc8:	08003fe3 	.word	0x08003fe3
 8003fcc:	08003ff5 	.word	0x08003ff5
 8003fd0:	08003ff5 	.word	0x08003ff5
 8003fd4:	08003ff5 	.word	0x08003ff5
 8003fd8:	08003fef 	.word	0x08003fef
 8003fdc:	2300      	movs	r3, #0
 8003fde:	77fb      	strb	r3, [r7, #31]
 8003fe0:	e034      	b.n	800404c <USART_SetConfig+0x18c>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	77fb      	strb	r3, [r7, #31]
 8003fe6:	e031      	b.n	800404c <USART_SetConfig+0x18c>
 8003fe8:	2304      	movs	r3, #4
 8003fea:	77fb      	strb	r3, [r7, #31]
 8003fec:	e02e      	b.n	800404c <USART_SetConfig+0x18c>
 8003fee:	2308      	movs	r3, #8
 8003ff0:	77fb      	strb	r3, [r7, #31]
 8003ff2:	e02b      	b.n	800404c <USART_SetConfig+0x18c>
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	77fb      	strb	r3, [r7, #31]
 8003ff8:	bf00      	nop
 8003ffa:	e027      	b.n	800404c <USART_SetConfig+0x18c>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a5a      	ldr	r2, [pc, #360]	; (800416c <USART_SetConfig+0x2ac>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d120      	bne.n	8004048 <USART_SetConfig+0x188>
 8004006:	4b57      	ldr	r3, [pc, #348]	; (8004164 <USART_SetConfig+0x2a4>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004010:	2b10      	cmp	r3, #16
 8004012:	d00f      	beq.n	8004034 <USART_SetConfig+0x174>
 8004014:	2b10      	cmp	r3, #16
 8004016:	d802      	bhi.n	800401e <USART_SetConfig+0x15e>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <USART_SetConfig+0x168>
 800401c:	e010      	b.n	8004040 <USART_SetConfig+0x180>
 800401e:	2b20      	cmp	r3, #32
 8004020:	d005      	beq.n	800402e <USART_SetConfig+0x16e>
 8004022:	2b30      	cmp	r3, #48	; 0x30
 8004024:	d009      	beq.n	800403a <USART_SetConfig+0x17a>
 8004026:	e00b      	b.n	8004040 <USART_SetConfig+0x180>
 8004028:	2300      	movs	r3, #0
 800402a:	77fb      	strb	r3, [r7, #31]
 800402c:	e00e      	b.n	800404c <USART_SetConfig+0x18c>
 800402e:	2302      	movs	r3, #2
 8004030:	77fb      	strb	r3, [r7, #31]
 8004032:	e00b      	b.n	800404c <USART_SetConfig+0x18c>
 8004034:	2304      	movs	r3, #4
 8004036:	77fb      	strb	r3, [r7, #31]
 8004038:	e008      	b.n	800404c <USART_SetConfig+0x18c>
 800403a:	2308      	movs	r3, #8
 800403c:	77fb      	strb	r3, [r7, #31]
 800403e:	e005      	b.n	800404c <USART_SetConfig+0x18c>
 8004040:	2310      	movs	r3, #16
 8004042:	77fb      	strb	r3, [r7, #31]
 8004044:	bf00      	nop
 8004046:	e001      	b.n	800404c <USART_SetConfig+0x18c>
 8004048:	2310      	movs	r3, #16
 800404a:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 800404c:	7ffb      	ldrb	r3, [r7, #31]
 800404e:	2b08      	cmp	r3, #8
 8004050:	d859      	bhi.n	8004106 <USART_SetConfig+0x246>
 8004052:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <USART_SetConfig+0x198>)
 8004054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004058:	0800407d 	.word	0x0800407d
 800405c:	0800409b 	.word	0x0800409b
 8004060:	080040b9 	.word	0x080040b9
 8004064:	08004107 	.word	0x08004107
 8004068:	080040d3 	.word	0x080040d3
 800406c:	08004107 	.word	0x08004107
 8004070:	08004107 	.word	0x08004107
 8004074:	08004107 	.word	0x08004107
 8004078:	080040f1 	.word	0x080040f1
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800407c:	f7fe ffe0 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 8004080:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	005a      	lsls	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	085b      	lsrs	r3, r3, #1
 800408c:	441a      	add	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	fbb2 f3f3 	udiv	r3, r2, r3
 8004096:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8004098:	e038      	b.n	800410c <USART_SetConfig+0x24c>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800409a:	f7fe ffe7 	bl	800306c <HAL_RCC_GetPCLK2Freq>
 800409e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	005a      	lsls	r2, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	085b      	lsrs	r3, r3, #1
 80040aa:	441a      	add	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80040b6:	e029      	b.n	800410c <USART_SetConfig+0x24c>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	085b      	lsrs	r3, r3, #1
 80040be:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80040c2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6852      	ldr	r2, [r2, #4]
 80040ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80040d0:	e01c      	b.n	800410c <USART_SetConfig+0x24c>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80040d2:	f7fe ff1f 	bl	8002f14 <HAL_RCC_GetSysClockFreq>
 80040d6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	005a      	lsls	r2, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	085b      	lsrs	r3, r3, #1
 80040e2:	441a      	add	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80040ee:	e00d      	b.n	800410c <USART_SetConfig+0x24c>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	085b      	lsrs	r3, r3, #1
 80040f6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004102:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8004104:	e002      	b.n	800410c <USART_SetConfig+0x24c>
    default:
      ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	77bb      	strb	r3, [r7, #30]
      break;
 800410a:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b0f      	cmp	r3, #15
 8004110:	d916      	bls.n	8004140 <USART_SetConfig+0x280>
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004118:	d212      	bcs.n	8004140 <USART_SetConfig+0x280>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	b29b      	uxth	r3, r3
 800411e:	f023 030f 	bic.w	r3, r3, #15
 8004122:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	085b      	lsrs	r3, r3, #1
 8004128:	b29b      	uxth	r3, r3
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	b29a      	uxth	r2, r3
 8004130:	89fb      	ldrh	r3, [r7, #14]
 8004132:	4313      	orrs	r3, r2
 8004134:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	89fa      	ldrh	r2, [r7, #14]
 800413c:	60da      	str	r2, [r3, #12]
 800413e:	e001      	b.n	8004144 <USART_SetConfig+0x284>
  }
  else
  {
    ret = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8004150:	7fbb      	ldrb	r3, [r7, #30]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3720      	adds	r7, #32
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	efff69f3 	.word	0xefff69f3
 8004160:	40013800 	.word	0x40013800
 8004164:	40021000 	.word	0x40021000
 8004168:	40004400 	.word	0x40004400
 800416c:	40004800 	.word	0x40004800

08004170 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af02      	add	r7, sp, #8
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800417e:	f7fd ff03 	bl	8001f88 <HAL_GetTick>
 8004182:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b08      	cmp	r3, #8
 8004190:	d10e      	bne.n	80041b0 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8004192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff fe56 	bl	8003e52 <USART_WaitOnFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e01e      	b.n	80041ee <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d10e      	bne.n	80041dc <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80041be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff fe40 	bl	8003e52 <USART_WaitOnFlagUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e008      	b.n	80041ee <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <arm_cfft_radix2_init_f32>:
 80041f8:	b410      	push	{r4}
 80041fa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80041fe:	4c4c      	ldr	r4, [pc, #304]	; (8004330 <arm_cfft_radix2_init_f32+0x138>)
 8004200:	7082      	strb	r2, [r0, #2]
 8004202:	70c3      	strb	r3, [r0, #3]
 8004204:	8001      	strh	r1, [r0, #0]
 8004206:	6044      	str	r4, [r0, #4]
 8004208:	d072      	beq.n	80042f0 <arm_cfft_radix2_init_f32+0xf8>
 800420a:	d917      	bls.n	800423c <arm_cfft_radix2_init_f32+0x44>
 800420c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004210:	d07b      	beq.n	800430a <arm_cfft_radix2_init_f32+0x112>
 8004212:	d950      	bls.n	80042b6 <arm_cfft_radix2_init_f32+0xbe>
 8004214:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004218:	d030      	beq.n	800427c <arm_cfft_radix2_init_f32+0x84>
 800421a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800421e:	f040 8081 	bne.w	8004324 <arm_cfft_radix2_init_f32+0x12c>
 8004222:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 8004226:	6103      	str	r3, [r0, #16]
 8004228:	4a42      	ldr	r2, [pc, #264]	; (8004334 <arm_cfft_radix2_init_f32+0x13c>)
 800422a:	6082      	str	r2, [r0, #8]
 800422c:	2301      	movs	r3, #1
 800422e:	8183      	strh	r3, [r0, #12]
 8004230:	81c3      	strh	r3, [r0, #14]
 8004232:	2000      	movs	r0, #0
 8004234:	b240      	sxtb	r0, r0
 8004236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	2920      	cmp	r1, #32
 800423e:	d04a      	beq.n	80042d6 <arm_cfft_radix2_init_f32+0xde>
 8004240:	d929      	bls.n	8004296 <arm_cfft_radix2_init_f32+0x9e>
 8004242:	2940      	cmp	r1, #64	; 0x40
 8004244:	d00e      	beq.n	8004264 <arm_cfft_radix2_init_f32+0x6c>
 8004246:	2980      	cmp	r1, #128	; 0x80
 8004248:	d16c      	bne.n	8004324 <arm_cfft_radix2_init_f32+0x12c>
 800424a:	f04f 5370 	mov.w	r3, #1006632960	; 0x3c000000
 800424e:	6103      	str	r3, [r0, #16]
 8004250:	4a39      	ldr	r2, [pc, #228]	; (8004338 <arm_cfft_radix2_init_f32+0x140>)
 8004252:	6082      	str	r2, [r0, #8]
 8004254:	2320      	movs	r3, #32
 8004256:	8183      	strh	r3, [r0, #12]
 8004258:	81c3      	strh	r3, [r0, #14]
 800425a:	2000      	movs	r0, #0
 800425c:	b240      	sxtb	r0, r0
 800425e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 8004268:	4b34      	ldr	r3, [pc, #208]	; (800433c <arm_cfft_radix2_init_f32+0x144>)
 800426a:	8181      	strh	r1, [r0, #12]
 800426c:	81c1      	strh	r1, [r0, #14]
 800426e:	6102      	str	r2, [r0, #16]
 8004270:	6083      	str	r3, [r0, #8]
 8004272:	2000      	movs	r0, #0
 8004274:	b240      	sxtb	r0, r0
 8004276:	f85d 4b04 	ldr.w	r4, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	f04f 5368 	mov.w	r3, #973078528	; 0x3a000000
 8004280:	6103      	str	r3, [r0, #16]
 8004282:	4a2f      	ldr	r2, [pc, #188]	; (8004340 <arm_cfft_radix2_init_f32+0x148>)
 8004284:	6082      	str	r2, [r0, #8]
 8004286:	2302      	movs	r3, #2
 8004288:	8183      	strh	r3, [r0, #12]
 800428a:	81c3      	strh	r3, [r0, #14]
 800428c:	2000      	movs	r0, #0
 800428e:	b240      	sxtb	r0, r0
 8004290:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	2910      	cmp	r1, #16
 8004298:	d144      	bne.n	8004324 <arm_cfft_radix2_init_f32+0x12c>
 800429a:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 800429e:	6103      	str	r3, [r0, #16]
 80042a0:	4a28      	ldr	r2, [pc, #160]	; (8004344 <arm_cfft_radix2_init_f32+0x14c>)
 80042a2:	6082      	str	r2, [r0, #8]
 80042a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042a8:	8183      	strh	r3, [r0, #12]
 80042aa:	81c3      	strh	r3, [r0, #14]
 80042ac:	2000      	movs	r0, #0
 80042ae:	b240      	sxtb	r0, r0
 80042b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80042ba:	d133      	bne.n	8004324 <arm_cfft_radix2_init_f32+0x12c>
 80042bc:	f04f 536c 	mov.w	r3, #989855744	; 0x3b000000
 80042c0:	6103      	str	r3, [r0, #16]
 80042c2:	4a21      	ldr	r2, [pc, #132]	; (8004348 <arm_cfft_radix2_init_f32+0x150>)
 80042c4:	6082      	str	r2, [r0, #8]
 80042c6:	2308      	movs	r3, #8
 80042c8:	8183      	strh	r3, [r0, #12]
 80042ca:	81c3      	strh	r3, [r0, #14]
 80042cc:	2000      	movs	r0, #0
 80042ce:	b240      	sxtb	r0, r0
 80042d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	f04f 5374 	mov.w	r3, #1023410176	; 0x3d000000
 80042da:	6103      	str	r3, [r0, #16]
 80042dc:	4a1b      	ldr	r2, [pc, #108]	; (800434c <arm_cfft_radix2_init_f32+0x154>)
 80042de:	6082      	str	r2, [r0, #8]
 80042e0:	2380      	movs	r3, #128	; 0x80
 80042e2:	8183      	strh	r3, [r0, #12]
 80042e4:	81c3      	strh	r3, [r0, #14]
 80042e6:	2000      	movs	r0, #0
 80042e8:	b240      	sxtb	r0, r0
 80042ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 80042f4:	6103      	str	r3, [r0, #16]
 80042f6:	4a16      	ldr	r2, [pc, #88]	; (8004350 <arm_cfft_radix2_init_f32+0x158>)
 80042f8:	6082      	str	r2, [r0, #8]
 80042fa:	2310      	movs	r3, #16
 80042fc:	8183      	strh	r3, [r0, #12]
 80042fe:	81c3      	strh	r3, [r0, #14]
 8004300:	2000      	movs	r0, #0
 8004302:	b240      	sxtb	r0, r0
 8004304:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	f04f 536a 	mov.w	r3, #981467136	; 0x3a800000
 800430e:	6103      	str	r3, [r0, #16]
 8004310:	4a10      	ldr	r2, [pc, #64]	; (8004354 <arm_cfft_radix2_init_f32+0x15c>)
 8004312:	6082      	str	r2, [r0, #8]
 8004314:	2304      	movs	r3, #4
 8004316:	8183      	strh	r3, [r0, #12]
 8004318:	81c3      	strh	r3, [r0, #14]
 800431a:	2000      	movs	r0, #0
 800431c:	b240      	sxtb	r0, r0
 800431e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	20ff      	movs	r0, #255	; 0xff
 8004326:	b240      	sxtb	r0, r0
 8004328:	f85d 4b04 	ldr.w	r4, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	08007fdc 	.word	0x08007fdc
 8004334:	080077dc 	.word	0x080077dc
 8004338:	0800781a 	.word	0x0800781a
 800433c:	0800785a 	.word	0x0800785a
 8004340:	080077de 	.word	0x080077de
 8004344:	080079da 	.word	0x080079da
 8004348:	080077ea 	.word	0x080077ea
 800434c:	080078da 	.word	0x080078da
 8004350:	080077fa 	.word	0x080077fa
 8004354:	080077e2 	.word	0x080077e2

08004358 <calloc>:
 8004358:	4b02      	ldr	r3, [pc, #8]	; (8004364 <calloc+0xc>)
 800435a:	460a      	mov	r2, r1
 800435c:	4601      	mov	r1, r0
 800435e:	6818      	ldr	r0, [r3, #0]
 8004360:	f000 b84f 	b.w	8004402 <_calloc_r>
 8004364:	2000000c 	.word	0x2000000c

08004368 <__errno>:
 8004368:	4b01      	ldr	r3, [pc, #4]	; (8004370 <__errno+0x8>)
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	2000000c 	.word	0x2000000c

08004374 <__libc_init_array>:
 8004374:	b570      	push	{r4, r5, r6, lr}
 8004376:	4e0d      	ldr	r6, [pc, #52]	; (80043ac <__libc_init_array+0x38>)
 8004378:	4c0d      	ldr	r4, [pc, #52]	; (80043b0 <__libc_init_array+0x3c>)
 800437a:	1ba4      	subs	r4, r4, r6
 800437c:	10a4      	asrs	r4, r4, #2
 800437e:	2500      	movs	r5, #0
 8004380:	42a5      	cmp	r5, r4
 8004382:	d109      	bne.n	8004398 <__libc_init_array+0x24>
 8004384:	4e0b      	ldr	r6, [pc, #44]	; (80043b4 <__libc_init_array+0x40>)
 8004386:	4c0c      	ldr	r4, [pc, #48]	; (80043b8 <__libc_init_array+0x44>)
 8004388:	f003 f9ec 	bl	8007764 <_init>
 800438c:	1ba4      	subs	r4, r4, r6
 800438e:	10a4      	asrs	r4, r4, #2
 8004390:	2500      	movs	r5, #0
 8004392:	42a5      	cmp	r5, r4
 8004394:	d105      	bne.n	80043a2 <__libc_init_array+0x2e>
 8004396:	bd70      	pop	{r4, r5, r6, pc}
 8004398:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800439c:	4798      	blx	r3
 800439e:	3501      	adds	r5, #1
 80043a0:	e7ee      	b.n	8004380 <__libc_init_array+0xc>
 80043a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043a6:	4798      	blx	r3
 80043a8:	3501      	adds	r5, #1
 80043aa:	e7f2      	b.n	8004392 <__libc_init_array+0x1e>
 80043ac:	08010448 	.word	0x08010448
 80043b0:	08010448 	.word	0x08010448
 80043b4:	08010448 	.word	0x08010448
 80043b8:	0801044c 	.word	0x0801044c

080043bc <malloc>:
 80043bc:	4b02      	ldr	r3, [pc, #8]	; (80043c8 <malloc+0xc>)
 80043be:	4601      	mov	r1, r0
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	f000 b87b 	b.w	80044bc <_malloc_r>
 80043c6:	bf00      	nop
 80043c8:	2000000c 	.word	0x2000000c

080043cc <free>:
 80043cc:	4b02      	ldr	r3, [pc, #8]	; (80043d8 <free+0xc>)
 80043ce:	4601      	mov	r1, r0
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	f000 b825 	b.w	8004420 <_free_r>
 80043d6:	bf00      	nop
 80043d8:	2000000c 	.word	0x2000000c

080043dc <memcpy>:
 80043dc:	b510      	push	{r4, lr}
 80043de:	1e43      	subs	r3, r0, #1
 80043e0:	440a      	add	r2, r1
 80043e2:	4291      	cmp	r1, r2
 80043e4:	d100      	bne.n	80043e8 <memcpy+0xc>
 80043e6:	bd10      	pop	{r4, pc}
 80043e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043f0:	e7f7      	b.n	80043e2 <memcpy+0x6>

080043f2 <memset>:
 80043f2:	4402      	add	r2, r0
 80043f4:	4603      	mov	r3, r0
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d100      	bne.n	80043fc <memset+0xa>
 80043fa:	4770      	bx	lr
 80043fc:	f803 1b01 	strb.w	r1, [r3], #1
 8004400:	e7f9      	b.n	80043f6 <memset+0x4>

08004402 <_calloc_r>:
 8004402:	b538      	push	{r3, r4, r5, lr}
 8004404:	fb02 f401 	mul.w	r4, r2, r1
 8004408:	4621      	mov	r1, r4
 800440a:	f000 f857 	bl	80044bc <_malloc_r>
 800440e:	4605      	mov	r5, r0
 8004410:	b118      	cbz	r0, 800441a <_calloc_r+0x18>
 8004412:	4622      	mov	r2, r4
 8004414:	2100      	movs	r1, #0
 8004416:	f7ff ffec 	bl	80043f2 <memset>
 800441a:	4628      	mov	r0, r5
 800441c:	bd38      	pop	{r3, r4, r5, pc}
	...

08004420 <_free_r>:
 8004420:	b538      	push	{r3, r4, r5, lr}
 8004422:	4605      	mov	r5, r0
 8004424:	2900      	cmp	r1, #0
 8004426:	d045      	beq.n	80044b4 <_free_r+0x94>
 8004428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800442c:	1f0c      	subs	r4, r1, #4
 800442e:	2b00      	cmp	r3, #0
 8004430:	bfb8      	it	lt
 8004432:	18e4      	addlt	r4, r4, r3
 8004434:	f001 fd60 	bl	8005ef8 <__malloc_lock>
 8004438:	4a1f      	ldr	r2, [pc, #124]	; (80044b8 <_free_r+0x98>)
 800443a:	6813      	ldr	r3, [r2, #0]
 800443c:	4610      	mov	r0, r2
 800443e:	b933      	cbnz	r3, 800444e <_free_r+0x2e>
 8004440:	6063      	str	r3, [r4, #4]
 8004442:	6014      	str	r4, [r2, #0]
 8004444:	4628      	mov	r0, r5
 8004446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800444a:	f001 bd56 	b.w	8005efa <__malloc_unlock>
 800444e:	42a3      	cmp	r3, r4
 8004450:	d90c      	bls.n	800446c <_free_r+0x4c>
 8004452:	6821      	ldr	r1, [r4, #0]
 8004454:	1862      	adds	r2, r4, r1
 8004456:	4293      	cmp	r3, r2
 8004458:	bf04      	itt	eq
 800445a:	681a      	ldreq	r2, [r3, #0]
 800445c:	685b      	ldreq	r3, [r3, #4]
 800445e:	6063      	str	r3, [r4, #4]
 8004460:	bf04      	itt	eq
 8004462:	1852      	addeq	r2, r2, r1
 8004464:	6022      	streq	r2, [r4, #0]
 8004466:	6004      	str	r4, [r0, #0]
 8004468:	e7ec      	b.n	8004444 <_free_r+0x24>
 800446a:	4613      	mov	r3, r2
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	b10a      	cbz	r2, 8004474 <_free_r+0x54>
 8004470:	42a2      	cmp	r2, r4
 8004472:	d9fa      	bls.n	800446a <_free_r+0x4a>
 8004474:	6819      	ldr	r1, [r3, #0]
 8004476:	1858      	adds	r0, r3, r1
 8004478:	42a0      	cmp	r0, r4
 800447a:	d10b      	bne.n	8004494 <_free_r+0x74>
 800447c:	6820      	ldr	r0, [r4, #0]
 800447e:	4401      	add	r1, r0
 8004480:	1858      	adds	r0, r3, r1
 8004482:	4282      	cmp	r2, r0
 8004484:	6019      	str	r1, [r3, #0]
 8004486:	d1dd      	bne.n	8004444 <_free_r+0x24>
 8004488:	6810      	ldr	r0, [r2, #0]
 800448a:	6852      	ldr	r2, [r2, #4]
 800448c:	605a      	str	r2, [r3, #4]
 800448e:	4401      	add	r1, r0
 8004490:	6019      	str	r1, [r3, #0]
 8004492:	e7d7      	b.n	8004444 <_free_r+0x24>
 8004494:	d902      	bls.n	800449c <_free_r+0x7c>
 8004496:	230c      	movs	r3, #12
 8004498:	602b      	str	r3, [r5, #0]
 800449a:	e7d3      	b.n	8004444 <_free_r+0x24>
 800449c:	6820      	ldr	r0, [r4, #0]
 800449e:	1821      	adds	r1, r4, r0
 80044a0:	428a      	cmp	r2, r1
 80044a2:	bf04      	itt	eq
 80044a4:	6811      	ldreq	r1, [r2, #0]
 80044a6:	6852      	ldreq	r2, [r2, #4]
 80044a8:	6062      	str	r2, [r4, #4]
 80044aa:	bf04      	itt	eq
 80044ac:	1809      	addeq	r1, r1, r0
 80044ae:	6021      	streq	r1, [r4, #0]
 80044b0:	605c      	str	r4, [r3, #4]
 80044b2:	e7c7      	b.n	8004444 <_free_r+0x24>
 80044b4:	bd38      	pop	{r3, r4, r5, pc}
 80044b6:	bf00      	nop
 80044b8:	200001fc 	.word	0x200001fc

080044bc <_malloc_r>:
 80044bc:	b570      	push	{r4, r5, r6, lr}
 80044be:	1ccd      	adds	r5, r1, #3
 80044c0:	f025 0503 	bic.w	r5, r5, #3
 80044c4:	3508      	adds	r5, #8
 80044c6:	2d0c      	cmp	r5, #12
 80044c8:	bf38      	it	cc
 80044ca:	250c      	movcc	r5, #12
 80044cc:	2d00      	cmp	r5, #0
 80044ce:	4606      	mov	r6, r0
 80044d0:	db01      	blt.n	80044d6 <_malloc_r+0x1a>
 80044d2:	42a9      	cmp	r1, r5
 80044d4:	d903      	bls.n	80044de <_malloc_r+0x22>
 80044d6:	230c      	movs	r3, #12
 80044d8:	6033      	str	r3, [r6, #0]
 80044da:	2000      	movs	r0, #0
 80044dc:	bd70      	pop	{r4, r5, r6, pc}
 80044de:	f001 fd0b 	bl	8005ef8 <__malloc_lock>
 80044e2:	4a21      	ldr	r2, [pc, #132]	; (8004568 <_malloc_r+0xac>)
 80044e4:	6814      	ldr	r4, [r2, #0]
 80044e6:	4621      	mov	r1, r4
 80044e8:	b991      	cbnz	r1, 8004510 <_malloc_r+0x54>
 80044ea:	4c20      	ldr	r4, [pc, #128]	; (800456c <_malloc_r+0xb0>)
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	b91b      	cbnz	r3, 80044f8 <_malloc_r+0x3c>
 80044f0:	4630      	mov	r0, r6
 80044f2:	f000 fbff 	bl	8004cf4 <_sbrk_r>
 80044f6:	6020      	str	r0, [r4, #0]
 80044f8:	4629      	mov	r1, r5
 80044fa:	4630      	mov	r0, r6
 80044fc:	f000 fbfa 	bl	8004cf4 <_sbrk_r>
 8004500:	1c43      	adds	r3, r0, #1
 8004502:	d124      	bne.n	800454e <_malloc_r+0x92>
 8004504:	230c      	movs	r3, #12
 8004506:	6033      	str	r3, [r6, #0]
 8004508:	4630      	mov	r0, r6
 800450a:	f001 fcf6 	bl	8005efa <__malloc_unlock>
 800450e:	e7e4      	b.n	80044da <_malloc_r+0x1e>
 8004510:	680b      	ldr	r3, [r1, #0]
 8004512:	1b5b      	subs	r3, r3, r5
 8004514:	d418      	bmi.n	8004548 <_malloc_r+0x8c>
 8004516:	2b0b      	cmp	r3, #11
 8004518:	d90f      	bls.n	800453a <_malloc_r+0x7e>
 800451a:	600b      	str	r3, [r1, #0]
 800451c:	50cd      	str	r5, [r1, r3]
 800451e:	18cc      	adds	r4, r1, r3
 8004520:	4630      	mov	r0, r6
 8004522:	f001 fcea 	bl	8005efa <__malloc_unlock>
 8004526:	f104 000b 	add.w	r0, r4, #11
 800452a:	1d23      	adds	r3, r4, #4
 800452c:	f020 0007 	bic.w	r0, r0, #7
 8004530:	1ac3      	subs	r3, r0, r3
 8004532:	d0d3      	beq.n	80044dc <_malloc_r+0x20>
 8004534:	425a      	negs	r2, r3
 8004536:	50e2      	str	r2, [r4, r3]
 8004538:	e7d0      	b.n	80044dc <_malloc_r+0x20>
 800453a:	428c      	cmp	r4, r1
 800453c:	684b      	ldr	r3, [r1, #4]
 800453e:	bf16      	itet	ne
 8004540:	6063      	strne	r3, [r4, #4]
 8004542:	6013      	streq	r3, [r2, #0]
 8004544:	460c      	movne	r4, r1
 8004546:	e7eb      	b.n	8004520 <_malloc_r+0x64>
 8004548:	460c      	mov	r4, r1
 800454a:	6849      	ldr	r1, [r1, #4]
 800454c:	e7cc      	b.n	80044e8 <_malloc_r+0x2c>
 800454e:	1cc4      	adds	r4, r0, #3
 8004550:	f024 0403 	bic.w	r4, r4, #3
 8004554:	42a0      	cmp	r0, r4
 8004556:	d005      	beq.n	8004564 <_malloc_r+0xa8>
 8004558:	1a21      	subs	r1, r4, r0
 800455a:	4630      	mov	r0, r6
 800455c:	f000 fbca 	bl	8004cf4 <_sbrk_r>
 8004560:	3001      	adds	r0, #1
 8004562:	d0cf      	beq.n	8004504 <_malloc_r+0x48>
 8004564:	6025      	str	r5, [r4, #0]
 8004566:	e7db      	b.n	8004520 <_malloc_r+0x64>
 8004568:	200001fc 	.word	0x200001fc
 800456c:	20000200 	.word	0x20000200

08004570 <__cvt>:
 8004570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004574:	ec55 4b10 	vmov	r4, r5, d0
 8004578:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800457a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800457e:	2d00      	cmp	r5, #0
 8004580:	460e      	mov	r6, r1
 8004582:	4691      	mov	r9, r2
 8004584:	4619      	mov	r1, r3
 8004586:	bfb8      	it	lt
 8004588:	4622      	movlt	r2, r4
 800458a:	462b      	mov	r3, r5
 800458c:	f027 0720 	bic.w	r7, r7, #32
 8004590:	bfbb      	ittet	lt
 8004592:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004596:	461d      	movlt	r5, r3
 8004598:	2300      	movge	r3, #0
 800459a:	232d      	movlt	r3, #45	; 0x2d
 800459c:	bfb8      	it	lt
 800459e:	4614      	movlt	r4, r2
 80045a0:	2f46      	cmp	r7, #70	; 0x46
 80045a2:	700b      	strb	r3, [r1, #0]
 80045a4:	d004      	beq.n	80045b0 <__cvt+0x40>
 80045a6:	2f45      	cmp	r7, #69	; 0x45
 80045a8:	d100      	bne.n	80045ac <__cvt+0x3c>
 80045aa:	3601      	adds	r6, #1
 80045ac:	2102      	movs	r1, #2
 80045ae:	e000      	b.n	80045b2 <__cvt+0x42>
 80045b0:	2103      	movs	r1, #3
 80045b2:	ab03      	add	r3, sp, #12
 80045b4:	9301      	str	r3, [sp, #4]
 80045b6:	ab02      	add	r3, sp, #8
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	4632      	mov	r2, r6
 80045bc:	4653      	mov	r3, sl
 80045be:	ec45 4b10 	vmov	d0, r4, r5
 80045c2:	f000 fcf5 	bl	8004fb0 <_dtoa_r>
 80045c6:	2f47      	cmp	r7, #71	; 0x47
 80045c8:	4680      	mov	r8, r0
 80045ca:	d102      	bne.n	80045d2 <__cvt+0x62>
 80045cc:	f019 0f01 	tst.w	r9, #1
 80045d0:	d026      	beq.n	8004620 <__cvt+0xb0>
 80045d2:	2f46      	cmp	r7, #70	; 0x46
 80045d4:	eb08 0906 	add.w	r9, r8, r6
 80045d8:	d111      	bne.n	80045fe <__cvt+0x8e>
 80045da:	f898 3000 	ldrb.w	r3, [r8]
 80045de:	2b30      	cmp	r3, #48	; 0x30
 80045e0:	d10a      	bne.n	80045f8 <__cvt+0x88>
 80045e2:	2200      	movs	r2, #0
 80045e4:	2300      	movs	r3, #0
 80045e6:	4620      	mov	r0, r4
 80045e8:	4629      	mov	r1, r5
 80045ea:	f7fc fa19 	bl	8000a20 <__aeabi_dcmpeq>
 80045ee:	b918      	cbnz	r0, 80045f8 <__cvt+0x88>
 80045f0:	f1c6 0601 	rsb	r6, r6, #1
 80045f4:	f8ca 6000 	str.w	r6, [sl]
 80045f8:	f8da 3000 	ldr.w	r3, [sl]
 80045fc:	4499      	add	r9, r3
 80045fe:	2200      	movs	r2, #0
 8004600:	2300      	movs	r3, #0
 8004602:	4620      	mov	r0, r4
 8004604:	4629      	mov	r1, r5
 8004606:	f7fc fa0b 	bl	8000a20 <__aeabi_dcmpeq>
 800460a:	b938      	cbnz	r0, 800461c <__cvt+0xac>
 800460c:	2230      	movs	r2, #48	; 0x30
 800460e:	9b03      	ldr	r3, [sp, #12]
 8004610:	454b      	cmp	r3, r9
 8004612:	d205      	bcs.n	8004620 <__cvt+0xb0>
 8004614:	1c59      	adds	r1, r3, #1
 8004616:	9103      	str	r1, [sp, #12]
 8004618:	701a      	strb	r2, [r3, #0]
 800461a:	e7f8      	b.n	800460e <__cvt+0x9e>
 800461c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004620:	9b03      	ldr	r3, [sp, #12]
 8004622:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004624:	eba3 0308 	sub.w	r3, r3, r8
 8004628:	4640      	mov	r0, r8
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	b004      	add	sp, #16
 800462e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004632 <__exponent>:
 8004632:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004634:	2900      	cmp	r1, #0
 8004636:	4604      	mov	r4, r0
 8004638:	bfba      	itte	lt
 800463a:	4249      	neglt	r1, r1
 800463c:	232d      	movlt	r3, #45	; 0x2d
 800463e:	232b      	movge	r3, #43	; 0x2b
 8004640:	2909      	cmp	r1, #9
 8004642:	f804 2b02 	strb.w	r2, [r4], #2
 8004646:	7043      	strb	r3, [r0, #1]
 8004648:	dd20      	ble.n	800468c <__exponent+0x5a>
 800464a:	f10d 0307 	add.w	r3, sp, #7
 800464e:	461f      	mov	r7, r3
 8004650:	260a      	movs	r6, #10
 8004652:	fb91 f5f6 	sdiv	r5, r1, r6
 8004656:	fb06 1115 	mls	r1, r6, r5, r1
 800465a:	3130      	adds	r1, #48	; 0x30
 800465c:	2d09      	cmp	r5, #9
 800465e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004662:	f103 32ff 	add.w	r2, r3, #4294967295
 8004666:	4629      	mov	r1, r5
 8004668:	dc09      	bgt.n	800467e <__exponent+0x4c>
 800466a:	3130      	adds	r1, #48	; 0x30
 800466c:	3b02      	subs	r3, #2
 800466e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004672:	42bb      	cmp	r3, r7
 8004674:	4622      	mov	r2, r4
 8004676:	d304      	bcc.n	8004682 <__exponent+0x50>
 8004678:	1a10      	subs	r0, r2, r0
 800467a:	b003      	add	sp, #12
 800467c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800467e:	4613      	mov	r3, r2
 8004680:	e7e7      	b.n	8004652 <__exponent+0x20>
 8004682:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004686:	f804 2b01 	strb.w	r2, [r4], #1
 800468a:	e7f2      	b.n	8004672 <__exponent+0x40>
 800468c:	2330      	movs	r3, #48	; 0x30
 800468e:	4419      	add	r1, r3
 8004690:	7083      	strb	r3, [r0, #2]
 8004692:	1d02      	adds	r2, r0, #4
 8004694:	70c1      	strb	r1, [r0, #3]
 8004696:	e7ef      	b.n	8004678 <__exponent+0x46>

08004698 <_printf_float>:
 8004698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469c:	b08d      	sub	sp, #52	; 0x34
 800469e:	460c      	mov	r4, r1
 80046a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80046a4:	4616      	mov	r6, r2
 80046a6:	461f      	mov	r7, r3
 80046a8:	4605      	mov	r5, r0
 80046aa:	f001 fbb3 	bl	8005e14 <_localeconv_r>
 80046ae:	6803      	ldr	r3, [r0, #0]
 80046b0:	9304      	str	r3, [sp, #16]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fb fd88 	bl	80001c8 <strlen>
 80046b8:	2300      	movs	r3, #0
 80046ba:	930a      	str	r3, [sp, #40]	; 0x28
 80046bc:	f8d8 3000 	ldr.w	r3, [r8]
 80046c0:	9005      	str	r0, [sp, #20]
 80046c2:	3307      	adds	r3, #7
 80046c4:	f023 0307 	bic.w	r3, r3, #7
 80046c8:	f103 0208 	add.w	r2, r3, #8
 80046cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80046d0:	f8d4 b000 	ldr.w	fp, [r4]
 80046d4:	f8c8 2000 	str.w	r2, [r8]
 80046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046dc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80046e0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80046e4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80046e8:	9307      	str	r3, [sp, #28]
 80046ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80046ee:	f04f 32ff 	mov.w	r2, #4294967295
 80046f2:	4ba7      	ldr	r3, [pc, #668]	; (8004990 <_printf_float+0x2f8>)
 80046f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046f8:	f7fc f9c4 	bl	8000a84 <__aeabi_dcmpun>
 80046fc:	bb70      	cbnz	r0, 800475c <_printf_float+0xc4>
 80046fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004702:	4ba3      	ldr	r3, [pc, #652]	; (8004990 <_printf_float+0x2f8>)
 8004704:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004708:	f7fc f99e 	bl	8000a48 <__aeabi_dcmple>
 800470c:	bb30      	cbnz	r0, 800475c <_printf_float+0xc4>
 800470e:	2200      	movs	r2, #0
 8004710:	2300      	movs	r3, #0
 8004712:	4640      	mov	r0, r8
 8004714:	4649      	mov	r1, r9
 8004716:	f7fc f98d 	bl	8000a34 <__aeabi_dcmplt>
 800471a:	b110      	cbz	r0, 8004722 <_printf_float+0x8a>
 800471c:	232d      	movs	r3, #45	; 0x2d
 800471e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004722:	4a9c      	ldr	r2, [pc, #624]	; (8004994 <_printf_float+0x2fc>)
 8004724:	4b9c      	ldr	r3, [pc, #624]	; (8004998 <_printf_float+0x300>)
 8004726:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800472a:	bf8c      	ite	hi
 800472c:	4690      	movhi	r8, r2
 800472e:	4698      	movls	r8, r3
 8004730:	2303      	movs	r3, #3
 8004732:	f02b 0204 	bic.w	r2, fp, #4
 8004736:	6123      	str	r3, [r4, #16]
 8004738:	6022      	str	r2, [r4, #0]
 800473a:	f04f 0900 	mov.w	r9, #0
 800473e:	9700      	str	r7, [sp, #0]
 8004740:	4633      	mov	r3, r6
 8004742:	aa0b      	add	r2, sp, #44	; 0x2c
 8004744:	4621      	mov	r1, r4
 8004746:	4628      	mov	r0, r5
 8004748:	f000 f9e6 	bl	8004b18 <_printf_common>
 800474c:	3001      	adds	r0, #1
 800474e:	f040 808d 	bne.w	800486c <_printf_float+0x1d4>
 8004752:	f04f 30ff 	mov.w	r0, #4294967295
 8004756:	b00d      	add	sp, #52	; 0x34
 8004758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800475c:	4642      	mov	r2, r8
 800475e:	464b      	mov	r3, r9
 8004760:	4640      	mov	r0, r8
 8004762:	4649      	mov	r1, r9
 8004764:	f7fc f98e 	bl	8000a84 <__aeabi_dcmpun>
 8004768:	b110      	cbz	r0, 8004770 <_printf_float+0xd8>
 800476a:	4a8c      	ldr	r2, [pc, #560]	; (800499c <_printf_float+0x304>)
 800476c:	4b8c      	ldr	r3, [pc, #560]	; (80049a0 <_printf_float+0x308>)
 800476e:	e7da      	b.n	8004726 <_printf_float+0x8e>
 8004770:	6861      	ldr	r1, [r4, #4]
 8004772:	1c4b      	adds	r3, r1, #1
 8004774:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004778:	a80a      	add	r0, sp, #40	; 0x28
 800477a:	d13e      	bne.n	80047fa <_printf_float+0x162>
 800477c:	2306      	movs	r3, #6
 800477e:	6063      	str	r3, [r4, #4]
 8004780:	2300      	movs	r3, #0
 8004782:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004786:	ab09      	add	r3, sp, #36	; 0x24
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	ec49 8b10 	vmov	d0, r8, r9
 800478e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004792:	6022      	str	r2, [r4, #0]
 8004794:	f8cd a004 	str.w	sl, [sp, #4]
 8004798:	6861      	ldr	r1, [r4, #4]
 800479a:	4628      	mov	r0, r5
 800479c:	f7ff fee8 	bl	8004570 <__cvt>
 80047a0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80047a4:	2b47      	cmp	r3, #71	; 0x47
 80047a6:	4680      	mov	r8, r0
 80047a8:	d109      	bne.n	80047be <_printf_float+0x126>
 80047aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ac:	1cd8      	adds	r0, r3, #3
 80047ae:	db02      	blt.n	80047b6 <_printf_float+0x11e>
 80047b0:	6862      	ldr	r2, [r4, #4]
 80047b2:	4293      	cmp	r3, r2
 80047b4:	dd47      	ble.n	8004846 <_printf_float+0x1ae>
 80047b6:	f1aa 0a02 	sub.w	sl, sl, #2
 80047ba:	fa5f fa8a 	uxtb.w	sl, sl
 80047be:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80047c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047c4:	d824      	bhi.n	8004810 <_printf_float+0x178>
 80047c6:	3901      	subs	r1, #1
 80047c8:	4652      	mov	r2, sl
 80047ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80047ce:	9109      	str	r1, [sp, #36]	; 0x24
 80047d0:	f7ff ff2f 	bl	8004632 <__exponent>
 80047d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047d6:	1813      	adds	r3, r2, r0
 80047d8:	2a01      	cmp	r2, #1
 80047da:	4681      	mov	r9, r0
 80047dc:	6123      	str	r3, [r4, #16]
 80047de:	dc02      	bgt.n	80047e6 <_printf_float+0x14e>
 80047e0:	6822      	ldr	r2, [r4, #0]
 80047e2:	07d1      	lsls	r1, r2, #31
 80047e4:	d501      	bpl.n	80047ea <_printf_float+0x152>
 80047e6:	3301      	adds	r3, #1
 80047e8:	6123      	str	r3, [r4, #16]
 80047ea:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0a5      	beq.n	800473e <_printf_float+0xa6>
 80047f2:	232d      	movs	r3, #45	; 0x2d
 80047f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047f8:	e7a1      	b.n	800473e <_printf_float+0xa6>
 80047fa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80047fe:	f000 8177 	beq.w	8004af0 <_printf_float+0x458>
 8004802:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004806:	d1bb      	bne.n	8004780 <_printf_float+0xe8>
 8004808:	2900      	cmp	r1, #0
 800480a:	d1b9      	bne.n	8004780 <_printf_float+0xe8>
 800480c:	2301      	movs	r3, #1
 800480e:	e7b6      	b.n	800477e <_printf_float+0xe6>
 8004810:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004814:	d119      	bne.n	800484a <_printf_float+0x1b2>
 8004816:	2900      	cmp	r1, #0
 8004818:	6863      	ldr	r3, [r4, #4]
 800481a:	dd0c      	ble.n	8004836 <_printf_float+0x19e>
 800481c:	6121      	str	r1, [r4, #16]
 800481e:	b913      	cbnz	r3, 8004826 <_printf_float+0x18e>
 8004820:	6822      	ldr	r2, [r4, #0]
 8004822:	07d2      	lsls	r2, r2, #31
 8004824:	d502      	bpl.n	800482c <_printf_float+0x194>
 8004826:	3301      	adds	r3, #1
 8004828:	440b      	add	r3, r1
 800482a:	6123      	str	r3, [r4, #16]
 800482c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800482e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004830:	f04f 0900 	mov.w	r9, #0
 8004834:	e7d9      	b.n	80047ea <_printf_float+0x152>
 8004836:	b913      	cbnz	r3, 800483e <_printf_float+0x1a6>
 8004838:	6822      	ldr	r2, [r4, #0]
 800483a:	07d0      	lsls	r0, r2, #31
 800483c:	d501      	bpl.n	8004842 <_printf_float+0x1aa>
 800483e:	3302      	adds	r3, #2
 8004840:	e7f3      	b.n	800482a <_printf_float+0x192>
 8004842:	2301      	movs	r3, #1
 8004844:	e7f1      	b.n	800482a <_printf_float+0x192>
 8004846:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800484a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800484e:	4293      	cmp	r3, r2
 8004850:	db05      	blt.n	800485e <_printf_float+0x1c6>
 8004852:	6822      	ldr	r2, [r4, #0]
 8004854:	6123      	str	r3, [r4, #16]
 8004856:	07d1      	lsls	r1, r2, #31
 8004858:	d5e8      	bpl.n	800482c <_printf_float+0x194>
 800485a:	3301      	adds	r3, #1
 800485c:	e7e5      	b.n	800482a <_printf_float+0x192>
 800485e:	2b00      	cmp	r3, #0
 8004860:	bfd4      	ite	le
 8004862:	f1c3 0302 	rsble	r3, r3, #2
 8004866:	2301      	movgt	r3, #1
 8004868:	4413      	add	r3, r2
 800486a:	e7de      	b.n	800482a <_printf_float+0x192>
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	055a      	lsls	r2, r3, #21
 8004870:	d407      	bmi.n	8004882 <_printf_float+0x1ea>
 8004872:	6923      	ldr	r3, [r4, #16]
 8004874:	4642      	mov	r2, r8
 8004876:	4631      	mov	r1, r6
 8004878:	4628      	mov	r0, r5
 800487a:	47b8      	blx	r7
 800487c:	3001      	adds	r0, #1
 800487e:	d12b      	bne.n	80048d8 <_printf_float+0x240>
 8004880:	e767      	b.n	8004752 <_printf_float+0xba>
 8004882:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004886:	f240 80dc 	bls.w	8004a42 <_printf_float+0x3aa>
 800488a:	2200      	movs	r2, #0
 800488c:	2300      	movs	r3, #0
 800488e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004892:	f7fc f8c5 	bl	8000a20 <__aeabi_dcmpeq>
 8004896:	2800      	cmp	r0, #0
 8004898:	d033      	beq.n	8004902 <_printf_float+0x26a>
 800489a:	2301      	movs	r3, #1
 800489c:	4a41      	ldr	r2, [pc, #260]	; (80049a4 <_printf_float+0x30c>)
 800489e:	4631      	mov	r1, r6
 80048a0:	4628      	mov	r0, r5
 80048a2:	47b8      	blx	r7
 80048a4:	3001      	adds	r0, #1
 80048a6:	f43f af54 	beq.w	8004752 <_printf_float+0xba>
 80048aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048ae:	429a      	cmp	r2, r3
 80048b0:	db02      	blt.n	80048b8 <_printf_float+0x220>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	07d8      	lsls	r0, r3, #31
 80048b6:	d50f      	bpl.n	80048d8 <_printf_float+0x240>
 80048b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048bc:	4631      	mov	r1, r6
 80048be:	4628      	mov	r0, r5
 80048c0:	47b8      	blx	r7
 80048c2:	3001      	adds	r0, #1
 80048c4:	f43f af45 	beq.w	8004752 <_printf_float+0xba>
 80048c8:	f04f 0800 	mov.w	r8, #0
 80048cc:	f104 091a 	add.w	r9, r4, #26
 80048d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048d2:	3b01      	subs	r3, #1
 80048d4:	4543      	cmp	r3, r8
 80048d6:	dc09      	bgt.n	80048ec <_printf_float+0x254>
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	079b      	lsls	r3, r3, #30
 80048dc:	f100 8103 	bmi.w	8004ae6 <_printf_float+0x44e>
 80048e0:	68e0      	ldr	r0, [r4, #12]
 80048e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048e4:	4298      	cmp	r0, r3
 80048e6:	bfb8      	it	lt
 80048e8:	4618      	movlt	r0, r3
 80048ea:	e734      	b.n	8004756 <_printf_float+0xbe>
 80048ec:	2301      	movs	r3, #1
 80048ee:	464a      	mov	r2, r9
 80048f0:	4631      	mov	r1, r6
 80048f2:	4628      	mov	r0, r5
 80048f4:	47b8      	blx	r7
 80048f6:	3001      	adds	r0, #1
 80048f8:	f43f af2b 	beq.w	8004752 <_printf_float+0xba>
 80048fc:	f108 0801 	add.w	r8, r8, #1
 8004900:	e7e6      	b.n	80048d0 <_printf_float+0x238>
 8004902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004904:	2b00      	cmp	r3, #0
 8004906:	dc2b      	bgt.n	8004960 <_printf_float+0x2c8>
 8004908:	2301      	movs	r3, #1
 800490a:	4a26      	ldr	r2, [pc, #152]	; (80049a4 <_printf_float+0x30c>)
 800490c:	4631      	mov	r1, r6
 800490e:	4628      	mov	r0, r5
 8004910:	47b8      	blx	r7
 8004912:	3001      	adds	r0, #1
 8004914:	f43f af1d 	beq.w	8004752 <_printf_float+0xba>
 8004918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800491a:	b923      	cbnz	r3, 8004926 <_printf_float+0x28e>
 800491c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800491e:	b913      	cbnz	r3, 8004926 <_printf_float+0x28e>
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	07d9      	lsls	r1, r3, #31
 8004924:	d5d8      	bpl.n	80048d8 <_printf_float+0x240>
 8004926:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800492a:	4631      	mov	r1, r6
 800492c:	4628      	mov	r0, r5
 800492e:	47b8      	blx	r7
 8004930:	3001      	adds	r0, #1
 8004932:	f43f af0e 	beq.w	8004752 <_printf_float+0xba>
 8004936:	f04f 0900 	mov.w	r9, #0
 800493a:	f104 0a1a 	add.w	sl, r4, #26
 800493e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004940:	425b      	negs	r3, r3
 8004942:	454b      	cmp	r3, r9
 8004944:	dc01      	bgt.n	800494a <_printf_float+0x2b2>
 8004946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004948:	e794      	b.n	8004874 <_printf_float+0x1dc>
 800494a:	2301      	movs	r3, #1
 800494c:	4652      	mov	r2, sl
 800494e:	4631      	mov	r1, r6
 8004950:	4628      	mov	r0, r5
 8004952:	47b8      	blx	r7
 8004954:	3001      	adds	r0, #1
 8004956:	f43f aefc 	beq.w	8004752 <_printf_float+0xba>
 800495a:	f109 0901 	add.w	r9, r9, #1
 800495e:	e7ee      	b.n	800493e <_printf_float+0x2a6>
 8004960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004962:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004964:	429a      	cmp	r2, r3
 8004966:	bfa8      	it	ge
 8004968:	461a      	movge	r2, r3
 800496a:	2a00      	cmp	r2, #0
 800496c:	4691      	mov	r9, r2
 800496e:	dd07      	ble.n	8004980 <_printf_float+0x2e8>
 8004970:	4613      	mov	r3, r2
 8004972:	4631      	mov	r1, r6
 8004974:	4642      	mov	r2, r8
 8004976:	4628      	mov	r0, r5
 8004978:	47b8      	blx	r7
 800497a:	3001      	adds	r0, #1
 800497c:	f43f aee9 	beq.w	8004752 <_printf_float+0xba>
 8004980:	f104 031a 	add.w	r3, r4, #26
 8004984:	f04f 0b00 	mov.w	fp, #0
 8004988:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800498c:	9306      	str	r3, [sp, #24]
 800498e:	e015      	b.n	80049bc <_printf_float+0x324>
 8004990:	7fefffff 	.word	0x7fefffff
 8004994:	0800ffe4 	.word	0x0800ffe4
 8004998:	0800ffe0 	.word	0x0800ffe0
 800499c:	0800ffec 	.word	0x0800ffec
 80049a0:	0800ffe8 	.word	0x0800ffe8
 80049a4:	0800fff0 	.word	0x0800fff0
 80049a8:	2301      	movs	r3, #1
 80049aa:	9a06      	ldr	r2, [sp, #24]
 80049ac:	4631      	mov	r1, r6
 80049ae:	4628      	mov	r0, r5
 80049b0:	47b8      	blx	r7
 80049b2:	3001      	adds	r0, #1
 80049b4:	f43f aecd 	beq.w	8004752 <_printf_float+0xba>
 80049b8:	f10b 0b01 	add.w	fp, fp, #1
 80049bc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80049c0:	ebaa 0309 	sub.w	r3, sl, r9
 80049c4:	455b      	cmp	r3, fp
 80049c6:	dcef      	bgt.n	80049a8 <_printf_float+0x310>
 80049c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049cc:	429a      	cmp	r2, r3
 80049ce:	44d0      	add	r8, sl
 80049d0:	db15      	blt.n	80049fe <_printf_float+0x366>
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	07da      	lsls	r2, r3, #31
 80049d6:	d412      	bmi.n	80049fe <_printf_float+0x366>
 80049d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049dc:	eba3 020a 	sub.w	r2, r3, sl
 80049e0:	eba3 0a01 	sub.w	sl, r3, r1
 80049e4:	4592      	cmp	sl, r2
 80049e6:	bfa8      	it	ge
 80049e8:	4692      	movge	sl, r2
 80049ea:	f1ba 0f00 	cmp.w	sl, #0
 80049ee:	dc0e      	bgt.n	8004a0e <_printf_float+0x376>
 80049f0:	f04f 0800 	mov.w	r8, #0
 80049f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80049f8:	f104 091a 	add.w	r9, r4, #26
 80049fc:	e019      	b.n	8004a32 <_printf_float+0x39a>
 80049fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a02:	4631      	mov	r1, r6
 8004a04:	4628      	mov	r0, r5
 8004a06:	47b8      	blx	r7
 8004a08:	3001      	adds	r0, #1
 8004a0a:	d1e5      	bne.n	80049d8 <_printf_float+0x340>
 8004a0c:	e6a1      	b.n	8004752 <_printf_float+0xba>
 8004a0e:	4653      	mov	r3, sl
 8004a10:	4642      	mov	r2, r8
 8004a12:	4631      	mov	r1, r6
 8004a14:	4628      	mov	r0, r5
 8004a16:	47b8      	blx	r7
 8004a18:	3001      	adds	r0, #1
 8004a1a:	d1e9      	bne.n	80049f0 <_printf_float+0x358>
 8004a1c:	e699      	b.n	8004752 <_printf_float+0xba>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	464a      	mov	r2, r9
 8004a22:	4631      	mov	r1, r6
 8004a24:	4628      	mov	r0, r5
 8004a26:	47b8      	blx	r7
 8004a28:	3001      	adds	r0, #1
 8004a2a:	f43f ae92 	beq.w	8004752 <_printf_float+0xba>
 8004a2e:	f108 0801 	add.w	r8, r8, #1
 8004a32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	eba3 030a 	sub.w	r3, r3, sl
 8004a3c:	4543      	cmp	r3, r8
 8004a3e:	dcee      	bgt.n	8004a1e <_printf_float+0x386>
 8004a40:	e74a      	b.n	80048d8 <_printf_float+0x240>
 8004a42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a44:	2a01      	cmp	r2, #1
 8004a46:	dc01      	bgt.n	8004a4c <_printf_float+0x3b4>
 8004a48:	07db      	lsls	r3, r3, #31
 8004a4a:	d53a      	bpl.n	8004ac2 <_printf_float+0x42a>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	4642      	mov	r2, r8
 8004a50:	4631      	mov	r1, r6
 8004a52:	4628      	mov	r0, r5
 8004a54:	47b8      	blx	r7
 8004a56:	3001      	adds	r0, #1
 8004a58:	f43f ae7b 	beq.w	8004752 <_printf_float+0xba>
 8004a5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a60:	4631      	mov	r1, r6
 8004a62:	4628      	mov	r0, r5
 8004a64:	47b8      	blx	r7
 8004a66:	3001      	adds	r0, #1
 8004a68:	f108 0801 	add.w	r8, r8, #1
 8004a6c:	f43f ae71 	beq.w	8004752 <_printf_float+0xba>
 8004a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a72:	2200      	movs	r2, #0
 8004a74:	f103 3aff 	add.w	sl, r3, #4294967295
 8004a78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f7fb ffcf 	bl	8000a20 <__aeabi_dcmpeq>
 8004a82:	b9c8      	cbnz	r0, 8004ab8 <_printf_float+0x420>
 8004a84:	4653      	mov	r3, sl
 8004a86:	4642      	mov	r2, r8
 8004a88:	4631      	mov	r1, r6
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	47b8      	blx	r7
 8004a8e:	3001      	adds	r0, #1
 8004a90:	d10e      	bne.n	8004ab0 <_printf_float+0x418>
 8004a92:	e65e      	b.n	8004752 <_printf_float+0xba>
 8004a94:	2301      	movs	r3, #1
 8004a96:	4652      	mov	r2, sl
 8004a98:	4631      	mov	r1, r6
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	47b8      	blx	r7
 8004a9e:	3001      	adds	r0, #1
 8004aa0:	f43f ae57 	beq.w	8004752 <_printf_float+0xba>
 8004aa4:	f108 0801 	add.w	r8, r8, #1
 8004aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	4543      	cmp	r3, r8
 8004aae:	dcf1      	bgt.n	8004a94 <_printf_float+0x3fc>
 8004ab0:	464b      	mov	r3, r9
 8004ab2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ab6:	e6de      	b.n	8004876 <_printf_float+0x1de>
 8004ab8:	f04f 0800 	mov.w	r8, #0
 8004abc:	f104 0a1a 	add.w	sl, r4, #26
 8004ac0:	e7f2      	b.n	8004aa8 <_printf_float+0x410>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e7df      	b.n	8004a86 <_printf_float+0x3ee>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	464a      	mov	r2, r9
 8004aca:	4631      	mov	r1, r6
 8004acc:	4628      	mov	r0, r5
 8004ace:	47b8      	blx	r7
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	f43f ae3e 	beq.w	8004752 <_printf_float+0xba>
 8004ad6:	f108 0801 	add.w	r8, r8, #1
 8004ada:	68e3      	ldr	r3, [r4, #12]
 8004adc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ade:	1a9b      	subs	r3, r3, r2
 8004ae0:	4543      	cmp	r3, r8
 8004ae2:	dcf0      	bgt.n	8004ac6 <_printf_float+0x42e>
 8004ae4:	e6fc      	b.n	80048e0 <_printf_float+0x248>
 8004ae6:	f04f 0800 	mov.w	r8, #0
 8004aea:	f104 0919 	add.w	r9, r4, #25
 8004aee:	e7f4      	b.n	8004ada <_printf_float+0x442>
 8004af0:	2900      	cmp	r1, #0
 8004af2:	f43f ae8b 	beq.w	800480c <_printf_float+0x174>
 8004af6:	2300      	movs	r3, #0
 8004af8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004afc:	ab09      	add	r3, sp, #36	; 0x24
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	ec49 8b10 	vmov	d0, r8, r9
 8004b04:	6022      	str	r2, [r4, #0]
 8004b06:	f8cd a004 	str.w	sl, [sp, #4]
 8004b0a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b0e:	4628      	mov	r0, r5
 8004b10:	f7ff fd2e 	bl	8004570 <__cvt>
 8004b14:	4680      	mov	r8, r0
 8004b16:	e648      	b.n	80047aa <_printf_float+0x112>

08004b18 <_printf_common>:
 8004b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b1c:	4691      	mov	r9, r2
 8004b1e:	461f      	mov	r7, r3
 8004b20:	688a      	ldr	r2, [r1, #8]
 8004b22:	690b      	ldr	r3, [r1, #16]
 8004b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	bfb8      	it	lt
 8004b2c:	4613      	movlt	r3, r2
 8004b2e:	f8c9 3000 	str.w	r3, [r9]
 8004b32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b36:	4606      	mov	r6, r0
 8004b38:	460c      	mov	r4, r1
 8004b3a:	b112      	cbz	r2, 8004b42 <_printf_common+0x2a>
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	f8c9 3000 	str.w	r3, [r9]
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	0699      	lsls	r1, r3, #26
 8004b46:	bf42      	ittt	mi
 8004b48:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b4c:	3302      	addmi	r3, #2
 8004b4e:	f8c9 3000 	strmi.w	r3, [r9]
 8004b52:	6825      	ldr	r5, [r4, #0]
 8004b54:	f015 0506 	ands.w	r5, r5, #6
 8004b58:	d107      	bne.n	8004b6a <_printf_common+0x52>
 8004b5a:	f104 0a19 	add.w	sl, r4, #25
 8004b5e:	68e3      	ldr	r3, [r4, #12]
 8004b60:	f8d9 2000 	ldr.w	r2, [r9]
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	42ab      	cmp	r3, r5
 8004b68:	dc28      	bgt.n	8004bbc <_printf_common+0xa4>
 8004b6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b6e:	6822      	ldr	r2, [r4, #0]
 8004b70:	3300      	adds	r3, #0
 8004b72:	bf18      	it	ne
 8004b74:	2301      	movne	r3, #1
 8004b76:	0692      	lsls	r2, r2, #26
 8004b78:	d42d      	bmi.n	8004bd6 <_printf_common+0xbe>
 8004b7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b7e:	4639      	mov	r1, r7
 8004b80:	4630      	mov	r0, r6
 8004b82:	47c0      	blx	r8
 8004b84:	3001      	adds	r0, #1
 8004b86:	d020      	beq.n	8004bca <_printf_common+0xb2>
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	68e5      	ldr	r5, [r4, #12]
 8004b8c:	f8d9 2000 	ldr.w	r2, [r9]
 8004b90:	f003 0306 	and.w	r3, r3, #6
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	bf08      	it	eq
 8004b98:	1aad      	subeq	r5, r5, r2
 8004b9a:	68a3      	ldr	r3, [r4, #8]
 8004b9c:	6922      	ldr	r2, [r4, #16]
 8004b9e:	bf0c      	ite	eq
 8004ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ba4:	2500      	movne	r5, #0
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	bfc4      	itt	gt
 8004baa:	1a9b      	subgt	r3, r3, r2
 8004bac:	18ed      	addgt	r5, r5, r3
 8004bae:	f04f 0900 	mov.w	r9, #0
 8004bb2:	341a      	adds	r4, #26
 8004bb4:	454d      	cmp	r5, r9
 8004bb6:	d11a      	bne.n	8004bee <_printf_common+0xd6>
 8004bb8:	2000      	movs	r0, #0
 8004bba:	e008      	b.n	8004bce <_printf_common+0xb6>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	4652      	mov	r2, sl
 8004bc0:	4639      	mov	r1, r7
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	47c0      	blx	r8
 8004bc6:	3001      	adds	r0, #1
 8004bc8:	d103      	bne.n	8004bd2 <_printf_common+0xba>
 8004bca:	f04f 30ff 	mov.w	r0, #4294967295
 8004bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bd2:	3501      	adds	r5, #1
 8004bd4:	e7c3      	b.n	8004b5e <_printf_common+0x46>
 8004bd6:	18e1      	adds	r1, r4, r3
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	2030      	movs	r0, #48	; 0x30
 8004bdc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004be0:	4422      	add	r2, r4
 8004be2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004be6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bea:	3302      	adds	r3, #2
 8004bec:	e7c5      	b.n	8004b7a <_printf_common+0x62>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	4622      	mov	r2, r4
 8004bf2:	4639      	mov	r1, r7
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	47c0      	blx	r8
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	d0e6      	beq.n	8004bca <_printf_common+0xb2>
 8004bfc:	f109 0901 	add.w	r9, r9, #1
 8004c00:	e7d8      	b.n	8004bb4 <_printf_common+0x9c>
	...

08004c04 <putchar>:
 8004c04:	b538      	push	{r3, r4, r5, lr}
 8004c06:	4b08      	ldr	r3, [pc, #32]	; (8004c28 <putchar+0x24>)
 8004c08:	681c      	ldr	r4, [r3, #0]
 8004c0a:	4605      	mov	r5, r0
 8004c0c:	b124      	cbz	r4, 8004c18 <putchar+0x14>
 8004c0e:	69a3      	ldr	r3, [r4, #24]
 8004c10:	b913      	cbnz	r3, 8004c18 <putchar+0x14>
 8004c12:	4620      	mov	r0, r4
 8004c14:	f001 f874 	bl	8005d00 <__sinit>
 8004c18:	68a2      	ldr	r2, [r4, #8]
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c22:	f001 bc47 	b.w	80064b4 <_putc_r>
 8004c26:	bf00      	nop
 8004c28:	2000000c 	.word	0x2000000c

08004c2c <_puts_r>:
 8004c2c:	b570      	push	{r4, r5, r6, lr}
 8004c2e:	460e      	mov	r6, r1
 8004c30:	4605      	mov	r5, r0
 8004c32:	b118      	cbz	r0, 8004c3c <_puts_r+0x10>
 8004c34:	6983      	ldr	r3, [r0, #24]
 8004c36:	b90b      	cbnz	r3, 8004c3c <_puts_r+0x10>
 8004c38:	f001 f862 	bl	8005d00 <__sinit>
 8004c3c:	69ab      	ldr	r3, [r5, #24]
 8004c3e:	68ac      	ldr	r4, [r5, #8]
 8004c40:	b913      	cbnz	r3, 8004c48 <_puts_r+0x1c>
 8004c42:	4628      	mov	r0, r5
 8004c44:	f001 f85c 	bl	8005d00 <__sinit>
 8004c48:	4b23      	ldr	r3, [pc, #140]	; (8004cd8 <_puts_r+0xac>)
 8004c4a:	429c      	cmp	r4, r3
 8004c4c:	d117      	bne.n	8004c7e <_puts_r+0x52>
 8004c4e:	686c      	ldr	r4, [r5, #4]
 8004c50:	89a3      	ldrh	r3, [r4, #12]
 8004c52:	071b      	lsls	r3, r3, #28
 8004c54:	d51d      	bpl.n	8004c92 <_puts_r+0x66>
 8004c56:	6923      	ldr	r3, [r4, #16]
 8004c58:	b1db      	cbz	r3, 8004c92 <_puts_r+0x66>
 8004c5a:	3e01      	subs	r6, #1
 8004c5c:	68a3      	ldr	r3, [r4, #8]
 8004c5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c62:	3b01      	subs	r3, #1
 8004c64:	60a3      	str	r3, [r4, #8]
 8004c66:	b9e9      	cbnz	r1, 8004ca4 <_puts_r+0x78>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	da2e      	bge.n	8004cca <_puts_r+0x9e>
 8004c6c:	4622      	mov	r2, r4
 8004c6e:	210a      	movs	r1, #10
 8004c70:	4628      	mov	r0, r5
 8004c72:	f000 f84f 	bl	8004d14 <__swbuf_r>
 8004c76:	3001      	adds	r0, #1
 8004c78:	d011      	beq.n	8004c9e <_puts_r+0x72>
 8004c7a:	200a      	movs	r0, #10
 8004c7c:	e011      	b.n	8004ca2 <_puts_r+0x76>
 8004c7e:	4b17      	ldr	r3, [pc, #92]	; (8004cdc <_puts_r+0xb0>)
 8004c80:	429c      	cmp	r4, r3
 8004c82:	d101      	bne.n	8004c88 <_puts_r+0x5c>
 8004c84:	68ac      	ldr	r4, [r5, #8]
 8004c86:	e7e3      	b.n	8004c50 <_puts_r+0x24>
 8004c88:	4b15      	ldr	r3, [pc, #84]	; (8004ce0 <_puts_r+0xb4>)
 8004c8a:	429c      	cmp	r4, r3
 8004c8c:	bf08      	it	eq
 8004c8e:	68ec      	ldreq	r4, [r5, #12]
 8004c90:	e7de      	b.n	8004c50 <_puts_r+0x24>
 8004c92:	4621      	mov	r1, r4
 8004c94:	4628      	mov	r0, r5
 8004c96:	f000 f88f 	bl	8004db8 <__swsetup_r>
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	d0dd      	beq.n	8004c5a <_puts_r+0x2e>
 8004c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca2:	bd70      	pop	{r4, r5, r6, pc}
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	da04      	bge.n	8004cb2 <_puts_r+0x86>
 8004ca8:	69a2      	ldr	r2, [r4, #24]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	dc06      	bgt.n	8004cbc <_puts_r+0x90>
 8004cae:	290a      	cmp	r1, #10
 8004cb0:	d004      	beq.n	8004cbc <_puts_r+0x90>
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	6022      	str	r2, [r4, #0]
 8004cb8:	7019      	strb	r1, [r3, #0]
 8004cba:	e7cf      	b.n	8004c5c <_puts_r+0x30>
 8004cbc:	4622      	mov	r2, r4
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f000 f828 	bl	8004d14 <__swbuf_r>
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	d1c9      	bne.n	8004c5c <_puts_r+0x30>
 8004cc8:	e7e9      	b.n	8004c9e <_puts_r+0x72>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	200a      	movs	r0, #10
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	6022      	str	r2, [r4, #0]
 8004cd2:	7018      	strb	r0, [r3, #0]
 8004cd4:	e7e5      	b.n	8004ca2 <_puts_r+0x76>
 8004cd6:	bf00      	nop
 8004cd8:	08010020 	.word	0x08010020
 8004cdc:	08010040 	.word	0x08010040
 8004ce0:	08010000 	.word	0x08010000

08004ce4 <puts>:
 8004ce4:	4b02      	ldr	r3, [pc, #8]	; (8004cf0 <puts+0xc>)
 8004ce6:	4601      	mov	r1, r0
 8004ce8:	6818      	ldr	r0, [r3, #0]
 8004cea:	f7ff bf9f 	b.w	8004c2c <_puts_r>
 8004cee:	bf00      	nop
 8004cf0:	2000000c 	.word	0x2000000c

08004cf4 <_sbrk_r>:
 8004cf4:	b538      	push	{r3, r4, r5, lr}
 8004cf6:	4c06      	ldr	r4, [pc, #24]	; (8004d10 <_sbrk_r+0x1c>)
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	4605      	mov	r5, r0
 8004cfc:	4608      	mov	r0, r1
 8004cfe:	6023      	str	r3, [r4, #0]
 8004d00:	f7fd f852 	bl	8001da8 <_sbrk>
 8004d04:	1c43      	adds	r3, r0, #1
 8004d06:	d102      	bne.n	8004d0e <_sbrk_r+0x1a>
 8004d08:	6823      	ldr	r3, [r4, #0]
 8004d0a:	b103      	cbz	r3, 8004d0e <_sbrk_r+0x1a>
 8004d0c:	602b      	str	r3, [r5, #0]
 8004d0e:	bd38      	pop	{r3, r4, r5, pc}
 8004d10:	20000258 	.word	0x20000258

08004d14 <__swbuf_r>:
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d16:	460e      	mov	r6, r1
 8004d18:	4614      	mov	r4, r2
 8004d1a:	4605      	mov	r5, r0
 8004d1c:	b118      	cbz	r0, 8004d26 <__swbuf_r+0x12>
 8004d1e:	6983      	ldr	r3, [r0, #24]
 8004d20:	b90b      	cbnz	r3, 8004d26 <__swbuf_r+0x12>
 8004d22:	f000 ffed 	bl	8005d00 <__sinit>
 8004d26:	4b21      	ldr	r3, [pc, #132]	; (8004dac <__swbuf_r+0x98>)
 8004d28:	429c      	cmp	r4, r3
 8004d2a:	d12a      	bne.n	8004d82 <__swbuf_r+0x6e>
 8004d2c:	686c      	ldr	r4, [r5, #4]
 8004d2e:	69a3      	ldr	r3, [r4, #24]
 8004d30:	60a3      	str	r3, [r4, #8]
 8004d32:	89a3      	ldrh	r3, [r4, #12]
 8004d34:	071a      	lsls	r2, r3, #28
 8004d36:	d52e      	bpl.n	8004d96 <__swbuf_r+0x82>
 8004d38:	6923      	ldr	r3, [r4, #16]
 8004d3a:	b363      	cbz	r3, 8004d96 <__swbuf_r+0x82>
 8004d3c:	6923      	ldr	r3, [r4, #16]
 8004d3e:	6820      	ldr	r0, [r4, #0]
 8004d40:	1ac0      	subs	r0, r0, r3
 8004d42:	6963      	ldr	r3, [r4, #20]
 8004d44:	b2f6      	uxtb	r6, r6
 8004d46:	4283      	cmp	r3, r0
 8004d48:	4637      	mov	r7, r6
 8004d4a:	dc04      	bgt.n	8004d56 <__swbuf_r+0x42>
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	4628      	mov	r0, r5
 8004d50:	f000 ff6c 	bl	8005c2c <_fflush_r>
 8004d54:	bb28      	cbnz	r0, 8004da2 <__swbuf_r+0x8e>
 8004d56:	68a3      	ldr	r3, [r4, #8]
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	60a3      	str	r3, [r4, #8]
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	6022      	str	r2, [r4, #0]
 8004d62:	701e      	strb	r6, [r3, #0]
 8004d64:	6963      	ldr	r3, [r4, #20]
 8004d66:	3001      	adds	r0, #1
 8004d68:	4283      	cmp	r3, r0
 8004d6a:	d004      	beq.n	8004d76 <__swbuf_r+0x62>
 8004d6c:	89a3      	ldrh	r3, [r4, #12]
 8004d6e:	07db      	lsls	r3, r3, #31
 8004d70:	d519      	bpl.n	8004da6 <__swbuf_r+0x92>
 8004d72:	2e0a      	cmp	r6, #10
 8004d74:	d117      	bne.n	8004da6 <__swbuf_r+0x92>
 8004d76:	4621      	mov	r1, r4
 8004d78:	4628      	mov	r0, r5
 8004d7a:	f000 ff57 	bl	8005c2c <_fflush_r>
 8004d7e:	b190      	cbz	r0, 8004da6 <__swbuf_r+0x92>
 8004d80:	e00f      	b.n	8004da2 <__swbuf_r+0x8e>
 8004d82:	4b0b      	ldr	r3, [pc, #44]	; (8004db0 <__swbuf_r+0x9c>)
 8004d84:	429c      	cmp	r4, r3
 8004d86:	d101      	bne.n	8004d8c <__swbuf_r+0x78>
 8004d88:	68ac      	ldr	r4, [r5, #8]
 8004d8a:	e7d0      	b.n	8004d2e <__swbuf_r+0x1a>
 8004d8c:	4b09      	ldr	r3, [pc, #36]	; (8004db4 <__swbuf_r+0xa0>)
 8004d8e:	429c      	cmp	r4, r3
 8004d90:	bf08      	it	eq
 8004d92:	68ec      	ldreq	r4, [r5, #12]
 8004d94:	e7cb      	b.n	8004d2e <__swbuf_r+0x1a>
 8004d96:	4621      	mov	r1, r4
 8004d98:	4628      	mov	r0, r5
 8004d9a:	f000 f80d 	bl	8004db8 <__swsetup_r>
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	d0cc      	beq.n	8004d3c <__swbuf_r+0x28>
 8004da2:	f04f 37ff 	mov.w	r7, #4294967295
 8004da6:	4638      	mov	r0, r7
 8004da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004daa:	bf00      	nop
 8004dac:	08010020 	.word	0x08010020
 8004db0:	08010040 	.word	0x08010040
 8004db4:	08010000 	.word	0x08010000

08004db8 <__swsetup_r>:
 8004db8:	4b32      	ldr	r3, [pc, #200]	; (8004e84 <__swsetup_r+0xcc>)
 8004dba:	b570      	push	{r4, r5, r6, lr}
 8004dbc:	681d      	ldr	r5, [r3, #0]
 8004dbe:	4606      	mov	r6, r0
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	b125      	cbz	r5, 8004dce <__swsetup_r+0x16>
 8004dc4:	69ab      	ldr	r3, [r5, #24]
 8004dc6:	b913      	cbnz	r3, 8004dce <__swsetup_r+0x16>
 8004dc8:	4628      	mov	r0, r5
 8004dca:	f000 ff99 	bl	8005d00 <__sinit>
 8004dce:	4b2e      	ldr	r3, [pc, #184]	; (8004e88 <__swsetup_r+0xd0>)
 8004dd0:	429c      	cmp	r4, r3
 8004dd2:	d10f      	bne.n	8004df4 <__swsetup_r+0x3c>
 8004dd4:	686c      	ldr	r4, [r5, #4]
 8004dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	0715      	lsls	r5, r2, #28
 8004dde:	d42c      	bmi.n	8004e3a <__swsetup_r+0x82>
 8004de0:	06d0      	lsls	r0, r2, #27
 8004de2:	d411      	bmi.n	8004e08 <__swsetup_r+0x50>
 8004de4:	2209      	movs	r2, #9
 8004de6:	6032      	str	r2, [r6, #0]
 8004de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dec:	81a3      	strh	r3, [r4, #12]
 8004dee:	f04f 30ff 	mov.w	r0, #4294967295
 8004df2:	e03e      	b.n	8004e72 <__swsetup_r+0xba>
 8004df4:	4b25      	ldr	r3, [pc, #148]	; (8004e8c <__swsetup_r+0xd4>)
 8004df6:	429c      	cmp	r4, r3
 8004df8:	d101      	bne.n	8004dfe <__swsetup_r+0x46>
 8004dfa:	68ac      	ldr	r4, [r5, #8]
 8004dfc:	e7eb      	b.n	8004dd6 <__swsetup_r+0x1e>
 8004dfe:	4b24      	ldr	r3, [pc, #144]	; (8004e90 <__swsetup_r+0xd8>)
 8004e00:	429c      	cmp	r4, r3
 8004e02:	bf08      	it	eq
 8004e04:	68ec      	ldreq	r4, [r5, #12]
 8004e06:	e7e6      	b.n	8004dd6 <__swsetup_r+0x1e>
 8004e08:	0751      	lsls	r1, r2, #29
 8004e0a:	d512      	bpl.n	8004e32 <__swsetup_r+0x7a>
 8004e0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e0e:	b141      	cbz	r1, 8004e22 <__swsetup_r+0x6a>
 8004e10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e14:	4299      	cmp	r1, r3
 8004e16:	d002      	beq.n	8004e1e <__swsetup_r+0x66>
 8004e18:	4630      	mov	r0, r6
 8004e1a:	f7ff fb01 	bl	8004420 <_free_r>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	6363      	str	r3, [r4, #52]	; 0x34
 8004e22:	89a3      	ldrh	r3, [r4, #12]
 8004e24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e28:	81a3      	strh	r3, [r4, #12]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	6063      	str	r3, [r4, #4]
 8004e2e:	6923      	ldr	r3, [r4, #16]
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	89a3      	ldrh	r3, [r4, #12]
 8004e34:	f043 0308 	orr.w	r3, r3, #8
 8004e38:	81a3      	strh	r3, [r4, #12]
 8004e3a:	6923      	ldr	r3, [r4, #16]
 8004e3c:	b94b      	cbnz	r3, 8004e52 <__swsetup_r+0x9a>
 8004e3e:	89a3      	ldrh	r3, [r4, #12]
 8004e40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e48:	d003      	beq.n	8004e52 <__swsetup_r+0x9a>
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	4630      	mov	r0, r6
 8004e4e:	f001 f813 	bl	8005e78 <__smakebuf_r>
 8004e52:	89a2      	ldrh	r2, [r4, #12]
 8004e54:	f012 0301 	ands.w	r3, r2, #1
 8004e58:	d00c      	beq.n	8004e74 <__swsetup_r+0xbc>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60a3      	str	r3, [r4, #8]
 8004e5e:	6963      	ldr	r3, [r4, #20]
 8004e60:	425b      	negs	r3, r3
 8004e62:	61a3      	str	r3, [r4, #24]
 8004e64:	6923      	ldr	r3, [r4, #16]
 8004e66:	b953      	cbnz	r3, 8004e7e <__swsetup_r+0xc6>
 8004e68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e6c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004e70:	d1ba      	bne.n	8004de8 <__swsetup_r+0x30>
 8004e72:	bd70      	pop	{r4, r5, r6, pc}
 8004e74:	0792      	lsls	r2, r2, #30
 8004e76:	bf58      	it	pl
 8004e78:	6963      	ldrpl	r3, [r4, #20]
 8004e7a:	60a3      	str	r3, [r4, #8]
 8004e7c:	e7f2      	b.n	8004e64 <__swsetup_r+0xac>
 8004e7e:	2000      	movs	r0, #0
 8004e80:	e7f7      	b.n	8004e72 <__swsetup_r+0xba>
 8004e82:	bf00      	nop
 8004e84:	2000000c 	.word	0x2000000c
 8004e88:	08010020 	.word	0x08010020
 8004e8c:	08010040 	.word	0x08010040
 8004e90:	08010000 	.word	0x08010000

08004e94 <quorem>:
 8004e94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e98:	6903      	ldr	r3, [r0, #16]
 8004e9a:	690c      	ldr	r4, [r1, #16]
 8004e9c:	42a3      	cmp	r3, r4
 8004e9e:	4680      	mov	r8, r0
 8004ea0:	f2c0 8082 	blt.w	8004fa8 <quorem+0x114>
 8004ea4:	3c01      	subs	r4, #1
 8004ea6:	f101 0714 	add.w	r7, r1, #20
 8004eaa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004eae:	f100 0614 	add.w	r6, r0, #20
 8004eb2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004eb6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004eba:	eb06 030c 	add.w	r3, r6, ip
 8004ebe:	3501      	adds	r5, #1
 8004ec0:	eb07 090c 	add.w	r9, r7, ip
 8004ec4:	9301      	str	r3, [sp, #4]
 8004ec6:	fbb0 f5f5 	udiv	r5, r0, r5
 8004eca:	b395      	cbz	r5, 8004f32 <quorem+0x9e>
 8004ecc:	f04f 0a00 	mov.w	sl, #0
 8004ed0:	4638      	mov	r0, r7
 8004ed2:	46b6      	mov	lr, r6
 8004ed4:	46d3      	mov	fp, sl
 8004ed6:	f850 2b04 	ldr.w	r2, [r0], #4
 8004eda:	b293      	uxth	r3, r2
 8004edc:	fb05 a303 	mla	r3, r5, r3, sl
 8004ee0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	ebab 0303 	sub.w	r3, fp, r3
 8004eea:	0c12      	lsrs	r2, r2, #16
 8004eec:	f8de b000 	ldr.w	fp, [lr]
 8004ef0:	fb05 a202 	mla	r2, r5, r2, sl
 8004ef4:	fa13 f38b 	uxtah	r3, r3, fp
 8004ef8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004efc:	fa1f fb82 	uxth.w	fp, r2
 8004f00:	f8de 2000 	ldr.w	r2, [lr]
 8004f04:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004f08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f12:	4581      	cmp	r9, r0
 8004f14:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004f18:	f84e 3b04 	str.w	r3, [lr], #4
 8004f1c:	d2db      	bcs.n	8004ed6 <quorem+0x42>
 8004f1e:	f856 300c 	ldr.w	r3, [r6, ip]
 8004f22:	b933      	cbnz	r3, 8004f32 <quorem+0x9e>
 8004f24:	9b01      	ldr	r3, [sp, #4]
 8004f26:	3b04      	subs	r3, #4
 8004f28:	429e      	cmp	r6, r3
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	d330      	bcc.n	8004f90 <quorem+0xfc>
 8004f2e:	f8c8 4010 	str.w	r4, [r8, #16]
 8004f32:	4640      	mov	r0, r8
 8004f34:	f001 f9f8 	bl	8006328 <__mcmp>
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	db25      	blt.n	8004f88 <quorem+0xf4>
 8004f3c:	3501      	adds	r5, #1
 8004f3e:	4630      	mov	r0, r6
 8004f40:	f04f 0c00 	mov.w	ip, #0
 8004f44:	f857 2b04 	ldr.w	r2, [r7], #4
 8004f48:	f8d0 e000 	ldr.w	lr, [r0]
 8004f4c:	b293      	uxth	r3, r2
 8004f4e:	ebac 0303 	sub.w	r3, ip, r3
 8004f52:	0c12      	lsrs	r2, r2, #16
 8004f54:	fa13 f38e 	uxtah	r3, r3, lr
 8004f58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f66:	45b9      	cmp	r9, r7
 8004f68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f6c:	f840 3b04 	str.w	r3, [r0], #4
 8004f70:	d2e8      	bcs.n	8004f44 <quorem+0xb0>
 8004f72:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004f76:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004f7a:	b92a      	cbnz	r2, 8004f88 <quorem+0xf4>
 8004f7c:	3b04      	subs	r3, #4
 8004f7e:	429e      	cmp	r6, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	d30b      	bcc.n	8004f9c <quorem+0x108>
 8004f84:	f8c8 4010 	str.w	r4, [r8, #16]
 8004f88:	4628      	mov	r0, r5
 8004f8a:	b003      	add	sp, #12
 8004f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f90:	6812      	ldr	r2, [r2, #0]
 8004f92:	3b04      	subs	r3, #4
 8004f94:	2a00      	cmp	r2, #0
 8004f96:	d1ca      	bne.n	8004f2e <quorem+0x9a>
 8004f98:	3c01      	subs	r4, #1
 8004f9a:	e7c5      	b.n	8004f28 <quorem+0x94>
 8004f9c:	6812      	ldr	r2, [r2, #0]
 8004f9e:	3b04      	subs	r3, #4
 8004fa0:	2a00      	cmp	r2, #0
 8004fa2:	d1ef      	bne.n	8004f84 <quorem+0xf0>
 8004fa4:	3c01      	subs	r4, #1
 8004fa6:	e7ea      	b.n	8004f7e <quorem+0xea>
 8004fa8:	2000      	movs	r0, #0
 8004faa:	e7ee      	b.n	8004f8a <quorem+0xf6>
 8004fac:	0000      	movs	r0, r0
	...

08004fb0 <_dtoa_r>:
 8004fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb4:	ec57 6b10 	vmov	r6, r7, d0
 8004fb8:	b097      	sub	sp, #92	; 0x5c
 8004fba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004fbc:	9106      	str	r1, [sp, #24]
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	920b      	str	r2, [sp, #44]	; 0x2c
 8004fc2:	9312      	str	r3, [sp, #72]	; 0x48
 8004fc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004fc8:	e9cd 6700 	strd	r6, r7, [sp]
 8004fcc:	b93d      	cbnz	r5, 8004fde <_dtoa_r+0x2e>
 8004fce:	2010      	movs	r0, #16
 8004fd0:	f7ff f9f4 	bl	80043bc <malloc>
 8004fd4:	6260      	str	r0, [r4, #36]	; 0x24
 8004fd6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004fda:	6005      	str	r5, [r0, #0]
 8004fdc:	60c5      	str	r5, [r0, #12]
 8004fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fe0:	6819      	ldr	r1, [r3, #0]
 8004fe2:	b151      	cbz	r1, 8004ffa <_dtoa_r+0x4a>
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	604a      	str	r2, [r1, #4]
 8004fe8:	2301      	movs	r3, #1
 8004fea:	4093      	lsls	r3, r2
 8004fec:	608b      	str	r3, [r1, #8]
 8004fee:	4620      	mov	r0, r4
 8004ff0:	f000 ffb8 	bl	8005f64 <_Bfree>
 8004ff4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	1e3b      	subs	r3, r7, #0
 8004ffc:	bfbb      	ittet	lt
 8004ffe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005002:	9301      	strlt	r3, [sp, #4]
 8005004:	2300      	movge	r3, #0
 8005006:	2201      	movlt	r2, #1
 8005008:	bfac      	ite	ge
 800500a:	f8c8 3000 	strge.w	r3, [r8]
 800500e:	f8c8 2000 	strlt.w	r2, [r8]
 8005012:	4baf      	ldr	r3, [pc, #700]	; (80052d0 <_dtoa_r+0x320>)
 8005014:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005018:	ea33 0308 	bics.w	r3, r3, r8
 800501c:	d114      	bne.n	8005048 <_dtoa_r+0x98>
 800501e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005020:	f242 730f 	movw	r3, #9999	; 0x270f
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	9b00      	ldr	r3, [sp, #0]
 8005028:	b923      	cbnz	r3, 8005034 <_dtoa_r+0x84>
 800502a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800502e:	2800      	cmp	r0, #0
 8005030:	f000 8542 	beq.w	8005ab8 <_dtoa_r+0xb08>
 8005034:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005036:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80052e4 <_dtoa_r+0x334>
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 8544 	beq.w	8005ac8 <_dtoa_r+0xb18>
 8005040:	f10b 0303 	add.w	r3, fp, #3
 8005044:	f000 bd3e 	b.w	8005ac4 <_dtoa_r+0xb14>
 8005048:	e9dd 6700 	ldrd	r6, r7, [sp]
 800504c:	2200      	movs	r2, #0
 800504e:	2300      	movs	r3, #0
 8005050:	4630      	mov	r0, r6
 8005052:	4639      	mov	r1, r7
 8005054:	f7fb fce4 	bl	8000a20 <__aeabi_dcmpeq>
 8005058:	4681      	mov	r9, r0
 800505a:	b168      	cbz	r0, 8005078 <_dtoa_r+0xc8>
 800505c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800505e:	2301      	movs	r3, #1
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 8524 	beq.w	8005ab2 <_dtoa_r+0xb02>
 800506a:	4b9a      	ldr	r3, [pc, #616]	; (80052d4 <_dtoa_r+0x324>)
 800506c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800506e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	f000 bd28 	b.w	8005ac8 <_dtoa_r+0xb18>
 8005078:	aa14      	add	r2, sp, #80	; 0x50
 800507a:	a915      	add	r1, sp, #84	; 0x54
 800507c:	ec47 6b10 	vmov	d0, r6, r7
 8005080:	4620      	mov	r0, r4
 8005082:	f001 f9c8 	bl	8006416 <__d2b>
 8005086:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800508a:	9004      	str	r0, [sp, #16]
 800508c:	2d00      	cmp	r5, #0
 800508e:	d07c      	beq.n	800518a <_dtoa_r+0x1da>
 8005090:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005094:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005098:	46b2      	mov	sl, r6
 800509a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800509e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80050a2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80050a6:	2200      	movs	r2, #0
 80050a8:	4b8b      	ldr	r3, [pc, #556]	; (80052d8 <_dtoa_r+0x328>)
 80050aa:	4650      	mov	r0, sl
 80050ac:	4659      	mov	r1, fp
 80050ae:	f7fb f897 	bl	80001e0 <__aeabi_dsub>
 80050b2:	a381      	add	r3, pc, #516	; (adr r3, 80052b8 <_dtoa_r+0x308>)
 80050b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b8:	f7fb fa4a 	bl	8000550 <__aeabi_dmul>
 80050bc:	a380      	add	r3, pc, #512	; (adr r3, 80052c0 <_dtoa_r+0x310>)
 80050be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c2:	f7fb f88f 	bl	80001e4 <__adddf3>
 80050c6:	4606      	mov	r6, r0
 80050c8:	4628      	mov	r0, r5
 80050ca:	460f      	mov	r7, r1
 80050cc:	f7fb f9d6 	bl	800047c <__aeabi_i2d>
 80050d0:	a37d      	add	r3, pc, #500	; (adr r3, 80052c8 <_dtoa_r+0x318>)
 80050d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d6:	f7fb fa3b 	bl	8000550 <__aeabi_dmul>
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	4630      	mov	r0, r6
 80050e0:	4639      	mov	r1, r7
 80050e2:	f7fb f87f 	bl	80001e4 <__adddf3>
 80050e6:	4606      	mov	r6, r0
 80050e8:	460f      	mov	r7, r1
 80050ea:	f7fb fce1 	bl	8000ab0 <__aeabi_d2iz>
 80050ee:	2200      	movs	r2, #0
 80050f0:	4682      	mov	sl, r0
 80050f2:	2300      	movs	r3, #0
 80050f4:	4630      	mov	r0, r6
 80050f6:	4639      	mov	r1, r7
 80050f8:	f7fb fc9c 	bl	8000a34 <__aeabi_dcmplt>
 80050fc:	b148      	cbz	r0, 8005112 <_dtoa_r+0x162>
 80050fe:	4650      	mov	r0, sl
 8005100:	f7fb f9bc 	bl	800047c <__aeabi_i2d>
 8005104:	4632      	mov	r2, r6
 8005106:	463b      	mov	r3, r7
 8005108:	f7fb fc8a 	bl	8000a20 <__aeabi_dcmpeq>
 800510c:	b908      	cbnz	r0, 8005112 <_dtoa_r+0x162>
 800510e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005112:	f1ba 0f16 	cmp.w	sl, #22
 8005116:	d859      	bhi.n	80051cc <_dtoa_r+0x21c>
 8005118:	4970      	ldr	r1, [pc, #448]	; (80052dc <_dtoa_r+0x32c>)
 800511a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800511e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005122:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005126:	f7fb fca3 	bl	8000a70 <__aeabi_dcmpgt>
 800512a:	2800      	cmp	r0, #0
 800512c:	d050      	beq.n	80051d0 <_dtoa_r+0x220>
 800512e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005132:	2300      	movs	r3, #0
 8005134:	930f      	str	r3, [sp, #60]	; 0x3c
 8005136:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005138:	1b5d      	subs	r5, r3, r5
 800513a:	f1b5 0801 	subs.w	r8, r5, #1
 800513e:	bf49      	itett	mi
 8005140:	f1c5 0301 	rsbmi	r3, r5, #1
 8005144:	2300      	movpl	r3, #0
 8005146:	9305      	strmi	r3, [sp, #20]
 8005148:	f04f 0800 	movmi.w	r8, #0
 800514c:	bf58      	it	pl
 800514e:	9305      	strpl	r3, [sp, #20]
 8005150:	f1ba 0f00 	cmp.w	sl, #0
 8005154:	db3e      	blt.n	80051d4 <_dtoa_r+0x224>
 8005156:	2300      	movs	r3, #0
 8005158:	44d0      	add	r8, sl
 800515a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800515e:	9307      	str	r3, [sp, #28]
 8005160:	9b06      	ldr	r3, [sp, #24]
 8005162:	2b09      	cmp	r3, #9
 8005164:	f200 8090 	bhi.w	8005288 <_dtoa_r+0x2d8>
 8005168:	2b05      	cmp	r3, #5
 800516a:	bfc4      	itt	gt
 800516c:	3b04      	subgt	r3, #4
 800516e:	9306      	strgt	r3, [sp, #24]
 8005170:	9b06      	ldr	r3, [sp, #24]
 8005172:	f1a3 0302 	sub.w	r3, r3, #2
 8005176:	bfcc      	ite	gt
 8005178:	2500      	movgt	r5, #0
 800517a:	2501      	movle	r5, #1
 800517c:	2b03      	cmp	r3, #3
 800517e:	f200 808f 	bhi.w	80052a0 <_dtoa_r+0x2f0>
 8005182:	e8df f003 	tbb	[pc, r3]
 8005186:	7f7d      	.short	0x7f7d
 8005188:	7131      	.short	0x7131
 800518a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800518e:	441d      	add	r5, r3
 8005190:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005194:	2820      	cmp	r0, #32
 8005196:	dd13      	ble.n	80051c0 <_dtoa_r+0x210>
 8005198:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800519c:	9b00      	ldr	r3, [sp, #0]
 800519e:	fa08 f800 	lsl.w	r8, r8, r0
 80051a2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80051a6:	fa23 f000 	lsr.w	r0, r3, r0
 80051aa:	ea48 0000 	orr.w	r0, r8, r0
 80051ae:	f7fb f955 	bl	800045c <__aeabi_ui2d>
 80051b2:	2301      	movs	r3, #1
 80051b4:	4682      	mov	sl, r0
 80051b6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80051ba:	3d01      	subs	r5, #1
 80051bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80051be:	e772      	b.n	80050a6 <_dtoa_r+0xf6>
 80051c0:	9b00      	ldr	r3, [sp, #0]
 80051c2:	f1c0 0020 	rsb	r0, r0, #32
 80051c6:	fa03 f000 	lsl.w	r0, r3, r0
 80051ca:	e7f0      	b.n	80051ae <_dtoa_r+0x1fe>
 80051cc:	2301      	movs	r3, #1
 80051ce:	e7b1      	b.n	8005134 <_dtoa_r+0x184>
 80051d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80051d2:	e7b0      	b.n	8005136 <_dtoa_r+0x186>
 80051d4:	9b05      	ldr	r3, [sp, #20]
 80051d6:	eba3 030a 	sub.w	r3, r3, sl
 80051da:	9305      	str	r3, [sp, #20]
 80051dc:	f1ca 0300 	rsb	r3, sl, #0
 80051e0:	9307      	str	r3, [sp, #28]
 80051e2:	2300      	movs	r3, #0
 80051e4:	930e      	str	r3, [sp, #56]	; 0x38
 80051e6:	e7bb      	b.n	8005160 <_dtoa_r+0x1b0>
 80051e8:	2301      	movs	r3, #1
 80051ea:	930a      	str	r3, [sp, #40]	; 0x28
 80051ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	dd59      	ble.n	80052a6 <_dtoa_r+0x2f6>
 80051f2:	9302      	str	r3, [sp, #8]
 80051f4:	4699      	mov	r9, r3
 80051f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80051f8:	2200      	movs	r2, #0
 80051fa:	6072      	str	r2, [r6, #4]
 80051fc:	2204      	movs	r2, #4
 80051fe:	f102 0014 	add.w	r0, r2, #20
 8005202:	4298      	cmp	r0, r3
 8005204:	6871      	ldr	r1, [r6, #4]
 8005206:	d953      	bls.n	80052b0 <_dtoa_r+0x300>
 8005208:	4620      	mov	r0, r4
 800520a:	f000 fe77 	bl	8005efc <_Balloc>
 800520e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005210:	6030      	str	r0, [r6, #0]
 8005212:	f1b9 0f0e 	cmp.w	r9, #14
 8005216:	f8d3 b000 	ldr.w	fp, [r3]
 800521a:	f200 80e6 	bhi.w	80053ea <_dtoa_r+0x43a>
 800521e:	2d00      	cmp	r5, #0
 8005220:	f000 80e3 	beq.w	80053ea <_dtoa_r+0x43a>
 8005224:	ed9d 7b00 	vldr	d7, [sp]
 8005228:	f1ba 0f00 	cmp.w	sl, #0
 800522c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005230:	dd74      	ble.n	800531c <_dtoa_r+0x36c>
 8005232:	4a2a      	ldr	r2, [pc, #168]	; (80052dc <_dtoa_r+0x32c>)
 8005234:	f00a 030f 	and.w	r3, sl, #15
 8005238:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800523c:	ed93 7b00 	vldr	d7, [r3]
 8005240:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005244:	06f0      	lsls	r0, r6, #27
 8005246:	ed8d 7b08 	vstr	d7, [sp, #32]
 800524a:	d565      	bpl.n	8005318 <_dtoa_r+0x368>
 800524c:	4b24      	ldr	r3, [pc, #144]	; (80052e0 <_dtoa_r+0x330>)
 800524e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005252:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005256:	f7fb faa5 	bl	80007a4 <__aeabi_ddiv>
 800525a:	e9cd 0100 	strd	r0, r1, [sp]
 800525e:	f006 060f 	and.w	r6, r6, #15
 8005262:	2503      	movs	r5, #3
 8005264:	4f1e      	ldr	r7, [pc, #120]	; (80052e0 <_dtoa_r+0x330>)
 8005266:	e04c      	b.n	8005302 <_dtoa_r+0x352>
 8005268:	2301      	movs	r3, #1
 800526a:	930a      	str	r3, [sp, #40]	; 0x28
 800526c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800526e:	4453      	add	r3, sl
 8005270:	f103 0901 	add.w	r9, r3, #1
 8005274:	9302      	str	r3, [sp, #8]
 8005276:	464b      	mov	r3, r9
 8005278:	2b01      	cmp	r3, #1
 800527a:	bfb8      	it	lt
 800527c:	2301      	movlt	r3, #1
 800527e:	e7ba      	b.n	80051f6 <_dtoa_r+0x246>
 8005280:	2300      	movs	r3, #0
 8005282:	e7b2      	b.n	80051ea <_dtoa_r+0x23a>
 8005284:	2300      	movs	r3, #0
 8005286:	e7f0      	b.n	800526a <_dtoa_r+0x2ba>
 8005288:	2501      	movs	r5, #1
 800528a:	2300      	movs	r3, #0
 800528c:	9306      	str	r3, [sp, #24]
 800528e:	950a      	str	r5, [sp, #40]	; 0x28
 8005290:	f04f 33ff 	mov.w	r3, #4294967295
 8005294:	9302      	str	r3, [sp, #8]
 8005296:	4699      	mov	r9, r3
 8005298:	2200      	movs	r2, #0
 800529a:	2312      	movs	r3, #18
 800529c:	920b      	str	r2, [sp, #44]	; 0x2c
 800529e:	e7aa      	b.n	80051f6 <_dtoa_r+0x246>
 80052a0:	2301      	movs	r3, #1
 80052a2:	930a      	str	r3, [sp, #40]	; 0x28
 80052a4:	e7f4      	b.n	8005290 <_dtoa_r+0x2e0>
 80052a6:	2301      	movs	r3, #1
 80052a8:	9302      	str	r3, [sp, #8]
 80052aa:	4699      	mov	r9, r3
 80052ac:	461a      	mov	r2, r3
 80052ae:	e7f5      	b.n	800529c <_dtoa_r+0x2ec>
 80052b0:	3101      	adds	r1, #1
 80052b2:	6071      	str	r1, [r6, #4]
 80052b4:	0052      	lsls	r2, r2, #1
 80052b6:	e7a2      	b.n	80051fe <_dtoa_r+0x24e>
 80052b8:	636f4361 	.word	0x636f4361
 80052bc:	3fd287a7 	.word	0x3fd287a7
 80052c0:	8b60c8b3 	.word	0x8b60c8b3
 80052c4:	3fc68a28 	.word	0x3fc68a28
 80052c8:	509f79fb 	.word	0x509f79fb
 80052cc:	3fd34413 	.word	0x3fd34413
 80052d0:	7ff00000 	.word	0x7ff00000
 80052d4:	0800fff1 	.word	0x0800fff1
 80052d8:	3ff80000 	.word	0x3ff80000
 80052dc:	08010088 	.word	0x08010088
 80052e0:	08010060 	.word	0x08010060
 80052e4:	0800fffb 	.word	0x0800fffb
 80052e8:	07f1      	lsls	r1, r6, #31
 80052ea:	d508      	bpl.n	80052fe <_dtoa_r+0x34e>
 80052ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80052f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052f4:	f7fb f92c 	bl	8000550 <__aeabi_dmul>
 80052f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80052fc:	3501      	adds	r5, #1
 80052fe:	1076      	asrs	r6, r6, #1
 8005300:	3708      	adds	r7, #8
 8005302:	2e00      	cmp	r6, #0
 8005304:	d1f0      	bne.n	80052e8 <_dtoa_r+0x338>
 8005306:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800530a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800530e:	f7fb fa49 	bl	80007a4 <__aeabi_ddiv>
 8005312:	e9cd 0100 	strd	r0, r1, [sp]
 8005316:	e01a      	b.n	800534e <_dtoa_r+0x39e>
 8005318:	2502      	movs	r5, #2
 800531a:	e7a3      	b.n	8005264 <_dtoa_r+0x2b4>
 800531c:	f000 80a0 	beq.w	8005460 <_dtoa_r+0x4b0>
 8005320:	f1ca 0600 	rsb	r6, sl, #0
 8005324:	4b9f      	ldr	r3, [pc, #636]	; (80055a4 <_dtoa_r+0x5f4>)
 8005326:	4fa0      	ldr	r7, [pc, #640]	; (80055a8 <_dtoa_r+0x5f8>)
 8005328:	f006 020f 	and.w	r2, r6, #15
 800532c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005334:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005338:	f7fb f90a 	bl	8000550 <__aeabi_dmul>
 800533c:	e9cd 0100 	strd	r0, r1, [sp]
 8005340:	1136      	asrs	r6, r6, #4
 8005342:	2300      	movs	r3, #0
 8005344:	2502      	movs	r5, #2
 8005346:	2e00      	cmp	r6, #0
 8005348:	d17f      	bne.n	800544a <_dtoa_r+0x49a>
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1e1      	bne.n	8005312 <_dtoa_r+0x362>
 800534e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 8087 	beq.w	8005464 <_dtoa_r+0x4b4>
 8005356:	e9dd 6700 	ldrd	r6, r7, [sp]
 800535a:	2200      	movs	r2, #0
 800535c:	4b93      	ldr	r3, [pc, #588]	; (80055ac <_dtoa_r+0x5fc>)
 800535e:	4630      	mov	r0, r6
 8005360:	4639      	mov	r1, r7
 8005362:	f7fb fb67 	bl	8000a34 <__aeabi_dcmplt>
 8005366:	2800      	cmp	r0, #0
 8005368:	d07c      	beq.n	8005464 <_dtoa_r+0x4b4>
 800536a:	f1b9 0f00 	cmp.w	r9, #0
 800536e:	d079      	beq.n	8005464 <_dtoa_r+0x4b4>
 8005370:	9b02      	ldr	r3, [sp, #8]
 8005372:	2b00      	cmp	r3, #0
 8005374:	dd35      	ble.n	80053e2 <_dtoa_r+0x432>
 8005376:	f10a 33ff 	add.w	r3, sl, #4294967295
 800537a:	9308      	str	r3, [sp, #32]
 800537c:	4639      	mov	r1, r7
 800537e:	2200      	movs	r2, #0
 8005380:	4b8b      	ldr	r3, [pc, #556]	; (80055b0 <_dtoa_r+0x600>)
 8005382:	4630      	mov	r0, r6
 8005384:	f7fb f8e4 	bl	8000550 <__aeabi_dmul>
 8005388:	e9cd 0100 	strd	r0, r1, [sp]
 800538c:	9f02      	ldr	r7, [sp, #8]
 800538e:	3501      	adds	r5, #1
 8005390:	4628      	mov	r0, r5
 8005392:	f7fb f873 	bl	800047c <__aeabi_i2d>
 8005396:	e9dd 2300 	ldrd	r2, r3, [sp]
 800539a:	f7fb f8d9 	bl	8000550 <__aeabi_dmul>
 800539e:	2200      	movs	r2, #0
 80053a0:	4b84      	ldr	r3, [pc, #528]	; (80055b4 <_dtoa_r+0x604>)
 80053a2:	f7fa ff1f 	bl	80001e4 <__adddf3>
 80053a6:	4605      	mov	r5, r0
 80053a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80053ac:	2f00      	cmp	r7, #0
 80053ae:	d15d      	bne.n	800546c <_dtoa_r+0x4bc>
 80053b0:	2200      	movs	r2, #0
 80053b2:	4b81      	ldr	r3, [pc, #516]	; (80055b8 <_dtoa_r+0x608>)
 80053b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053b8:	f7fa ff12 	bl	80001e0 <__aeabi_dsub>
 80053bc:	462a      	mov	r2, r5
 80053be:	4633      	mov	r3, r6
 80053c0:	e9cd 0100 	strd	r0, r1, [sp]
 80053c4:	f7fb fb54 	bl	8000a70 <__aeabi_dcmpgt>
 80053c8:	2800      	cmp	r0, #0
 80053ca:	f040 8288 	bne.w	80058de <_dtoa_r+0x92e>
 80053ce:	462a      	mov	r2, r5
 80053d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80053d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053d8:	f7fb fb2c 	bl	8000a34 <__aeabi_dcmplt>
 80053dc:	2800      	cmp	r0, #0
 80053de:	f040 827c 	bne.w	80058da <_dtoa_r+0x92a>
 80053e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053e6:	e9cd 2300 	strd	r2, r3, [sp]
 80053ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f2c0 8150 	blt.w	8005692 <_dtoa_r+0x6e2>
 80053f2:	f1ba 0f0e 	cmp.w	sl, #14
 80053f6:	f300 814c 	bgt.w	8005692 <_dtoa_r+0x6e2>
 80053fa:	4b6a      	ldr	r3, [pc, #424]	; (80055a4 <_dtoa_r+0x5f4>)
 80053fc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005400:	ed93 7b00 	vldr	d7, [r3]
 8005404:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005406:	2b00      	cmp	r3, #0
 8005408:	ed8d 7b02 	vstr	d7, [sp, #8]
 800540c:	f280 80d8 	bge.w	80055c0 <_dtoa_r+0x610>
 8005410:	f1b9 0f00 	cmp.w	r9, #0
 8005414:	f300 80d4 	bgt.w	80055c0 <_dtoa_r+0x610>
 8005418:	f040 825e 	bne.w	80058d8 <_dtoa_r+0x928>
 800541c:	2200      	movs	r2, #0
 800541e:	4b66      	ldr	r3, [pc, #408]	; (80055b8 <_dtoa_r+0x608>)
 8005420:	ec51 0b17 	vmov	r0, r1, d7
 8005424:	f7fb f894 	bl	8000550 <__aeabi_dmul>
 8005428:	e9dd 2300 	ldrd	r2, r3, [sp]
 800542c:	f7fb fb16 	bl	8000a5c <__aeabi_dcmpge>
 8005430:	464f      	mov	r7, r9
 8005432:	464e      	mov	r6, r9
 8005434:	2800      	cmp	r0, #0
 8005436:	f040 8234 	bne.w	80058a2 <_dtoa_r+0x8f2>
 800543a:	2331      	movs	r3, #49	; 0x31
 800543c:	f10b 0501 	add.w	r5, fp, #1
 8005440:	f88b 3000 	strb.w	r3, [fp]
 8005444:	f10a 0a01 	add.w	sl, sl, #1
 8005448:	e22f      	b.n	80058aa <_dtoa_r+0x8fa>
 800544a:	07f2      	lsls	r2, r6, #31
 800544c:	d505      	bpl.n	800545a <_dtoa_r+0x4aa>
 800544e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005452:	f7fb f87d 	bl	8000550 <__aeabi_dmul>
 8005456:	3501      	adds	r5, #1
 8005458:	2301      	movs	r3, #1
 800545a:	1076      	asrs	r6, r6, #1
 800545c:	3708      	adds	r7, #8
 800545e:	e772      	b.n	8005346 <_dtoa_r+0x396>
 8005460:	2502      	movs	r5, #2
 8005462:	e774      	b.n	800534e <_dtoa_r+0x39e>
 8005464:	f8cd a020 	str.w	sl, [sp, #32]
 8005468:	464f      	mov	r7, r9
 800546a:	e791      	b.n	8005390 <_dtoa_r+0x3e0>
 800546c:	4b4d      	ldr	r3, [pc, #308]	; (80055a4 <_dtoa_r+0x5f4>)
 800546e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005472:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005478:	2b00      	cmp	r3, #0
 800547a:	d047      	beq.n	800550c <_dtoa_r+0x55c>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	2000      	movs	r0, #0
 8005482:	494e      	ldr	r1, [pc, #312]	; (80055bc <_dtoa_r+0x60c>)
 8005484:	f7fb f98e 	bl	80007a4 <__aeabi_ddiv>
 8005488:	462a      	mov	r2, r5
 800548a:	4633      	mov	r3, r6
 800548c:	f7fa fea8 	bl	80001e0 <__aeabi_dsub>
 8005490:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005494:	465d      	mov	r5, fp
 8005496:	e9dd 0100 	ldrd	r0, r1, [sp]
 800549a:	f7fb fb09 	bl	8000ab0 <__aeabi_d2iz>
 800549e:	4606      	mov	r6, r0
 80054a0:	f7fa ffec 	bl	800047c <__aeabi_i2d>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054ac:	f7fa fe98 	bl	80001e0 <__aeabi_dsub>
 80054b0:	3630      	adds	r6, #48	; 0x30
 80054b2:	f805 6b01 	strb.w	r6, [r5], #1
 80054b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80054ba:	e9cd 0100 	strd	r0, r1, [sp]
 80054be:	f7fb fab9 	bl	8000a34 <__aeabi_dcmplt>
 80054c2:	2800      	cmp	r0, #0
 80054c4:	d163      	bne.n	800558e <_dtoa_r+0x5de>
 80054c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054ca:	2000      	movs	r0, #0
 80054cc:	4937      	ldr	r1, [pc, #220]	; (80055ac <_dtoa_r+0x5fc>)
 80054ce:	f7fa fe87 	bl	80001e0 <__aeabi_dsub>
 80054d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80054d6:	f7fb faad 	bl	8000a34 <__aeabi_dcmplt>
 80054da:	2800      	cmp	r0, #0
 80054dc:	f040 80b7 	bne.w	800564e <_dtoa_r+0x69e>
 80054e0:	eba5 030b 	sub.w	r3, r5, fp
 80054e4:	429f      	cmp	r7, r3
 80054e6:	f77f af7c 	ble.w	80053e2 <_dtoa_r+0x432>
 80054ea:	2200      	movs	r2, #0
 80054ec:	4b30      	ldr	r3, [pc, #192]	; (80055b0 <_dtoa_r+0x600>)
 80054ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054f2:	f7fb f82d 	bl	8000550 <__aeabi_dmul>
 80054f6:	2200      	movs	r2, #0
 80054f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80054fc:	4b2c      	ldr	r3, [pc, #176]	; (80055b0 <_dtoa_r+0x600>)
 80054fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005502:	f7fb f825 	bl	8000550 <__aeabi_dmul>
 8005506:	e9cd 0100 	strd	r0, r1, [sp]
 800550a:	e7c4      	b.n	8005496 <_dtoa_r+0x4e6>
 800550c:	462a      	mov	r2, r5
 800550e:	4633      	mov	r3, r6
 8005510:	f7fb f81e 	bl	8000550 <__aeabi_dmul>
 8005514:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005518:	eb0b 0507 	add.w	r5, fp, r7
 800551c:	465e      	mov	r6, fp
 800551e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005522:	f7fb fac5 	bl	8000ab0 <__aeabi_d2iz>
 8005526:	4607      	mov	r7, r0
 8005528:	f7fa ffa8 	bl	800047c <__aeabi_i2d>
 800552c:	3730      	adds	r7, #48	; 0x30
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005536:	f7fa fe53 	bl	80001e0 <__aeabi_dsub>
 800553a:	f806 7b01 	strb.w	r7, [r6], #1
 800553e:	42ae      	cmp	r6, r5
 8005540:	e9cd 0100 	strd	r0, r1, [sp]
 8005544:	f04f 0200 	mov.w	r2, #0
 8005548:	d126      	bne.n	8005598 <_dtoa_r+0x5e8>
 800554a:	4b1c      	ldr	r3, [pc, #112]	; (80055bc <_dtoa_r+0x60c>)
 800554c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005550:	f7fa fe48 	bl	80001e4 <__adddf3>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	e9dd 0100 	ldrd	r0, r1, [sp]
 800555c:	f7fb fa88 	bl	8000a70 <__aeabi_dcmpgt>
 8005560:	2800      	cmp	r0, #0
 8005562:	d174      	bne.n	800564e <_dtoa_r+0x69e>
 8005564:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005568:	2000      	movs	r0, #0
 800556a:	4914      	ldr	r1, [pc, #80]	; (80055bc <_dtoa_r+0x60c>)
 800556c:	f7fa fe38 	bl	80001e0 <__aeabi_dsub>
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005578:	f7fb fa5c 	bl	8000a34 <__aeabi_dcmplt>
 800557c:	2800      	cmp	r0, #0
 800557e:	f43f af30 	beq.w	80053e2 <_dtoa_r+0x432>
 8005582:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005586:	2b30      	cmp	r3, #48	; 0x30
 8005588:	f105 32ff 	add.w	r2, r5, #4294967295
 800558c:	d002      	beq.n	8005594 <_dtoa_r+0x5e4>
 800558e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005592:	e04a      	b.n	800562a <_dtoa_r+0x67a>
 8005594:	4615      	mov	r5, r2
 8005596:	e7f4      	b.n	8005582 <_dtoa_r+0x5d2>
 8005598:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <_dtoa_r+0x600>)
 800559a:	f7fa ffd9 	bl	8000550 <__aeabi_dmul>
 800559e:	e9cd 0100 	strd	r0, r1, [sp]
 80055a2:	e7bc      	b.n	800551e <_dtoa_r+0x56e>
 80055a4:	08010088 	.word	0x08010088
 80055a8:	08010060 	.word	0x08010060
 80055ac:	3ff00000 	.word	0x3ff00000
 80055b0:	40240000 	.word	0x40240000
 80055b4:	401c0000 	.word	0x401c0000
 80055b8:	40140000 	.word	0x40140000
 80055bc:	3fe00000 	.word	0x3fe00000
 80055c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80055c4:	465d      	mov	r5, fp
 80055c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055ca:	4630      	mov	r0, r6
 80055cc:	4639      	mov	r1, r7
 80055ce:	f7fb f8e9 	bl	80007a4 <__aeabi_ddiv>
 80055d2:	f7fb fa6d 	bl	8000ab0 <__aeabi_d2iz>
 80055d6:	4680      	mov	r8, r0
 80055d8:	f7fa ff50 	bl	800047c <__aeabi_i2d>
 80055dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055e0:	f7fa ffb6 	bl	8000550 <__aeabi_dmul>
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4630      	mov	r0, r6
 80055ea:	4639      	mov	r1, r7
 80055ec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80055f0:	f7fa fdf6 	bl	80001e0 <__aeabi_dsub>
 80055f4:	f805 6b01 	strb.w	r6, [r5], #1
 80055f8:	eba5 060b 	sub.w	r6, r5, fp
 80055fc:	45b1      	cmp	r9, r6
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	d139      	bne.n	8005678 <_dtoa_r+0x6c8>
 8005604:	f7fa fdee 	bl	80001e4 <__adddf3>
 8005608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800560c:	4606      	mov	r6, r0
 800560e:	460f      	mov	r7, r1
 8005610:	f7fb fa2e 	bl	8000a70 <__aeabi_dcmpgt>
 8005614:	b9c8      	cbnz	r0, 800564a <_dtoa_r+0x69a>
 8005616:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800561a:	4630      	mov	r0, r6
 800561c:	4639      	mov	r1, r7
 800561e:	f7fb f9ff 	bl	8000a20 <__aeabi_dcmpeq>
 8005622:	b110      	cbz	r0, 800562a <_dtoa_r+0x67a>
 8005624:	f018 0f01 	tst.w	r8, #1
 8005628:	d10f      	bne.n	800564a <_dtoa_r+0x69a>
 800562a:	9904      	ldr	r1, [sp, #16]
 800562c:	4620      	mov	r0, r4
 800562e:	f000 fc99 	bl	8005f64 <_Bfree>
 8005632:	2300      	movs	r3, #0
 8005634:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005636:	702b      	strb	r3, [r5, #0]
 8005638:	f10a 0301 	add.w	r3, sl, #1
 800563c:	6013      	str	r3, [r2, #0]
 800563e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 8241 	beq.w	8005ac8 <_dtoa_r+0xb18>
 8005646:	601d      	str	r5, [r3, #0]
 8005648:	e23e      	b.n	8005ac8 <_dtoa_r+0xb18>
 800564a:	f8cd a020 	str.w	sl, [sp, #32]
 800564e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005652:	2a39      	cmp	r2, #57	; 0x39
 8005654:	f105 33ff 	add.w	r3, r5, #4294967295
 8005658:	d108      	bne.n	800566c <_dtoa_r+0x6bc>
 800565a:	459b      	cmp	fp, r3
 800565c:	d10a      	bne.n	8005674 <_dtoa_r+0x6c4>
 800565e:	9b08      	ldr	r3, [sp, #32]
 8005660:	3301      	adds	r3, #1
 8005662:	9308      	str	r3, [sp, #32]
 8005664:	2330      	movs	r3, #48	; 0x30
 8005666:	f88b 3000 	strb.w	r3, [fp]
 800566a:	465b      	mov	r3, fp
 800566c:	781a      	ldrb	r2, [r3, #0]
 800566e:	3201      	adds	r2, #1
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	e78c      	b.n	800558e <_dtoa_r+0x5de>
 8005674:	461d      	mov	r5, r3
 8005676:	e7ea      	b.n	800564e <_dtoa_r+0x69e>
 8005678:	2200      	movs	r2, #0
 800567a:	4b9b      	ldr	r3, [pc, #620]	; (80058e8 <_dtoa_r+0x938>)
 800567c:	f7fa ff68 	bl	8000550 <__aeabi_dmul>
 8005680:	2200      	movs	r2, #0
 8005682:	2300      	movs	r3, #0
 8005684:	4606      	mov	r6, r0
 8005686:	460f      	mov	r7, r1
 8005688:	f7fb f9ca 	bl	8000a20 <__aeabi_dcmpeq>
 800568c:	2800      	cmp	r0, #0
 800568e:	d09a      	beq.n	80055c6 <_dtoa_r+0x616>
 8005690:	e7cb      	b.n	800562a <_dtoa_r+0x67a>
 8005692:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005694:	2a00      	cmp	r2, #0
 8005696:	f000 808b 	beq.w	80057b0 <_dtoa_r+0x800>
 800569a:	9a06      	ldr	r2, [sp, #24]
 800569c:	2a01      	cmp	r2, #1
 800569e:	dc6e      	bgt.n	800577e <_dtoa_r+0x7ce>
 80056a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80056a2:	2a00      	cmp	r2, #0
 80056a4:	d067      	beq.n	8005776 <_dtoa_r+0x7c6>
 80056a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80056aa:	9f07      	ldr	r7, [sp, #28]
 80056ac:	9d05      	ldr	r5, [sp, #20]
 80056ae:	9a05      	ldr	r2, [sp, #20]
 80056b0:	2101      	movs	r1, #1
 80056b2:	441a      	add	r2, r3
 80056b4:	4620      	mov	r0, r4
 80056b6:	9205      	str	r2, [sp, #20]
 80056b8:	4498      	add	r8, r3
 80056ba:	f000 fcf3 	bl	80060a4 <__i2b>
 80056be:	4606      	mov	r6, r0
 80056c0:	2d00      	cmp	r5, #0
 80056c2:	dd0c      	ble.n	80056de <_dtoa_r+0x72e>
 80056c4:	f1b8 0f00 	cmp.w	r8, #0
 80056c8:	dd09      	ble.n	80056de <_dtoa_r+0x72e>
 80056ca:	4545      	cmp	r5, r8
 80056cc:	9a05      	ldr	r2, [sp, #20]
 80056ce:	462b      	mov	r3, r5
 80056d0:	bfa8      	it	ge
 80056d2:	4643      	movge	r3, r8
 80056d4:	1ad2      	subs	r2, r2, r3
 80056d6:	9205      	str	r2, [sp, #20]
 80056d8:	1aed      	subs	r5, r5, r3
 80056da:	eba8 0803 	sub.w	r8, r8, r3
 80056de:	9b07      	ldr	r3, [sp, #28]
 80056e0:	b1eb      	cbz	r3, 800571e <_dtoa_r+0x76e>
 80056e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d067      	beq.n	80057b8 <_dtoa_r+0x808>
 80056e8:	b18f      	cbz	r7, 800570e <_dtoa_r+0x75e>
 80056ea:	4631      	mov	r1, r6
 80056ec:	463a      	mov	r2, r7
 80056ee:	4620      	mov	r0, r4
 80056f0:	f000 fd78 	bl	80061e4 <__pow5mult>
 80056f4:	9a04      	ldr	r2, [sp, #16]
 80056f6:	4601      	mov	r1, r0
 80056f8:	4606      	mov	r6, r0
 80056fa:	4620      	mov	r0, r4
 80056fc:	f000 fcdb 	bl	80060b6 <__multiply>
 8005700:	9904      	ldr	r1, [sp, #16]
 8005702:	9008      	str	r0, [sp, #32]
 8005704:	4620      	mov	r0, r4
 8005706:	f000 fc2d 	bl	8005f64 <_Bfree>
 800570a:	9b08      	ldr	r3, [sp, #32]
 800570c:	9304      	str	r3, [sp, #16]
 800570e:	9b07      	ldr	r3, [sp, #28]
 8005710:	1bda      	subs	r2, r3, r7
 8005712:	d004      	beq.n	800571e <_dtoa_r+0x76e>
 8005714:	9904      	ldr	r1, [sp, #16]
 8005716:	4620      	mov	r0, r4
 8005718:	f000 fd64 	bl	80061e4 <__pow5mult>
 800571c:	9004      	str	r0, [sp, #16]
 800571e:	2101      	movs	r1, #1
 8005720:	4620      	mov	r0, r4
 8005722:	f000 fcbf 	bl	80060a4 <__i2b>
 8005726:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005728:	4607      	mov	r7, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 81d0 	beq.w	8005ad0 <_dtoa_r+0xb20>
 8005730:	461a      	mov	r2, r3
 8005732:	4601      	mov	r1, r0
 8005734:	4620      	mov	r0, r4
 8005736:	f000 fd55 	bl	80061e4 <__pow5mult>
 800573a:	9b06      	ldr	r3, [sp, #24]
 800573c:	2b01      	cmp	r3, #1
 800573e:	4607      	mov	r7, r0
 8005740:	dc40      	bgt.n	80057c4 <_dtoa_r+0x814>
 8005742:	9b00      	ldr	r3, [sp, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d139      	bne.n	80057bc <_dtoa_r+0x80c>
 8005748:	9b01      	ldr	r3, [sp, #4]
 800574a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800574e:	2b00      	cmp	r3, #0
 8005750:	d136      	bne.n	80057c0 <_dtoa_r+0x810>
 8005752:	9b01      	ldr	r3, [sp, #4]
 8005754:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005758:	0d1b      	lsrs	r3, r3, #20
 800575a:	051b      	lsls	r3, r3, #20
 800575c:	b12b      	cbz	r3, 800576a <_dtoa_r+0x7ba>
 800575e:	9b05      	ldr	r3, [sp, #20]
 8005760:	3301      	adds	r3, #1
 8005762:	9305      	str	r3, [sp, #20]
 8005764:	f108 0801 	add.w	r8, r8, #1
 8005768:	2301      	movs	r3, #1
 800576a:	9307      	str	r3, [sp, #28]
 800576c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800576e:	2b00      	cmp	r3, #0
 8005770:	d12a      	bne.n	80057c8 <_dtoa_r+0x818>
 8005772:	2001      	movs	r0, #1
 8005774:	e030      	b.n	80057d8 <_dtoa_r+0x828>
 8005776:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005778:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800577c:	e795      	b.n	80056aa <_dtoa_r+0x6fa>
 800577e:	9b07      	ldr	r3, [sp, #28]
 8005780:	f109 37ff 	add.w	r7, r9, #4294967295
 8005784:	42bb      	cmp	r3, r7
 8005786:	bfbf      	itttt	lt
 8005788:	9b07      	ldrlt	r3, [sp, #28]
 800578a:	9707      	strlt	r7, [sp, #28]
 800578c:	1afa      	sublt	r2, r7, r3
 800578e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005790:	bfbb      	ittet	lt
 8005792:	189b      	addlt	r3, r3, r2
 8005794:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005796:	1bdf      	subge	r7, r3, r7
 8005798:	2700      	movlt	r7, #0
 800579a:	f1b9 0f00 	cmp.w	r9, #0
 800579e:	bfb5      	itete	lt
 80057a0:	9b05      	ldrlt	r3, [sp, #20]
 80057a2:	9d05      	ldrge	r5, [sp, #20]
 80057a4:	eba3 0509 	sublt.w	r5, r3, r9
 80057a8:	464b      	movge	r3, r9
 80057aa:	bfb8      	it	lt
 80057ac:	2300      	movlt	r3, #0
 80057ae:	e77e      	b.n	80056ae <_dtoa_r+0x6fe>
 80057b0:	9f07      	ldr	r7, [sp, #28]
 80057b2:	9d05      	ldr	r5, [sp, #20]
 80057b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80057b6:	e783      	b.n	80056c0 <_dtoa_r+0x710>
 80057b8:	9a07      	ldr	r2, [sp, #28]
 80057ba:	e7ab      	b.n	8005714 <_dtoa_r+0x764>
 80057bc:	2300      	movs	r3, #0
 80057be:	e7d4      	b.n	800576a <_dtoa_r+0x7ba>
 80057c0:	9b00      	ldr	r3, [sp, #0]
 80057c2:	e7d2      	b.n	800576a <_dtoa_r+0x7ba>
 80057c4:	2300      	movs	r3, #0
 80057c6:	9307      	str	r3, [sp, #28]
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80057ce:	6918      	ldr	r0, [r3, #16]
 80057d0:	f000 fc1a 	bl	8006008 <__hi0bits>
 80057d4:	f1c0 0020 	rsb	r0, r0, #32
 80057d8:	4440      	add	r0, r8
 80057da:	f010 001f 	ands.w	r0, r0, #31
 80057de:	d047      	beq.n	8005870 <_dtoa_r+0x8c0>
 80057e0:	f1c0 0320 	rsb	r3, r0, #32
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	dd3b      	ble.n	8005860 <_dtoa_r+0x8b0>
 80057e8:	9b05      	ldr	r3, [sp, #20]
 80057ea:	f1c0 001c 	rsb	r0, r0, #28
 80057ee:	4403      	add	r3, r0
 80057f0:	9305      	str	r3, [sp, #20]
 80057f2:	4405      	add	r5, r0
 80057f4:	4480      	add	r8, r0
 80057f6:	9b05      	ldr	r3, [sp, #20]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	dd05      	ble.n	8005808 <_dtoa_r+0x858>
 80057fc:	461a      	mov	r2, r3
 80057fe:	9904      	ldr	r1, [sp, #16]
 8005800:	4620      	mov	r0, r4
 8005802:	f000 fd3d 	bl	8006280 <__lshift>
 8005806:	9004      	str	r0, [sp, #16]
 8005808:	f1b8 0f00 	cmp.w	r8, #0
 800580c:	dd05      	ble.n	800581a <_dtoa_r+0x86a>
 800580e:	4639      	mov	r1, r7
 8005810:	4642      	mov	r2, r8
 8005812:	4620      	mov	r0, r4
 8005814:	f000 fd34 	bl	8006280 <__lshift>
 8005818:	4607      	mov	r7, r0
 800581a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800581c:	b353      	cbz	r3, 8005874 <_dtoa_r+0x8c4>
 800581e:	4639      	mov	r1, r7
 8005820:	9804      	ldr	r0, [sp, #16]
 8005822:	f000 fd81 	bl	8006328 <__mcmp>
 8005826:	2800      	cmp	r0, #0
 8005828:	da24      	bge.n	8005874 <_dtoa_r+0x8c4>
 800582a:	2300      	movs	r3, #0
 800582c:	220a      	movs	r2, #10
 800582e:	9904      	ldr	r1, [sp, #16]
 8005830:	4620      	mov	r0, r4
 8005832:	f000 fbae 	bl	8005f92 <__multadd>
 8005836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005838:	9004      	str	r0, [sp, #16]
 800583a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 814d 	beq.w	8005ade <_dtoa_r+0xb2e>
 8005844:	2300      	movs	r3, #0
 8005846:	4631      	mov	r1, r6
 8005848:	220a      	movs	r2, #10
 800584a:	4620      	mov	r0, r4
 800584c:	f000 fba1 	bl	8005f92 <__multadd>
 8005850:	9b02      	ldr	r3, [sp, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	4606      	mov	r6, r0
 8005856:	dc4f      	bgt.n	80058f8 <_dtoa_r+0x948>
 8005858:	9b06      	ldr	r3, [sp, #24]
 800585a:	2b02      	cmp	r3, #2
 800585c:	dd4c      	ble.n	80058f8 <_dtoa_r+0x948>
 800585e:	e011      	b.n	8005884 <_dtoa_r+0x8d4>
 8005860:	d0c9      	beq.n	80057f6 <_dtoa_r+0x846>
 8005862:	9a05      	ldr	r2, [sp, #20]
 8005864:	331c      	adds	r3, #28
 8005866:	441a      	add	r2, r3
 8005868:	9205      	str	r2, [sp, #20]
 800586a:	441d      	add	r5, r3
 800586c:	4498      	add	r8, r3
 800586e:	e7c2      	b.n	80057f6 <_dtoa_r+0x846>
 8005870:	4603      	mov	r3, r0
 8005872:	e7f6      	b.n	8005862 <_dtoa_r+0x8b2>
 8005874:	f1b9 0f00 	cmp.w	r9, #0
 8005878:	dc38      	bgt.n	80058ec <_dtoa_r+0x93c>
 800587a:	9b06      	ldr	r3, [sp, #24]
 800587c:	2b02      	cmp	r3, #2
 800587e:	dd35      	ble.n	80058ec <_dtoa_r+0x93c>
 8005880:	f8cd 9008 	str.w	r9, [sp, #8]
 8005884:	9b02      	ldr	r3, [sp, #8]
 8005886:	b963      	cbnz	r3, 80058a2 <_dtoa_r+0x8f2>
 8005888:	4639      	mov	r1, r7
 800588a:	2205      	movs	r2, #5
 800588c:	4620      	mov	r0, r4
 800588e:	f000 fb80 	bl	8005f92 <__multadd>
 8005892:	4601      	mov	r1, r0
 8005894:	4607      	mov	r7, r0
 8005896:	9804      	ldr	r0, [sp, #16]
 8005898:	f000 fd46 	bl	8006328 <__mcmp>
 800589c:	2800      	cmp	r0, #0
 800589e:	f73f adcc 	bgt.w	800543a <_dtoa_r+0x48a>
 80058a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058a4:	465d      	mov	r5, fp
 80058a6:	ea6f 0a03 	mvn.w	sl, r3
 80058aa:	f04f 0900 	mov.w	r9, #0
 80058ae:	4639      	mov	r1, r7
 80058b0:	4620      	mov	r0, r4
 80058b2:	f000 fb57 	bl	8005f64 <_Bfree>
 80058b6:	2e00      	cmp	r6, #0
 80058b8:	f43f aeb7 	beq.w	800562a <_dtoa_r+0x67a>
 80058bc:	f1b9 0f00 	cmp.w	r9, #0
 80058c0:	d005      	beq.n	80058ce <_dtoa_r+0x91e>
 80058c2:	45b1      	cmp	r9, r6
 80058c4:	d003      	beq.n	80058ce <_dtoa_r+0x91e>
 80058c6:	4649      	mov	r1, r9
 80058c8:	4620      	mov	r0, r4
 80058ca:	f000 fb4b 	bl	8005f64 <_Bfree>
 80058ce:	4631      	mov	r1, r6
 80058d0:	4620      	mov	r0, r4
 80058d2:	f000 fb47 	bl	8005f64 <_Bfree>
 80058d6:	e6a8      	b.n	800562a <_dtoa_r+0x67a>
 80058d8:	2700      	movs	r7, #0
 80058da:	463e      	mov	r6, r7
 80058dc:	e7e1      	b.n	80058a2 <_dtoa_r+0x8f2>
 80058de:	f8dd a020 	ldr.w	sl, [sp, #32]
 80058e2:	463e      	mov	r6, r7
 80058e4:	e5a9      	b.n	800543a <_dtoa_r+0x48a>
 80058e6:	bf00      	nop
 80058e8:	40240000 	.word	0x40240000
 80058ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 80fa 	beq.w	8005aec <_dtoa_r+0xb3c>
 80058f8:	2d00      	cmp	r5, #0
 80058fa:	dd05      	ble.n	8005908 <_dtoa_r+0x958>
 80058fc:	4631      	mov	r1, r6
 80058fe:	462a      	mov	r2, r5
 8005900:	4620      	mov	r0, r4
 8005902:	f000 fcbd 	bl	8006280 <__lshift>
 8005906:	4606      	mov	r6, r0
 8005908:	9b07      	ldr	r3, [sp, #28]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d04c      	beq.n	80059a8 <_dtoa_r+0x9f8>
 800590e:	6871      	ldr	r1, [r6, #4]
 8005910:	4620      	mov	r0, r4
 8005912:	f000 faf3 	bl	8005efc <_Balloc>
 8005916:	6932      	ldr	r2, [r6, #16]
 8005918:	3202      	adds	r2, #2
 800591a:	4605      	mov	r5, r0
 800591c:	0092      	lsls	r2, r2, #2
 800591e:	f106 010c 	add.w	r1, r6, #12
 8005922:	300c      	adds	r0, #12
 8005924:	f7fe fd5a 	bl	80043dc <memcpy>
 8005928:	2201      	movs	r2, #1
 800592a:	4629      	mov	r1, r5
 800592c:	4620      	mov	r0, r4
 800592e:	f000 fca7 	bl	8006280 <__lshift>
 8005932:	9b00      	ldr	r3, [sp, #0]
 8005934:	f8cd b014 	str.w	fp, [sp, #20]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	46b1      	mov	r9, r6
 800593e:	9307      	str	r3, [sp, #28]
 8005940:	4606      	mov	r6, r0
 8005942:	4639      	mov	r1, r7
 8005944:	9804      	ldr	r0, [sp, #16]
 8005946:	f7ff faa5 	bl	8004e94 <quorem>
 800594a:	4649      	mov	r1, r9
 800594c:	4605      	mov	r5, r0
 800594e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005952:	9804      	ldr	r0, [sp, #16]
 8005954:	f000 fce8 	bl	8006328 <__mcmp>
 8005958:	4632      	mov	r2, r6
 800595a:	9000      	str	r0, [sp, #0]
 800595c:	4639      	mov	r1, r7
 800595e:	4620      	mov	r0, r4
 8005960:	f000 fcfc 	bl	800635c <__mdiff>
 8005964:	68c3      	ldr	r3, [r0, #12]
 8005966:	4602      	mov	r2, r0
 8005968:	bb03      	cbnz	r3, 80059ac <_dtoa_r+0x9fc>
 800596a:	4601      	mov	r1, r0
 800596c:	9008      	str	r0, [sp, #32]
 800596e:	9804      	ldr	r0, [sp, #16]
 8005970:	f000 fcda 	bl	8006328 <__mcmp>
 8005974:	9a08      	ldr	r2, [sp, #32]
 8005976:	4603      	mov	r3, r0
 8005978:	4611      	mov	r1, r2
 800597a:	4620      	mov	r0, r4
 800597c:	9308      	str	r3, [sp, #32]
 800597e:	f000 faf1 	bl	8005f64 <_Bfree>
 8005982:	9b08      	ldr	r3, [sp, #32]
 8005984:	b9a3      	cbnz	r3, 80059b0 <_dtoa_r+0xa00>
 8005986:	9a06      	ldr	r2, [sp, #24]
 8005988:	b992      	cbnz	r2, 80059b0 <_dtoa_r+0xa00>
 800598a:	9a07      	ldr	r2, [sp, #28]
 800598c:	b982      	cbnz	r2, 80059b0 <_dtoa_r+0xa00>
 800598e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005992:	d029      	beq.n	80059e8 <_dtoa_r+0xa38>
 8005994:	9b00      	ldr	r3, [sp, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	dd01      	ble.n	800599e <_dtoa_r+0x9ee>
 800599a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800599e:	9b05      	ldr	r3, [sp, #20]
 80059a0:	1c5d      	adds	r5, r3, #1
 80059a2:	f883 8000 	strb.w	r8, [r3]
 80059a6:	e782      	b.n	80058ae <_dtoa_r+0x8fe>
 80059a8:	4630      	mov	r0, r6
 80059aa:	e7c2      	b.n	8005932 <_dtoa_r+0x982>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e7e3      	b.n	8005978 <_dtoa_r+0x9c8>
 80059b0:	9a00      	ldr	r2, [sp, #0]
 80059b2:	2a00      	cmp	r2, #0
 80059b4:	db04      	blt.n	80059c0 <_dtoa_r+0xa10>
 80059b6:	d125      	bne.n	8005a04 <_dtoa_r+0xa54>
 80059b8:	9a06      	ldr	r2, [sp, #24]
 80059ba:	bb1a      	cbnz	r2, 8005a04 <_dtoa_r+0xa54>
 80059bc:	9a07      	ldr	r2, [sp, #28]
 80059be:	bb0a      	cbnz	r2, 8005a04 <_dtoa_r+0xa54>
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	ddec      	ble.n	800599e <_dtoa_r+0x9ee>
 80059c4:	2201      	movs	r2, #1
 80059c6:	9904      	ldr	r1, [sp, #16]
 80059c8:	4620      	mov	r0, r4
 80059ca:	f000 fc59 	bl	8006280 <__lshift>
 80059ce:	4639      	mov	r1, r7
 80059d0:	9004      	str	r0, [sp, #16]
 80059d2:	f000 fca9 	bl	8006328 <__mcmp>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	dc03      	bgt.n	80059e2 <_dtoa_r+0xa32>
 80059da:	d1e0      	bne.n	800599e <_dtoa_r+0x9ee>
 80059dc:	f018 0f01 	tst.w	r8, #1
 80059e0:	d0dd      	beq.n	800599e <_dtoa_r+0x9ee>
 80059e2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80059e6:	d1d8      	bne.n	800599a <_dtoa_r+0x9ea>
 80059e8:	9b05      	ldr	r3, [sp, #20]
 80059ea:	9a05      	ldr	r2, [sp, #20]
 80059ec:	1c5d      	adds	r5, r3, #1
 80059ee:	2339      	movs	r3, #57	; 0x39
 80059f0:	7013      	strb	r3, [r2, #0]
 80059f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059f6:	2b39      	cmp	r3, #57	; 0x39
 80059f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80059fc:	d04f      	beq.n	8005a9e <_dtoa_r+0xaee>
 80059fe:	3301      	adds	r3, #1
 8005a00:	7013      	strb	r3, [r2, #0]
 8005a02:	e754      	b.n	80058ae <_dtoa_r+0x8fe>
 8005a04:	9a05      	ldr	r2, [sp, #20]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f102 0501 	add.w	r5, r2, #1
 8005a0c:	dd06      	ble.n	8005a1c <_dtoa_r+0xa6c>
 8005a0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005a12:	d0e9      	beq.n	80059e8 <_dtoa_r+0xa38>
 8005a14:	f108 0801 	add.w	r8, r8, #1
 8005a18:	9b05      	ldr	r3, [sp, #20]
 8005a1a:	e7c2      	b.n	80059a2 <_dtoa_r+0x9f2>
 8005a1c:	9a02      	ldr	r2, [sp, #8]
 8005a1e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005a22:	eba5 030b 	sub.w	r3, r5, fp
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d021      	beq.n	8005a6e <_dtoa_r+0xabe>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	220a      	movs	r2, #10
 8005a2e:	9904      	ldr	r1, [sp, #16]
 8005a30:	4620      	mov	r0, r4
 8005a32:	f000 faae 	bl	8005f92 <__multadd>
 8005a36:	45b1      	cmp	r9, r6
 8005a38:	9004      	str	r0, [sp, #16]
 8005a3a:	f04f 0300 	mov.w	r3, #0
 8005a3e:	f04f 020a 	mov.w	r2, #10
 8005a42:	4649      	mov	r1, r9
 8005a44:	4620      	mov	r0, r4
 8005a46:	d105      	bne.n	8005a54 <_dtoa_r+0xaa4>
 8005a48:	f000 faa3 	bl	8005f92 <__multadd>
 8005a4c:	4681      	mov	r9, r0
 8005a4e:	4606      	mov	r6, r0
 8005a50:	9505      	str	r5, [sp, #20]
 8005a52:	e776      	b.n	8005942 <_dtoa_r+0x992>
 8005a54:	f000 fa9d 	bl	8005f92 <__multadd>
 8005a58:	4631      	mov	r1, r6
 8005a5a:	4681      	mov	r9, r0
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	220a      	movs	r2, #10
 8005a60:	4620      	mov	r0, r4
 8005a62:	f000 fa96 	bl	8005f92 <__multadd>
 8005a66:	4606      	mov	r6, r0
 8005a68:	e7f2      	b.n	8005a50 <_dtoa_r+0xaa0>
 8005a6a:	f04f 0900 	mov.w	r9, #0
 8005a6e:	2201      	movs	r2, #1
 8005a70:	9904      	ldr	r1, [sp, #16]
 8005a72:	4620      	mov	r0, r4
 8005a74:	f000 fc04 	bl	8006280 <__lshift>
 8005a78:	4639      	mov	r1, r7
 8005a7a:	9004      	str	r0, [sp, #16]
 8005a7c:	f000 fc54 	bl	8006328 <__mcmp>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	dcb6      	bgt.n	80059f2 <_dtoa_r+0xa42>
 8005a84:	d102      	bne.n	8005a8c <_dtoa_r+0xadc>
 8005a86:	f018 0f01 	tst.w	r8, #1
 8005a8a:	d1b2      	bne.n	80059f2 <_dtoa_r+0xa42>
 8005a8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a90:	2b30      	cmp	r3, #48	; 0x30
 8005a92:	f105 32ff 	add.w	r2, r5, #4294967295
 8005a96:	f47f af0a 	bne.w	80058ae <_dtoa_r+0x8fe>
 8005a9a:	4615      	mov	r5, r2
 8005a9c:	e7f6      	b.n	8005a8c <_dtoa_r+0xadc>
 8005a9e:	4593      	cmp	fp, r2
 8005aa0:	d105      	bne.n	8005aae <_dtoa_r+0xafe>
 8005aa2:	2331      	movs	r3, #49	; 0x31
 8005aa4:	f10a 0a01 	add.w	sl, sl, #1
 8005aa8:	f88b 3000 	strb.w	r3, [fp]
 8005aac:	e6ff      	b.n	80058ae <_dtoa_r+0x8fe>
 8005aae:	4615      	mov	r5, r2
 8005ab0:	e79f      	b.n	80059f2 <_dtoa_r+0xa42>
 8005ab2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005b18 <_dtoa_r+0xb68>
 8005ab6:	e007      	b.n	8005ac8 <_dtoa_r+0xb18>
 8005ab8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005aba:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005b1c <_dtoa_r+0xb6c>
 8005abe:	b11b      	cbz	r3, 8005ac8 <_dtoa_r+0xb18>
 8005ac0:	f10b 0308 	add.w	r3, fp, #8
 8005ac4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	4658      	mov	r0, fp
 8005aca:	b017      	add	sp, #92	; 0x5c
 8005acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad0:	9b06      	ldr	r3, [sp, #24]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	f77f ae35 	ble.w	8005742 <_dtoa_r+0x792>
 8005ad8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ada:	9307      	str	r3, [sp, #28]
 8005adc:	e649      	b.n	8005772 <_dtoa_r+0x7c2>
 8005ade:	9b02      	ldr	r3, [sp, #8]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	dc03      	bgt.n	8005aec <_dtoa_r+0xb3c>
 8005ae4:	9b06      	ldr	r3, [sp, #24]
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	f73f aecc 	bgt.w	8005884 <_dtoa_r+0x8d4>
 8005aec:	465d      	mov	r5, fp
 8005aee:	4639      	mov	r1, r7
 8005af0:	9804      	ldr	r0, [sp, #16]
 8005af2:	f7ff f9cf 	bl	8004e94 <quorem>
 8005af6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005afa:	f805 8b01 	strb.w	r8, [r5], #1
 8005afe:	9a02      	ldr	r2, [sp, #8]
 8005b00:	eba5 030b 	sub.w	r3, r5, fp
 8005b04:	429a      	cmp	r2, r3
 8005b06:	ddb0      	ble.n	8005a6a <_dtoa_r+0xaba>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	220a      	movs	r2, #10
 8005b0c:	9904      	ldr	r1, [sp, #16]
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f000 fa3f 	bl	8005f92 <__multadd>
 8005b14:	9004      	str	r0, [sp, #16]
 8005b16:	e7ea      	b.n	8005aee <_dtoa_r+0xb3e>
 8005b18:	0800fff0 	.word	0x0800fff0
 8005b1c:	0800fff2 	.word	0x0800fff2

08005b20 <__sflush_r>:
 8005b20:	898a      	ldrh	r2, [r1, #12]
 8005b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b26:	4605      	mov	r5, r0
 8005b28:	0710      	lsls	r0, r2, #28
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	d458      	bmi.n	8005be0 <__sflush_r+0xc0>
 8005b2e:	684b      	ldr	r3, [r1, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	dc05      	bgt.n	8005b40 <__sflush_r+0x20>
 8005b34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	dc02      	bgt.n	8005b40 <__sflush_r+0x20>
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b42:	2e00      	cmp	r6, #0
 8005b44:	d0f9      	beq.n	8005b3a <__sflush_r+0x1a>
 8005b46:	2300      	movs	r3, #0
 8005b48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b4c:	682f      	ldr	r7, [r5, #0]
 8005b4e:	6a21      	ldr	r1, [r4, #32]
 8005b50:	602b      	str	r3, [r5, #0]
 8005b52:	d032      	beq.n	8005bba <__sflush_r+0x9a>
 8005b54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b56:	89a3      	ldrh	r3, [r4, #12]
 8005b58:	075a      	lsls	r2, r3, #29
 8005b5a:	d505      	bpl.n	8005b68 <__sflush_r+0x48>
 8005b5c:	6863      	ldr	r3, [r4, #4]
 8005b5e:	1ac0      	subs	r0, r0, r3
 8005b60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b62:	b10b      	cbz	r3, 8005b68 <__sflush_r+0x48>
 8005b64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b66:	1ac0      	subs	r0, r0, r3
 8005b68:	2300      	movs	r3, #0
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b6e:	6a21      	ldr	r1, [r4, #32]
 8005b70:	4628      	mov	r0, r5
 8005b72:	47b0      	blx	r6
 8005b74:	1c43      	adds	r3, r0, #1
 8005b76:	89a3      	ldrh	r3, [r4, #12]
 8005b78:	d106      	bne.n	8005b88 <__sflush_r+0x68>
 8005b7a:	6829      	ldr	r1, [r5, #0]
 8005b7c:	291d      	cmp	r1, #29
 8005b7e:	d848      	bhi.n	8005c12 <__sflush_r+0xf2>
 8005b80:	4a29      	ldr	r2, [pc, #164]	; (8005c28 <__sflush_r+0x108>)
 8005b82:	40ca      	lsrs	r2, r1
 8005b84:	07d6      	lsls	r6, r2, #31
 8005b86:	d544      	bpl.n	8005c12 <__sflush_r+0xf2>
 8005b88:	2200      	movs	r2, #0
 8005b8a:	6062      	str	r2, [r4, #4]
 8005b8c:	04d9      	lsls	r1, r3, #19
 8005b8e:	6922      	ldr	r2, [r4, #16]
 8005b90:	6022      	str	r2, [r4, #0]
 8005b92:	d504      	bpl.n	8005b9e <__sflush_r+0x7e>
 8005b94:	1c42      	adds	r2, r0, #1
 8005b96:	d101      	bne.n	8005b9c <__sflush_r+0x7c>
 8005b98:	682b      	ldr	r3, [r5, #0]
 8005b9a:	b903      	cbnz	r3, 8005b9e <__sflush_r+0x7e>
 8005b9c:	6560      	str	r0, [r4, #84]	; 0x54
 8005b9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ba0:	602f      	str	r7, [r5, #0]
 8005ba2:	2900      	cmp	r1, #0
 8005ba4:	d0c9      	beq.n	8005b3a <__sflush_r+0x1a>
 8005ba6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005baa:	4299      	cmp	r1, r3
 8005bac:	d002      	beq.n	8005bb4 <__sflush_r+0x94>
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f7fe fc36 	bl	8004420 <_free_r>
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	6360      	str	r0, [r4, #52]	; 0x34
 8005bb8:	e7c0      	b.n	8005b3c <__sflush_r+0x1c>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	47b0      	blx	r6
 8005bc0:	1c41      	adds	r1, r0, #1
 8005bc2:	d1c8      	bne.n	8005b56 <__sflush_r+0x36>
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0c5      	beq.n	8005b56 <__sflush_r+0x36>
 8005bca:	2b1d      	cmp	r3, #29
 8005bcc:	d001      	beq.n	8005bd2 <__sflush_r+0xb2>
 8005bce:	2b16      	cmp	r3, #22
 8005bd0:	d101      	bne.n	8005bd6 <__sflush_r+0xb6>
 8005bd2:	602f      	str	r7, [r5, #0]
 8005bd4:	e7b1      	b.n	8005b3a <__sflush_r+0x1a>
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bdc:	81a3      	strh	r3, [r4, #12]
 8005bde:	e7ad      	b.n	8005b3c <__sflush_r+0x1c>
 8005be0:	690f      	ldr	r7, [r1, #16]
 8005be2:	2f00      	cmp	r7, #0
 8005be4:	d0a9      	beq.n	8005b3a <__sflush_r+0x1a>
 8005be6:	0793      	lsls	r3, r2, #30
 8005be8:	680e      	ldr	r6, [r1, #0]
 8005bea:	bf08      	it	eq
 8005bec:	694b      	ldreq	r3, [r1, #20]
 8005bee:	600f      	str	r7, [r1, #0]
 8005bf0:	bf18      	it	ne
 8005bf2:	2300      	movne	r3, #0
 8005bf4:	eba6 0807 	sub.w	r8, r6, r7
 8005bf8:	608b      	str	r3, [r1, #8]
 8005bfa:	f1b8 0f00 	cmp.w	r8, #0
 8005bfe:	dd9c      	ble.n	8005b3a <__sflush_r+0x1a>
 8005c00:	4643      	mov	r3, r8
 8005c02:	463a      	mov	r2, r7
 8005c04:	6a21      	ldr	r1, [r4, #32]
 8005c06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c08:	4628      	mov	r0, r5
 8005c0a:	47b0      	blx	r6
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	dc06      	bgt.n	8005c1e <__sflush_r+0xfe>
 8005c10:	89a3      	ldrh	r3, [r4, #12]
 8005c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c16:	81a3      	strh	r3, [r4, #12]
 8005c18:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1c:	e78e      	b.n	8005b3c <__sflush_r+0x1c>
 8005c1e:	4407      	add	r7, r0
 8005c20:	eba8 0800 	sub.w	r8, r8, r0
 8005c24:	e7e9      	b.n	8005bfa <__sflush_r+0xda>
 8005c26:	bf00      	nop
 8005c28:	20400001 	.word	0x20400001

08005c2c <_fflush_r>:
 8005c2c:	b538      	push	{r3, r4, r5, lr}
 8005c2e:	690b      	ldr	r3, [r1, #16]
 8005c30:	4605      	mov	r5, r0
 8005c32:	460c      	mov	r4, r1
 8005c34:	b1db      	cbz	r3, 8005c6e <_fflush_r+0x42>
 8005c36:	b118      	cbz	r0, 8005c40 <_fflush_r+0x14>
 8005c38:	6983      	ldr	r3, [r0, #24]
 8005c3a:	b90b      	cbnz	r3, 8005c40 <_fflush_r+0x14>
 8005c3c:	f000 f860 	bl	8005d00 <__sinit>
 8005c40:	4b0c      	ldr	r3, [pc, #48]	; (8005c74 <_fflush_r+0x48>)
 8005c42:	429c      	cmp	r4, r3
 8005c44:	d109      	bne.n	8005c5a <_fflush_r+0x2e>
 8005c46:	686c      	ldr	r4, [r5, #4]
 8005c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c4c:	b17b      	cbz	r3, 8005c6e <_fflush_r+0x42>
 8005c4e:	4621      	mov	r1, r4
 8005c50:	4628      	mov	r0, r5
 8005c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c56:	f7ff bf63 	b.w	8005b20 <__sflush_r>
 8005c5a:	4b07      	ldr	r3, [pc, #28]	; (8005c78 <_fflush_r+0x4c>)
 8005c5c:	429c      	cmp	r4, r3
 8005c5e:	d101      	bne.n	8005c64 <_fflush_r+0x38>
 8005c60:	68ac      	ldr	r4, [r5, #8]
 8005c62:	e7f1      	b.n	8005c48 <_fflush_r+0x1c>
 8005c64:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <_fflush_r+0x50>)
 8005c66:	429c      	cmp	r4, r3
 8005c68:	bf08      	it	eq
 8005c6a:	68ec      	ldreq	r4, [r5, #12]
 8005c6c:	e7ec      	b.n	8005c48 <_fflush_r+0x1c>
 8005c6e:	2000      	movs	r0, #0
 8005c70:	bd38      	pop	{r3, r4, r5, pc}
 8005c72:	bf00      	nop
 8005c74:	08010020 	.word	0x08010020
 8005c78:	08010040 	.word	0x08010040
 8005c7c:	08010000 	.word	0x08010000

08005c80 <std>:
 8005c80:	2300      	movs	r3, #0
 8005c82:	b510      	push	{r4, lr}
 8005c84:	4604      	mov	r4, r0
 8005c86:	e9c0 3300 	strd	r3, r3, [r0]
 8005c8a:	6083      	str	r3, [r0, #8]
 8005c8c:	8181      	strh	r1, [r0, #12]
 8005c8e:	6643      	str	r3, [r0, #100]	; 0x64
 8005c90:	81c2      	strh	r2, [r0, #14]
 8005c92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c96:	6183      	str	r3, [r0, #24]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	2208      	movs	r2, #8
 8005c9c:	305c      	adds	r0, #92	; 0x5c
 8005c9e:	f7fe fba8 	bl	80043f2 <memset>
 8005ca2:	4b05      	ldr	r3, [pc, #20]	; (8005cb8 <std+0x38>)
 8005ca4:	6263      	str	r3, [r4, #36]	; 0x24
 8005ca6:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <std+0x3c>)
 8005ca8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005caa:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <std+0x40>)
 8005cac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cae:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <std+0x44>)
 8005cb0:	6224      	str	r4, [r4, #32]
 8005cb2:	6323      	str	r3, [r4, #48]	; 0x30
 8005cb4:	bd10      	pop	{r4, pc}
 8005cb6:	bf00      	nop
 8005cb8:	08006521 	.word	0x08006521
 8005cbc:	08006543 	.word	0x08006543
 8005cc0:	0800657b 	.word	0x0800657b
 8005cc4:	0800659f 	.word	0x0800659f

08005cc8 <_cleanup_r>:
 8005cc8:	4901      	ldr	r1, [pc, #4]	; (8005cd0 <_cleanup_r+0x8>)
 8005cca:	f000 b885 	b.w	8005dd8 <_fwalk_reent>
 8005cce:	bf00      	nop
 8005cd0:	08005c2d 	.word	0x08005c2d

08005cd4 <__sfmoreglue>:
 8005cd4:	b570      	push	{r4, r5, r6, lr}
 8005cd6:	1e4a      	subs	r2, r1, #1
 8005cd8:	2568      	movs	r5, #104	; 0x68
 8005cda:	4355      	muls	r5, r2
 8005cdc:	460e      	mov	r6, r1
 8005cde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ce2:	f7fe fbeb 	bl	80044bc <_malloc_r>
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	b140      	cbz	r0, 8005cfc <__sfmoreglue+0x28>
 8005cea:	2100      	movs	r1, #0
 8005cec:	e9c0 1600 	strd	r1, r6, [r0]
 8005cf0:	300c      	adds	r0, #12
 8005cf2:	60a0      	str	r0, [r4, #8]
 8005cf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005cf8:	f7fe fb7b 	bl	80043f2 <memset>
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}

08005d00 <__sinit>:
 8005d00:	6983      	ldr	r3, [r0, #24]
 8005d02:	b510      	push	{r4, lr}
 8005d04:	4604      	mov	r4, r0
 8005d06:	bb33      	cbnz	r3, 8005d56 <__sinit+0x56>
 8005d08:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005d0c:	6503      	str	r3, [r0, #80]	; 0x50
 8005d0e:	4b12      	ldr	r3, [pc, #72]	; (8005d58 <__sinit+0x58>)
 8005d10:	4a12      	ldr	r2, [pc, #72]	; (8005d5c <__sinit+0x5c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6282      	str	r2, [r0, #40]	; 0x28
 8005d16:	4298      	cmp	r0, r3
 8005d18:	bf04      	itt	eq
 8005d1a:	2301      	moveq	r3, #1
 8005d1c:	6183      	streq	r3, [r0, #24]
 8005d1e:	f000 f81f 	bl	8005d60 <__sfp>
 8005d22:	6060      	str	r0, [r4, #4]
 8005d24:	4620      	mov	r0, r4
 8005d26:	f000 f81b 	bl	8005d60 <__sfp>
 8005d2a:	60a0      	str	r0, [r4, #8]
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f000 f817 	bl	8005d60 <__sfp>
 8005d32:	2200      	movs	r2, #0
 8005d34:	60e0      	str	r0, [r4, #12]
 8005d36:	2104      	movs	r1, #4
 8005d38:	6860      	ldr	r0, [r4, #4]
 8005d3a:	f7ff ffa1 	bl	8005c80 <std>
 8005d3e:	2201      	movs	r2, #1
 8005d40:	2109      	movs	r1, #9
 8005d42:	68a0      	ldr	r0, [r4, #8]
 8005d44:	f7ff ff9c 	bl	8005c80 <std>
 8005d48:	2202      	movs	r2, #2
 8005d4a:	2112      	movs	r1, #18
 8005d4c:	68e0      	ldr	r0, [r4, #12]
 8005d4e:	f7ff ff97 	bl	8005c80 <std>
 8005d52:	2301      	movs	r3, #1
 8005d54:	61a3      	str	r3, [r4, #24]
 8005d56:	bd10      	pop	{r4, pc}
 8005d58:	0800ffdc 	.word	0x0800ffdc
 8005d5c:	08005cc9 	.word	0x08005cc9

08005d60 <__sfp>:
 8005d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d62:	4b1b      	ldr	r3, [pc, #108]	; (8005dd0 <__sfp+0x70>)
 8005d64:	681e      	ldr	r6, [r3, #0]
 8005d66:	69b3      	ldr	r3, [r6, #24]
 8005d68:	4607      	mov	r7, r0
 8005d6a:	b913      	cbnz	r3, 8005d72 <__sfp+0x12>
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	f7ff ffc7 	bl	8005d00 <__sinit>
 8005d72:	3648      	adds	r6, #72	; 0x48
 8005d74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	d503      	bpl.n	8005d84 <__sfp+0x24>
 8005d7c:	6833      	ldr	r3, [r6, #0]
 8005d7e:	b133      	cbz	r3, 8005d8e <__sfp+0x2e>
 8005d80:	6836      	ldr	r6, [r6, #0]
 8005d82:	e7f7      	b.n	8005d74 <__sfp+0x14>
 8005d84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d88:	b16d      	cbz	r5, 8005da6 <__sfp+0x46>
 8005d8a:	3468      	adds	r4, #104	; 0x68
 8005d8c:	e7f4      	b.n	8005d78 <__sfp+0x18>
 8005d8e:	2104      	movs	r1, #4
 8005d90:	4638      	mov	r0, r7
 8005d92:	f7ff ff9f 	bl	8005cd4 <__sfmoreglue>
 8005d96:	6030      	str	r0, [r6, #0]
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	d1f1      	bne.n	8005d80 <__sfp+0x20>
 8005d9c:	230c      	movs	r3, #12
 8005d9e:	603b      	str	r3, [r7, #0]
 8005da0:	4604      	mov	r4, r0
 8005da2:	4620      	mov	r0, r4
 8005da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005da6:	4b0b      	ldr	r3, [pc, #44]	; (8005dd4 <__sfp+0x74>)
 8005da8:	6665      	str	r5, [r4, #100]	; 0x64
 8005daa:	e9c4 5500 	strd	r5, r5, [r4]
 8005dae:	60a5      	str	r5, [r4, #8]
 8005db0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005db4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005db8:	2208      	movs	r2, #8
 8005dba:	4629      	mov	r1, r5
 8005dbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005dc0:	f7fe fb17 	bl	80043f2 <memset>
 8005dc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005dc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005dcc:	e7e9      	b.n	8005da2 <__sfp+0x42>
 8005dce:	bf00      	nop
 8005dd0:	0800ffdc 	.word	0x0800ffdc
 8005dd4:	ffff0001 	.word	0xffff0001

08005dd8 <_fwalk_reent>:
 8005dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ddc:	4680      	mov	r8, r0
 8005dde:	4689      	mov	r9, r1
 8005de0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005de4:	2600      	movs	r6, #0
 8005de6:	b914      	cbnz	r4, 8005dee <_fwalk_reent+0x16>
 8005de8:	4630      	mov	r0, r6
 8005dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005df2:	3f01      	subs	r7, #1
 8005df4:	d501      	bpl.n	8005dfa <_fwalk_reent+0x22>
 8005df6:	6824      	ldr	r4, [r4, #0]
 8005df8:	e7f5      	b.n	8005de6 <_fwalk_reent+0xe>
 8005dfa:	89ab      	ldrh	r3, [r5, #12]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d907      	bls.n	8005e10 <_fwalk_reent+0x38>
 8005e00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e04:	3301      	adds	r3, #1
 8005e06:	d003      	beq.n	8005e10 <_fwalk_reent+0x38>
 8005e08:	4629      	mov	r1, r5
 8005e0a:	4640      	mov	r0, r8
 8005e0c:	47c8      	blx	r9
 8005e0e:	4306      	orrs	r6, r0
 8005e10:	3568      	adds	r5, #104	; 0x68
 8005e12:	e7ee      	b.n	8005df2 <_fwalk_reent+0x1a>

08005e14 <_localeconv_r>:
 8005e14:	4b04      	ldr	r3, [pc, #16]	; (8005e28 <_localeconv_r+0x14>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6a18      	ldr	r0, [r3, #32]
 8005e1a:	4b04      	ldr	r3, [pc, #16]	; (8005e2c <_localeconv_r+0x18>)
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	bf08      	it	eq
 8005e20:	4618      	moveq	r0, r3
 8005e22:	30f0      	adds	r0, #240	; 0xf0
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	2000000c 	.word	0x2000000c
 8005e2c:	20000070 	.word	0x20000070

08005e30 <__swhatbuf_r>:
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	460e      	mov	r6, r1
 8005e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e38:	2900      	cmp	r1, #0
 8005e3a:	b096      	sub	sp, #88	; 0x58
 8005e3c:	4614      	mov	r4, r2
 8005e3e:	461d      	mov	r5, r3
 8005e40:	da07      	bge.n	8005e52 <__swhatbuf_r+0x22>
 8005e42:	2300      	movs	r3, #0
 8005e44:	602b      	str	r3, [r5, #0]
 8005e46:	89b3      	ldrh	r3, [r6, #12]
 8005e48:	061a      	lsls	r2, r3, #24
 8005e4a:	d410      	bmi.n	8005e6e <__swhatbuf_r+0x3e>
 8005e4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e50:	e00e      	b.n	8005e70 <__swhatbuf_r+0x40>
 8005e52:	466a      	mov	r2, sp
 8005e54:	f000 fbca 	bl	80065ec <_fstat_r>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	dbf2      	blt.n	8005e42 <__swhatbuf_r+0x12>
 8005e5c:	9a01      	ldr	r2, [sp, #4]
 8005e5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e66:	425a      	negs	r2, r3
 8005e68:	415a      	adcs	r2, r3
 8005e6a:	602a      	str	r2, [r5, #0]
 8005e6c:	e7ee      	b.n	8005e4c <__swhatbuf_r+0x1c>
 8005e6e:	2340      	movs	r3, #64	; 0x40
 8005e70:	2000      	movs	r0, #0
 8005e72:	6023      	str	r3, [r4, #0]
 8005e74:	b016      	add	sp, #88	; 0x58
 8005e76:	bd70      	pop	{r4, r5, r6, pc}

08005e78 <__smakebuf_r>:
 8005e78:	898b      	ldrh	r3, [r1, #12]
 8005e7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e7c:	079d      	lsls	r5, r3, #30
 8005e7e:	4606      	mov	r6, r0
 8005e80:	460c      	mov	r4, r1
 8005e82:	d507      	bpl.n	8005e94 <__smakebuf_r+0x1c>
 8005e84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e88:	6023      	str	r3, [r4, #0]
 8005e8a:	6123      	str	r3, [r4, #16]
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	6163      	str	r3, [r4, #20]
 8005e90:	b002      	add	sp, #8
 8005e92:	bd70      	pop	{r4, r5, r6, pc}
 8005e94:	ab01      	add	r3, sp, #4
 8005e96:	466a      	mov	r2, sp
 8005e98:	f7ff ffca 	bl	8005e30 <__swhatbuf_r>
 8005e9c:	9900      	ldr	r1, [sp, #0]
 8005e9e:	4605      	mov	r5, r0
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	f7fe fb0b 	bl	80044bc <_malloc_r>
 8005ea6:	b948      	cbnz	r0, 8005ebc <__smakebuf_r+0x44>
 8005ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eac:	059a      	lsls	r2, r3, #22
 8005eae:	d4ef      	bmi.n	8005e90 <__smakebuf_r+0x18>
 8005eb0:	f023 0303 	bic.w	r3, r3, #3
 8005eb4:	f043 0302 	orr.w	r3, r3, #2
 8005eb8:	81a3      	strh	r3, [r4, #12]
 8005eba:	e7e3      	b.n	8005e84 <__smakebuf_r+0xc>
 8005ebc:	4b0d      	ldr	r3, [pc, #52]	; (8005ef4 <__smakebuf_r+0x7c>)
 8005ebe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ec0:	89a3      	ldrh	r3, [r4, #12]
 8005ec2:	6020      	str	r0, [r4, #0]
 8005ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec8:	81a3      	strh	r3, [r4, #12]
 8005eca:	9b00      	ldr	r3, [sp, #0]
 8005ecc:	6163      	str	r3, [r4, #20]
 8005ece:	9b01      	ldr	r3, [sp, #4]
 8005ed0:	6120      	str	r0, [r4, #16]
 8005ed2:	b15b      	cbz	r3, 8005eec <__smakebuf_r+0x74>
 8005ed4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ed8:	4630      	mov	r0, r6
 8005eda:	f000 fb99 	bl	8006610 <_isatty_r>
 8005ede:	b128      	cbz	r0, 8005eec <__smakebuf_r+0x74>
 8005ee0:	89a3      	ldrh	r3, [r4, #12]
 8005ee2:	f023 0303 	bic.w	r3, r3, #3
 8005ee6:	f043 0301 	orr.w	r3, r3, #1
 8005eea:	81a3      	strh	r3, [r4, #12]
 8005eec:	89a3      	ldrh	r3, [r4, #12]
 8005eee:	431d      	orrs	r5, r3
 8005ef0:	81a5      	strh	r5, [r4, #12]
 8005ef2:	e7cd      	b.n	8005e90 <__smakebuf_r+0x18>
 8005ef4:	08005cc9 	.word	0x08005cc9

08005ef8 <__malloc_lock>:
 8005ef8:	4770      	bx	lr

08005efa <__malloc_unlock>:
 8005efa:	4770      	bx	lr

08005efc <_Balloc>:
 8005efc:	b570      	push	{r4, r5, r6, lr}
 8005efe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f00:	4604      	mov	r4, r0
 8005f02:	460e      	mov	r6, r1
 8005f04:	b93d      	cbnz	r5, 8005f16 <_Balloc+0x1a>
 8005f06:	2010      	movs	r0, #16
 8005f08:	f7fe fa58 	bl	80043bc <malloc>
 8005f0c:	6260      	str	r0, [r4, #36]	; 0x24
 8005f0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f12:	6005      	str	r5, [r0, #0]
 8005f14:	60c5      	str	r5, [r0, #12]
 8005f16:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005f18:	68eb      	ldr	r3, [r5, #12]
 8005f1a:	b183      	cbz	r3, 8005f3e <_Balloc+0x42>
 8005f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005f24:	b9b8      	cbnz	r0, 8005f56 <_Balloc+0x5a>
 8005f26:	2101      	movs	r1, #1
 8005f28:	fa01 f506 	lsl.w	r5, r1, r6
 8005f2c:	1d6a      	adds	r2, r5, #5
 8005f2e:	0092      	lsls	r2, r2, #2
 8005f30:	4620      	mov	r0, r4
 8005f32:	f7fe fa66 	bl	8004402 <_calloc_r>
 8005f36:	b160      	cbz	r0, 8005f52 <_Balloc+0x56>
 8005f38:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005f3c:	e00e      	b.n	8005f5c <_Balloc+0x60>
 8005f3e:	2221      	movs	r2, #33	; 0x21
 8005f40:	2104      	movs	r1, #4
 8005f42:	4620      	mov	r0, r4
 8005f44:	f7fe fa5d 	bl	8004402 <_calloc_r>
 8005f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f4a:	60e8      	str	r0, [r5, #12]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e4      	bne.n	8005f1c <_Balloc+0x20>
 8005f52:	2000      	movs	r0, #0
 8005f54:	bd70      	pop	{r4, r5, r6, pc}
 8005f56:	6802      	ldr	r2, [r0, #0]
 8005f58:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f62:	e7f7      	b.n	8005f54 <_Balloc+0x58>

08005f64 <_Bfree>:
 8005f64:	b570      	push	{r4, r5, r6, lr}
 8005f66:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f68:	4606      	mov	r6, r0
 8005f6a:	460d      	mov	r5, r1
 8005f6c:	b93c      	cbnz	r4, 8005f7e <_Bfree+0x1a>
 8005f6e:	2010      	movs	r0, #16
 8005f70:	f7fe fa24 	bl	80043bc <malloc>
 8005f74:	6270      	str	r0, [r6, #36]	; 0x24
 8005f76:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f7a:	6004      	str	r4, [r0, #0]
 8005f7c:	60c4      	str	r4, [r0, #12]
 8005f7e:	b13d      	cbz	r5, 8005f90 <_Bfree+0x2c>
 8005f80:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005f82:	686a      	ldr	r2, [r5, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f8a:	6029      	str	r1, [r5, #0]
 8005f8c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005f90:	bd70      	pop	{r4, r5, r6, pc}

08005f92 <__multadd>:
 8005f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f96:	690d      	ldr	r5, [r1, #16]
 8005f98:	461f      	mov	r7, r3
 8005f9a:	4606      	mov	r6, r0
 8005f9c:	460c      	mov	r4, r1
 8005f9e:	f101 0c14 	add.w	ip, r1, #20
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f8dc 0000 	ldr.w	r0, [ip]
 8005fa8:	b281      	uxth	r1, r0
 8005faa:	fb02 7101 	mla	r1, r2, r1, r7
 8005fae:	0c0f      	lsrs	r7, r1, #16
 8005fb0:	0c00      	lsrs	r0, r0, #16
 8005fb2:	fb02 7000 	mla	r0, r2, r0, r7
 8005fb6:	b289      	uxth	r1, r1
 8005fb8:	3301      	adds	r3, #1
 8005fba:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005fbe:	429d      	cmp	r5, r3
 8005fc0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005fc4:	f84c 1b04 	str.w	r1, [ip], #4
 8005fc8:	dcec      	bgt.n	8005fa4 <__multadd+0x12>
 8005fca:	b1d7      	cbz	r7, 8006002 <__multadd+0x70>
 8005fcc:	68a3      	ldr	r3, [r4, #8]
 8005fce:	42ab      	cmp	r3, r5
 8005fd0:	dc12      	bgt.n	8005ff8 <__multadd+0x66>
 8005fd2:	6861      	ldr	r1, [r4, #4]
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	3101      	adds	r1, #1
 8005fd8:	f7ff ff90 	bl	8005efc <_Balloc>
 8005fdc:	6922      	ldr	r2, [r4, #16]
 8005fde:	3202      	adds	r2, #2
 8005fe0:	f104 010c 	add.w	r1, r4, #12
 8005fe4:	4680      	mov	r8, r0
 8005fe6:	0092      	lsls	r2, r2, #2
 8005fe8:	300c      	adds	r0, #12
 8005fea:	f7fe f9f7 	bl	80043dc <memcpy>
 8005fee:	4621      	mov	r1, r4
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	f7ff ffb7 	bl	8005f64 <_Bfree>
 8005ff6:	4644      	mov	r4, r8
 8005ff8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ffc:	3501      	adds	r5, #1
 8005ffe:	615f      	str	r7, [r3, #20]
 8006000:	6125      	str	r5, [r4, #16]
 8006002:	4620      	mov	r0, r4
 8006004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006008 <__hi0bits>:
 8006008:	0c02      	lsrs	r2, r0, #16
 800600a:	0412      	lsls	r2, r2, #16
 800600c:	4603      	mov	r3, r0
 800600e:	b9b2      	cbnz	r2, 800603e <__hi0bits+0x36>
 8006010:	0403      	lsls	r3, r0, #16
 8006012:	2010      	movs	r0, #16
 8006014:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006018:	bf04      	itt	eq
 800601a:	021b      	lsleq	r3, r3, #8
 800601c:	3008      	addeq	r0, #8
 800601e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006022:	bf04      	itt	eq
 8006024:	011b      	lsleq	r3, r3, #4
 8006026:	3004      	addeq	r0, #4
 8006028:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800602c:	bf04      	itt	eq
 800602e:	009b      	lsleq	r3, r3, #2
 8006030:	3002      	addeq	r0, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	db06      	blt.n	8006044 <__hi0bits+0x3c>
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	d503      	bpl.n	8006042 <__hi0bits+0x3a>
 800603a:	3001      	adds	r0, #1
 800603c:	4770      	bx	lr
 800603e:	2000      	movs	r0, #0
 8006040:	e7e8      	b.n	8006014 <__hi0bits+0xc>
 8006042:	2020      	movs	r0, #32
 8006044:	4770      	bx	lr

08006046 <__lo0bits>:
 8006046:	6803      	ldr	r3, [r0, #0]
 8006048:	f013 0207 	ands.w	r2, r3, #7
 800604c:	4601      	mov	r1, r0
 800604e:	d00b      	beq.n	8006068 <__lo0bits+0x22>
 8006050:	07da      	lsls	r2, r3, #31
 8006052:	d423      	bmi.n	800609c <__lo0bits+0x56>
 8006054:	0798      	lsls	r0, r3, #30
 8006056:	bf49      	itett	mi
 8006058:	085b      	lsrmi	r3, r3, #1
 800605a:	089b      	lsrpl	r3, r3, #2
 800605c:	2001      	movmi	r0, #1
 800605e:	600b      	strmi	r3, [r1, #0]
 8006060:	bf5c      	itt	pl
 8006062:	600b      	strpl	r3, [r1, #0]
 8006064:	2002      	movpl	r0, #2
 8006066:	4770      	bx	lr
 8006068:	b298      	uxth	r0, r3
 800606a:	b9a8      	cbnz	r0, 8006098 <__lo0bits+0x52>
 800606c:	0c1b      	lsrs	r3, r3, #16
 800606e:	2010      	movs	r0, #16
 8006070:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006074:	bf04      	itt	eq
 8006076:	0a1b      	lsreq	r3, r3, #8
 8006078:	3008      	addeq	r0, #8
 800607a:	071a      	lsls	r2, r3, #28
 800607c:	bf04      	itt	eq
 800607e:	091b      	lsreq	r3, r3, #4
 8006080:	3004      	addeq	r0, #4
 8006082:	079a      	lsls	r2, r3, #30
 8006084:	bf04      	itt	eq
 8006086:	089b      	lsreq	r3, r3, #2
 8006088:	3002      	addeq	r0, #2
 800608a:	07da      	lsls	r2, r3, #31
 800608c:	d402      	bmi.n	8006094 <__lo0bits+0x4e>
 800608e:	085b      	lsrs	r3, r3, #1
 8006090:	d006      	beq.n	80060a0 <__lo0bits+0x5a>
 8006092:	3001      	adds	r0, #1
 8006094:	600b      	str	r3, [r1, #0]
 8006096:	4770      	bx	lr
 8006098:	4610      	mov	r0, r2
 800609a:	e7e9      	b.n	8006070 <__lo0bits+0x2a>
 800609c:	2000      	movs	r0, #0
 800609e:	4770      	bx	lr
 80060a0:	2020      	movs	r0, #32
 80060a2:	4770      	bx	lr

080060a4 <__i2b>:
 80060a4:	b510      	push	{r4, lr}
 80060a6:	460c      	mov	r4, r1
 80060a8:	2101      	movs	r1, #1
 80060aa:	f7ff ff27 	bl	8005efc <_Balloc>
 80060ae:	2201      	movs	r2, #1
 80060b0:	6144      	str	r4, [r0, #20]
 80060b2:	6102      	str	r2, [r0, #16]
 80060b4:	bd10      	pop	{r4, pc}

080060b6 <__multiply>:
 80060b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ba:	4614      	mov	r4, r2
 80060bc:	690a      	ldr	r2, [r1, #16]
 80060be:	6923      	ldr	r3, [r4, #16]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	bfb8      	it	lt
 80060c4:	460b      	movlt	r3, r1
 80060c6:	4688      	mov	r8, r1
 80060c8:	bfbc      	itt	lt
 80060ca:	46a0      	movlt	r8, r4
 80060cc:	461c      	movlt	r4, r3
 80060ce:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80060d2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80060d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80060da:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80060de:	eb07 0609 	add.w	r6, r7, r9
 80060e2:	42b3      	cmp	r3, r6
 80060e4:	bfb8      	it	lt
 80060e6:	3101      	addlt	r1, #1
 80060e8:	f7ff ff08 	bl	8005efc <_Balloc>
 80060ec:	f100 0514 	add.w	r5, r0, #20
 80060f0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80060f4:	462b      	mov	r3, r5
 80060f6:	2200      	movs	r2, #0
 80060f8:	4573      	cmp	r3, lr
 80060fa:	d316      	bcc.n	800612a <__multiply+0x74>
 80060fc:	f104 0214 	add.w	r2, r4, #20
 8006100:	f108 0114 	add.w	r1, r8, #20
 8006104:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006108:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	9b00      	ldr	r3, [sp, #0]
 8006110:	9201      	str	r2, [sp, #4]
 8006112:	4293      	cmp	r3, r2
 8006114:	d80c      	bhi.n	8006130 <__multiply+0x7a>
 8006116:	2e00      	cmp	r6, #0
 8006118:	dd03      	ble.n	8006122 <__multiply+0x6c>
 800611a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800611e:	2b00      	cmp	r3, #0
 8006120:	d05d      	beq.n	80061de <__multiply+0x128>
 8006122:	6106      	str	r6, [r0, #16]
 8006124:	b003      	add	sp, #12
 8006126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800612a:	f843 2b04 	str.w	r2, [r3], #4
 800612e:	e7e3      	b.n	80060f8 <__multiply+0x42>
 8006130:	f8b2 b000 	ldrh.w	fp, [r2]
 8006134:	f1bb 0f00 	cmp.w	fp, #0
 8006138:	d023      	beq.n	8006182 <__multiply+0xcc>
 800613a:	4689      	mov	r9, r1
 800613c:	46ac      	mov	ip, r5
 800613e:	f04f 0800 	mov.w	r8, #0
 8006142:	f859 4b04 	ldr.w	r4, [r9], #4
 8006146:	f8dc a000 	ldr.w	sl, [ip]
 800614a:	b2a3      	uxth	r3, r4
 800614c:	fa1f fa8a 	uxth.w	sl, sl
 8006150:	fb0b a303 	mla	r3, fp, r3, sl
 8006154:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006158:	f8dc 4000 	ldr.w	r4, [ip]
 800615c:	4443      	add	r3, r8
 800615e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006162:	fb0b 840a 	mla	r4, fp, sl, r8
 8006166:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800616a:	46e2      	mov	sl, ip
 800616c:	b29b      	uxth	r3, r3
 800616e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006172:	454f      	cmp	r7, r9
 8006174:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006178:	f84a 3b04 	str.w	r3, [sl], #4
 800617c:	d82b      	bhi.n	80061d6 <__multiply+0x120>
 800617e:	f8cc 8004 	str.w	r8, [ip, #4]
 8006182:	9b01      	ldr	r3, [sp, #4]
 8006184:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006188:	3204      	adds	r2, #4
 800618a:	f1ba 0f00 	cmp.w	sl, #0
 800618e:	d020      	beq.n	80061d2 <__multiply+0x11c>
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	4689      	mov	r9, r1
 8006194:	46a8      	mov	r8, r5
 8006196:	f04f 0b00 	mov.w	fp, #0
 800619a:	f8b9 c000 	ldrh.w	ip, [r9]
 800619e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80061a2:	fb0a 440c 	mla	r4, sl, ip, r4
 80061a6:	445c      	add	r4, fp
 80061a8:	46c4      	mov	ip, r8
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80061b0:	f84c 3b04 	str.w	r3, [ip], #4
 80061b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80061b8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80061bc:	0c1b      	lsrs	r3, r3, #16
 80061be:	fb0a b303 	mla	r3, sl, r3, fp
 80061c2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80061c6:	454f      	cmp	r7, r9
 80061c8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80061cc:	d805      	bhi.n	80061da <__multiply+0x124>
 80061ce:	f8c8 3004 	str.w	r3, [r8, #4]
 80061d2:	3504      	adds	r5, #4
 80061d4:	e79b      	b.n	800610e <__multiply+0x58>
 80061d6:	46d4      	mov	ip, sl
 80061d8:	e7b3      	b.n	8006142 <__multiply+0x8c>
 80061da:	46e0      	mov	r8, ip
 80061dc:	e7dd      	b.n	800619a <__multiply+0xe4>
 80061de:	3e01      	subs	r6, #1
 80061e0:	e799      	b.n	8006116 <__multiply+0x60>
	...

080061e4 <__pow5mult>:
 80061e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061e8:	4615      	mov	r5, r2
 80061ea:	f012 0203 	ands.w	r2, r2, #3
 80061ee:	4606      	mov	r6, r0
 80061f0:	460f      	mov	r7, r1
 80061f2:	d007      	beq.n	8006204 <__pow5mult+0x20>
 80061f4:	3a01      	subs	r2, #1
 80061f6:	4c21      	ldr	r4, [pc, #132]	; (800627c <__pow5mult+0x98>)
 80061f8:	2300      	movs	r3, #0
 80061fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061fe:	f7ff fec8 	bl	8005f92 <__multadd>
 8006202:	4607      	mov	r7, r0
 8006204:	10ad      	asrs	r5, r5, #2
 8006206:	d035      	beq.n	8006274 <__pow5mult+0x90>
 8006208:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800620a:	b93c      	cbnz	r4, 800621c <__pow5mult+0x38>
 800620c:	2010      	movs	r0, #16
 800620e:	f7fe f8d5 	bl	80043bc <malloc>
 8006212:	6270      	str	r0, [r6, #36]	; 0x24
 8006214:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006218:	6004      	str	r4, [r0, #0]
 800621a:	60c4      	str	r4, [r0, #12]
 800621c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006220:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006224:	b94c      	cbnz	r4, 800623a <__pow5mult+0x56>
 8006226:	f240 2171 	movw	r1, #625	; 0x271
 800622a:	4630      	mov	r0, r6
 800622c:	f7ff ff3a 	bl	80060a4 <__i2b>
 8006230:	2300      	movs	r3, #0
 8006232:	f8c8 0008 	str.w	r0, [r8, #8]
 8006236:	4604      	mov	r4, r0
 8006238:	6003      	str	r3, [r0, #0]
 800623a:	f04f 0800 	mov.w	r8, #0
 800623e:	07eb      	lsls	r3, r5, #31
 8006240:	d50a      	bpl.n	8006258 <__pow5mult+0x74>
 8006242:	4639      	mov	r1, r7
 8006244:	4622      	mov	r2, r4
 8006246:	4630      	mov	r0, r6
 8006248:	f7ff ff35 	bl	80060b6 <__multiply>
 800624c:	4639      	mov	r1, r7
 800624e:	4681      	mov	r9, r0
 8006250:	4630      	mov	r0, r6
 8006252:	f7ff fe87 	bl	8005f64 <_Bfree>
 8006256:	464f      	mov	r7, r9
 8006258:	106d      	asrs	r5, r5, #1
 800625a:	d00b      	beq.n	8006274 <__pow5mult+0x90>
 800625c:	6820      	ldr	r0, [r4, #0]
 800625e:	b938      	cbnz	r0, 8006270 <__pow5mult+0x8c>
 8006260:	4622      	mov	r2, r4
 8006262:	4621      	mov	r1, r4
 8006264:	4630      	mov	r0, r6
 8006266:	f7ff ff26 	bl	80060b6 <__multiply>
 800626a:	6020      	str	r0, [r4, #0]
 800626c:	f8c0 8000 	str.w	r8, [r0]
 8006270:	4604      	mov	r4, r0
 8006272:	e7e4      	b.n	800623e <__pow5mult+0x5a>
 8006274:	4638      	mov	r0, r7
 8006276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800627a:	bf00      	nop
 800627c:	08010150 	.word	0x08010150

08006280 <__lshift>:
 8006280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006284:	460c      	mov	r4, r1
 8006286:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800628a:	6923      	ldr	r3, [r4, #16]
 800628c:	6849      	ldr	r1, [r1, #4]
 800628e:	eb0a 0903 	add.w	r9, sl, r3
 8006292:	68a3      	ldr	r3, [r4, #8]
 8006294:	4607      	mov	r7, r0
 8006296:	4616      	mov	r6, r2
 8006298:	f109 0501 	add.w	r5, r9, #1
 800629c:	42ab      	cmp	r3, r5
 800629e:	db32      	blt.n	8006306 <__lshift+0x86>
 80062a0:	4638      	mov	r0, r7
 80062a2:	f7ff fe2b 	bl	8005efc <_Balloc>
 80062a6:	2300      	movs	r3, #0
 80062a8:	4680      	mov	r8, r0
 80062aa:	f100 0114 	add.w	r1, r0, #20
 80062ae:	461a      	mov	r2, r3
 80062b0:	4553      	cmp	r3, sl
 80062b2:	db2b      	blt.n	800630c <__lshift+0x8c>
 80062b4:	6920      	ldr	r0, [r4, #16]
 80062b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062ba:	f104 0314 	add.w	r3, r4, #20
 80062be:	f016 021f 	ands.w	r2, r6, #31
 80062c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062c6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80062ca:	d025      	beq.n	8006318 <__lshift+0x98>
 80062cc:	f1c2 0e20 	rsb	lr, r2, #32
 80062d0:	2000      	movs	r0, #0
 80062d2:	681e      	ldr	r6, [r3, #0]
 80062d4:	468a      	mov	sl, r1
 80062d6:	4096      	lsls	r6, r2
 80062d8:	4330      	orrs	r0, r6
 80062da:	f84a 0b04 	str.w	r0, [sl], #4
 80062de:	f853 0b04 	ldr.w	r0, [r3], #4
 80062e2:	459c      	cmp	ip, r3
 80062e4:	fa20 f00e 	lsr.w	r0, r0, lr
 80062e8:	d814      	bhi.n	8006314 <__lshift+0x94>
 80062ea:	6048      	str	r0, [r1, #4]
 80062ec:	b108      	cbz	r0, 80062f2 <__lshift+0x72>
 80062ee:	f109 0502 	add.w	r5, r9, #2
 80062f2:	3d01      	subs	r5, #1
 80062f4:	4638      	mov	r0, r7
 80062f6:	f8c8 5010 	str.w	r5, [r8, #16]
 80062fa:	4621      	mov	r1, r4
 80062fc:	f7ff fe32 	bl	8005f64 <_Bfree>
 8006300:	4640      	mov	r0, r8
 8006302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006306:	3101      	adds	r1, #1
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	e7c7      	b.n	800629c <__lshift+0x1c>
 800630c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006310:	3301      	adds	r3, #1
 8006312:	e7cd      	b.n	80062b0 <__lshift+0x30>
 8006314:	4651      	mov	r1, sl
 8006316:	e7dc      	b.n	80062d2 <__lshift+0x52>
 8006318:	3904      	subs	r1, #4
 800631a:	f853 2b04 	ldr.w	r2, [r3], #4
 800631e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006322:	459c      	cmp	ip, r3
 8006324:	d8f9      	bhi.n	800631a <__lshift+0x9a>
 8006326:	e7e4      	b.n	80062f2 <__lshift+0x72>

08006328 <__mcmp>:
 8006328:	6903      	ldr	r3, [r0, #16]
 800632a:	690a      	ldr	r2, [r1, #16]
 800632c:	1a9b      	subs	r3, r3, r2
 800632e:	b530      	push	{r4, r5, lr}
 8006330:	d10c      	bne.n	800634c <__mcmp+0x24>
 8006332:	0092      	lsls	r2, r2, #2
 8006334:	3014      	adds	r0, #20
 8006336:	3114      	adds	r1, #20
 8006338:	1884      	adds	r4, r0, r2
 800633a:	4411      	add	r1, r2
 800633c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006340:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006344:	4295      	cmp	r5, r2
 8006346:	d003      	beq.n	8006350 <__mcmp+0x28>
 8006348:	d305      	bcc.n	8006356 <__mcmp+0x2e>
 800634a:	2301      	movs	r3, #1
 800634c:	4618      	mov	r0, r3
 800634e:	bd30      	pop	{r4, r5, pc}
 8006350:	42a0      	cmp	r0, r4
 8006352:	d3f3      	bcc.n	800633c <__mcmp+0x14>
 8006354:	e7fa      	b.n	800634c <__mcmp+0x24>
 8006356:	f04f 33ff 	mov.w	r3, #4294967295
 800635a:	e7f7      	b.n	800634c <__mcmp+0x24>

0800635c <__mdiff>:
 800635c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006360:	460d      	mov	r5, r1
 8006362:	4607      	mov	r7, r0
 8006364:	4611      	mov	r1, r2
 8006366:	4628      	mov	r0, r5
 8006368:	4614      	mov	r4, r2
 800636a:	f7ff ffdd 	bl	8006328 <__mcmp>
 800636e:	1e06      	subs	r6, r0, #0
 8006370:	d108      	bne.n	8006384 <__mdiff+0x28>
 8006372:	4631      	mov	r1, r6
 8006374:	4638      	mov	r0, r7
 8006376:	f7ff fdc1 	bl	8005efc <_Balloc>
 800637a:	2301      	movs	r3, #1
 800637c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006384:	bfa4      	itt	ge
 8006386:	4623      	movge	r3, r4
 8006388:	462c      	movge	r4, r5
 800638a:	4638      	mov	r0, r7
 800638c:	6861      	ldr	r1, [r4, #4]
 800638e:	bfa6      	itte	ge
 8006390:	461d      	movge	r5, r3
 8006392:	2600      	movge	r6, #0
 8006394:	2601      	movlt	r6, #1
 8006396:	f7ff fdb1 	bl	8005efc <_Balloc>
 800639a:	692b      	ldr	r3, [r5, #16]
 800639c:	60c6      	str	r6, [r0, #12]
 800639e:	6926      	ldr	r6, [r4, #16]
 80063a0:	f105 0914 	add.w	r9, r5, #20
 80063a4:	f104 0214 	add.w	r2, r4, #20
 80063a8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80063ac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80063b0:	f100 0514 	add.w	r5, r0, #20
 80063b4:	f04f 0e00 	mov.w	lr, #0
 80063b8:	f852 ab04 	ldr.w	sl, [r2], #4
 80063bc:	f859 4b04 	ldr.w	r4, [r9], #4
 80063c0:	fa1e f18a 	uxtah	r1, lr, sl
 80063c4:	b2a3      	uxth	r3, r4
 80063c6:	1ac9      	subs	r1, r1, r3
 80063c8:	0c23      	lsrs	r3, r4, #16
 80063ca:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80063ce:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80063d2:	b289      	uxth	r1, r1
 80063d4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80063d8:	45c8      	cmp	r8, r9
 80063da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80063de:	4694      	mov	ip, r2
 80063e0:	f845 3b04 	str.w	r3, [r5], #4
 80063e4:	d8e8      	bhi.n	80063b8 <__mdiff+0x5c>
 80063e6:	45bc      	cmp	ip, r7
 80063e8:	d304      	bcc.n	80063f4 <__mdiff+0x98>
 80063ea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80063ee:	b183      	cbz	r3, 8006412 <__mdiff+0xb6>
 80063f0:	6106      	str	r6, [r0, #16]
 80063f2:	e7c5      	b.n	8006380 <__mdiff+0x24>
 80063f4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80063f8:	fa1e f381 	uxtah	r3, lr, r1
 80063fc:	141a      	asrs	r2, r3, #16
 80063fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006402:	b29b      	uxth	r3, r3
 8006404:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006408:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800640c:	f845 3b04 	str.w	r3, [r5], #4
 8006410:	e7e9      	b.n	80063e6 <__mdiff+0x8a>
 8006412:	3e01      	subs	r6, #1
 8006414:	e7e9      	b.n	80063ea <__mdiff+0x8e>

08006416 <__d2b>:
 8006416:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800641a:	460e      	mov	r6, r1
 800641c:	2101      	movs	r1, #1
 800641e:	ec59 8b10 	vmov	r8, r9, d0
 8006422:	4615      	mov	r5, r2
 8006424:	f7ff fd6a 	bl	8005efc <_Balloc>
 8006428:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800642c:	4607      	mov	r7, r0
 800642e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006432:	bb34      	cbnz	r4, 8006482 <__d2b+0x6c>
 8006434:	9301      	str	r3, [sp, #4]
 8006436:	f1b8 0300 	subs.w	r3, r8, #0
 800643a:	d027      	beq.n	800648c <__d2b+0x76>
 800643c:	a802      	add	r0, sp, #8
 800643e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006442:	f7ff fe00 	bl	8006046 <__lo0bits>
 8006446:	9900      	ldr	r1, [sp, #0]
 8006448:	b1f0      	cbz	r0, 8006488 <__d2b+0x72>
 800644a:	9a01      	ldr	r2, [sp, #4]
 800644c:	f1c0 0320 	rsb	r3, r0, #32
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	430b      	orrs	r3, r1
 8006456:	40c2      	lsrs	r2, r0
 8006458:	617b      	str	r3, [r7, #20]
 800645a:	9201      	str	r2, [sp, #4]
 800645c:	9b01      	ldr	r3, [sp, #4]
 800645e:	61bb      	str	r3, [r7, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	bf14      	ite	ne
 8006464:	2102      	movne	r1, #2
 8006466:	2101      	moveq	r1, #1
 8006468:	6139      	str	r1, [r7, #16]
 800646a:	b1c4      	cbz	r4, 800649e <__d2b+0x88>
 800646c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006470:	4404      	add	r4, r0
 8006472:	6034      	str	r4, [r6, #0]
 8006474:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006478:	6028      	str	r0, [r5, #0]
 800647a:	4638      	mov	r0, r7
 800647c:	b003      	add	sp, #12
 800647e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006482:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006486:	e7d5      	b.n	8006434 <__d2b+0x1e>
 8006488:	6179      	str	r1, [r7, #20]
 800648a:	e7e7      	b.n	800645c <__d2b+0x46>
 800648c:	a801      	add	r0, sp, #4
 800648e:	f7ff fdda 	bl	8006046 <__lo0bits>
 8006492:	9b01      	ldr	r3, [sp, #4]
 8006494:	617b      	str	r3, [r7, #20]
 8006496:	2101      	movs	r1, #1
 8006498:	6139      	str	r1, [r7, #16]
 800649a:	3020      	adds	r0, #32
 800649c:	e7e5      	b.n	800646a <__d2b+0x54>
 800649e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80064a2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80064a6:	6030      	str	r0, [r6, #0]
 80064a8:	6918      	ldr	r0, [r3, #16]
 80064aa:	f7ff fdad 	bl	8006008 <__hi0bits>
 80064ae:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80064b2:	e7e1      	b.n	8006478 <__d2b+0x62>

080064b4 <_putc_r>:
 80064b4:	b570      	push	{r4, r5, r6, lr}
 80064b6:	460d      	mov	r5, r1
 80064b8:	4614      	mov	r4, r2
 80064ba:	4606      	mov	r6, r0
 80064bc:	b118      	cbz	r0, 80064c6 <_putc_r+0x12>
 80064be:	6983      	ldr	r3, [r0, #24]
 80064c0:	b90b      	cbnz	r3, 80064c6 <_putc_r+0x12>
 80064c2:	f7ff fc1d 	bl	8005d00 <__sinit>
 80064c6:	4b13      	ldr	r3, [pc, #76]	; (8006514 <_putc_r+0x60>)
 80064c8:	429c      	cmp	r4, r3
 80064ca:	d112      	bne.n	80064f2 <_putc_r+0x3e>
 80064cc:	6874      	ldr	r4, [r6, #4]
 80064ce:	68a3      	ldr	r3, [r4, #8]
 80064d0:	3b01      	subs	r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	60a3      	str	r3, [r4, #8]
 80064d6:	da16      	bge.n	8006506 <_putc_r+0x52>
 80064d8:	69a2      	ldr	r2, [r4, #24]
 80064da:	4293      	cmp	r3, r2
 80064dc:	db02      	blt.n	80064e4 <_putc_r+0x30>
 80064de:	b2eb      	uxtb	r3, r5
 80064e0:	2b0a      	cmp	r3, #10
 80064e2:	d110      	bne.n	8006506 <_putc_r+0x52>
 80064e4:	4622      	mov	r2, r4
 80064e6:	4629      	mov	r1, r5
 80064e8:	4630      	mov	r0, r6
 80064ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80064ee:	f7fe bc11 	b.w	8004d14 <__swbuf_r>
 80064f2:	4b09      	ldr	r3, [pc, #36]	; (8006518 <_putc_r+0x64>)
 80064f4:	429c      	cmp	r4, r3
 80064f6:	d101      	bne.n	80064fc <_putc_r+0x48>
 80064f8:	68b4      	ldr	r4, [r6, #8]
 80064fa:	e7e8      	b.n	80064ce <_putc_r+0x1a>
 80064fc:	4b07      	ldr	r3, [pc, #28]	; (800651c <_putc_r+0x68>)
 80064fe:	429c      	cmp	r4, r3
 8006500:	bf08      	it	eq
 8006502:	68f4      	ldreq	r4, [r6, #12]
 8006504:	e7e3      	b.n	80064ce <_putc_r+0x1a>
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	6022      	str	r2, [r4, #0]
 800650c:	701d      	strb	r5, [r3, #0]
 800650e:	b2e8      	uxtb	r0, r5
 8006510:	bd70      	pop	{r4, r5, r6, pc}
 8006512:	bf00      	nop
 8006514:	08010020 	.word	0x08010020
 8006518:	08010040 	.word	0x08010040
 800651c:	08010000 	.word	0x08010000

08006520 <__sread>:
 8006520:	b510      	push	{r4, lr}
 8006522:	460c      	mov	r4, r1
 8006524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006528:	f000 f8a6 	bl	8006678 <_read_r>
 800652c:	2800      	cmp	r0, #0
 800652e:	bfab      	itete	ge
 8006530:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006532:	89a3      	ldrhlt	r3, [r4, #12]
 8006534:	181b      	addge	r3, r3, r0
 8006536:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800653a:	bfac      	ite	ge
 800653c:	6563      	strge	r3, [r4, #84]	; 0x54
 800653e:	81a3      	strhlt	r3, [r4, #12]
 8006540:	bd10      	pop	{r4, pc}

08006542 <__swrite>:
 8006542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006546:	461f      	mov	r7, r3
 8006548:	898b      	ldrh	r3, [r1, #12]
 800654a:	05db      	lsls	r3, r3, #23
 800654c:	4605      	mov	r5, r0
 800654e:	460c      	mov	r4, r1
 8006550:	4616      	mov	r6, r2
 8006552:	d505      	bpl.n	8006560 <__swrite+0x1e>
 8006554:	2302      	movs	r3, #2
 8006556:	2200      	movs	r2, #0
 8006558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800655c:	f000 f868 	bl	8006630 <_lseek_r>
 8006560:	89a3      	ldrh	r3, [r4, #12]
 8006562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006566:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800656a:	81a3      	strh	r3, [r4, #12]
 800656c:	4632      	mov	r2, r6
 800656e:	463b      	mov	r3, r7
 8006570:	4628      	mov	r0, r5
 8006572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006576:	f000 b817 	b.w	80065a8 <_write_r>

0800657a <__sseek>:
 800657a:	b510      	push	{r4, lr}
 800657c:	460c      	mov	r4, r1
 800657e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006582:	f000 f855 	bl	8006630 <_lseek_r>
 8006586:	1c43      	adds	r3, r0, #1
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	bf15      	itete	ne
 800658c:	6560      	strne	r0, [r4, #84]	; 0x54
 800658e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006592:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006596:	81a3      	strheq	r3, [r4, #12]
 8006598:	bf18      	it	ne
 800659a:	81a3      	strhne	r3, [r4, #12]
 800659c:	bd10      	pop	{r4, pc}

0800659e <__sclose>:
 800659e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065a2:	f000 b813 	b.w	80065cc <_close_r>
	...

080065a8 <_write_r>:
 80065a8:	b538      	push	{r3, r4, r5, lr}
 80065aa:	4c07      	ldr	r4, [pc, #28]	; (80065c8 <_write_r+0x20>)
 80065ac:	4605      	mov	r5, r0
 80065ae:	4608      	mov	r0, r1
 80065b0:	4611      	mov	r1, r2
 80065b2:	2200      	movs	r2, #0
 80065b4:	6022      	str	r2, [r4, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	f7fb fba5 	bl	8001d06 <_write>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_write_r+0x1e>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_write_r+0x1e>
 80065c4:	602b      	str	r3, [r5, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	20000258 	.word	0x20000258

080065cc <_close_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4c06      	ldr	r4, [pc, #24]	; (80065e8 <_close_r+0x1c>)
 80065d0:	2300      	movs	r3, #0
 80065d2:	4605      	mov	r5, r0
 80065d4:	4608      	mov	r0, r1
 80065d6:	6023      	str	r3, [r4, #0]
 80065d8:	f7fb fbb1 	bl	8001d3e <_close>
 80065dc:	1c43      	adds	r3, r0, #1
 80065de:	d102      	bne.n	80065e6 <_close_r+0x1a>
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	b103      	cbz	r3, 80065e6 <_close_r+0x1a>
 80065e4:	602b      	str	r3, [r5, #0]
 80065e6:	bd38      	pop	{r3, r4, r5, pc}
 80065e8:	20000258 	.word	0x20000258

080065ec <_fstat_r>:
 80065ec:	b538      	push	{r3, r4, r5, lr}
 80065ee:	4c07      	ldr	r4, [pc, #28]	; (800660c <_fstat_r+0x20>)
 80065f0:	2300      	movs	r3, #0
 80065f2:	4605      	mov	r5, r0
 80065f4:	4608      	mov	r0, r1
 80065f6:	4611      	mov	r1, r2
 80065f8:	6023      	str	r3, [r4, #0]
 80065fa:	f7fb fbac 	bl	8001d56 <_fstat>
 80065fe:	1c43      	adds	r3, r0, #1
 8006600:	d102      	bne.n	8006608 <_fstat_r+0x1c>
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	b103      	cbz	r3, 8006608 <_fstat_r+0x1c>
 8006606:	602b      	str	r3, [r5, #0]
 8006608:	bd38      	pop	{r3, r4, r5, pc}
 800660a:	bf00      	nop
 800660c:	20000258 	.word	0x20000258

08006610 <_isatty_r>:
 8006610:	b538      	push	{r3, r4, r5, lr}
 8006612:	4c06      	ldr	r4, [pc, #24]	; (800662c <_isatty_r+0x1c>)
 8006614:	2300      	movs	r3, #0
 8006616:	4605      	mov	r5, r0
 8006618:	4608      	mov	r0, r1
 800661a:	6023      	str	r3, [r4, #0]
 800661c:	f7fb fbab 	bl	8001d76 <_isatty>
 8006620:	1c43      	adds	r3, r0, #1
 8006622:	d102      	bne.n	800662a <_isatty_r+0x1a>
 8006624:	6823      	ldr	r3, [r4, #0]
 8006626:	b103      	cbz	r3, 800662a <_isatty_r+0x1a>
 8006628:	602b      	str	r3, [r5, #0]
 800662a:	bd38      	pop	{r3, r4, r5, pc}
 800662c:	20000258 	.word	0x20000258

08006630 <_lseek_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	4c07      	ldr	r4, [pc, #28]	; (8006650 <_lseek_r+0x20>)
 8006634:	4605      	mov	r5, r0
 8006636:	4608      	mov	r0, r1
 8006638:	4611      	mov	r1, r2
 800663a:	2200      	movs	r2, #0
 800663c:	6022      	str	r2, [r4, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	f7fb fba4 	bl	8001d8c <_lseek>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d102      	bne.n	800664e <_lseek_r+0x1e>
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	b103      	cbz	r3, 800664e <_lseek_r+0x1e>
 800664c:	602b      	str	r3, [r5, #0]
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	20000258 	.word	0x20000258

08006654 <__ascii_mbtowc>:
 8006654:	b082      	sub	sp, #8
 8006656:	b901      	cbnz	r1, 800665a <__ascii_mbtowc+0x6>
 8006658:	a901      	add	r1, sp, #4
 800665a:	b142      	cbz	r2, 800666e <__ascii_mbtowc+0x1a>
 800665c:	b14b      	cbz	r3, 8006672 <__ascii_mbtowc+0x1e>
 800665e:	7813      	ldrb	r3, [r2, #0]
 8006660:	600b      	str	r3, [r1, #0]
 8006662:	7812      	ldrb	r2, [r2, #0]
 8006664:	1c10      	adds	r0, r2, #0
 8006666:	bf18      	it	ne
 8006668:	2001      	movne	r0, #1
 800666a:	b002      	add	sp, #8
 800666c:	4770      	bx	lr
 800666e:	4610      	mov	r0, r2
 8006670:	e7fb      	b.n	800666a <__ascii_mbtowc+0x16>
 8006672:	f06f 0001 	mvn.w	r0, #1
 8006676:	e7f8      	b.n	800666a <__ascii_mbtowc+0x16>

08006678 <_read_r>:
 8006678:	b538      	push	{r3, r4, r5, lr}
 800667a:	4c07      	ldr	r4, [pc, #28]	; (8006698 <_read_r+0x20>)
 800667c:	4605      	mov	r5, r0
 800667e:	4608      	mov	r0, r1
 8006680:	4611      	mov	r1, r2
 8006682:	2200      	movs	r2, #0
 8006684:	6022      	str	r2, [r4, #0]
 8006686:	461a      	mov	r2, r3
 8006688:	f7fb fb20 	bl	8001ccc <_read>
 800668c:	1c43      	adds	r3, r0, #1
 800668e:	d102      	bne.n	8006696 <_read_r+0x1e>
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	b103      	cbz	r3, 8006696 <_read_r+0x1e>
 8006694:	602b      	str	r3, [r5, #0]
 8006696:	bd38      	pop	{r3, r4, r5, pc}
 8006698:	20000258 	.word	0x20000258

0800669c <__ascii_wctomb>:
 800669c:	b149      	cbz	r1, 80066b2 <__ascii_wctomb+0x16>
 800669e:	2aff      	cmp	r2, #255	; 0xff
 80066a0:	bf85      	ittet	hi
 80066a2:	238a      	movhi	r3, #138	; 0x8a
 80066a4:	6003      	strhi	r3, [r0, #0]
 80066a6:	700a      	strbls	r2, [r1, #0]
 80066a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80066ac:	bf98      	it	ls
 80066ae:	2001      	movls	r0, #1
 80066b0:	4770      	bx	lr
 80066b2:	4608      	mov	r0, r1
 80066b4:	4770      	bx	lr
	...

080066b8 <cos>:
 80066b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066ba:	ec51 0b10 	vmov	r0, r1, d0
 80066be:	4a1e      	ldr	r2, [pc, #120]	; (8006738 <cos+0x80>)
 80066c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80066c4:	4293      	cmp	r3, r2
 80066c6:	dc06      	bgt.n	80066d6 <cos+0x1e>
 80066c8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8006730 <cos+0x78>
 80066cc:	f000 fa74 	bl	8006bb8 <__kernel_cos>
 80066d0:	ec51 0b10 	vmov	r0, r1, d0
 80066d4:	e007      	b.n	80066e6 <cos+0x2e>
 80066d6:	4a19      	ldr	r2, [pc, #100]	; (800673c <cos+0x84>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	dd09      	ble.n	80066f0 <cos+0x38>
 80066dc:	ee10 2a10 	vmov	r2, s0
 80066e0:	460b      	mov	r3, r1
 80066e2:	f7f9 fd7d 	bl	80001e0 <__aeabi_dsub>
 80066e6:	ec41 0b10 	vmov	d0, r0, r1
 80066ea:	b005      	add	sp, #20
 80066ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80066f0:	4668      	mov	r0, sp
 80066f2:	f000 f86d 	bl	80067d0 <__ieee754_rem_pio2>
 80066f6:	f000 0003 	and.w	r0, r0, #3
 80066fa:	2801      	cmp	r0, #1
 80066fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006700:	ed9d 0b00 	vldr	d0, [sp]
 8006704:	d007      	beq.n	8006716 <cos+0x5e>
 8006706:	2802      	cmp	r0, #2
 8006708:	d00e      	beq.n	8006728 <cos+0x70>
 800670a:	2800      	cmp	r0, #0
 800670c:	d0de      	beq.n	80066cc <cos+0x14>
 800670e:	2001      	movs	r0, #1
 8006710:	f000 fe5a 	bl	80073c8 <__kernel_sin>
 8006714:	e7dc      	b.n	80066d0 <cos+0x18>
 8006716:	f000 fe57 	bl	80073c8 <__kernel_sin>
 800671a:	ec53 2b10 	vmov	r2, r3, d0
 800671e:	ee10 0a10 	vmov	r0, s0
 8006722:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006726:	e7de      	b.n	80066e6 <cos+0x2e>
 8006728:	f000 fa46 	bl	8006bb8 <__kernel_cos>
 800672c:	e7f5      	b.n	800671a <cos+0x62>
 800672e:	bf00      	nop
	...
 8006738:	3fe921fb 	.word	0x3fe921fb
 800673c:	7fefffff 	.word	0x7fefffff

08006740 <sin>:
 8006740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006742:	ec51 0b10 	vmov	r0, r1, d0
 8006746:	4a20      	ldr	r2, [pc, #128]	; (80067c8 <sin+0x88>)
 8006748:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800674c:	4293      	cmp	r3, r2
 800674e:	dc07      	bgt.n	8006760 <sin+0x20>
 8006750:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80067c0 <sin+0x80>
 8006754:	2000      	movs	r0, #0
 8006756:	f000 fe37 	bl	80073c8 <__kernel_sin>
 800675a:	ec51 0b10 	vmov	r0, r1, d0
 800675e:	e007      	b.n	8006770 <sin+0x30>
 8006760:	4a1a      	ldr	r2, [pc, #104]	; (80067cc <sin+0x8c>)
 8006762:	4293      	cmp	r3, r2
 8006764:	dd09      	ble.n	800677a <sin+0x3a>
 8006766:	ee10 2a10 	vmov	r2, s0
 800676a:	460b      	mov	r3, r1
 800676c:	f7f9 fd38 	bl	80001e0 <__aeabi_dsub>
 8006770:	ec41 0b10 	vmov	d0, r0, r1
 8006774:	b005      	add	sp, #20
 8006776:	f85d fb04 	ldr.w	pc, [sp], #4
 800677a:	4668      	mov	r0, sp
 800677c:	f000 f828 	bl	80067d0 <__ieee754_rem_pio2>
 8006780:	f000 0003 	and.w	r0, r0, #3
 8006784:	2801      	cmp	r0, #1
 8006786:	ed9d 1b02 	vldr	d1, [sp, #8]
 800678a:	ed9d 0b00 	vldr	d0, [sp]
 800678e:	d004      	beq.n	800679a <sin+0x5a>
 8006790:	2802      	cmp	r0, #2
 8006792:	d005      	beq.n	80067a0 <sin+0x60>
 8006794:	b970      	cbnz	r0, 80067b4 <sin+0x74>
 8006796:	2001      	movs	r0, #1
 8006798:	e7dd      	b.n	8006756 <sin+0x16>
 800679a:	f000 fa0d 	bl	8006bb8 <__kernel_cos>
 800679e:	e7dc      	b.n	800675a <sin+0x1a>
 80067a0:	2001      	movs	r0, #1
 80067a2:	f000 fe11 	bl	80073c8 <__kernel_sin>
 80067a6:	ec53 2b10 	vmov	r2, r3, d0
 80067aa:	ee10 0a10 	vmov	r0, s0
 80067ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80067b2:	e7dd      	b.n	8006770 <sin+0x30>
 80067b4:	f000 fa00 	bl	8006bb8 <__kernel_cos>
 80067b8:	e7f5      	b.n	80067a6 <sin+0x66>
 80067ba:	bf00      	nop
 80067bc:	f3af 8000 	nop.w
	...
 80067c8:	3fe921fb 	.word	0x3fe921fb
 80067cc:	7fefffff 	.word	0x7fefffff

080067d0 <__ieee754_rem_pio2>:
 80067d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d4:	ec57 6b10 	vmov	r6, r7, d0
 80067d8:	4bc3      	ldr	r3, [pc, #780]	; (8006ae8 <__ieee754_rem_pio2+0x318>)
 80067da:	b08d      	sub	sp, #52	; 0x34
 80067dc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80067e0:	4598      	cmp	r8, r3
 80067e2:	4604      	mov	r4, r0
 80067e4:	9704      	str	r7, [sp, #16]
 80067e6:	dc07      	bgt.n	80067f8 <__ieee754_rem_pio2+0x28>
 80067e8:	2200      	movs	r2, #0
 80067ea:	2300      	movs	r3, #0
 80067ec:	ed84 0b00 	vstr	d0, [r4]
 80067f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80067f4:	2500      	movs	r5, #0
 80067f6:	e027      	b.n	8006848 <__ieee754_rem_pio2+0x78>
 80067f8:	4bbc      	ldr	r3, [pc, #752]	; (8006aec <__ieee754_rem_pio2+0x31c>)
 80067fa:	4598      	cmp	r8, r3
 80067fc:	dc75      	bgt.n	80068ea <__ieee754_rem_pio2+0x11a>
 80067fe:	9b04      	ldr	r3, [sp, #16]
 8006800:	4dbb      	ldr	r5, [pc, #748]	; (8006af0 <__ieee754_rem_pio2+0x320>)
 8006802:	2b00      	cmp	r3, #0
 8006804:	ee10 0a10 	vmov	r0, s0
 8006808:	a3a9      	add	r3, pc, #676	; (adr r3, 8006ab0 <__ieee754_rem_pio2+0x2e0>)
 800680a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680e:	4639      	mov	r1, r7
 8006810:	dd36      	ble.n	8006880 <__ieee754_rem_pio2+0xb0>
 8006812:	f7f9 fce5 	bl	80001e0 <__aeabi_dsub>
 8006816:	45a8      	cmp	r8, r5
 8006818:	4606      	mov	r6, r0
 800681a:	460f      	mov	r7, r1
 800681c:	d018      	beq.n	8006850 <__ieee754_rem_pio2+0x80>
 800681e:	a3a6      	add	r3, pc, #664	; (adr r3, 8006ab8 <__ieee754_rem_pio2+0x2e8>)
 8006820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006824:	f7f9 fcdc 	bl	80001e0 <__aeabi_dsub>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	e9c4 2300 	strd	r2, r3, [r4]
 8006830:	4630      	mov	r0, r6
 8006832:	4639      	mov	r1, r7
 8006834:	f7f9 fcd4 	bl	80001e0 <__aeabi_dsub>
 8006838:	a39f      	add	r3, pc, #636	; (adr r3, 8006ab8 <__ieee754_rem_pio2+0x2e8>)
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	f7f9 fccf 	bl	80001e0 <__aeabi_dsub>
 8006842:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006846:	2501      	movs	r5, #1
 8006848:	4628      	mov	r0, r5
 800684a:	b00d      	add	sp, #52	; 0x34
 800684c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006850:	a39b      	add	r3, pc, #620	; (adr r3, 8006ac0 <__ieee754_rem_pio2+0x2f0>)
 8006852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006856:	f7f9 fcc3 	bl	80001e0 <__aeabi_dsub>
 800685a:	a39b      	add	r3, pc, #620	; (adr r3, 8006ac8 <__ieee754_rem_pio2+0x2f8>)
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	4606      	mov	r6, r0
 8006862:	460f      	mov	r7, r1
 8006864:	f7f9 fcbc 	bl	80001e0 <__aeabi_dsub>
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	e9c4 2300 	strd	r2, r3, [r4]
 8006870:	4630      	mov	r0, r6
 8006872:	4639      	mov	r1, r7
 8006874:	f7f9 fcb4 	bl	80001e0 <__aeabi_dsub>
 8006878:	a393      	add	r3, pc, #588	; (adr r3, 8006ac8 <__ieee754_rem_pio2+0x2f8>)
 800687a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687e:	e7de      	b.n	800683e <__ieee754_rem_pio2+0x6e>
 8006880:	f7f9 fcb0 	bl	80001e4 <__adddf3>
 8006884:	45a8      	cmp	r8, r5
 8006886:	4606      	mov	r6, r0
 8006888:	460f      	mov	r7, r1
 800688a:	d016      	beq.n	80068ba <__ieee754_rem_pio2+0xea>
 800688c:	a38a      	add	r3, pc, #552	; (adr r3, 8006ab8 <__ieee754_rem_pio2+0x2e8>)
 800688e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006892:	f7f9 fca7 	bl	80001e4 <__adddf3>
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	e9c4 2300 	strd	r2, r3, [r4]
 800689e:	4630      	mov	r0, r6
 80068a0:	4639      	mov	r1, r7
 80068a2:	f7f9 fc9d 	bl	80001e0 <__aeabi_dsub>
 80068a6:	a384      	add	r3, pc, #528	; (adr r3, 8006ab8 <__ieee754_rem_pio2+0x2e8>)
 80068a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ac:	f7f9 fc9a 	bl	80001e4 <__adddf3>
 80068b0:	f04f 35ff 	mov.w	r5, #4294967295
 80068b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80068b8:	e7c6      	b.n	8006848 <__ieee754_rem_pio2+0x78>
 80068ba:	a381      	add	r3, pc, #516	; (adr r3, 8006ac0 <__ieee754_rem_pio2+0x2f0>)
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	f7f9 fc90 	bl	80001e4 <__adddf3>
 80068c4:	a380      	add	r3, pc, #512	; (adr r3, 8006ac8 <__ieee754_rem_pio2+0x2f8>)
 80068c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ca:	4606      	mov	r6, r0
 80068cc:	460f      	mov	r7, r1
 80068ce:	f7f9 fc89 	bl	80001e4 <__adddf3>
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	e9c4 2300 	strd	r2, r3, [r4]
 80068da:	4630      	mov	r0, r6
 80068dc:	4639      	mov	r1, r7
 80068de:	f7f9 fc7f 	bl	80001e0 <__aeabi_dsub>
 80068e2:	a379      	add	r3, pc, #484	; (adr r3, 8006ac8 <__ieee754_rem_pio2+0x2f8>)
 80068e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e8:	e7e0      	b.n	80068ac <__ieee754_rem_pio2+0xdc>
 80068ea:	4b82      	ldr	r3, [pc, #520]	; (8006af4 <__ieee754_rem_pio2+0x324>)
 80068ec:	4598      	cmp	r8, r3
 80068ee:	f300 80d0 	bgt.w	8006a92 <__ieee754_rem_pio2+0x2c2>
 80068f2:	f000 fe23 	bl	800753c <fabs>
 80068f6:	ec57 6b10 	vmov	r6, r7, d0
 80068fa:	ee10 0a10 	vmov	r0, s0
 80068fe:	a374      	add	r3, pc, #464	; (adr r3, 8006ad0 <__ieee754_rem_pio2+0x300>)
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	4639      	mov	r1, r7
 8006906:	f7f9 fe23 	bl	8000550 <__aeabi_dmul>
 800690a:	2200      	movs	r2, #0
 800690c:	4b7a      	ldr	r3, [pc, #488]	; (8006af8 <__ieee754_rem_pio2+0x328>)
 800690e:	f7f9 fc69 	bl	80001e4 <__adddf3>
 8006912:	f7fa f8cd 	bl	8000ab0 <__aeabi_d2iz>
 8006916:	4605      	mov	r5, r0
 8006918:	f7f9 fdb0 	bl	800047c <__aeabi_i2d>
 800691c:	a364      	add	r3, pc, #400	; (adr r3, 8006ab0 <__ieee754_rem_pio2+0x2e0>)
 800691e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006922:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006926:	f7f9 fe13 	bl	8000550 <__aeabi_dmul>
 800692a:	4602      	mov	r2, r0
 800692c:	460b      	mov	r3, r1
 800692e:	4630      	mov	r0, r6
 8006930:	4639      	mov	r1, r7
 8006932:	f7f9 fc55 	bl	80001e0 <__aeabi_dsub>
 8006936:	a360      	add	r3, pc, #384	; (adr r3, 8006ab8 <__ieee754_rem_pio2+0x2e8>)
 8006938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693c:	4682      	mov	sl, r0
 800693e:	468b      	mov	fp, r1
 8006940:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006944:	f7f9 fe04 	bl	8000550 <__aeabi_dmul>
 8006948:	2d1f      	cmp	r5, #31
 800694a:	4606      	mov	r6, r0
 800694c:	460f      	mov	r7, r1
 800694e:	dc0c      	bgt.n	800696a <__ieee754_rem_pio2+0x19a>
 8006950:	1e6a      	subs	r2, r5, #1
 8006952:	4b6a      	ldr	r3, [pc, #424]	; (8006afc <__ieee754_rem_pio2+0x32c>)
 8006954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006958:	4543      	cmp	r3, r8
 800695a:	d006      	beq.n	800696a <__ieee754_rem_pio2+0x19a>
 800695c:	4632      	mov	r2, r6
 800695e:	463b      	mov	r3, r7
 8006960:	4650      	mov	r0, sl
 8006962:	4659      	mov	r1, fp
 8006964:	f7f9 fc3c 	bl	80001e0 <__aeabi_dsub>
 8006968:	e00e      	b.n	8006988 <__ieee754_rem_pio2+0x1b8>
 800696a:	4632      	mov	r2, r6
 800696c:	463b      	mov	r3, r7
 800696e:	4650      	mov	r0, sl
 8006970:	4659      	mov	r1, fp
 8006972:	f7f9 fc35 	bl	80001e0 <__aeabi_dsub>
 8006976:	ea4f 5328 	mov.w	r3, r8, asr #20
 800697a:	9305      	str	r3, [sp, #20]
 800697c:	9a05      	ldr	r2, [sp, #20]
 800697e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b10      	cmp	r3, #16
 8006986:	dc02      	bgt.n	800698e <__ieee754_rem_pio2+0x1be>
 8006988:	e9c4 0100 	strd	r0, r1, [r4]
 800698c:	e039      	b.n	8006a02 <__ieee754_rem_pio2+0x232>
 800698e:	a34c      	add	r3, pc, #304	; (adr r3, 8006ac0 <__ieee754_rem_pio2+0x2f0>)
 8006990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006994:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006998:	f7f9 fdda 	bl	8000550 <__aeabi_dmul>
 800699c:	4606      	mov	r6, r0
 800699e:	460f      	mov	r7, r1
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4650      	mov	r0, sl
 80069a6:	4659      	mov	r1, fp
 80069a8:	f7f9 fc1a 	bl	80001e0 <__aeabi_dsub>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4680      	mov	r8, r0
 80069b2:	4689      	mov	r9, r1
 80069b4:	4650      	mov	r0, sl
 80069b6:	4659      	mov	r1, fp
 80069b8:	f7f9 fc12 	bl	80001e0 <__aeabi_dsub>
 80069bc:	4632      	mov	r2, r6
 80069be:	463b      	mov	r3, r7
 80069c0:	f7f9 fc0e 	bl	80001e0 <__aeabi_dsub>
 80069c4:	a340      	add	r3, pc, #256	; (adr r3, 8006ac8 <__ieee754_rem_pio2+0x2f8>)
 80069c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ca:	4606      	mov	r6, r0
 80069cc:	460f      	mov	r7, r1
 80069ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069d2:	f7f9 fdbd 	bl	8000550 <__aeabi_dmul>
 80069d6:	4632      	mov	r2, r6
 80069d8:	463b      	mov	r3, r7
 80069da:	f7f9 fc01 	bl	80001e0 <__aeabi_dsub>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	4606      	mov	r6, r0
 80069e4:	460f      	mov	r7, r1
 80069e6:	4640      	mov	r0, r8
 80069e8:	4649      	mov	r1, r9
 80069ea:	f7f9 fbf9 	bl	80001e0 <__aeabi_dsub>
 80069ee:	9a05      	ldr	r2, [sp, #20]
 80069f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b31      	cmp	r3, #49	; 0x31
 80069f8:	dc20      	bgt.n	8006a3c <__ieee754_rem_pio2+0x26c>
 80069fa:	e9c4 0100 	strd	r0, r1, [r4]
 80069fe:	46c2      	mov	sl, r8
 8006a00:	46cb      	mov	fp, r9
 8006a02:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006a06:	4650      	mov	r0, sl
 8006a08:	4642      	mov	r2, r8
 8006a0a:	464b      	mov	r3, r9
 8006a0c:	4659      	mov	r1, fp
 8006a0e:	f7f9 fbe7 	bl	80001e0 <__aeabi_dsub>
 8006a12:	463b      	mov	r3, r7
 8006a14:	4632      	mov	r2, r6
 8006a16:	f7f9 fbe3 	bl	80001e0 <__aeabi_dsub>
 8006a1a:	9b04      	ldr	r3, [sp, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006a22:	f6bf af11 	bge.w	8006848 <__ieee754_rem_pio2+0x78>
 8006a26:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006a2a:	6063      	str	r3, [r4, #4]
 8006a2c:	f8c4 8000 	str.w	r8, [r4]
 8006a30:	60a0      	str	r0, [r4, #8]
 8006a32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a36:	60e3      	str	r3, [r4, #12]
 8006a38:	426d      	negs	r5, r5
 8006a3a:	e705      	b.n	8006848 <__ieee754_rem_pio2+0x78>
 8006a3c:	a326      	add	r3, pc, #152	; (adr r3, 8006ad8 <__ieee754_rem_pio2+0x308>)
 8006a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a46:	f7f9 fd83 	bl	8000550 <__aeabi_dmul>
 8006a4a:	4606      	mov	r6, r0
 8006a4c:	460f      	mov	r7, r1
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4640      	mov	r0, r8
 8006a54:	4649      	mov	r1, r9
 8006a56:	f7f9 fbc3 	bl	80001e0 <__aeabi_dsub>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4682      	mov	sl, r0
 8006a60:	468b      	mov	fp, r1
 8006a62:	4640      	mov	r0, r8
 8006a64:	4649      	mov	r1, r9
 8006a66:	f7f9 fbbb 	bl	80001e0 <__aeabi_dsub>
 8006a6a:	4632      	mov	r2, r6
 8006a6c:	463b      	mov	r3, r7
 8006a6e:	f7f9 fbb7 	bl	80001e0 <__aeabi_dsub>
 8006a72:	a31b      	add	r3, pc, #108	; (adr r3, 8006ae0 <__ieee754_rem_pio2+0x310>)
 8006a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a78:	4606      	mov	r6, r0
 8006a7a:	460f      	mov	r7, r1
 8006a7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a80:	f7f9 fd66 	bl	8000550 <__aeabi_dmul>
 8006a84:	4632      	mov	r2, r6
 8006a86:	463b      	mov	r3, r7
 8006a88:	f7f9 fbaa 	bl	80001e0 <__aeabi_dsub>
 8006a8c:	4606      	mov	r6, r0
 8006a8e:	460f      	mov	r7, r1
 8006a90:	e764      	b.n	800695c <__ieee754_rem_pio2+0x18c>
 8006a92:	4b1b      	ldr	r3, [pc, #108]	; (8006b00 <__ieee754_rem_pio2+0x330>)
 8006a94:	4598      	cmp	r8, r3
 8006a96:	dd35      	ble.n	8006b04 <__ieee754_rem_pio2+0x334>
 8006a98:	ee10 2a10 	vmov	r2, s0
 8006a9c:	463b      	mov	r3, r7
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	4639      	mov	r1, r7
 8006aa2:	f7f9 fb9d 	bl	80001e0 <__aeabi_dsub>
 8006aa6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006aaa:	e9c4 0100 	strd	r0, r1, [r4]
 8006aae:	e6a1      	b.n	80067f4 <__ieee754_rem_pio2+0x24>
 8006ab0:	54400000 	.word	0x54400000
 8006ab4:	3ff921fb 	.word	0x3ff921fb
 8006ab8:	1a626331 	.word	0x1a626331
 8006abc:	3dd0b461 	.word	0x3dd0b461
 8006ac0:	1a600000 	.word	0x1a600000
 8006ac4:	3dd0b461 	.word	0x3dd0b461
 8006ac8:	2e037073 	.word	0x2e037073
 8006acc:	3ba3198a 	.word	0x3ba3198a
 8006ad0:	6dc9c883 	.word	0x6dc9c883
 8006ad4:	3fe45f30 	.word	0x3fe45f30
 8006ad8:	2e000000 	.word	0x2e000000
 8006adc:	3ba3198a 	.word	0x3ba3198a
 8006ae0:	252049c1 	.word	0x252049c1
 8006ae4:	397b839a 	.word	0x397b839a
 8006ae8:	3fe921fb 	.word	0x3fe921fb
 8006aec:	4002d97b 	.word	0x4002d97b
 8006af0:	3ff921fb 	.word	0x3ff921fb
 8006af4:	413921fb 	.word	0x413921fb
 8006af8:	3fe00000 	.word	0x3fe00000
 8006afc:	08010268 	.word	0x08010268
 8006b00:	7fefffff 	.word	0x7fefffff
 8006b04:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006b08:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006b0c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006b10:	4630      	mov	r0, r6
 8006b12:	460f      	mov	r7, r1
 8006b14:	f7f9 ffcc 	bl	8000ab0 <__aeabi_d2iz>
 8006b18:	f7f9 fcb0 	bl	800047c <__aeabi_i2d>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4630      	mov	r0, r6
 8006b22:	4639      	mov	r1, r7
 8006b24:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b28:	f7f9 fb5a 	bl	80001e0 <__aeabi_dsub>
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	4b1f      	ldr	r3, [pc, #124]	; (8006bac <__ieee754_rem_pio2+0x3dc>)
 8006b30:	f7f9 fd0e 	bl	8000550 <__aeabi_dmul>
 8006b34:	460f      	mov	r7, r1
 8006b36:	4606      	mov	r6, r0
 8006b38:	f7f9 ffba 	bl	8000ab0 <__aeabi_d2iz>
 8006b3c:	f7f9 fc9e 	bl	800047c <__aeabi_i2d>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	4630      	mov	r0, r6
 8006b46:	4639      	mov	r1, r7
 8006b48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b4c:	f7f9 fb48 	bl	80001e0 <__aeabi_dsub>
 8006b50:	2200      	movs	r2, #0
 8006b52:	4b16      	ldr	r3, [pc, #88]	; (8006bac <__ieee754_rem_pio2+0x3dc>)
 8006b54:	f7f9 fcfc 	bl	8000550 <__aeabi_dmul>
 8006b58:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006b5c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006b60:	f04f 0803 	mov.w	r8, #3
 8006b64:	2600      	movs	r6, #0
 8006b66:	2700      	movs	r7, #0
 8006b68:	4632      	mov	r2, r6
 8006b6a:	463b      	mov	r3, r7
 8006b6c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006b70:	f108 3aff 	add.w	sl, r8, #4294967295
 8006b74:	f7f9 ff54 	bl	8000a20 <__aeabi_dcmpeq>
 8006b78:	b9b0      	cbnz	r0, 8006ba8 <__ieee754_rem_pio2+0x3d8>
 8006b7a:	4b0d      	ldr	r3, [pc, #52]	; (8006bb0 <__ieee754_rem_pio2+0x3e0>)
 8006b7c:	9301      	str	r3, [sp, #4]
 8006b7e:	2302      	movs	r3, #2
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	462a      	mov	r2, r5
 8006b84:	4643      	mov	r3, r8
 8006b86:	4621      	mov	r1, r4
 8006b88:	a806      	add	r0, sp, #24
 8006b8a:	f000 f8dd 	bl	8006d48 <__kernel_rem_pio2>
 8006b8e:	9b04      	ldr	r3, [sp, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	4605      	mov	r5, r0
 8006b94:	f6bf ae58 	bge.w	8006848 <__ieee754_rem_pio2+0x78>
 8006b98:	6863      	ldr	r3, [r4, #4]
 8006b9a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006b9e:	6063      	str	r3, [r4, #4]
 8006ba0:	68e3      	ldr	r3, [r4, #12]
 8006ba2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006ba6:	e746      	b.n	8006a36 <__ieee754_rem_pio2+0x266>
 8006ba8:	46d0      	mov	r8, sl
 8006baa:	e7dd      	b.n	8006b68 <__ieee754_rem_pio2+0x398>
 8006bac:	41700000 	.word	0x41700000
 8006bb0:	080102e8 	.word	0x080102e8
 8006bb4:	00000000 	.word	0x00000000

08006bb8 <__kernel_cos>:
 8006bb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bbc:	ec59 8b10 	vmov	r8, r9, d0
 8006bc0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8006bc4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006bc8:	ed2d 8b02 	vpush	{d8}
 8006bcc:	eeb0 8a41 	vmov.f32	s16, s2
 8006bd0:	eef0 8a61 	vmov.f32	s17, s3
 8006bd4:	da07      	bge.n	8006be6 <__kernel_cos+0x2e>
 8006bd6:	ee10 0a10 	vmov	r0, s0
 8006bda:	4649      	mov	r1, r9
 8006bdc:	f7f9 ff68 	bl	8000ab0 <__aeabi_d2iz>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	f000 8089 	beq.w	8006cf8 <__kernel_cos+0x140>
 8006be6:	4642      	mov	r2, r8
 8006be8:	464b      	mov	r3, r9
 8006bea:	4640      	mov	r0, r8
 8006bec:	4649      	mov	r1, r9
 8006bee:	f7f9 fcaf 	bl	8000550 <__aeabi_dmul>
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	4b4e      	ldr	r3, [pc, #312]	; (8006d30 <__kernel_cos+0x178>)
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	460d      	mov	r5, r1
 8006bfa:	f7f9 fca9 	bl	8000550 <__aeabi_dmul>
 8006bfe:	a340      	add	r3, pc, #256	; (adr r3, 8006d00 <__kernel_cos+0x148>)
 8006c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c04:	4682      	mov	sl, r0
 8006c06:	468b      	mov	fp, r1
 8006c08:	4620      	mov	r0, r4
 8006c0a:	4629      	mov	r1, r5
 8006c0c:	f7f9 fca0 	bl	8000550 <__aeabi_dmul>
 8006c10:	a33d      	add	r3, pc, #244	; (adr r3, 8006d08 <__kernel_cos+0x150>)
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	f7f9 fae5 	bl	80001e4 <__adddf3>
 8006c1a:	4622      	mov	r2, r4
 8006c1c:	462b      	mov	r3, r5
 8006c1e:	f7f9 fc97 	bl	8000550 <__aeabi_dmul>
 8006c22:	a33b      	add	r3, pc, #236	; (adr r3, 8006d10 <__kernel_cos+0x158>)
 8006c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c28:	f7f9 fada 	bl	80001e0 <__aeabi_dsub>
 8006c2c:	4622      	mov	r2, r4
 8006c2e:	462b      	mov	r3, r5
 8006c30:	f7f9 fc8e 	bl	8000550 <__aeabi_dmul>
 8006c34:	a338      	add	r3, pc, #224	; (adr r3, 8006d18 <__kernel_cos+0x160>)
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	f7f9 fad3 	bl	80001e4 <__adddf3>
 8006c3e:	4622      	mov	r2, r4
 8006c40:	462b      	mov	r3, r5
 8006c42:	f7f9 fc85 	bl	8000550 <__aeabi_dmul>
 8006c46:	a336      	add	r3, pc, #216	; (adr r3, 8006d20 <__kernel_cos+0x168>)
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	f7f9 fac8 	bl	80001e0 <__aeabi_dsub>
 8006c50:	4622      	mov	r2, r4
 8006c52:	462b      	mov	r3, r5
 8006c54:	f7f9 fc7c 	bl	8000550 <__aeabi_dmul>
 8006c58:	a333      	add	r3, pc, #204	; (adr r3, 8006d28 <__kernel_cos+0x170>)
 8006c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5e:	f7f9 fac1 	bl	80001e4 <__adddf3>
 8006c62:	4622      	mov	r2, r4
 8006c64:	462b      	mov	r3, r5
 8006c66:	f7f9 fc73 	bl	8000550 <__aeabi_dmul>
 8006c6a:	4622      	mov	r2, r4
 8006c6c:	462b      	mov	r3, r5
 8006c6e:	f7f9 fc6f 	bl	8000550 <__aeabi_dmul>
 8006c72:	ec53 2b18 	vmov	r2, r3, d8
 8006c76:	4604      	mov	r4, r0
 8006c78:	460d      	mov	r5, r1
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	4649      	mov	r1, r9
 8006c7e:	f7f9 fc67 	bl	8000550 <__aeabi_dmul>
 8006c82:	460b      	mov	r3, r1
 8006c84:	4602      	mov	r2, r0
 8006c86:	4629      	mov	r1, r5
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f7f9 faa9 	bl	80001e0 <__aeabi_dsub>
 8006c8e:	4b29      	ldr	r3, [pc, #164]	; (8006d34 <__kernel_cos+0x17c>)
 8006c90:	429e      	cmp	r6, r3
 8006c92:	4680      	mov	r8, r0
 8006c94:	4689      	mov	r9, r1
 8006c96:	dc11      	bgt.n	8006cbc <__kernel_cos+0x104>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4650      	mov	r0, sl
 8006c9e:	4659      	mov	r1, fp
 8006ca0:	f7f9 fa9e 	bl	80001e0 <__aeabi_dsub>
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4924      	ldr	r1, [pc, #144]	; (8006d38 <__kernel_cos+0x180>)
 8006ca8:	4602      	mov	r2, r0
 8006caa:	2000      	movs	r0, #0
 8006cac:	f7f9 fa98 	bl	80001e0 <__aeabi_dsub>
 8006cb0:	ecbd 8b02 	vpop	{d8}
 8006cb4:	ec41 0b10 	vmov	d0, r0, r1
 8006cb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cbc:	4b1f      	ldr	r3, [pc, #124]	; (8006d3c <__kernel_cos+0x184>)
 8006cbe:	491e      	ldr	r1, [pc, #120]	; (8006d38 <__kernel_cos+0x180>)
 8006cc0:	429e      	cmp	r6, r3
 8006cc2:	bfcc      	ite	gt
 8006cc4:	4d1e      	ldrgt	r5, [pc, #120]	; (8006d40 <__kernel_cos+0x188>)
 8006cc6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8006cca:	2400      	movs	r4, #0
 8006ccc:	4622      	mov	r2, r4
 8006cce:	462b      	mov	r3, r5
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	f7f9 fa85 	bl	80001e0 <__aeabi_dsub>
 8006cd6:	4622      	mov	r2, r4
 8006cd8:	4606      	mov	r6, r0
 8006cda:	460f      	mov	r7, r1
 8006cdc:	462b      	mov	r3, r5
 8006cde:	4650      	mov	r0, sl
 8006ce0:	4659      	mov	r1, fp
 8006ce2:	f7f9 fa7d 	bl	80001e0 <__aeabi_dsub>
 8006ce6:	4642      	mov	r2, r8
 8006ce8:	464b      	mov	r3, r9
 8006cea:	f7f9 fa79 	bl	80001e0 <__aeabi_dsub>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	4639      	mov	r1, r7
 8006cf6:	e7d9      	b.n	8006cac <__kernel_cos+0xf4>
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	490f      	ldr	r1, [pc, #60]	; (8006d38 <__kernel_cos+0x180>)
 8006cfc:	e7d8      	b.n	8006cb0 <__kernel_cos+0xf8>
 8006cfe:	bf00      	nop
 8006d00:	be8838d4 	.word	0xbe8838d4
 8006d04:	bda8fae9 	.word	0xbda8fae9
 8006d08:	bdb4b1c4 	.word	0xbdb4b1c4
 8006d0c:	3e21ee9e 	.word	0x3e21ee9e
 8006d10:	809c52ad 	.word	0x809c52ad
 8006d14:	3e927e4f 	.word	0x3e927e4f
 8006d18:	19cb1590 	.word	0x19cb1590
 8006d1c:	3efa01a0 	.word	0x3efa01a0
 8006d20:	16c15177 	.word	0x16c15177
 8006d24:	3f56c16c 	.word	0x3f56c16c
 8006d28:	5555554c 	.word	0x5555554c
 8006d2c:	3fa55555 	.word	0x3fa55555
 8006d30:	3fe00000 	.word	0x3fe00000
 8006d34:	3fd33332 	.word	0x3fd33332
 8006d38:	3ff00000 	.word	0x3ff00000
 8006d3c:	3fe90000 	.word	0x3fe90000
 8006d40:	3fd20000 	.word	0x3fd20000
 8006d44:	00000000 	.word	0x00000000

08006d48 <__kernel_rem_pio2>:
 8006d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4c:	ed2d 8b02 	vpush	{d8}
 8006d50:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006d54:	1ed4      	subs	r4, r2, #3
 8006d56:	9308      	str	r3, [sp, #32]
 8006d58:	9101      	str	r1, [sp, #4]
 8006d5a:	4bc5      	ldr	r3, [pc, #788]	; (8007070 <__kernel_rem_pio2+0x328>)
 8006d5c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006d5e:	9009      	str	r0, [sp, #36]	; 0x24
 8006d60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d64:	9304      	str	r3, [sp, #16]
 8006d66:	9b08      	ldr	r3, [sp, #32]
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	9307      	str	r3, [sp, #28]
 8006d6c:	2318      	movs	r3, #24
 8006d6e:	fb94 f4f3 	sdiv	r4, r4, r3
 8006d72:	f06f 0317 	mvn.w	r3, #23
 8006d76:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006d7a:	fb04 3303 	mla	r3, r4, r3, r3
 8006d7e:	eb03 0a02 	add.w	sl, r3, r2
 8006d82:	9b04      	ldr	r3, [sp, #16]
 8006d84:	9a07      	ldr	r2, [sp, #28]
 8006d86:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007060 <__kernel_rem_pio2+0x318>
 8006d8a:	eb03 0802 	add.w	r8, r3, r2
 8006d8e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006d90:	1aa7      	subs	r7, r4, r2
 8006d92:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006d96:	ae22      	add	r6, sp, #136	; 0x88
 8006d98:	2500      	movs	r5, #0
 8006d9a:	4545      	cmp	r5, r8
 8006d9c:	dd13      	ble.n	8006dc6 <__kernel_rem_pio2+0x7e>
 8006d9e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8007060 <__kernel_rem_pio2+0x318>
 8006da2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006da6:	2600      	movs	r6, #0
 8006da8:	9b04      	ldr	r3, [sp, #16]
 8006daa:	429e      	cmp	r6, r3
 8006dac:	dc32      	bgt.n	8006e14 <__kernel_rem_pio2+0xcc>
 8006dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db0:	9302      	str	r3, [sp, #8]
 8006db2:	9b08      	ldr	r3, [sp, #32]
 8006db4:	199d      	adds	r5, r3, r6
 8006db6:	ab22      	add	r3, sp, #136	; 0x88
 8006db8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006dbc:	9306      	str	r3, [sp, #24]
 8006dbe:	ec59 8b18 	vmov	r8, r9, d8
 8006dc2:	2700      	movs	r7, #0
 8006dc4:	e01f      	b.n	8006e06 <__kernel_rem_pio2+0xbe>
 8006dc6:	42ef      	cmn	r7, r5
 8006dc8:	d407      	bmi.n	8006dda <__kernel_rem_pio2+0x92>
 8006dca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006dce:	f7f9 fb55 	bl	800047c <__aeabi_i2d>
 8006dd2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006dd6:	3501      	adds	r5, #1
 8006dd8:	e7df      	b.n	8006d9a <__kernel_rem_pio2+0x52>
 8006dda:	ec51 0b18 	vmov	r0, r1, d8
 8006dde:	e7f8      	b.n	8006dd2 <__kernel_rem_pio2+0x8a>
 8006de0:	9906      	ldr	r1, [sp, #24]
 8006de2:	9d02      	ldr	r5, [sp, #8]
 8006de4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8006de8:	9106      	str	r1, [sp, #24]
 8006dea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8006dee:	9502      	str	r5, [sp, #8]
 8006df0:	f7f9 fbae 	bl	8000550 <__aeabi_dmul>
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	4640      	mov	r0, r8
 8006dfa:	4649      	mov	r1, r9
 8006dfc:	f7f9 f9f2 	bl	80001e4 <__adddf3>
 8006e00:	3701      	adds	r7, #1
 8006e02:	4680      	mov	r8, r0
 8006e04:	4689      	mov	r9, r1
 8006e06:	9b07      	ldr	r3, [sp, #28]
 8006e08:	429f      	cmp	r7, r3
 8006e0a:	dde9      	ble.n	8006de0 <__kernel_rem_pio2+0x98>
 8006e0c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8006e10:	3601      	adds	r6, #1
 8006e12:	e7c9      	b.n	8006da8 <__kernel_rem_pio2+0x60>
 8006e14:	9b04      	ldr	r3, [sp, #16]
 8006e16:	aa0e      	add	r2, sp, #56	; 0x38
 8006e18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e1c:	930c      	str	r3, [sp, #48]	; 0x30
 8006e1e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006e20:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006e24:	9c04      	ldr	r4, [sp, #16]
 8006e26:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e28:	ab9a      	add	r3, sp, #616	; 0x268
 8006e2a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8006e2e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e36:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8006e3a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8006e3e:	ab9a      	add	r3, sp, #616	; 0x268
 8006e40:	445b      	add	r3, fp
 8006e42:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8006e46:	2500      	movs	r5, #0
 8006e48:	1b63      	subs	r3, r4, r5
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	dc78      	bgt.n	8006f40 <__kernel_rem_pio2+0x1f8>
 8006e4e:	4650      	mov	r0, sl
 8006e50:	ec49 8b10 	vmov	d0, r8, r9
 8006e54:	f000 fc00 	bl	8007658 <scalbn>
 8006e58:	ec57 6b10 	vmov	r6, r7, d0
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006e62:	ee10 0a10 	vmov	r0, s0
 8006e66:	4639      	mov	r1, r7
 8006e68:	f7f9 fb72 	bl	8000550 <__aeabi_dmul>
 8006e6c:	ec41 0b10 	vmov	d0, r0, r1
 8006e70:	f000 fb6e 	bl	8007550 <floor>
 8006e74:	2200      	movs	r2, #0
 8006e76:	ec51 0b10 	vmov	r0, r1, d0
 8006e7a:	4b7e      	ldr	r3, [pc, #504]	; (8007074 <__kernel_rem_pio2+0x32c>)
 8006e7c:	f7f9 fb68 	bl	8000550 <__aeabi_dmul>
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	4630      	mov	r0, r6
 8006e86:	4639      	mov	r1, r7
 8006e88:	f7f9 f9aa 	bl	80001e0 <__aeabi_dsub>
 8006e8c:	460f      	mov	r7, r1
 8006e8e:	4606      	mov	r6, r0
 8006e90:	f7f9 fe0e 	bl	8000ab0 <__aeabi_d2iz>
 8006e94:	9006      	str	r0, [sp, #24]
 8006e96:	f7f9 faf1 	bl	800047c <__aeabi_i2d>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	4639      	mov	r1, r7
 8006ea2:	f7f9 f99d 	bl	80001e0 <__aeabi_dsub>
 8006ea6:	f1ba 0f00 	cmp.w	sl, #0
 8006eaa:	4606      	mov	r6, r0
 8006eac:	460f      	mov	r7, r1
 8006eae:	dd6c      	ble.n	8006f8a <__kernel_rem_pio2+0x242>
 8006eb0:	1e62      	subs	r2, r4, #1
 8006eb2:	ab0e      	add	r3, sp, #56	; 0x38
 8006eb4:	f1ca 0118 	rsb	r1, sl, #24
 8006eb8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006ebc:	9d06      	ldr	r5, [sp, #24]
 8006ebe:	fa40 f301 	asr.w	r3, r0, r1
 8006ec2:	441d      	add	r5, r3
 8006ec4:	408b      	lsls	r3, r1
 8006ec6:	1ac0      	subs	r0, r0, r3
 8006ec8:	ab0e      	add	r3, sp, #56	; 0x38
 8006eca:	9506      	str	r5, [sp, #24]
 8006ecc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006ed0:	f1ca 0317 	rsb	r3, sl, #23
 8006ed4:	fa40 f303 	asr.w	r3, r0, r3
 8006ed8:	9302      	str	r3, [sp, #8]
 8006eda:	9b02      	ldr	r3, [sp, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	dd62      	ble.n	8006fa6 <__kernel_rem_pio2+0x25e>
 8006ee0:	9b06      	ldr	r3, [sp, #24]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	9306      	str	r3, [sp, #24]
 8006ee8:	4615      	mov	r5, r2
 8006eea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006eee:	4294      	cmp	r4, r2
 8006ef0:	f300 8095 	bgt.w	800701e <__kernel_rem_pio2+0x2d6>
 8006ef4:	f1ba 0f00 	cmp.w	sl, #0
 8006ef8:	dd07      	ble.n	8006f0a <__kernel_rem_pio2+0x1c2>
 8006efa:	f1ba 0f01 	cmp.w	sl, #1
 8006efe:	f000 80a2 	beq.w	8007046 <__kernel_rem_pio2+0x2fe>
 8006f02:	f1ba 0f02 	cmp.w	sl, #2
 8006f06:	f000 80c1 	beq.w	800708c <__kernel_rem_pio2+0x344>
 8006f0a:	9b02      	ldr	r3, [sp, #8]
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d14a      	bne.n	8006fa6 <__kernel_rem_pio2+0x25e>
 8006f10:	4632      	mov	r2, r6
 8006f12:	463b      	mov	r3, r7
 8006f14:	2000      	movs	r0, #0
 8006f16:	4958      	ldr	r1, [pc, #352]	; (8007078 <__kernel_rem_pio2+0x330>)
 8006f18:	f7f9 f962 	bl	80001e0 <__aeabi_dsub>
 8006f1c:	4606      	mov	r6, r0
 8006f1e:	460f      	mov	r7, r1
 8006f20:	2d00      	cmp	r5, #0
 8006f22:	d040      	beq.n	8006fa6 <__kernel_rem_pio2+0x25e>
 8006f24:	4650      	mov	r0, sl
 8006f26:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007068 <__kernel_rem_pio2+0x320>
 8006f2a:	f000 fb95 	bl	8007658 <scalbn>
 8006f2e:	4630      	mov	r0, r6
 8006f30:	4639      	mov	r1, r7
 8006f32:	ec53 2b10 	vmov	r2, r3, d0
 8006f36:	f7f9 f953 	bl	80001e0 <__aeabi_dsub>
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	460f      	mov	r7, r1
 8006f3e:	e032      	b.n	8006fa6 <__kernel_rem_pio2+0x25e>
 8006f40:	2200      	movs	r2, #0
 8006f42:	4b4e      	ldr	r3, [pc, #312]	; (800707c <__kernel_rem_pio2+0x334>)
 8006f44:	4640      	mov	r0, r8
 8006f46:	4649      	mov	r1, r9
 8006f48:	f7f9 fb02 	bl	8000550 <__aeabi_dmul>
 8006f4c:	f7f9 fdb0 	bl	8000ab0 <__aeabi_d2iz>
 8006f50:	f7f9 fa94 	bl	800047c <__aeabi_i2d>
 8006f54:	2200      	movs	r2, #0
 8006f56:	4b4a      	ldr	r3, [pc, #296]	; (8007080 <__kernel_rem_pio2+0x338>)
 8006f58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f5c:	f7f9 faf8 	bl	8000550 <__aeabi_dmul>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4640      	mov	r0, r8
 8006f66:	4649      	mov	r1, r9
 8006f68:	f7f9 f93a 	bl	80001e0 <__aeabi_dsub>
 8006f6c:	f7f9 fda0 	bl	8000ab0 <__aeabi_d2iz>
 8006f70:	ab0e      	add	r3, sp, #56	; 0x38
 8006f72:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8006f76:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006f7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f7e:	f7f9 f931 	bl	80001e4 <__adddf3>
 8006f82:	3501      	adds	r5, #1
 8006f84:	4680      	mov	r8, r0
 8006f86:	4689      	mov	r9, r1
 8006f88:	e75e      	b.n	8006e48 <__kernel_rem_pio2+0x100>
 8006f8a:	d105      	bne.n	8006f98 <__kernel_rem_pio2+0x250>
 8006f8c:	1e63      	subs	r3, r4, #1
 8006f8e:	aa0e      	add	r2, sp, #56	; 0x38
 8006f90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006f94:	15c3      	asrs	r3, r0, #23
 8006f96:	e79f      	b.n	8006ed8 <__kernel_rem_pio2+0x190>
 8006f98:	2200      	movs	r2, #0
 8006f9a:	4b3a      	ldr	r3, [pc, #232]	; (8007084 <__kernel_rem_pio2+0x33c>)
 8006f9c:	f7f9 fd5e 	bl	8000a5c <__aeabi_dcmpge>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d139      	bne.n	8007018 <__kernel_rem_pio2+0x2d0>
 8006fa4:	9002      	str	r0, [sp, #8]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	2300      	movs	r3, #0
 8006faa:	4630      	mov	r0, r6
 8006fac:	4639      	mov	r1, r7
 8006fae:	f7f9 fd37 	bl	8000a20 <__aeabi_dcmpeq>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	f000 80c7 	beq.w	8007146 <__kernel_rem_pio2+0x3fe>
 8006fb8:	1e65      	subs	r5, r4, #1
 8006fba:	462b      	mov	r3, r5
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	9904      	ldr	r1, [sp, #16]
 8006fc0:	428b      	cmp	r3, r1
 8006fc2:	da6a      	bge.n	800709a <__kernel_rem_pio2+0x352>
 8006fc4:	2a00      	cmp	r2, #0
 8006fc6:	f000 8088 	beq.w	80070da <__kernel_rem_pio2+0x392>
 8006fca:	ab0e      	add	r3, sp, #56	; 0x38
 8006fcc:	f1aa 0a18 	sub.w	sl, sl, #24
 8006fd0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 80b4 	beq.w	8007142 <__kernel_rem_pio2+0x3fa>
 8006fda:	4650      	mov	r0, sl
 8006fdc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8007068 <__kernel_rem_pio2+0x320>
 8006fe0:	f000 fb3a 	bl	8007658 <scalbn>
 8006fe4:	00ec      	lsls	r4, r5, #3
 8006fe6:	ab72      	add	r3, sp, #456	; 0x1c8
 8006fe8:	191e      	adds	r6, r3, r4
 8006fea:	ec59 8b10 	vmov	r8, r9, d0
 8006fee:	f106 0a08 	add.w	sl, r6, #8
 8006ff2:	462f      	mov	r7, r5
 8006ff4:	2f00      	cmp	r7, #0
 8006ff6:	f280 80df 	bge.w	80071b8 <__kernel_rem_pio2+0x470>
 8006ffa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8007060 <__kernel_rem_pio2+0x318>
 8006ffe:	f04f 0a00 	mov.w	sl, #0
 8007002:	eba5 030a 	sub.w	r3, r5, sl
 8007006:	2b00      	cmp	r3, #0
 8007008:	f2c0 810a 	blt.w	8007220 <__kernel_rem_pio2+0x4d8>
 800700c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8007088 <__kernel_rem_pio2+0x340>
 8007010:	ec59 8b18 	vmov	r8, r9, d8
 8007014:	2700      	movs	r7, #0
 8007016:	e0f5      	b.n	8007204 <__kernel_rem_pio2+0x4bc>
 8007018:	2302      	movs	r3, #2
 800701a:	9302      	str	r3, [sp, #8]
 800701c:	e760      	b.n	8006ee0 <__kernel_rem_pio2+0x198>
 800701e:	ab0e      	add	r3, sp, #56	; 0x38
 8007020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007024:	b94d      	cbnz	r5, 800703a <__kernel_rem_pio2+0x2f2>
 8007026:	b12b      	cbz	r3, 8007034 <__kernel_rem_pio2+0x2ec>
 8007028:	a80e      	add	r0, sp, #56	; 0x38
 800702a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800702e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007032:	2301      	movs	r3, #1
 8007034:	3201      	adds	r2, #1
 8007036:	461d      	mov	r5, r3
 8007038:	e759      	b.n	8006eee <__kernel_rem_pio2+0x1a6>
 800703a:	a80e      	add	r0, sp, #56	; 0x38
 800703c:	1acb      	subs	r3, r1, r3
 800703e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007042:	462b      	mov	r3, r5
 8007044:	e7f6      	b.n	8007034 <__kernel_rem_pio2+0x2ec>
 8007046:	1e62      	subs	r2, r4, #1
 8007048:	ab0e      	add	r3, sp, #56	; 0x38
 800704a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800704e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007052:	a90e      	add	r1, sp, #56	; 0x38
 8007054:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007058:	e757      	b.n	8006f0a <__kernel_rem_pio2+0x1c2>
 800705a:	bf00      	nop
 800705c:	f3af 8000 	nop.w
	...
 800706c:	3ff00000 	.word	0x3ff00000
 8007070:	08010430 	.word	0x08010430
 8007074:	40200000 	.word	0x40200000
 8007078:	3ff00000 	.word	0x3ff00000
 800707c:	3e700000 	.word	0x3e700000
 8007080:	41700000 	.word	0x41700000
 8007084:	3fe00000 	.word	0x3fe00000
 8007088:	080103f0 	.word	0x080103f0
 800708c:	1e62      	subs	r2, r4, #1
 800708e:	ab0e      	add	r3, sp, #56	; 0x38
 8007090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007094:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007098:	e7db      	b.n	8007052 <__kernel_rem_pio2+0x30a>
 800709a:	a90e      	add	r1, sp, #56	; 0x38
 800709c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80070a0:	3b01      	subs	r3, #1
 80070a2:	430a      	orrs	r2, r1
 80070a4:	e78b      	b.n	8006fbe <__kernel_rem_pio2+0x276>
 80070a6:	3301      	adds	r3, #1
 80070a8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80070ac:	2900      	cmp	r1, #0
 80070ae:	d0fa      	beq.n	80070a6 <__kernel_rem_pio2+0x35e>
 80070b0:	9a08      	ldr	r2, [sp, #32]
 80070b2:	4422      	add	r2, r4
 80070b4:	00d2      	lsls	r2, r2, #3
 80070b6:	a922      	add	r1, sp, #136	; 0x88
 80070b8:	18e3      	adds	r3, r4, r3
 80070ba:	9206      	str	r2, [sp, #24]
 80070bc:	440a      	add	r2, r1
 80070be:	9302      	str	r3, [sp, #8]
 80070c0:	f10b 0108 	add.w	r1, fp, #8
 80070c4:	f102 0308 	add.w	r3, r2, #8
 80070c8:	1c66      	adds	r6, r4, #1
 80070ca:	910a      	str	r1, [sp, #40]	; 0x28
 80070cc:	2500      	movs	r5, #0
 80070ce:	930d      	str	r3, [sp, #52]	; 0x34
 80070d0:	9b02      	ldr	r3, [sp, #8]
 80070d2:	42b3      	cmp	r3, r6
 80070d4:	da04      	bge.n	80070e0 <__kernel_rem_pio2+0x398>
 80070d6:	461c      	mov	r4, r3
 80070d8:	e6a6      	b.n	8006e28 <__kernel_rem_pio2+0xe0>
 80070da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070dc:	2301      	movs	r3, #1
 80070de:	e7e3      	b.n	80070a8 <__kernel_rem_pio2+0x360>
 80070e0:	9b06      	ldr	r3, [sp, #24]
 80070e2:	18ef      	adds	r7, r5, r3
 80070e4:	ab22      	add	r3, sp, #136	; 0x88
 80070e6:	441f      	add	r7, r3
 80070e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80070ee:	f7f9 f9c5 	bl	800047c <__aeabi_i2d>
 80070f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070f4:	461c      	mov	r4, r3
 80070f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070f8:	e9c7 0100 	strd	r0, r1, [r7]
 80070fc:	eb03 0b05 	add.w	fp, r3, r5
 8007100:	2700      	movs	r7, #0
 8007102:	f04f 0800 	mov.w	r8, #0
 8007106:	f04f 0900 	mov.w	r9, #0
 800710a:	9b07      	ldr	r3, [sp, #28]
 800710c:	429f      	cmp	r7, r3
 800710e:	dd08      	ble.n	8007122 <__kernel_rem_pio2+0x3da>
 8007110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007112:	aa72      	add	r2, sp, #456	; 0x1c8
 8007114:	18eb      	adds	r3, r5, r3
 8007116:	4413      	add	r3, r2
 8007118:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800711c:	3601      	adds	r6, #1
 800711e:	3508      	adds	r5, #8
 8007120:	e7d6      	b.n	80070d0 <__kernel_rem_pio2+0x388>
 8007122:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007126:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800712a:	f7f9 fa11 	bl	8000550 <__aeabi_dmul>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	4640      	mov	r0, r8
 8007134:	4649      	mov	r1, r9
 8007136:	f7f9 f855 	bl	80001e4 <__adddf3>
 800713a:	3701      	adds	r7, #1
 800713c:	4680      	mov	r8, r0
 800713e:	4689      	mov	r9, r1
 8007140:	e7e3      	b.n	800710a <__kernel_rem_pio2+0x3c2>
 8007142:	3d01      	subs	r5, #1
 8007144:	e741      	b.n	8006fca <__kernel_rem_pio2+0x282>
 8007146:	f1ca 0000 	rsb	r0, sl, #0
 800714a:	ec47 6b10 	vmov	d0, r6, r7
 800714e:	f000 fa83 	bl	8007658 <scalbn>
 8007152:	ec57 6b10 	vmov	r6, r7, d0
 8007156:	2200      	movs	r2, #0
 8007158:	4b99      	ldr	r3, [pc, #612]	; (80073c0 <__kernel_rem_pio2+0x678>)
 800715a:	ee10 0a10 	vmov	r0, s0
 800715e:	4639      	mov	r1, r7
 8007160:	f7f9 fc7c 	bl	8000a5c <__aeabi_dcmpge>
 8007164:	b1f8      	cbz	r0, 80071a6 <__kernel_rem_pio2+0x45e>
 8007166:	2200      	movs	r2, #0
 8007168:	4b96      	ldr	r3, [pc, #600]	; (80073c4 <__kernel_rem_pio2+0x67c>)
 800716a:	4630      	mov	r0, r6
 800716c:	4639      	mov	r1, r7
 800716e:	f7f9 f9ef 	bl	8000550 <__aeabi_dmul>
 8007172:	f7f9 fc9d 	bl	8000ab0 <__aeabi_d2iz>
 8007176:	4680      	mov	r8, r0
 8007178:	f7f9 f980 	bl	800047c <__aeabi_i2d>
 800717c:	2200      	movs	r2, #0
 800717e:	4b90      	ldr	r3, [pc, #576]	; (80073c0 <__kernel_rem_pio2+0x678>)
 8007180:	f7f9 f9e6 	bl	8000550 <__aeabi_dmul>
 8007184:	460b      	mov	r3, r1
 8007186:	4602      	mov	r2, r0
 8007188:	4639      	mov	r1, r7
 800718a:	4630      	mov	r0, r6
 800718c:	f7f9 f828 	bl	80001e0 <__aeabi_dsub>
 8007190:	f7f9 fc8e 	bl	8000ab0 <__aeabi_d2iz>
 8007194:	1c65      	adds	r5, r4, #1
 8007196:	ab0e      	add	r3, sp, #56	; 0x38
 8007198:	f10a 0a18 	add.w	sl, sl, #24
 800719c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80071a0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80071a4:	e719      	b.n	8006fda <__kernel_rem_pio2+0x292>
 80071a6:	4630      	mov	r0, r6
 80071a8:	4639      	mov	r1, r7
 80071aa:	f7f9 fc81 	bl	8000ab0 <__aeabi_d2iz>
 80071ae:	ab0e      	add	r3, sp, #56	; 0x38
 80071b0:	4625      	mov	r5, r4
 80071b2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80071b6:	e710      	b.n	8006fda <__kernel_rem_pio2+0x292>
 80071b8:	ab0e      	add	r3, sp, #56	; 0x38
 80071ba:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80071be:	f7f9 f95d 	bl	800047c <__aeabi_i2d>
 80071c2:	4642      	mov	r2, r8
 80071c4:	464b      	mov	r3, r9
 80071c6:	f7f9 f9c3 	bl	8000550 <__aeabi_dmul>
 80071ca:	2200      	movs	r2, #0
 80071cc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80071d0:	4b7c      	ldr	r3, [pc, #496]	; (80073c4 <__kernel_rem_pio2+0x67c>)
 80071d2:	4640      	mov	r0, r8
 80071d4:	4649      	mov	r1, r9
 80071d6:	f7f9 f9bb 	bl	8000550 <__aeabi_dmul>
 80071da:	3f01      	subs	r7, #1
 80071dc:	4680      	mov	r8, r0
 80071de:	4689      	mov	r9, r1
 80071e0:	e708      	b.n	8006ff4 <__kernel_rem_pio2+0x2ac>
 80071e2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80071e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ea:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80071ee:	f7f9 f9af 	bl	8000550 <__aeabi_dmul>
 80071f2:	4602      	mov	r2, r0
 80071f4:	460b      	mov	r3, r1
 80071f6:	4640      	mov	r0, r8
 80071f8:	4649      	mov	r1, r9
 80071fa:	f7f8 fff3 	bl	80001e4 <__adddf3>
 80071fe:	3701      	adds	r7, #1
 8007200:	4680      	mov	r8, r0
 8007202:	4689      	mov	r9, r1
 8007204:	9b04      	ldr	r3, [sp, #16]
 8007206:	429f      	cmp	r7, r3
 8007208:	dc01      	bgt.n	800720e <__kernel_rem_pio2+0x4c6>
 800720a:	45ba      	cmp	sl, r7
 800720c:	dae9      	bge.n	80071e2 <__kernel_rem_pio2+0x49a>
 800720e:	ab4a      	add	r3, sp, #296	; 0x128
 8007210:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007214:	e9c3 8900 	strd	r8, r9, [r3]
 8007218:	f10a 0a01 	add.w	sl, sl, #1
 800721c:	3e08      	subs	r6, #8
 800721e:	e6f0      	b.n	8007002 <__kernel_rem_pio2+0x2ba>
 8007220:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007222:	2b03      	cmp	r3, #3
 8007224:	d85b      	bhi.n	80072de <__kernel_rem_pio2+0x596>
 8007226:	e8df f003 	tbb	[pc, r3]
 800722a:	264a      	.short	0x264a
 800722c:	0226      	.short	0x0226
 800722e:	ab9a      	add	r3, sp, #616	; 0x268
 8007230:	441c      	add	r4, r3
 8007232:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007236:	46a2      	mov	sl, r4
 8007238:	46ab      	mov	fp, r5
 800723a:	f1bb 0f00 	cmp.w	fp, #0
 800723e:	dc6c      	bgt.n	800731a <__kernel_rem_pio2+0x5d2>
 8007240:	46a2      	mov	sl, r4
 8007242:	46ab      	mov	fp, r5
 8007244:	f1bb 0f01 	cmp.w	fp, #1
 8007248:	f300 8086 	bgt.w	8007358 <__kernel_rem_pio2+0x610>
 800724c:	2000      	movs	r0, #0
 800724e:	2100      	movs	r1, #0
 8007250:	2d01      	cmp	r5, #1
 8007252:	f300 80a0 	bgt.w	8007396 <__kernel_rem_pio2+0x64e>
 8007256:	9b02      	ldr	r3, [sp, #8]
 8007258:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800725c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8007260:	2b00      	cmp	r3, #0
 8007262:	f040 809e 	bne.w	80073a2 <__kernel_rem_pio2+0x65a>
 8007266:	9b01      	ldr	r3, [sp, #4]
 8007268:	e9c3 7800 	strd	r7, r8, [r3]
 800726c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007270:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007274:	e033      	b.n	80072de <__kernel_rem_pio2+0x596>
 8007276:	3408      	adds	r4, #8
 8007278:	ab4a      	add	r3, sp, #296	; 0x128
 800727a:	441c      	add	r4, r3
 800727c:	462e      	mov	r6, r5
 800727e:	2000      	movs	r0, #0
 8007280:	2100      	movs	r1, #0
 8007282:	2e00      	cmp	r6, #0
 8007284:	da3a      	bge.n	80072fc <__kernel_rem_pio2+0x5b4>
 8007286:	9b02      	ldr	r3, [sp, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d03d      	beq.n	8007308 <__kernel_rem_pio2+0x5c0>
 800728c:	4602      	mov	r2, r0
 800728e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007292:	9c01      	ldr	r4, [sp, #4]
 8007294:	e9c4 2300 	strd	r2, r3, [r4]
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80072a0:	f7f8 ff9e 	bl	80001e0 <__aeabi_dsub>
 80072a4:	ae4c      	add	r6, sp, #304	; 0x130
 80072a6:	2401      	movs	r4, #1
 80072a8:	42a5      	cmp	r5, r4
 80072aa:	da30      	bge.n	800730e <__kernel_rem_pio2+0x5c6>
 80072ac:	9b02      	ldr	r3, [sp, #8]
 80072ae:	b113      	cbz	r3, 80072b6 <__kernel_rem_pio2+0x56e>
 80072b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072b4:	4619      	mov	r1, r3
 80072b6:	9b01      	ldr	r3, [sp, #4]
 80072b8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80072bc:	e00f      	b.n	80072de <__kernel_rem_pio2+0x596>
 80072be:	ab9a      	add	r3, sp, #616	; 0x268
 80072c0:	441c      	add	r4, r3
 80072c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80072c6:	2000      	movs	r0, #0
 80072c8:	2100      	movs	r1, #0
 80072ca:	2d00      	cmp	r5, #0
 80072cc:	da10      	bge.n	80072f0 <__kernel_rem_pio2+0x5a8>
 80072ce:	9b02      	ldr	r3, [sp, #8]
 80072d0:	b113      	cbz	r3, 80072d8 <__kernel_rem_pio2+0x590>
 80072d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072d6:	4619      	mov	r1, r3
 80072d8:	9b01      	ldr	r3, [sp, #4]
 80072da:	e9c3 0100 	strd	r0, r1, [r3]
 80072de:	9b06      	ldr	r3, [sp, #24]
 80072e0:	f003 0007 	and.w	r0, r3, #7
 80072e4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80072e8:	ecbd 8b02 	vpop	{d8}
 80072ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80072f4:	f7f8 ff76 	bl	80001e4 <__adddf3>
 80072f8:	3d01      	subs	r5, #1
 80072fa:	e7e6      	b.n	80072ca <__kernel_rem_pio2+0x582>
 80072fc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007300:	f7f8 ff70 	bl	80001e4 <__adddf3>
 8007304:	3e01      	subs	r6, #1
 8007306:	e7bc      	b.n	8007282 <__kernel_rem_pio2+0x53a>
 8007308:	4602      	mov	r2, r0
 800730a:	460b      	mov	r3, r1
 800730c:	e7c1      	b.n	8007292 <__kernel_rem_pio2+0x54a>
 800730e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007312:	f7f8 ff67 	bl	80001e4 <__adddf3>
 8007316:	3401      	adds	r4, #1
 8007318:	e7c6      	b.n	80072a8 <__kernel_rem_pio2+0x560>
 800731a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800731e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007322:	4640      	mov	r0, r8
 8007324:	ec53 2b17 	vmov	r2, r3, d7
 8007328:	4649      	mov	r1, r9
 800732a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800732e:	f7f8 ff59 	bl	80001e4 <__adddf3>
 8007332:	4602      	mov	r2, r0
 8007334:	460b      	mov	r3, r1
 8007336:	4606      	mov	r6, r0
 8007338:	460f      	mov	r7, r1
 800733a:	4640      	mov	r0, r8
 800733c:	4649      	mov	r1, r9
 800733e:	f7f8 ff4f 	bl	80001e0 <__aeabi_dsub>
 8007342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007346:	f7f8 ff4d 	bl	80001e4 <__adddf3>
 800734a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800734e:	e9ca 0100 	strd	r0, r1, [sl]
 8007352:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8007356:	e770      	b.n	800723a <__kernel_rem_pio2+0x4f2>
 8007358:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800735c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007360:	4630      	mov	r0, r6
 8007362:	ec53 2b17 	vmov	r2, r3, d7
 8007366:	4639      	mov	r1, r7
 8007368:	ed8d 7b04 	vstr	d7, [sp, #16]
 800736c:	f7f8 ff3a 	bl	80001e4 <__adddf3>
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	4680      	mov	r8, r0
 8007376:	4689      	mov	r9, r1
 8007378:	4630      	mov	r0, r6
 800737a:	4639      	mov	r1, r7
 800737c:	f7f8 ff30 	bl	80001e0 <__aeabi_dsub>
 8007380:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007384:	f7f8 ff2e 	bl	80001e4 <__adddf3>
 8007388:	f10b 3bff 	add.w	fp, fp, #4294967295
 800738c:	e9ca 0100 	strd	r0, r1, [sl]
 8007390:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8007394:	e756      	b.n	8007244 <__kernel_rem_pio2+0x4fc>
 8007396:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800739a:	f7f8 ff23 	bl	80001e4 <__adddf3>
 800739e:	3d01      	subs	r5, #1
 80073a0:	e756      	b.n	8007250 <__kernel_rem_pio2+0x508>
 80073a2:	9b01      	ldr	r3, [sp, #4]
 80073a4:	9a01      	ldr	r2, [sp, #4]
 80073a6:	601f      	str	r7, [r3, #0]
 80073a8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80073ac:	605c      	str	r4, [r3, #4]
 80073ae:	609d      	str	r5, [r3, #8]
 80073b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80073b4:	60d3      	str	r3, [r2, #12]
 80073b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073ba:	6110      	str	r0, [r2, #16]
 80073bc:	6153      	str	r3, [r2, #20]
 80073be:	e78e      	b.n	80072de <__kernel_rem_pio2+0x596>
 80073c0:	41700000 	.word	0x41700000
 80073c4:	3e700000 	.word	0x3e700000

080073c8 <__kernel_sin>:
 80073c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	ec55 4b10 	vmov	r4, r5, d0
 80073d0:	b085      	sub	sp, #20
 80073d2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80073d6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80073da:	ed8d 1b00 	vstr	d1, [sp]
 80073de:	9002      	str	r0, [sp, #8]
 80073e0:	da06      	bge.n	80073f0 <__kernel_sin+0x28>
 80073e2:	ee10 0a10 	vmov	r0, s0
 80073e6:	4629      	mov	r1, r5
 80073e8:	f7f9 fb62 	bl	8000ab0 <__aeabi_d2iz>
 80073ec:	2800      	cmp	r0, #0
 80073ee:	d051      	beq.n	8007494 <__kernel_sin+0xcc>
 80073f0:	4622      	mov	r2, r4
 80073f2:	462b      	mov	r3, r5
 80073f4:	4620      	mov	r0, r4
 80073f6:	4629      	mov	r1, r5
 80073f8:	f7f9 f8aa 	bl	8000550 <__aeabi_dmul>
 80073fc:	4682      	mov	sl, r0
 80073fe:	468b      	mov	fp, r1
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4620      	mov	r0, r4
 8007406:	4629      	mov	r1, r5
 8007408:	f7f9 f8a2 	bl	8000550 <__aeabi_dmul>
 800740c:	a341      	add	r3, pc, #260	; (adr r3, 8007514 <__kernel_sin+0x14c>)
 800740e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007412:	4680      	mov	r8, r0
 8007414:	4689      	mov	r9, r1
 8007416:	4650      	mov	r0, sl
 8007418:	4659      	mov	r1, fp
 800741a:	f7f9 f899 	bl	8000550 <__aeabi_dmul>
 800741e:	a33f      	add	r3, pc, #252	; (adr r3, 800751c <__kernel_sin+0x154>)
 8007420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007424:	f7f8 fedc 	bl	80001e0 <__aeabi_dsub>
 8007428:	4652      	mov	r2, sl
 800742a:	465b      	mov	r3, fp
 800742c:	f7f9 f890 	bl	8000550 <__aeabi_dmul>
 8007430:	a33c      	add	r3, pc, #240	; (adr r3, 8007524 <__kernel_sin+0x15c>)
 8007432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007436:	f7f8 fed5 	bl	80001e4 <__adddf3>
 800743a:	4652      	mov	r2, sl
 800743c:	465b      	mov	r3, fp
 800743e:	f7f9 f887 	bl	8000550 <__aeabi_dmul>
 8007442:	a33a      	add	r3, pc, #232	; (adr r3, 800752c <__kernel_sin+0x164>)
 8007444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007448:	f7f8 feca 	bl	80001e0 <__aeabi_dsub>
 800744c:	4652      	mov	r2, sl
 800744e:	465b      	mov	r3, fp
 8007450:	f7f9 f87e 	bl	8000550 <__aeabi_dmul>
 8007454:	a337      	add	r3, pc, #220	; (adr r3, 8007534 <__kernel_sin+0x16c>)
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	f7f8 fec3 	bl	80001e4 <__adddf3>
 800745e:	9b02      	ldr	r3, [sp, #8]
 8007460:	4606      	mov	r6, r0
 8007462:	460f      	mov	r7, r1
 8007464:	b9db      	cbnz	r3, 800749e <__kernel_sin+0xd6>
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	4650      	mov	r0, sl
 800746c:	4659      	mov	r1, fp
 800746e:	f7f9 f86f 	bl	8000550 <__aeabi_dmul>
 8007472:	a325      	add	r3, pc, #148	; (adr r3, 8007508 <__kernel_sin+0x140>)
 8007474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007478:	f7f8 feb2 	bl	80001e0 <__aeabi_dsub>
 800747c:	4642      	mov	r2, r8
 800747e:	464b      	mov	r3, r9
 8007480:	f7f9 f866 	bl	8000550 <__aeabi_dmul>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	4620      	mov	r0, r4
 800748a:	4629      	mov	r1, r5
 800748c:	f7f8 feaa 	bl	80001e4 <__adddf3>
 8007490:	4604      	mov	r4, r0
 8007492:	460d      	mov	r5, r1
 8007494:	ec45 4b10 	vmov	d0, r4, r5
 8007498:	b005      	add	sp, #20
 800749a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800749e:	2200      	movs	r2, #0
 80074a0:	4b1b      	ldr	r3, [pc, #108]	; (8007510 <__kernel_sin+0x148>)
 80074a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074a6:	f7f9 f853 	bl	8000550 <__aeabi_dmul>
 80074aa:	4632      	mov	r2, r6
 80074ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074b0:	463b      	mov	r3, r7
 80074b2:	4640      	mov	r0, r8
 80074b4:	4649      	mov	r1, r9
 80074b6:	f7f9 f84b 	bl	8000550 <__aeabi_dmul>
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074c2:	f7f8 fe8d 	bl	80001e0 <__aeabi_dsub>
 80074c6:	4652      	mov	r2, sl
 80074c8:	465b      	mov	r3, fp
 80074ca:	f7f9 f841 	bl	8000550 <__aeabi_dmul>
 80074ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074d2:	f7f8 fe85 	bl	80001e0 <__aeabi_dsub>
 80074d6:	a30c      	add	r3, pc, #48	; (adr r3, 8007508 <__kernel_sin+0x140>)
 80074d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074dc:	4606      	mov	r6, r0
 80074de:	460f      	mov	r7, r1
 80074e0:	4640      	mov	r0, r8
 80074e2:	4649      	mov	r1, r9
 80074e4:	f7f9 f834 	bl	8000550 <__aeabi_dmul>
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	4630      	mov	r0, r6
 80074ee:	4639      	mov	r1, r7
 80074f0:	f7f8 fe78 	bl	80001e4 <__adddf3>
 80074f4:	4602      	mov	r2, r0
 80074f6:	460b      	mov	r3, r1
 80074f8:	4620      	mov	r0, r4
 80074fa:	4629      	mov	r1, r5
 80074fc:	f7f8 fe70 	bl	80001e0 <__aeabi_dsub>
 8007500:	e7c6      	b.n	8007490 <__kernel_sin+0xc8>
 8007502:	bf00      	nop
 8007504:	f3af 8000 	nop.w
 8007508:	55555549 	.word	0x55555549
 800750c:	3fc55555 	.word	0x3fc55555
 8007510:	3fe00000 	.word	0x3fe00000
 8007514:	5acfd57c 	.word	0x5acfd57c
 8007518:	3de5d93a 	.word	0x3de5d93a
 800751c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007520:	3e5ae5e6 	.word	0x3e5ae5e6
 8007524:	57b1fe7d 	.word	0x57b1fe7d
 8007528:	3ec71de3 	.word	0x3ec71de3
 800752c:	19c161d5 	.word	0x19c161d5
 8007530:	3f2a01a0 	.word	0x3f2a01a0
 8007534:	1110f8a6 	.word	0x1110f8a6
 8007538:	3f811111 	.word	0x3f811111

0800753c <fabs>:
 800753c:	ec51 0b10 	vmov	r0, r1, d0
 8007540:	ee10 2a10 	vmov	r2, s0
 8007544:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007548:	ec43 2b10 	vmov	d0, r2, r3
 800754c:	4770      	bx	lr
	...

08007550 <floor>:
 8007550:	ec51 0b10 	vmov	r0, r1, d0
 8007554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007558:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800755c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007560:	2e13      	cmp	r6, #19
 8007562:	460c      	mov	r4, r1
 8007564:	ee10 5a10 	vmov	r5, s0
 8007568:	4680      	mov	r8, r0
 800756a:	dc34      	bgt.n	80075d6 <floor+0x86>
 800756c:	2e00      	cmp	r6, #0
 800756e:	da16      	bge.n	800759e <floor+0x4e>
 8007570:	a335      	add	r3, pc, #212	; (adr r3, 8007648 <floor+0xf8>)
 8007572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007576:	f7f8 fe35 	bl	80001e4 <__adddf3>
 800757a:	2200      	movs	r2, #0
 800757c:	2300      	movs	r3, #0
 800757e:	f7f9 fa77 	bl	8000a70 <__aeabi_dcmpgt>
 8007582:	b148      	cbz	r0, 8007598 <floor+0x48>
 8007584:	2c00      	cmp	r4, #0
 8007586:	da59      	bge.n	800763c <floor+0xec>
 8007588:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800758c:	4a30      	ldr	r2, [pc, #192]	; (8007650 <floor+0x100>)
 800758e:	432b      	orrs	r3, r5
 8007590:	2500      	movs	r5, #0
 8007592:	42ab      	cmp	r3, r5
 8007594:	bf18      	it	ne
 8007596:	4614      	movne	r4, r2
 8007598:	4621      	mov	r1, r4
 800759a:	4628      	mov	r0, r5
 800759c:	e025      	b.n	80075ea <floor+0x9a>
 800759e:	4f2d      	ldr	r7, [pc, #180]	; (8007654 <floor+0x104>)
 80075a0:	4137      	asrs	r7, r6
 80075a2:	ea01 0307 	and.w	r3, r1, r7
 80075a6:	4303      	orrs	r3, r0
 80075a8:	d01f      	beq.n	80075ea <floor+0x9a>
 80075aa:	a327      	add	r3, pc, #156	; (adr r3, 8007648 <floor+0xf8>)
 80075ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b0:	f7f8 fe18 	bl	80001e4 <__adddf3>
 80075b4:	2200      	movs	r2, #0
 80075b6:	2300      	movs	r3, #0
 80075b8:	f7f9 fa5a 	bl	8000a70 <__aeabi_dcmpgt>
 80075bc:	2800      	cmp	r0, #0
 80075be:	d0eb      	beq.n	8007598 <floor+0x48>
 80075c0:	2c00      	cmp	r4, #0
 80075c2:	bfbe      	ittt	lt
 80075c4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80075c8:	fa43 f606 	asrlt.w	r6, r3, r6
 80075cc:	19a4      	addlt	r4, r4, r6
 80075ce:	ea24 0407 	bic.w	r4, r4, r7
 80075d2:	2500      	movs	r5, #0
 80075d4:	e7e0      	b.n	8007598 <floor+0x48>
 80075d6:	2e33      	cmp	r6, #51	; 0x33
 80075d8:	dd0b      	ble.n	80075f2 <floor+0xa2>
 80075da:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80075de:	d104      	bne.n	80075ea <floor+0x9a>
 80075e0:	ee10 2a10 	vmov	r2, s0
 80075e4:	460b      	mov	r3, r1
 80075e6:	f7f8 fdfd 	bl	80001e4 <__adddf3>
 80075ea:	ec41 0b10 	vmov	d0, r0, r1
 80075ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075f2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80075f6:	f04f 33ff 	mov.w	r3, #4294967295
 80075fa:	fa23 f707 	lsr.w	r7, r3, r7
 80075fe:	4207      	tst	r7, r0
 8007600:	d0f3      	beq.n	80075ea <floor+0x9a>
 8007602:	a311      	add	r3, pc, #68	; (adr r3, 8007648 <floor+0xf8>)
 8007604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007608:	f7f8 fdec 	bl	80001e4 <__adddf3>
 800760c:	2200      	movs	r2, #0
 800760e:	2300      	movs	r3, #0
 8007610:	f7f9 fa2e 	bl	8000a70 <__aeabi_dcmpgt>
 8007614:	2800      	cmp	r0, #0
 8007616:	d0bf      	beq.n	8007598 <floor+0x48>
 8007618:	2c00      	cmp	r4, #0
 800761a:	da02      	bge.n	8007622 <floor+0xd2>
 800761c:	2e14      	cmp	r6, #20
 800761e:	d103      	bne.n	8007628 <floor+0xd8>
 8007620:	3401      	adds	r4, #1
 8007622:	ea25 0507 	bic.w	r5, r5, r7
 8007626:	e7b7      	b.n	8007598 <floor+0x48>
 8007628:	2301      	movs	r3, #1
 800762a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800762e:	fa03 f606 	lsl.w	r6, r3, r6
 8007632:	4435      	add	r5, r6
 8007634:	4545      	cmp	r5, r8
 8007636:	bf38      	it	cc
 8007638:	18e4      	addcc	r4, r4, r3
 800763a:	e7f2      	b.n	8007622 <floor+0xd2>
 800763c:	2500      	movs	r5, #0
 800763e:	462c      	mov	r4, r5
 8007640:	e7aa      	b.n	8007598 <floor+0x48>
 8007642:	bf00      	nop
 8007644:	f3af 8000 	nop.w
 8007648:	8800759c 	.word	0x8800759c
 800764c:	7e37e43c 	.word	0x7e37e43c
 8007650:	bff00000 	.word	0xbff00000
 8007654:	000fffff 	.word	0x000fffff

08007658 <scalbn>:
 8007658:	b570      	push	{r4, r5, r6, lr}
 800765a:	ec55 4b10 	vmov	r4, r5, d0
 800765e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007662:	4606      	mov	r6, r0
 8007664:	462b      	mov	r3, r5
 8007666:	b9aa      	cbnz	r2, 8007694 <scalbn+0x3c>
 8007668:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800766c:	4323      	orrs	r3, r4
 800766e:	d03b      	beq.n	80076e8 <scalbn+0x90>
 8007670:	4b31      	ldr	r3, [pc, #196]	; (8007738 <scalbn+0xe0>)
 8007672:	4629      	mov	r1, r5
 8007674:	2200      	movs	r2, #0
 8007676:	ee10 0a10 	vmov	r0, s0
 800767a:	f7f8 ff69 	bl	8000550 <__aeabi_dmul>
 800767e:	4b2f      	ldr	r3, [pc, #188]	; (800773c <scalbn+0xe4>)
 8007680:	429e      	cmp	r6, r3
 8007682:	4604      	mov	r4, r0
 8007684:	460d      	mov	r5, r1
 8007686:	da12      	bge.n	80076ae <scalbn+0x56>
 8007688:	a327      	add	r3, pc, #156	; (adr r3, 8007728 <scalbn+0xd0>)
 800768a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768e:	f7f8 ff5f 	bl	8000550 <__aeabi_dmul>
 8007692:	e009      	b.n	80076a8 <scalbn+0x50>
 8007694:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007698:	428a      	cmp	r2, r1
 800769a:	d10c      	bne.n	80076b6 <scalbn+0x5e>
 800769c:	ee10 2a10 	vmov	r2, s0
 80076a0:	4620      	mov	r0, r4
 80076a2:	4629      	mov	r1, r5
 80076a4:	f7f8 fd9e 	bl	80001e4 <__adddf3>
 80076a8:	4604      	mov	r4, r0
 80076aa:	460d      	mov	r5, r1
 80076ac:	e01c      	b.n	80076e8 <scalbn+0x90>
 80076ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80076b2:	460b      	mov	r3, r1
 80076b4:	3a36      	subs	r2, #54	; 0x36
 80076b6:	4432      	add	r2, r6
 80076b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80076bc:	428a      	cmp	r2, r1
 80076be:	dd0b      	ble.n	80076d8 <scalbn+0x80>
 80076c0:	ec45 4b11 	vmov	d1, r4, r5
 80076c4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007730 <scalbn+0xd8>
 80076c8:	f000 f83c 	bl	8007744 <copysign>
 80076cc:	a318      	add	r3, pc, #96	; (adr r3, 8007730 <scalbn+0xd8>)
 80076ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d2:	ec51 0b10 	vmov	r0, r1, d0
 80076d6:	e7da      	b.n	800768e <scalbn+0x36>
 80076d8:	2a00      	cmp	r2, #0
 80076da:	dd08      	ble.n	80076ee <scalbn+0x96>
 80076dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80076e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80076e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80076e8:	ec45 4b10 	vmov	d0, r4, r5
 80076ec:	bd70      	pop	{r4, r5, r6, pc}
 80076ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80076f2:	da0d      	bge.n	8007710 <scalbn+0xb8>
 80076f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80076f8:	429e      	cmp	r6, r3
 80076fa:	ec45 4b11 	vmov	d1, r4, r5
 80076fe:	dce1      	bgt.n	80076c4 <scalbn+0x6c>
 8007700:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007728 <scalbn+0xd0>
 8007704:	f000 f81e 	bl	8007744 <copysign>
 8007708:	a307      	add	r3, pc, #28	; (adr r3, 8007728 <scalbn+0xd0>)
 800770a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770e:	e7e0      	b.n	80076d2 <scalbn+0x7a>
 8007710:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007714:	3236      	adds	r2, #54	; 0x36
 8007716:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800771a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800771e:	4620      	mov	r0, r4
 8007720:	4629      	mov	r1, r5
 8007722:	2200      	movs	r2, #0
 8007724:	4b06      	ldr	r3, [pc, #24]	; (8007740 <scalbn+0xe8>)
 8007726:	e7b2      	b.n	800768e <scalbn+0x36>
 8007728:	c2f8f359 	.word	0xc2f8f359
 800772c:	01a56e1f 	.word	0x01a56e1f
 8007730:	8800759c 	.word	0x8800759c
 8007734:	7e37e43c 	.word	0x7e37e43c
 8007738:	43500000 	.word	0x43500000
 800773c:	ffff3cb0 	.word	0xffff3cb0
 8007740:	3c900000 	.word	0x3c900000

08007744 <copysign>:
 8007744:	ec51 0b10 	vmov	r0, r1, d0
 8007748:	ee11 0a90 	vmov	r0, s3
 800774c:	ee10 2a10 	vmov	r2, s0
 8007750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007754:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007758:	ea41 0300 	orr.w	r3, r1, r0
 800775c:	ec43 2b10 	vmov	d0, r2, r3
 8007760:	4770      	bx	lr
	...

08007764 <_init>:
 8007764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007766:	bf00      	nop
 8007768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776a:	bc08      	pop	{r3}
 800776c:	469e      	mov	lr, r3
 800776e:	4770      	bx	lr

08007770 <_fini>:
 8007770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007772:	bf00      	nop
 8007774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007776:	bc08      	pop	{r3}
 8007778:	469e      	mov	lr, r3
 800777a:	4770      	bx	lr
