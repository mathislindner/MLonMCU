
DFSDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004980  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004b10  08004b10  00014b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bf8  08004bf8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004bf8  08004bf8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bf8  08004bf8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bf8  08004bf8  00014bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bfc  08004bfc  00014bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002188  20000070  08004c70  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  200021f8  08004c70  000221f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de41  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001eac  00000000  00000000  0002dee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc8  00000000  00000000  0002fd90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad0  00000000  00000000  00030958  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026ad1  00000000  00000000  00031428  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000096fc  00000000  00000000  00057ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8efa  00000000  00000000  000615f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a4ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003644  00000000  00000000  0014a56c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004af8 	.word	0x08004af8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004af8 	.word	0x08004af8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the serial port and Loop until the end of transmission */
  while (HAL_OK != HAL_USART_Transmit(&husart1, (uint8_t *) &ch, 1, 30000))
 8000278:	bf00      	nop
 800027a:	1d39      	adds	r1, r7, #4
 800027c:	f247 5330 	movw	r3, #30000	; 0x7530
 8000280:	2201      	movs	r2, #1
 8000282:	4805      	ldr	r0, [pc, #20]	; (8000298 <__io_putchar+0x28>)
 8000284:	f003 f9cc 	bl	8003620 <HAL_USART_Transmit>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d1f5      	bne.n	800027a <__io_putchar+0xa>
  {
    ;
  }
  return ch;
 800028e:	687b      	ldr	r3, [r7, #4]
}
 8000290:	4618      	mov	r0, r3
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20002168 	.word	0x20002168

0800029c <__io_getchar>:
  * @brief Retargets the C library scanf function to the USART.
  * @param None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. readwrite a character to the USART2 and Loop until the end of transmission */
  uint8_t ch = 0;
 80002a2:	2300      	movs	r3, #0
 80002a4:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_USART_Receive(&husart1, (uint8_t *)&ch, 1, 30000))
 80002a6:	bf00      	nop
 80002a8:	1df9      	adds	r1, r7, #7
 80002aa:	f247 5330 	movw	r3, #30000	; 0x7530
 80002ae:	2201      	movs	r2, #1
 80002b0:	4805      	ldr	r0, [pc, #20]	; (80002c8 <__io_getchar+0x2c>)
 80002b2:	f003 fa63 	bl	800377c <HAL_USART_Receive>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d1f5      	bne.n	80002a8 <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 80002bc:	79fb      	ldrb	r3, [r7, #7]
}
 80002be:	4618      	mov	r0, r3
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	20002168 	.word	0x20002168

080002cc <HAL_DFSDM_FilterRegConvCpltCallback>:


void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	firstHalfFull = true;
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	701a      	strb	r2, [r3, #0]
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	2000008c 	.word	0x2000008c

080002ec <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
	secondHalfFull = true;
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	701a      	strb	r2, [r3, #0]
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	2000008d 	.word	0x2000008d

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000312:	f000 fc4e 	bl	8000bb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000316:	f000 f863 	bl	80003e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031a:	f000 f98d 	bl	8000638 <MX_GPIO_Init>
  MX_DMA_Init();
 800031e:	f000 f96d 	bl	80005fc <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000322:	f000 f8d9 	bl	80004d8 <MX_DFSDM1_Init>
  MX_USART1_Init();
 8000326:	f000 f93d 	bl	80005a4 <MX_USART1_Init>
  /* USER CODE BEGIN 2 */
	if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RecBuff, QUEUELENGTH)){
 800032a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800032e:	4926      	ldr	r1, [pc, #152]	; (80003c8 <main+0xbc>)
 8000330:	4826      	ldr	r0, [pc, #152]	; (80003cc <main+0xc0>)
 8000332:	f000 ffb5 	bl	80012a0 <HAL_DFSDM_FilterRegularStart_DMA>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <main+0x34>
    Error_Handler();
 800033c:	f000 f9ac 	bl	8000698 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(firstHalfFull){
 8000340:	4b23      	ldr	r3, [pc, #140]	; (80003d0 <main+0xc4>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	b2db      	uxtb	r3, r3
 8000346:	2b00      	cmp	r3, #0
 8000348:	d01b      	beq.n	8000382 <main+0x76>
			for(int i=0;i<QUEUELENGTH/2;i++){
 800034a:	2300      	movs	r3, #0
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	e011      	b.n	8000374 <main+0x68>
				amplitude = (int16_t)(RecBuff[i]>>8);
 8000350:	4a1d      	ldr	r2, [pc, #116]	; (80003c8 <main+0xbc>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000358:	121b      	asrs	r3, r3, #8
 800035a:	b21a      	sxth	r2, r3
 800035c:	4b1d      	ldr	r3, [pc, #116]	; (80003d4 <main+0xc8>)
 800035e:	801a      	strh	r2, [r3, #0]
				printf("%i\r\n",amplitude);
 8000360:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <main+0xc8>)
 8000362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000366:	4619      	mov	r1, r3
 8000368:	481b      	ldr	r0, [pc, #108]	; (80003d8 <main+0xcc>)
 800036a:	f003 fce1 	bl	8003d30 <iprintf>
			for(int i=0;i<QUEUELENGTH/2;i++){
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	3301      	adds	r3, #1
 8000372:	607b      	str	r3, [r7, #4]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800037a:	dbe9      	blt.n	8000350 <main+0x44>
			}
			firstHalfFull = false;
 800037c:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <main+0xc4>)
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]
		}
		if(secondHalfFull){
 8000382:	4b16      	ldr	r3, [pc, #88]	; (80003dc <main+0xd0>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	b2db      	uxtb	r3, r3
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <main+0x34>
			for(int i=QUEUELENGTH/2;i<QUEUELENGTH;i++){
 800038c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000390:	603b      	str	r3, [r7, #0]
 8000392:	e011      	b.n	80003b8 <main+0xac>
				amplitude = (int16_t)(RecBuff[i]>>8);
 8000394:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <main+0xbc>)
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800039c:	121b      	asrs	r3, r3, #8
 800039e:	b21a      	sxth	r2, r3
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <main+0xc8>)
 80003a2:	801a      	strh	r2, [r3, #0]
				printf("%i\r\n",amplitude);
 80003a4:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <main+0xc8>)
 80003a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003aa:	4619      	mov	r1, r3
 80003ac:	480a      	ldr	r0, [pc, #40]	; (80003d8 <main+0xcc>)
 80003ae:	f003 fcbf 	bl	8003d30 <iprintf>
			for(int i=QUEUELENGTH/2;i<QUEUELENGTH;i++){
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	3301      	adds	r3, #1
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003be:	dbe9      	blt.n	8000394 <main+0x88>
			}
			secondHalfFull = false;
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <main+0xd0>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	701a      	strb	r2, [r3, #0]
		if(firstHalfFull){
 80003c6:	e7bb      	b.n	8000340 <main+0x34>
 80003c8:	200000c8 	.word	0x200000c8
 80003cc:	200020c8 	.word	0x200020c8
 80003d0:	2000008c 	.word	0x2000008c
 80003d4:	2000211c 	.word	0x2000211c
 80003d8:	08004b10 	.word	0x08004b10
 80003dc:	2000008d 	.word	0x2000008d

080003e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b0b8      	sub	sp, #224	; 0xe0
 80003e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80003ea:	2244      	movs	r2, #68	; 0x44
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f003 fc96 	bl	8003d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
 8000402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000404:	463b      	mov	r3, r7
 8000406:	2288      	movs	r2, #136	; 0x88
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f003 fc88 	bl	8003d20 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000410:	2310      	movs	r3, #16
 8000412:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000416:	2301      	movs	r3, #1
 8000418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800041c:	2300      	movs	r3, #0
 800041e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000422:	2360      	movs	r3, #96	; 0x60
 8000424:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000428:	2302      	movs	r3, #2
 800042a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800042e:	2301      	movs	r3, #1
 8000430:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000434:	2301      	movs	r3, #1
 8000436:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800043a:	2328      	movs	r3, #40	; 0x28
 800043c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000440:	2307      	movs	r3, #7
 8000442:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000446:	2302      	movs	r3, #2
 8000448:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800044c:	2302      	movs	r3, #2
 800044e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000452:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000456:	4618      	mov	r0, r3
 8000458:	f001 fdfe 	bl	8002058 <HAL_RCC_OscConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000462:	f000 f919 	bl	8000698 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000466:	230f      	movs	r3, #15
 8000468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046c:	2303      	movs	r3, #3
 800046e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800047e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000482:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000486:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800048a:	2104      	movs	r1, #4
 800048c:	4618      	mov	r0, r3
 800048e:	f002 f9c9 	bl	8002824 <HAL_RCC_ClockConfig>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000498:	f000 f8fe 	bl	8000698 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_DFSDM1;
 800049c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80004a0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80004a2:	2301      	movs	r3, #1
 80004a4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80004a6:	2300      	movs	r3, #0
 80004a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ac:	463b      	mov	r3, r7
 80004ae:	4618      	mov	r0, r3
 80004b0:	f002 fbbc 	bl	8002c2c <HAL_RCCEx_PeriphCLKConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0xde>
  {
    Error_Handler();
 80004ba:	f000 f8ed 	bl	8000698 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004c2:	f001 fd73 	bl	8001fac <HAL_PWREx_ControlVoltageScaling>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80004cc:	f000 f8e4 	bl	8000698 <Error_Handler>
  }
}
 80004d0:	bf00      	nop
 80004d2:	37e0      	adds	r7, #224	; 0xe0
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80004dc:	4b2c      	ldr	r3, [pc, #176]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 80004de:	4a2d      	ldr	r2, [pc, #180]	; (8000594 <MX_DFSDM1_Init+0xbc>)
 80004e0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80004e2:	4b2b      	ldr	r3, [pc, #172]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80004e8:	4b29      	ldr	r3, [pc, #164]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80004ee:	4b28      	ldr	r3, [pc, #160]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80004f4:	4b26      	ldr	r3, [pc, #152]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 80004f6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80004fa:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 32;
 80004fc:	4b24      	ldr	r3, [pc, #144]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 80004fe:	2220      	movs	r2, #32
 8000500:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000502:	4b23      	ldr	r3, [pc, #140]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 8000504:	2201      	movs	r2, #1
 8000506:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000508:	4821      	ldr	r0, [pc, #132]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 800050a:	f000 fda9 	bl	8001060 <HAL_DFSDM_FilterInit>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000514:	f000 f8c0 	bl	8000698 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000518:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 800051a:	4a20      	ldr	r2, [pc, #128]	; (800059c <MX_DFSDM1_Init+0xc4>)
 800051c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800051e:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000520:	2201      	movs	r2, #1
 8000522:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000524:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 62;
 800052a:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 800052c:	223e      	movs	r2, #62	; 0x3e
 800052e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000530:	4b19      	ldr	r3, [pc, #100]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000536:	4b18      	ldr	r3, [pc, #96]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000538:	2200      	movs	r2, #0
 800053a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800053c:	4b16      	ldr	r3, [pc, #88]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 800053e:	2200      	movs	r2, #0
 8000540:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000544:	2200      	movs	r2, #0
 8000546:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000548:	4b13      	ldr	r3, [pc, #76]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 800054a:	2204      	movs	r2, #4
 800054c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000550:	2200      	movs	r2, #0
 8000552:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000554:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000556:	2201      	movs	r2, #1
 8000558:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 800055c:	2200      	movs	r2, #0
 800055e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000560:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000562:	2200      	movs	r2, #0
 8000564:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000566:	480c      	ldr	r0, [pc, #48]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000568:	f000 fca6 	bl	8000eb8 <HAL_DFSDM_ChannelInit>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000572:	f000 f891 	bl	8000698 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000576:	2201      	movs	r2, #1
 8000578:	4909      	ldr	r1, [pc, #36]	; (80005a0 <MX_DFSDM1_Init+0xc8>)
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 800057c:	f000 fe4a 	bl	8001214 <HAL_DFSDM_FilterConfigRegChannel>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000586:	f000 f887 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	200020c8 	.word	0x200020c8
 8000594:	40016100 	.word	0x40016100
 8000598:	200021b8 	.word	0x200021b8
 800059c:	40016040 	.word	0x40016040
 80005a0:	00020004 	.word	0x00020004

080005a4 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <MX_USART1_Init+0x50>)
 80005aa:	4a13      	ldr	r2, [pc, #76]	; (80005f8 <MX_USART1_Init+0x54>)
 80005ac:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_USART1_Init+0x50>)
 80005b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b4:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_USART1_Init+0x50>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80005bc:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <MX_USART1_Init+0x50>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_USART1_Init+0x50>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <MX_USART1_Init+0x50>)
 80005ca:	220c      	movs	r2, #12
 80005cc:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_USART1_Init+0x50>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <MX_USART1_Init+0x50>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_USART1_Init+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <MX_USART1_Init+0x50>)
 80005e2:	f002 ffd3 	bl	800358c <HAL_USART_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 80005ec:	f000 f854 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20002168 	.word	0x20002168
 80005f8:	40013800 	.word	0x40013800

080005fc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_DMA_Init+0x38>)
 8000604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000606:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <MX_DMA_Init+0x38>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6493      	str	r3, [r2, #72]	; 0x48
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_DMA_Init+0x38>)
 8000610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	200e      	movs	r0, #14
 8000620:	f000 fc13 	bl	8000e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000624:	200e      	movs	r0, #14
 8000626:	f000 fc2c 	bl	8000e82 <HAL_NVIC_EnableIRQ>

}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40021000 	.word	0x40021000

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <MX_GPIO_Init+0x5c>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	4a14      	ldr	r2, [pc, #80]	; (8000694 <MX_GPIO_Init+0x5c>)
 8000644:	f043 0310 	orr.w	r3, r3, #16
 8000648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_GPIO_Init+0x5c>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	f003 0310 	and.w	r3, r3, #16
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_GPIO_Init+0x5c>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <MX_GPIO_Init+0x5c>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_GPIO_Init+0x5c>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_GPIO_Init+0x5c>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	4a08      	ldr	r2, [pc, #32]	; (8000694 <MX_GPIO_Init+0x5c>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_GPIO_Init+0x5c>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
	...

080006a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <HAL_MspInit+0x44>)
 80006b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006b2:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <HAL_MspInit+0x44>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6613      	str	r3, [r2, #96]	; 0x60
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <HAL_MspInit+0x44>)
 80006bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <HAL_MspInit+0x44>)
 80006c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <HAL_MspInit+0x44>)
 80006cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d0:	6593      	str	r3, [r2, #88]	; 0x58
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_MspInit+0x44>)
 80006d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40021000 	.word	0x40021000

080006f0 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000708:	4b3c      	ldr	r3, [pc, #240]	; (80007fc <HAL_DFSDM_FilterMspInit+0x10c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d139      	bne.n	8000784 <HAL_DFSDM_FilterMspInit+0x94>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000710:	4b3b      	ldr	r3, [pc, #236]	; (8000800 <HAL_DFSDM_FilterMspInit+0x110>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	4a3a      	ldr	r2, [pc, #232]	; (8000800 <HAL_DFSDM_FilterMspInit+0x110>)
 8000718:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800071a:	4b39      	ldr	r3, [pc, #228]	; (8000800 <HAL_DFSDM_FilterMspInit+0x110>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d10b      	bne.n	800073a <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000722:	4b38      	ldr	r3, [pc, #224]	; (8000804 <HAL_DFSDM_FilterMspInit+0x114>)
 8000724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000726:	4a37      	ldr	r2, [pc, #220]	; (8000804 <HAL_DFSDM_FilterMspInit+0x114>)
 8000728:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800072c:	6613      	str	r3, [r2, #96]	; 0x60
 800072e:	4b35      	ldr	r3, [pc, #212]	; (8000804 <HAL_DFSDM_FilterMspInit+0x114>)
 8000730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000732:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	4b32      	ldr	r3, [pc, #200]	; (8000804 <HAL_DFSDM_FilterMspInit+0x114>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4a31      	ldr	r2, [pc, #196]	; (8000804 <HAL_DFSDM_FilterMspInit+0x114>)
 8000740:	f043 0310 	orr.w	r3, r3, #16
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <HAL_DFSDM_FilterMspInit+0x114>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0310 	and.w	r3, r3, #16
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000752:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000764:	2306      	movs	r3, #6
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	4826      	ldr	r0, [pc, #152]	; (8000808 <HAL_DFSDM_FilterMspInit+0x118>)
 8000770:	f001 fa66 	bl	8001c40 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	203d      	movs	r0, #61	; 0x3d
 800077a:	f000 fb66 	bl	8000e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 800077e:	203d      	movs	r0, #61	; 0x3d
 8000780:	f000 fb7f 	bl	8000e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE END DFSDM1_MspInit 1 */
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a20      	ldr	r2, [pc, #128]	; (800080c <HAL_DFSDM_FilterMspInit+0x11c>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d131      	bne.n	80007f2 <HAL_DFSDM_FilterMspInit+0x102>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 8000790:	4a20      	ldr	r2, [pc, #128]	; (8000814 <HAL_DFSDM_FilterMspInit+0x124>)
 8000792:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800079a:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b2:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007ba:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007be:	2220      	movs	r2, #32
 80007c0:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80007ca:	4811      	ldr	r0, [pc, #68]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007cc:	f001 f840 	bl	8001850 <HAL_DMA_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <HAL_DFSDM_FilterMspInit+0xea>
    {
      Error_Handler();
 80007d6:	f7ff ff5f 	bl	8000698 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a0c      	ldr	r2, [pc, #48]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
 80007e0:	4a0b      	ldr	r2, [pc, #44]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a09      	ldr	r2, [pc, #36]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
 80007ec:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 80007f2:	bf00      	nop
 80007f4:	3728      	adds	r7, #40	; 0x28
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000094 	.word	0x20000094
 8000800:	20000090 	.word	0x20000090
 8000804:	40021000 	.word	0x40021000
 8000808:	48001000 	.word	0x48001000
 800080c:	40016100 	.word	0x40016100
 8000810:	20002120 	.word	0x20002120
 8000814:	40020044 	.word	0x40020044

08000818 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <HAL_DFSDM_ChannelMspInit+0x8c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d131      	bne.n	800089c <HAL_DFSDM_ChannelMspInit+0x84>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <HAL_DFSDM_ChannelMspInit+0x90>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	4a1a      	ldr	r2, [pc, #104]	; (80008a8 <HAL_DFSDM_ChannelMspInit+0x90>)
 8000840:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <HAL_DFSDM_ChannelMspInit+0x90>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d10b      	bne.n	8000862 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <HAL_DFSDM_ChannelMspInit+0x94>)
 800084c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084e:	4a17      	ldr	r2, [pc, #92]	; (80008ac <HAL_DFSDM_ChannelMspInit+0x94>)
 8000850:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000854:	6613      	str	r3, [r2, #96]	; 0x60
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_DFSDM_ChannelMspInit+0x94>)
 8000858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_DFSDM_ChannelMspInit+0x94>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a11      	ldr	r2, [pc, #68]	; (80008ac <HAL_DFSDM_ChannelMspInit+0x94>)
 8000868:	f043 0310 	orr.w	r3, r3, #16
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <HAL_DFSDM_ChannelMspInit+0x94>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0310 	and.w	r3, r3, #16
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800087a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800087e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800088c:	2306      	movs	r3, #6
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	4806      	ldr	r0, [pc, #24]	; (80008b0 <HAL_DFSDM_ChannelMspInit+0x98>)
 8000898:	f001 f9d2 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000094 	.word	0x20000094
 80008a8:	20000090 	.word	0x20000090
 80008ac:	40021000 	.word	0x40021000
 80008b0:	48001000 	.word	0x48001000

080008b4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a17      	ldr	r2, [pc, #92]	; (8000930 <HAL_USART_MspInit+0x7c>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d127      	bne.n	8000926 <HAL_USART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <HAL_USART_MspInit+0x80>)
 80008d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008da:	4a16      	ldr	r2, [pc, #88]	; (8000934 <HAL_USART_MspInit+0x80>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e0:	6613      	str	r3, [r2, #96]	; 0x60
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <HAL_USART_MspInit+0x80>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <HAL_USART_MspInit+0x80>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <HAL_USART_MspInit+0x80>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <HAL_USART_MspInit+0x80>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB5     ------> USART1_CK
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000906:	23e0      	movs	r3, #224	; 0xe0
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000916:	2307      	movs	r3, #7
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <HAL_USART_MspInit+0x84>)
 8000922:	f001 f98d 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40013800 	.word	0x40013800
 8000934:	40021000 	.word	0x40021000
 8000938:	48000400 	.word	0x48000400

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler+0x4>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <UsageFault_Handler+0x4>

08000962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000990:	f000 f962 	bl	8000c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <DMA1_Channel4_IRQHandler+0x10>)
 800099e:	f001 f86f 	bl	8001a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20002120 	.word	0x20002120

080009ac <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <DFSDM1_FLT0_IRQHandler+0x10>)
 80009b2:	f000 fcf7 	bl	80013a4 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200020c8 	.word	0x200020c8

080009c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	e00a      	b.n	80009e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009d2:	f7ff fc63 	bl	800029c <__io_getchar>
 80009d6:	4601      	mov	r1, r0
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	60ba      	str	r2, [r7, #8]
 80009de:	b2ca      	uxtb	r2, r1
 80009e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3301      	adds	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	dbf0      	blt.n	80009d2 <_read+0x12>
	}

return len;
 80009f0:	687b      	ldr	r3, [r7, #4]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	e009      	b.n	8000a20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	60ba      	str	r2, [r7, #8]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fc2b 	bl	8000270 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dbf1      	blt.n	8000a0c <_write+0x12>
	}
	return len;
 8000a28:	687b      	ldr	r3, [r7, #4]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <_close>:

int _close(int file)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
	return -1;
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <_isatty>:

int _isatty(int file)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
	return 1;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <_sbrk+0x50>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d102      	bne.n	8000ab2 <_sbrk+0x16>
		heap_end = &end;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <_sbrk+0x50>)
 8000aae:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <_sbrk+0x54>)
 8000ab0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <_sbrk+0x50>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <_sbrk+0x50>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4413      	add	r3, r2
 8000ac0:	466a      	mov	r2, sp
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d907      	bls.n	8000ad6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000ac6:	f003 f901 	bl	8003ccc <__errno>
 8000aca:	4602      	mov	r2, r0
 8000acc:	230c      	movs	r3, #12
 8000ace:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad4:	e006      	b.n	8000ae4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000ad6:	4b05      	ldr	r3, [pc, #20]	; (8000aec <_sbrk+0x50>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	4a03      	ldr	r2, [pc, #12]	; (8000aec <_sbrk+0x50>)
 8000ae0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000098 	.word	0x20000098
 8000af0:	200021f8 	.word	0x200021f8

08000af4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <SystemInit+0x64>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afe:	4a16      	ldr	r2, [pc, #88]	; (8000b58 <SystemInit+0x64>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <SystemInit+0x68>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <SystemInit+0x68>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <SystemInit+0x68>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <SystemInit+0x68>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <SystemInit+0x68>)
 8000b20:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b24:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <SystemInit+0x68>)
 8000b2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b30:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <SystemInit+0x68>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <SystemInit+0x68>)
 8000b38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <SystemInit+0x68>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <SystemInit+0x64>)
 8000b46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00
 8000b5c:	40021000 	.word	0x40021000

08000b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b98 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b66:	e003      	b.n	8000b70 <LoopCopyDataInit>

08000b68 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b6e:	3104      	adds	r1, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b70:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b78:	d3f6      	bcc.n	8000b68 <CopyDataInit>
	ldr	r2, =_sbss
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b7c:	e002      	b.n	8000b84 <LoopFillZerobss>

08000b7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b80:	f842 3b04 	str.w	r3, [r2], #4

08000b84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <LoopForever+0x16>)
	cmp	r2, r3
 8000b86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b88:	d3f9      	bcc.n	8000b7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b8a:	f7ff ffb3 	bl	8000af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f003 f8a3 	bl	8003cd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b92:	f7ff fbbb 	bl	800030c <main>

08000b96 <LoopForever>:

LoopForever:
    b LoopForever
 8000b96:	e7fe      	b.n	8000b96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b98:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000b9c:	08004c00 	.word	0x08004c00
	ldr	r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ba4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000ba8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000bac:	200021f8 	.word	0x200021f8

08000bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC1_2_IRQHandler>

08000bb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbc:	2003      	movs	r0, #3
 8000bbe:	f000 f939 	bl	8000e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f000 f80e 	bl	8000be4 <HAL_InitTick>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d002      	beq.n	8000bd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	71fb      	strb	r3, [r7, #7]
 8000bd2:	e001      	b.n	8000bd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bd4:	f7ff fd68 	bl	80006a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <HAL_InitTick+0x68>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d022      	beq.n	8000c3e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_InitTick+0x6c>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <HAL_InitTick+0x68>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c04:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 f946 	bl	8000e9e <HAL_SYSTICK_Config>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d10f      	bne.n	8000c38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b0f      	cmp	r3, #15
 8000c1c:	d809      	bhi.n	8000c32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	6879      	ldr	r1, [r7, #4]
 8000c22:	f04f 30ff 	mov.w	r0, #4294967295
 8000c26:	f000 f910 	bl	8000e4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_InitTick+0x70>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	e007      	b.n	8000c42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	73fb      	strb	r3, [r7, #15]
 8000c36:	e004      	b.n	8000c42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	73fb      	strb	r3, [r7, #15]
 8000c3c:	e001      	b.n	8000c42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	20000000 	.word	0x20000000
 8000c54:	20000004 	.word	0x20000004

08000c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <HAL_IncTick+0x1c>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_IncTick+0x20>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a03      	ldr	r2, [pc, #12]	; (8000c74 <HAL_IncTick+0x1c>)
 8000c68:	6013      	str	r3, [r2, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	200021f0 	.word	0x200021f0
 8000c78:	20000008 	.word	0x20000008

08000c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_GetTick+0x14>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	200021f0 	.word	0x200021f0

08000c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	f003 0307 	and.w	r3, r3, #7
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db0b      	blt.n	8000d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 021f 	and.w	r2, r3, #31
 8000d10:	4907      	ldr	r1, [pc, #28]	; (8000d30 <__NVIC_EnableIRQ+0x38>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	2001      	movs	r0, #1
 8000d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	; (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	; (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	; 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e00:	d301      	bcc.n	8000e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00f      	b.n	8000e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <SysTick_Config+0x40>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0e:	210f      	movs	r1, #15
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f7ff ff8e 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <SysTick_Config+0x40>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1e:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <SysTick_Config+0x40>)
 8000e20:	2207      	movs	r2, #7
 8000e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	e000e010 	.word	0xe000e010

08000e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff29 	bl	8000c94 <__NVIC_SetPriorityGrouping>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5c:	f7ff ff3e 	bl	8000cdc <__NVIC_GetPriorityGrouping>
 8000e60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68b9      	ldr	r1, [r7, #8]
 8000e66:	6978      	ldr	r0, [r7, #20]
 8000e68:	f7ff ff8e 	bl	8000d88 <NVIC_EncodePriority>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff5d 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	4603      	mov	r3, r0
 8000e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff31 	bl	8000cf8 <__NVIC_EnableIRQ>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ffa2 	bl	8000df0 <SysTick_Config>
 8000eac:	4603      	mov	r3, r0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e0ac      	b.n	8001024 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fc1c 	bl	800170c <DFSDM_GetChannelFromInstance>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	4b55      	ldr	r3, [pc, #340]	; (800102c <HAL_DFSDM_ChannelInit+0x174>)
 8000ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e09f      	b.n	8001024 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fc97 	bl	8000818 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000eea:	4b51      	ldr	r3, [pc, #324]	; (8001030 <HAL_DFSDM_ChannelInit+0x178>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	4a4f      	ldr	r2, [pc, #316]	; (8001030 <HAL_DFSDM_ChannelInit+0x178>)
 8000ef2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000ef4:	4b4e      	ldr	r3, [pc, #312]	; (8001030 <HAL_DFSDM_ChannelInit+0x178>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d125      	bne.n	8000f48 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000efc:	4b4d      	ldr	r3, [pc, #308]	; (8001034 <HAL_DFSDM_ChannelInit+0x17c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a4c      	ldr	r2, [pc, #304]	; (8001034 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000f06:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000f08:	4b4a      	ldr	r3, [pc, #296]	; (8001034 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	4948      	ldr	r1, [pc, #288]	; (8001034 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000f16:	4b47      	ldr	r3, [pc, #284]	; (8001034 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a46      	ldr	r2, [pc, #280]	; (8001034 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f1c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000f20:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	791b      	ldrb	r3, [r3, #4]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d108      	bne.n	8000f3c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000f2a:	4b42      	ldr	r3, [pc, #264]	; (8001034 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	041b      	lsls	r3, r3, #16
 8000f36:	493f      	ldr	r1, [pc, #252]	; (8001034 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000f3c:	4b3d      	ldr	r3, [pc, #244]	; (8001034 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a3c      	ldr	r2, [pc, #240]	; (8001034 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f46:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8000f56:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6819      	ldr	r1, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f66:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000f6c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	430a      	orrs	r2, r1
 8000f74:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 020f 	bic.w	r2, r2, #15
 8000f84:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6819      	ldr	r1, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000f94:	431a      	orrs	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8000fac:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6899      	ldr	r1, [r3, #8]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f002 0207 	and.w	r2, r2, #7
 8000fd8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6859      	ldr	r1, [r3, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000fec:	431a      	orrs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001004:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2201      	movs	r2, #1
 800100a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fb7a 	bl	800170c <DFSDM_GetChannelFromInstance>
 8001018:	4601      	mov	r1, r0
 800101a:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_DFSDM_ChannelInit+0x174>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200000a0 	.word	0x200000a0
 8001030:	2000009c 	.word	0x2000009c
 8001034:	40016000 	.word	0x40016000

08001038 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e0ca      	b.n	8001208 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a66      	ldr	r2, [pc, #408]	; (8001210 <HAL_DFSDM_FilterInit+0x1b0>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d109      	bne.n	8001090 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001080:	2b01      	cmp	r3, #1
 8001082:	d003      	beq.n	800108c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001088:	2b01      	cmp	r3, #1
 800108a:	d101      	bne.n	8001090 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e0bb      	b.n	8001208 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2201      	movs	r2, #1
 80010a0:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff fb21 	bl	80006f0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80010bc:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7a1b      	ldrb	r3, [r3, #8]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d108      	bne.n	80010d8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	e007      	b.n	80010e8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80010e6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7a5b      	ldrb	r3, [r3, #9]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d108      	bne.n	8001102 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	e007      	b.n	8001112 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001110:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8001120:	f023 0308 	bic.w	r3, r3, #8
 8001124:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d108      	bne.n	8001140 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6819      	ldr	r1, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	695a      	ldr	r2, [r3, #20]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7c1b      	ldrb	r3, [r3, #16]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d108      	bne.n	800115a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0210 	orr.w	r2, r2, #16
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	e007      	b.n	800116a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0210 	bic.w	r2, r2, #16
 8001168:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7c5b      	ldrb	r3, [r3, #17]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d108      	bne.n	8001184 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 0220 	orr.w	r2, r2, #32
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e007      	b.n	8001194 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0220 	bic.w	r2, r2, #32
 8001192:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80011a2:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80011a6:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6959      	ldr	r1, [r3, #20]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80011ba:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80011c2:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68da      	ldr	r2, [r3, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699a      	ldr	r2, [r3, #24]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	7c1a      	ldrb	r2, [r3, #16]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f042 0201 	orr.w	r2, r2, #1
 80011fc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40016100 	.word	0x40016100

08001214 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001220:	2300      	movs	r3, #0
 8001222:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800122a:	2b00      	cmp	r3, #0
 800122c:	d02e      	beq.n	800128c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001234:	2bff      	cmp	r3, #255	; 0xff
 8001236:	d029      	beq.n	800128c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d10d      	bne.n	800126e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001260:	431a      	orrs	r2, r3
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	e00a      	b.n	8001284 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6819      	ldr	r1, [r3, #0]
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	631a      	str	r2, [r3, #48]	; 0x30
 800128a:	e001      	b.n	8001290 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001290:	7dfb      	ldrb	r3, [r7, #23]
}
 8001292:	4618      	mov	r0, r3
 8001294:	371c      	adds	r7, #28
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	75fb      	strb	r3, [r7, #23]
 80012c0:	e064      	b.n	800138c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80012d0:	d002      	beq.n	80012d8 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	75fb      	strb	r3, [r7, #23]
 80012d6:	e059      	b.n	800138c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d10e      	bne.n	80012fe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d10a      	bne.n	80012fe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ec:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d105      	bne.n	80012fe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d002      	beq.n	80012fe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	75fb      	strb	r3, [r7, #23]
 80012fc:	e046      	b.n	800138c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10b      	bne.n	800131e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800130a:	2b00      	cmp	r3, #0
 800130c:	d107      	bne.n	800131e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001312:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001314:	2b20      	cmp	r3, #32
 8001316:	d102      	bne.n	800131e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	75fb      	strb	r3, [r7, #23]
 800131c:	e036      	b.n	800138c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001324:	2b01      	cmp	r3, #1
 8001326:	d004      	beq.n	8001332 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800132e:	2b03      	cmp	r3, #3
 8001330:	d12a      	bne.n	8001388 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001336:	4a18      	ldr	r2, [pc, #96]	; (8001398 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001338:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133e:	4a17      	ldr	r2, [pc, #92]	; (800139c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001340:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001346:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001348:	2b20      	cmp	r3, #32
 800134a:	d101      	bne.n	8001350 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 800134c:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800134e:	e000      	b.n	8001352 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8001350:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001356:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	331c      	adds	r3, #28
 8001362:	4619      	mov	r1, r3
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f000 fb2a 	bl	80019c0 <HAL_DMA_Start_IT>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d006      	beq.n	8001380 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	22ff      	movs	r2, #255	; 0xff
 8001376:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800137e:	e005      	b.n	800138c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f000 fa0f 	bl	80017a4 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001386:	e001      	b.n	800138c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 800138c:	7dfb      	ldrb	r3, [r7, #23]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	080016cd 	.word	0x080016cd
 800139c:	080016e9 	.word	0x080016e9
 80013a0:	080016b1 	.word	0x080016b1

080013a4 <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	; 0x30
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00f      	beq.n	80013e6 <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00a      	beq.n	80013e6 <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2208      	movs	r2, #8
 80013d6:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f95c 	bl	800169c <HAL_DFSDM_FilterErrorCallback>
 80013e4:	e13b      	b.n	800165e <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00f      	beq.n	8001410 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00a      	beq.n	8001410 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2204      	movs	r2, #4
 8001400:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2202      	movs	r2, #2
 8001406:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f947 	bl	800169c <HAL_DFSDM_FilterErrorCallback>
 800140e:	e126      	b.n	800165e <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d025      	beq.n	8001466 <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8001420:	2b00      	cmp	r3, #0
 8001422:	d020      	beq.n	8001466 <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7fe ff51 	bl	80002cc <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	2b00      	cmp	r3, #0
 8001430:	f040 8114 	bne.w	800165c <HAL_DFSDM_IRQHandler+0x2b8>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001438:	2b00      	cmp	r3, #0
 800143a:	f040 810f 	bne.w	800165c <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 0202 	bic.w	r2, r2, #2
 800144c:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8001454:	2b02      	cmp	r3, #2
 8001456:	d101      	bne.n	800145c <HAL_DFSDM_IRQHandler+0xb8>
 8001458:	2201      	movs	r2, #1
 800145a:	e000      	b.n	800145e <HAL_DFSDM_IRQHandler+0xba>
 800145c:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001464:	e0fa      	b.n	800165c <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d034      	beq.n	80014da <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8001476:	2b00      	cmp	r3, #0
 8001478:	d02f      	beq.n	80014da <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f8f8 	bl	8001670 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001484:	1e5a      	subs	r2, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	649a      	str	r2, [r3, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148e:	2b00      	cmp	r3, #0
 8001490:	f040 80e5 	bne.w	800165e <HAL_DFSDM_IRQHandler+0x2ba>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001498:	2b00      	cmp	r3, #0
 800149a:	d112      	bne.n	80014c2 <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0201 	bic.w	r2, r2, #1
 80014aa:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d101      	bne.n	80014ba <HAL_DFSDM_IRQHandler+0x116>
 80014b6:	2201      	movs	r2, #1
 80014b8:	e000      	b.n	80014bc <HAL_DFSDM_IRQHandler+0x118>
 80014ba:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d102      	bne.n	80014d2 <HAL_DFSDM_IRQHandler+0x12e>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d0:	e000      	b.n	80014d4 <HAL_DFSDM_IRQHandler+0x130>
 80014d2:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6493      	str	r3, [r2, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 80014d8:	e0c1      	b.n	800165e <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f003 0310 	and.w	r3, r3, #16
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d03d      	beq.n	8001560 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d038      	beq.n	8001560 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 80014fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_DFSDM_IRQHandler+0x162>
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <HAL_DFSDM_IRQHandler+0x164>
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d109      	bne.n	8001524 <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8001510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001516:	e005      	b.n	8001524 <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 8001518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151a:	3301      	adds	r3, #1
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 800151e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001520:	085b      	lsrs	r3, r3, #1
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d102      	bne.n	8001534 <HAL_DFSDM_IRQHandler+0x190>
 800152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001530:	2b06      	cmp	r3, #6
 8001532:	d9f1      	bls.n	8001518 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d105      	bne.n	8001546 <HAL_DFSDM_IRQHandler+0x1a2>
 800153a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153c:	3308      	adds	r3, #8
 800153e:	2201      	movs	r2, #1
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	e003      	b.n	800154e <HAL_DFSDM_IRQHandler+0x1aa>
 8001546:	2201      	movs	r2, #1
 8001548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 f893 	bl	8001684 <HAL_DFSDM_FilterAwdCallback>
  {
 800155e:	e07e      	b.n	800165e <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a40      	ldr	r2, [pc, #256]	; (8001668 <HAL_DFSDM_IRQHandler+0x2c4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d141      	bne.n	80015ee <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001570:	2b00      	cmp	r3, #0
 8001572:	d03c      	beq.n	80015ee <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 800157a:	2b00      	cmp	r3, #0
 800157c:	d037      	beq.n	80015ee <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	0c1b      	lsrs	r3, r3, #16
 800158a:	b2db      	uxtb	r3, r3
 800158c:	627b      	str	r3, [r7, #36]	; 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 800158e:	e02a      	b.n	80015e6 <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d01f      	beq.n	80015da <HAL_DFSDM_IRQHandler+0x236>
 800159a:	4a34      	ldr	r2, [pc, #208]	; (800166c <HAL_DFSDM_IRQHandler+0x2c8>)
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d019      	beq.n	80015da <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 80015a6:	4a31      	ldr	r2, [pc, #196]	; (800166c <HAL_DFSDM_IRQHandler+0x2c8>)
 80015a8:	6a3b      	ldr	r3, [r7, #32]
 80015aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00f      	beq.n	80015da <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	f103 0210 	add.w	r2, r3, #16
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2101      	movs	r1, #1
 80015c6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ca:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 80015cc:	4a27      	ldr	r2, [pc, #156]	; (800166c <HAL_DFSDM_IRQHandler+0x2c8>)
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fd2f 	bl	8001038 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	3301      	adds	r3, #1
 80015de:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	085b      	lsrs	r3, r3, #1
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	2b07      	cmp	r3, #7
 80015ea:	d9d1      	bls.n	8001590 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 80015ec:	e037      	b.n	800165e <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a1d      	ldr	r2, [pc, #116]	; (8001668 <HAL_DFSDM_IRQHandler+0x2c4>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d132      	bne.n	800165e <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d02d      	beq.n	800165e <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8001608:	2b00      	cmp	r3, #0
 800160a:	d028      	beq.n	800165e <HAL_DFSDM_IRQHandler+0x2ba>
  {
    uint32_t reg;
    uint32_t channel = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	0e1b      	lsrs	r3, r3, #24
 8001618:	b2db      	uxtb	r3, r3
 800161a:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800161c:	e005      	b.n	800162a <HAL_DFSDM_IRQHandler+0x286>
    {
      channel++;
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	3301      	adds	r3, #1
 8001622:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <HAL_DFSDM_IRQHandler+0x296>
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2b06      	cmp	r3, #6
 8001638:	d9f1      	bls.n	800161e <HAL_DFSDM_IRQHandler+0x27a>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	f103 0218 	add.w	r2, r3, #24
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2101      	movs	r1, #1
 8001646:	fa01 f202 	lsl.w	r2, r1, r2
 800164a:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 800164c:	4a07      	ldr	r2, [pc, #28]	; (800166c <HAL_DFSDM_IRQHandler+0x2c8>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fcf9 	bl	800104c <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 800165a:	e000      	b.n	800165e <HAL_DFSDM_IRQHandler+0x2ba>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800165c:	bf00      	nop
}
 800165e:	bf00      	nop
 8001660:	3730      	adds	r7, #48	; 0x30
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40016100 	.word	0x40016100
 800166c:	200000a0 	.word	0x200000a0

08001670 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f7fe fe14 	bl	80002ec <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f7fe fdf6 	bl	80002cc <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2203      	movs	r2, #3
 80016fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f7ff ffcd 	bl	800169c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a1c      	ldr	r2, [pc, #112]	; (8001788 <DFSDM_GetChannelFromInstance+0x7c>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d102      	bne.n	8001722 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	e02b      	b.n	800177a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a19      	ldr	r2, [pc, #100]	; (800178c <DFSDM_GetChannelFromInstance+0x80>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d102      	bne.n	8001730 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800172a:	2301      	movs	r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	e024      	b.n	800177a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a17      	ldr	r2, [pc, #92]	; (8001790 <DFSDM_GetChannelFromInstance+0x84>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d102      	bne.n	800173e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001738:	2302      	movs	r3, #2
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	e01d      	b.n	800177a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a14      	ldr	r2, [pc, #80]	; (8001794 <DFSDM_GetChannelFromInstance+0x88>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d102      	bne.n	800174c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001746:	2304      	movs	r3, #4
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	e016      	b.n	800177a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <DFSDM_GetChannelFromInstance+0x8c>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d102      	bne.n	800175a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001754:	2305      	movs	r3, #5
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	e00f      	b.n	800177a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a0f      	ldr	r2, [pc, #60]	; (800179c <DFSDM_GetChannelFromInstance+0x90>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d102      	bne.n	8001768 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001762:	2306      	movs	r3, #6
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	e008      	b.n	800177a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <DFSDM_GetChannelFromInstance+0x94>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d102      	bne.n	8001776 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001770:	2307      	movs	r3, #7
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	e001      	b.n	800177a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001776:	2303      	movs	r3, #3
 8001778:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800177a:	68fb      	ldr	r3, [r7, #12]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	40016000 	.word	0x40016000
 800178c:	40016020 	.word	0x40016020
 8001790:	40016040 	.word	0x40016040
 8001794:	40016080 	.word	0x40016080
 8001798:	400160a0 	.word	0x400160a0
 800179c:	400160c0 	.word	0x400160c0
 80017a0:	400160e0 	.word	0x400160e0

080017a4 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d108      	bne.n	80017c6 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	e033      	b.n	800182e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0201 	bic.w	r2, r2, #1
 80017d4:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80017e4:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f042 0201 	orr.w	r2, r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d116      	bne.n	800182e <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001804:	2b00      	cmp	r3, #0
 8001806:	d107      	bne.n	8001818 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0202 	orr.w	r2, r2, #2
 8001816:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800181e:	2b01      	cmp	r3, #1
 8001820:	d102      	bne.n	8001828 <DFSDM_RegConvStart+0x84>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	e000      	b.n	800182a <DFSDM_RegConvStart+0x86>
 8001828:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <DFSDM_RegConvStart+0x98>
 8001838:	2202      	movs	r2, #2
 800183a:	e000      	b.n	800183e <DFSDM_RegConvStart+0x9a>
 800183c:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e098      	b.n	8001994 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	4b4d      	ldr	r3, [pc, #308]	; (80019a0 <HAL_DMA_Init+0x150>)
 800186a:	429a      	cmp	r2, r3
 800186c:	d80f      	bhi.n	800188e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <HAL_DMA_Init+0x154>)
 8001876:	4413      	add	r3, r2
 8001878:	4a4b      	ldr	r2, [pc, #300]	; (80019a8 <HAL_DMA_Init+0x158>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	091b      	lsrs	r3, r3, #4
 8001880:	009a      	lsls	r2, r3, #2
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a48      	ldr	r2, [pc, #288]	; (80019ac <HAL_DMA_Init+0x15c>)
 800188a:	641a      	str	r2, [r3, #64]	; 0x40
 800188c:	e00e      	b.n	80018ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	4b46      	ldr	r3, [pc, #280]	; (80019b0 <HAL_DMA_Init+0x160>)
 8001896:	4413      	add	r3, r2
 8001898:	4a43      	ldr	r2, [pc, #268]	; (80019a8 <HAL_DMA_Init+0x158>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	091b      	lsrs	r3, r3, #4
 80018a0:	009a      	lsls	r2, r3, #2
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a42      	ldr	r2, [pc, #264]	; (80019b4 <HAL_DMA_Init+0x164>)
 80018aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80018c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001906:	d039      	beq.n	800197c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	4a27      	ldr	r2, [pc, #156]	; (80019ac <HAL_DMA_Init+0x15c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d11a      	bne.n	8001948 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001912:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <HAL_DMA_Init+0x168>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f003 031c 	and.w	r3, r3, #28
 800191e:	210f      	movs	r1, #15
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	4924      	ldr	r1, [pc, #144]	; (80019b8 <HAL_DMA_Init+0x168>)
 8001928:	4013      	ands	r3, r2
 800192a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800192c:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <HAL_DMA_Init+0x168>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6859      	ldr	r1, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	f003 031c 	and.w	r3, r3, #28
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	491d      	ldr	r1, [pc, #116]	; (80019b8 <HAL_DMA_Init+0x168>)
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]
 8001946:	e019      	b.n	800197c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001948:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <HAL_DMA_Init+0x16c>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001950:	f003 031c 	and.w	r3, r3, #28
 8001954:	210f      	movs	r1, #15
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	4917      	ldr	r1, [pc, #92]	; (80019bc <HAL_DMA_Init+0x16c>)
 800195e:	4013      	ands	r3, r2
 8001960:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_DMA_Init+0x16c>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6859      	ldr	r1, [r3, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f003 031c 	and.w	r3, r3, #28
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	4911      	ldr	r1, [pc, #68]	; (80019bc <HAL_DMA_Init+0x16c>)
 8001978:	4313      	orrs	r3, r2
 800197a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40020407 	.word	0x40020407
 80019a4:	bffdfff8 	.word	0xbffdfff8
 80019a8:	cccccccd 	.word	0xcccccccd
 80019ac:	40020000 	.word	0x40020000
 80019b0:	bffdfbf8 	.word	0xbffdfbf8
 80019b4:	40020400 	.word	0x40020400
 80019b8:	400200a8 	.word	0x400200a8
 80019bc:	400204a8 	.word	0x400204a8

080019c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_DMA_Start_IT+0x20>
 80019dc:	2302      	movs	r3, #2
 80019de:	e04b      	b.n	8001a78 <HAL_DMA_Start_IT+0xb8>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d13a      	bne.n	8001a6a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2202      	movs	r2, #2
 80019f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0201 	bic.w	r2, r2, #1
 8001a10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	68b9      	ldr	r1, [r7, #8]
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 f8e0 	bl	8001bde <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d008      	beq.n	8001a38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f042 020e 	orr.w	r2, r2, #14
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	e00f      	b.n	8001a58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0204 	bic.w	r2, r2, #4
 8001a46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 020a 	orr.w	r2, r2, #10
 8001a56:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e005      	b.n	8001a76 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a72:	2302      	movs	r3, #2
 8001a74:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	f003 031c 	and.w	r3, r3, #28
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d026      	beq.n	8001afa <HAL_DMA_IRQHandler+0x7a>
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d021      	beq.n	8001afa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d107      	bne.n	8001ad4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0204 	bic.w	r2, r2, #4
 8001ad2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad8:	f003 021c 	and.w	r2, r3, #28
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	2104      	movs	r1, #4
 8001ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d071      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001af8:	e06c      	b.n	8001bd4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f003 031c 	and.w	r3, r3, #28
 8001b02:	2202      	movs	r2, #2
 8001b04:	409a      	lsls	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d02e      	beq.n	8001b6c <HAL_DMA_IRQHandler+0xec>
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d029      	beq.n	8001b6c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0320 	and.w	r3, r3, #32
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10b      	bne.n	8001b3e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 020a 	bic.w	r2, r2, #10
 8001b34:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f003 021c 	and.w	r2, r3, #28
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b50:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d038      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b6a:	e033      	b.n	8001bd4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b70:	f003 031c 	and.w	r3, r3, #28
 8001b74:	2208      	movs	r2, #8
 8001b76:	409a      	lsls	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d02a      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0x156>
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d025      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 020e 	bic.w	r2, r2, #14
 8001b98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	f003 021c 	and.w	r2, r3, #28
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d004      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001bd4:	bf00      	nop
 8001bd6:	bf00      	nop
}
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b085      	sub	sp, #20
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf0:	f003 021c 	and.w	r2, r3, #28
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b10      	cmp	r3, #16
 8001c0e:	d108      	bne.n	8001c22 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c20:	e007      	b.n	8001c32 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	60da      	str	r2, [r3, #12]
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4e:	e17f      	b.n	8001f50 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2101      	movs	r1, #1
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8171 	beq.w	8001f4a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d00b      	beq.n	8001c88 <HAL_GPIO_Init+0x48>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d007      	beq.n	8001c88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c7c:	2b11      	cmp	r3, #17
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b12      	cmp	r3, #18
 8001c86:	d130      	bne.n	8001cea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	091b      	lsrs	r3, r3, #4
 8001cd4:	f003 0201 	and.w	r2, r3, #1
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d118      	bne.n	8001d28 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	08db      	lsrs	r3, r3, #3
 8001d12:	f003 0201 	and.w	r2, r3, #1
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x128>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b12      	cmp	r3, #18
 8001d66:	d123      	bne.n	8001db0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	08da      	lsrs	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3208      	adds	r2, #8
 8001d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d74:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	220f      	movs	r2, #15
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	08da      	lsrs	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3208      	adds	r2, #8
 8001daa:	6939      	ldr	r1, [r7, #16]
 8001dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0203 	and.w	r2, r3, #3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80ac 	beq.w	8001f4a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	4b5e      	ldr	r3, [pc, #376]	; (8001f6c <HAL_GPIO_Init+0x32c>)
 8001df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df6:	4a5d      	ldr	r2, [pc, #372]	; (8001f6c <HAL_GPIO_Init+0x32c>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6613      	str	r3, [r2, #96]	; 0x60
 8001dfe:	4b5b      	ldr	r3, [pc, #364]	; (8001f6c <HAL_GPIO_Init+0x32c>)
 8001e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e0a:	4a59      	ldr	r2, [pc, #356]	; (8001f70 <HAL_GPIO_Init+0x330>)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3302      	adds	r3, #2
 8001e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e16:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e34:	d025      	beq.n	8001e82 <HAL_GPIO_Init+0x242>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4e      	ldr	r2, [pc, #312]	; (8001f74 <HAL_GPIO_Init+0x334>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d01f      	beq.n	8001e7e <HAL_GPIO_Init+0x23e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a4d      	ldr	r2, [pc, #308]	; (8001f78 <HAL_GPIO_Init+0x338>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d019      	beq.n	8001e7a <HAL_GPIO_Init+0x23a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a4c      	ldr	r2, [pc, #304]	; (8001f7c <HAL_GPIO_Init+0x33c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d013      	beq.n	8001e76 <HAL_GPIO_Init+0x236>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4b      	ldr	r2, [pc, #300]	; (8001f80 <HAL_GPIO_Init+0x340>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d00d      	beq.n	8001e72 <HAL_GPIO_Init+0x232>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4a      	ldr	r2, [pc, #296]	; (8001f84 <HAL_GPIO_Init+0x344>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d007      	beq.n	8001e6e <HAL_GPIO_Init+0x22e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a49      	ldr	r2, [pc, #292]	; (8001f88 <HAL_GPIO_Init+0x348>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d101      	bne.n	8001e6a <HAL_GPIO_Init+0x22a>
 8001e66:	2306      	movs	r3, #6
 8001e68:	e00c      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	e00a      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e6e:	2305      	movs	r3, #5
 8001e70:	e008      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e72:	2304      	movs	r3, #4
 8001e74:	e006      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e76:	2303      	movs	r3, #3
 8001e78:	e004      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e002      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e82:	2300      	movs	r3, #0
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	f002 0203 	and.w	r2, r2, #3
 8001e8a:	0092      	lsls	r2, r2, #2
 8001e8c:	4093      	lsls	r3, r2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e94:	4936      	ldr	r1, [pc, #216]	; (8001f70 <HAL_GPIO_Init+0x330>)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ea2:	4b3a      	ldr	r3, [pc, #232]	; (8001f8c <HAL_GPIO_Init+0x34c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ec6:	4a31      	ldr	r2, [pc, #196]	; (8001f8c <HAL_GPIO_Init+0x34c>)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001ecc:	4b2f      	ldr	r3, [pc, #188]	; (8001f8c <HAL_GPIO_Init+0x34c>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ef0:	4a26      	ldr	r2, [pc, #152]	; (8001f8c <HAL_GPIO_Init+0x34c>)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ef6:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <HAL_GPIO_Init+0x34c>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f1a:	4a1c      	ldr	r2, [pc, #112]	; (8001f8c <HAL_GPIO_Init+0x34c>)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f20:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <HAL_GPIO_Init+0x34c>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f44:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <HAL_GPIO_Init+0x34c>)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f47f ae78 	bne.w	8001c50 <HAL_GPIO_Init+0x10>
  }
}
 8001f60:	bf00      	nop
 8001f62:	371c      	adds	r7, #28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40010000 	.word	0x40010000
 8001f74:	48000400 	.word	0x48000400
 8001f78:	48000800 	.word	0x48000800
 8001f7c:	48000c00 	.word	0x48000c00
 8001f80:	48001000 	.word	0x48001000
 8001f84:	48001400 	.word	0x48001400
 8001f88:	48001800 	.word	0x48001800
 8001f8c:	40010400 	.word	0x40010400

08001f90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40007000 	.word	0x40007000

08001fac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fba:	d130      	bne.n	800201e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fbc:	4b23      	ldr	r3, [pc, #140]	; (800204c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fc8:	d038      	beq.n	800203c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fd2:	4a1e      	ldr	r2, [pc, #120]	; (800204c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2232      	movs	r2, #50	; 0x32
 8001fe0:	fb02 f303 	mul.w	r3, r2, r3
 8001fe4:	4a1b      	ldr	r2, [pc, #108]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fea:	0c9b      	lsrs	r3, r3, #18
 8001fec:	3301      	adds	r3, #1
 8001fee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ff0:	e002      	b.n	8001ff8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ff8:	4b14      	ldr	r3, [pc, #80]	; (800204c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002004:	d102      	bne.n	800200c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f2      	bne.n	8001ff2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800200c:	4b0f      	ldr	r3, [pc, #60]	; (800204c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002018:	d110      	bne.n	800203c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e00f      	b.n	800203e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800202a:	d007      	beq.n	800203c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800202c:	4b07      	ldr	r3, [pc, #28]	; (800204c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002034:	4a05      	ldr	r2, [pc, #20]	; (800204c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002036:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800203a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40007000 	.word	0x40007000
 8002050:	20000000 	.word	0x20000000
 8002054:	431bde83 	.word	0x431bde83

08002058 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e3d4      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800206a:	4ba1      	ldr	r3, [pc, #644]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002074:	4b9e      	ldr	r3, [pc, #632]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 80e4 	beq.w	8002254 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d007      	beq.n	80020a2 <HAL_RCC_OscConfig+0x4a>
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	2b0c      	cmp	r3, #12
 8002096:	f040 808b 	bne.w	80021b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2b01      	cmp	r3, #1
 800209e:	f040 8087 	bne.w	80021b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020a2:	4b93      	ldr	r3, [pc, #588]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <HAL_RCC_OscConfig+0x62>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e3ac      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1a      	ldr	r2, [r3, #32]
 80020be:	4b8c      	ldr	r3, [pc, #560]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d004      	beq.n	80020d4 <HAL_RCC_OscConfig+0x7c>
 80020ca:	4b89      	ldr	r3, [pc, #548]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020d2:	e005      	b.n	80020e0 <HAL_RCC_OscConfig+0x88>
 80020d4:	4b86      	ldr	r3, [pc, #536]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 80020d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d223      	bcs.n	800212c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 fd3f 	bl	8002b6c <RCC_SetFlashLatencyFromMSIRange>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e38d      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020f8:	4b7d      	ldr	r3, [pc, #500]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a7c      	ldr	r2, [pc, #496]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 80020fe:	f043 0308 	orr.w	r3, r3, #8
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	4b7a      	ldr	r3, [pc, #488]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4977      	ldr	r1, [pc, #476]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002116:	4b76      	ldr	r3, [pc, #472]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	4972      	ldr	r1, [pc, #456]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
 800212a:	e025      	b.n	8002178 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800212c:	4b70      	ldr	r3, [pc, #448]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a6f      	ldr	r2, [pc, #444]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 8002132:	f043 0308 	orr.w	r3, r3, #8
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	4b6d      	ldr	r3, [pc, #436]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	496a      	ldr	r1, [pc, #424]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800214a:	4b69      	ldr	r3, [pc, #420]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	4965      	ldr	r1, [pc, #404]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 800215a:	4313      	orrs	r3, r2
 800215c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d109      	bne.n	8002178 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4618      	mov	r0, r3
 800216a:	f000 fcff 	bl	8002b6c <RCC_SetFlashLatencyFromMSIRange>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e34d      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002178:	f000 fc36 	bl	80029e8 <HAL_RCC_GetSysClockFreq>
 800217c:	4601      	mov	r1, r0
 800217e:	4b5c      	ldr	r3, [pc, #368]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	091b      	lsrs	r3, r3, #4
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	4a5a      	ldr	r2, [pc, #360]	; (80022f4 <HAL_RCC_OscConfig+0x29c>)
 800218a:	5cd3      	ldrb	r3, [r2, r3]
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	fa21 f303 	lsr.w	r3, r1, r3
 8002194:	4a58      	ldr	r2, [pc, #352]	; (80022f8 <HAL_RCC_OscConfig+0x2a0>)
 8002196:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002198:	4b58      	ldr	r3, [pc, #352]	; (80022fc <HAL_RCC_OscConfig+0x2a4>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe fd21 	bl	8000be4 <HAL_InitTick>
 80021a2:	4603      	mov	r3, r0
 80021a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d052      	beq.n	8002252 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	e331      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d032      	beq.n	800221e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021b8:	4b4d      	ldr	r3, [pc, #308]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a4c      	ldr	r2, [pc, #304]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021c4:	f7fe fd5a 	bl	8000c7c <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021cc:	f7fe fd56 	bl	8000c7c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e31a      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021de:	4b44      	ldr	r3, [pc, #272]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ea:	4b41      	ldr	r3, [pc, #260]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a40      	ldr	r2, [pc, #256]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 80021f0:	f043 0308 	orr.w	r3, r3, #8
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	4b3e      	ldr	r3, [pc, #248]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	493b      	ldr	r1, [pc, #236]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 8002204:	4313      	orrs	r3, r2
 8002206:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002208:	4b39      	ldr	r3, [pc, #228]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	4936      	ldr	r1, [pc, #216]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]
 800221c:	e01a      	b.n	8002254 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800221e:	4b34      	ldr	r3, [pc, #208]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a33      	ldr	r2, [pc, #204]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800222a:	f7fe fd27 	bl	8000c7c <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002232:	f7fe fd23 	bl	8000c7c <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e2e7      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002244:	4b2a      	ldr	r3, [pc, #168]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f0      	bne.n	8002232 <HAL_RCC_OscConfig+0x1da>
 8002250:	e000      	b.n	8002254 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002252:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d074      	beq.n	800234a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	2b08      	cmp	r3, #8
 8002264:	d005      	beq.n	8002272 <HAL_RCC_OscConfig+0x21a>
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	2b0c      	cmp	r3, #12
 800226a:	d10e      	bne.n	800228a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d10b      	bne.n	800228a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002272:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d064      	beq.n	8002348 <HAL_RCC_OscConfig+0x2f0>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d160      	bne.n	8002348 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e2c4      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_OscConfig+0x24a>
 8002294:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a15      	ldr	r2, [pc, #84]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 800229a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	e01d      	b.n	80022de <HAL_RCC_OscConfig+0x286>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022aa:	d10c      	bne.n	80022c6 <HAL_RCC_OscConfig+0x26e>
 80022ac:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0f      	ldr	r2, [pc, #60]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 80022b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0c      	ldr	r2, [pc, #48]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 80022be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	e00b      	b.n	80022de <HAL_RCC_OscConfig+0x286>
 80022c6:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a09      	ldr	r2, [pc, #36]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 80022cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a06      	ldr	r2, [pc, #24]	; (80022f0 <HAL_RCC_OscConfig+0x298>)
 80022d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d01c      	beq.n	8002320 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	f7fe fcc9 	bl	8000c7c <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ec:	e011      	b.n	8002312 <HAL_RCC_OscConfig+0x2ba>
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	08004b18 	.word	0x08004b18
 80022f8:	20000000 	.word	0x20000000
 80022fc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002300:	f7fe fcbc 	bl	8000c7c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b64      	cmp	r3, #100	; 0x64
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e280      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002312:	4baf      	ldr	r3, [pc, #700]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x2a8>
 800231e:	e014      	b.n	800234a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7fe fcac 	bl	8000c7c <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002328:	f7fe fca8 	bl	8000c7c <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	; 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e26c      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800233a:	4ba5      	ldr	r3, [pc, #660]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x2d0>
 8002346:	e000      	b.n	800234a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d060      	beq.n	8002418 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	2b04      	cmp	r3, #4
 800235a:	d005      	beq.n	8002368 <HAL_RCC_OscConfig+0x310>
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	2b0c      	cmp	r3, #12
 8002360:	d119      	bne.n	8002396 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2b02      	cmp	r3, #2
 8002366:	d116      	bne.n	8002396 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002368:	4b99      	ldr	r3, [pc, #612]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_RCC_OscConfig+0x328>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e249      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002380:	4b93      	ldr	r3, [pc, #588]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	061b      	lsls	r3, r3, #24
 800238e:	4990      	ldr	r1, [pc, #576]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 8002390:	4313      	orrs	r3, r2
 8002392:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002394:	e040      	b.n	8002418 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d023      	beq.n	80023e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800239e:	4b8c      	ldr	r3, [pc, #560]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a8b      	ldr	r2, [pc, #556]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 80023a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023aa:	f7fe fc67 	bl	8000c7c <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b2:	f7fe fc63 	bl	8000c7c <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e227      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c4:	4b82      	ldr	r3, [pc, #520]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d0:	4b7f      	ldr	r3, [pc, #508]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	061b      	lsls	r3, r3, #24
 80023de:	497c      	ldr	r1, [pc, #496]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]
 80023e4:	e018      	b.n	8002418 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e6:	4b7a      	ldr	r3, [pc, #488]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a79      	ldr	r2, [pc, #484]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 80023ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f2:	f7fe fc43 	bl	8000c7c <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fa:	f7fe fc3f 	bl	8000c7c <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e203      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800240c:	4b70      	ldr	r3, [pc, #448]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f0      	bne.n	80023fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0308 	and.w	r3, r3, #8
 8002420:	2b00      	cmp	r3, #0
 8002422:	d03c      	beq.n	800249e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d01c      	beq.n	8002466 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800242c:	4b68      	ldr	r3, [pc, #416]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 800242e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002432:	4a67      	ldr	r2, [pc, #412]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243c:	f7fe fc1e 	bl	8000c7c <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002444:	f7fe fc1a 	bl	8000c7c <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e1de      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002456:	4b5e      	ldr	r3, [pc, #376]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 8002458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0ef      	beq.n	8002444 <HAL_RCC_OscConfig+0x3ec>
 8002464:	e01b      	b.n	800249e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002466:	4b5a      	ldr	r3, [pc, #360]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 8002468:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800246c:	4a58      	ldr	r2, [pc, #352]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 800246e:	f023 0301 	bic.w	r3, r3, #1
 8002472:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002476:	f7fe fc01 	bl	8000c7c <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800247e:	f7fe fbfd 	bl	8000c7c <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e1c1      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002490:	4b4f      	ldr	r3, [pc, #316]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 8002492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1ef      	bne.n	800247e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80a6 	beq.w	80025f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ac:	2300      	movs	r3, #0
 80024ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024b0:	4b47      	ldr	r3, [pc, #284]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 80024b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10d      	bne.n	80024d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024bc:	4b44      	ldr	r3, [pc, #272]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 80024be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c0:	4a43      	ldr	r2, [pc, #268]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 80024c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c6:	6593      	str	r3, [r2, #88]	; 0x58
 80024c8:	4b41      	ldr	r3, [pc, #260]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 80024ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d4:	2301      	movs	r3, #1
 80024d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d8:	4b3e      	ldr	r3, [pc, #248]	; (80025d4 <HAL_RCC_OscConfig+0x57c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d118      	bne.n	8002516 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024e4:	4b3b      	ldr	r3, [pc, #236]	; (80025d4 <HAL_RCC_OscConfig+0x57c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a3a      	ldr	r2, [pc, #232]	; (80025d4 <HAL_RCC_OscConfig+0x57c>)
 80024ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f0:	f7fe fbc4 	bl	8000c7c <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f8:	f7fe fbc0 	bl	8000c7c <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e184      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800250a:	4b32      	ldr	r3, [pc, #200]	; (80025d4 <HAL_RCC_OscConfig+0x57c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d108      	bne.n	8002530 <HAL_RCC_OscConfig+0x4d8>
 800251e:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 8002520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002524:	4a2a      	ldr	r2, [pc, #168]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800252e:	e024      	b.n	800257a <HAL_RCC_OscConfig+0x522>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b05      	cmp	r3, #5
 8002536:	d110      	bne.n	800255a <HAL_RCC_OscConfig+0x502>
 8002538:	4b25      	ldr	r3, [pc, #148]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	4a24      	ldr	r2, [pc, #144]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 8002540:	f043 0304 	orr.w	r3, r3, #4
 8002544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002548:	4b21      	ldr	r3, [pc, #132]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254e:	4a20      	ldr	r2, [pc, #128]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002558:	e00f      	b.n	800257a <HAL_RCC_OscConfig+0x522>
 800255a:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	4a1b      	ldr	r2, [pc, #108]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 8002562:	f023 0301 	bic.w	r3, r3, #1
 8002566:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800256a:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 800256c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002570:	4a17      	ldr	r2, [pc, #92]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 8002572:	f023 0304 	bic.w	r3, r3, #4
 8002576:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d016      	beq.n	80025b0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002582:	f7fe fb7b 	bl	8000c7c <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002588:	e00a      	b.n	80025a0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	f7fe fb77 	bl	8000c7c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	f241 3288 	movw	r2, #5000	; 0x1388
 8002598:	4293      	cmp	r3, r2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e139      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_RCC_OscConfig+0x578>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0ed      	beq.n	800258a <HAL_RCC_OscConfig+0x532>
 80025ae:	e01a      	b.n	80025e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b0:	f7fe fb64 	bl	8000c7c <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025b6:	e00f      	b.n	80025d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b8:	f7fe fb60 	bl	8000c7c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d906      	bls.n	80025d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e122      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025d8:	4b90      	ldr	r3, [pc, #576]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 80025da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1e8      	bne.n	80025b8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025e6:	7ffb      	ldrb	r3, [r7, #31]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d105      	bne.n	80025f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ec:	4b8b      	ldr	r3, [pc, #556]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 80025ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f0:	4a8a      	ldr	r2, [pc, #552]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 80025f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 8108 	beq.w	8002812 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002606:	2b02      	cmp	r3, #2
 8002608:	f040 80d0 	bne.w	80027ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800260c:	4b83      	ldr	r3, [pc, #524]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f003 0203 	and.w	r2, r3, #3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	429a      	cmp	r2, r3
 800261e:	d130      	bne.n	8002682 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	3b01      	subs	r3, #1
 800262c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d127      	bne.n	8002682 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d11f      	bne.n	8002682 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800264c:	2a07      	cmp	r2, #7
 800264e:	bf14      	ite	ne
 8002650:	2201      	movne	r2, #1
 8002652:	2200      	moveq	r2, #0
 8002654:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002656:	4293      	cmp	r3, r2
 8002658:	d113      	bne.n	8002682 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002664:	085b      	lsrs	r3, r3, #1
 8002666:	3b01      	subs	r3, #1
 8002668:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800266a:	429a      	cmp	r2, r3
 800266c:	d109      	bne.n	8002682 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	085b      	lsrs	r3, r3, #1
 800267a:	3b01      	subs	r3, #1
 800267c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800267e:	429a      	cmp	r2, r3
 8002680:	d06e      	beq.n	8002760 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	2b0c      	cmp	r3, #12
 8002686:	d069      	beq.n	800275c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002688:	4b64      	ldr	r3, [pc, #400]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d105      	bne.n	80026a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002694:	4b61      	ldr	r3, [pc, #388]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0b7      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026a4:	4b5d      	ldr	r3, [pc, #372]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a5c      	ldr	r2, [pc, #368]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 80026aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026b0:	f7fe fae4 	bl	8000c7c <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b8:	f7fe fae0 	bl	8000c7c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e0a4      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ca:	4b54      	ldr	r3, [pc, #336]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026d6:	4b51      	ldr	r3, [pc, #324]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	4b51      	ldr	r3, [pc, #324]	; (8002820 <HAL_RCC_OscConfig+0x7c8>)
 80026dc:	4013      	ands	r3, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026e6:	3a01      	subs	r2, #1
 80026e8:	0112      	lsls	r2, r2, #4
 80026ea:	4311      	orrs	r1, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026f0:	0212      	lsls	r2, r2, #8
 80026f2:	4311      	orrs	r1, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026f8:	0852      	lsrs	r2, r2, #1
 80026fa:	3a01      	subs	r2, #1
 80026fc:	0552      	lsls	r2, r2, #21
 80026fe:	4311      	orrs	r1, r2
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002704:	0852      	lsrs	r2, r2, #1
 8002706:	3a01      	subs	r2, #1
 8002708:	0652      	lsls	r2, r2, #25
 800270a:	4311      	orrs	r1, r2
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002710:	0912      	lsrs	r2, r2, #4
 8002712:	0452      	lsls	r2, r2, #17
 8002714:	430a      	orrs	r2, r1
 8002716:	4941      	ldr	r1, [pc, #260]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800271c:	4b3f      	ldr	r3, [pc, #252]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a3e      	ldr	r2, [pc, #248]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 8002722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002726:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002728:	4b3c      	ldr	r3, [pc, #240]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4a3b      	ldr	r2, [pc, #236]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 800272e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002732:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002734:	f7fe faa2 	bl	8000c7c <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273c:	f7fe fa9e 	bl	8000c7c <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e062      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274e:	4b33      	ldr	r3, [pc, #204]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800275a:	e05a      	b.n	8002812 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e059      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002760:	4b2e      	ldr	r3, [pc, #184]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d152      	bne.n	8002812 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800276c:	4b2b      	ldr	r3, [pc, #172]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a2a      	ldr	r2, [pc, #168]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 8002772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002776:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002778:	4b28      	ldr	r3, [pc, #160]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4a27      	ldr	r2, [pc, #156]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 800277e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002782:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002784:	f7fe fa7a 	bl	8000c7c <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278c:	f7fe fa76 	bl	8000c7c <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e03a      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279e:	4b1f      	ldr	r3, [pc, #124]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x734>
 80027aa:	e032      	b.n	8002812 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	2b0c      	cmp	r3, #12
 80027b0:	d02d      	beq.n	800280e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b2:	4b1a      	ldr	r3, [pc, #104]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a19      	ldr	r2, [pc, #100]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 80027b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027bc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80027be:	4b17      	ldr	r3, [pc, #92]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d105      	bne.n	80027d6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80027ca:	4b14      	ldr	r3, [pc, #80]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	4a13      	ldr	r2, [pc, #76]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 80027d0:	f023 0303 	bic.w	r3, r3, #3
 80027d4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027d6:	4b11      	ldr	r3, [pc, #68]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	4a10      	ldr	r2, [pc, #64]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 80027dc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80027e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e6:	f7fe fa49 	bl	8000c7c <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ee:	f7fe fa45 	bl	8000c7c <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e009      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_RCC_OscConfig+0x7c4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f0      	bne.n	80027ee <HAL_RCC_OscConfig+0x796>
 800280c:	e001      	b.n	8002812 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3720      	adds	r7, #32
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	f99d808c 	.word	0xf99d808c

08002824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0c8      	b.n	80029ca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002838:	4b66      	ldr	r3, [pc, #408]	; (80029d4 <HAL_RCC_ClockConfig+0x1b0>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d910      	bls.n	8002868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b63      	ldr	r3, [pc, #396]	; (80029d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 0207 	bic.w	r2, r3, #7
 800284e:	4961      	ldr	r1, [pc, #388]	; (80029d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002856:	4b5f      	ldr	r3, [pc, #380]	; (80029d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d001      	beq.n	8002868 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0b0      	b.n	80029ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d04c      	beq.n	800290e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b03      	cmp	r3, #3
 800287a:	d107      	bne.n	800288c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287c:	4b56      	ldr	r3, [pc, #344]	; (80029d8 <HAL_RCC_ClockConfig+0x1b4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d121      	bne.n	80028cc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e09e      	b.n	80029ca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d107      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002894:	4b50      	ldr	r3, [pc, #320]	; (80029d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d115      	bne.n	80028cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e092      	b.n	80029ca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d107      	bne.n	80028bc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ac:	4b4a      	ldr	r3, [pc, #296]	; (80029d8 <HAL_RCC_ClockConfig+0x1b4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d109      	bne.n	80028cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e086      	b.n	80029ca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028bc:	4b46      	ldr	r3, [pc, #280]	; (80029d8 <HAL_RCC_ClockConfig+0x1b4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e07e      	b.n	80029ca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028cc:	4b42      	ldr	r3, [pc, #264]	; (80029d8 <HAL_RCC_ClockConfig+0x1b4>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f023 0203 	bic.w	r2, r3, #3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	493f      	ldr	r1, [pc, #252]	; (80029d8 <HAL_RCC_ClockConfig+0x1b4>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028de:	f7fe f9cd 	bl	8000c7c <HAL_GetTick>
 80028e2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e4:	e00a      	b.n	80028fc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e6:	f7fe f9c9 	bl	8000c7c <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e066      	b.n	80029ca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fc:	4b36      	ldr	r3, [pc, #216]	; (80029d8 <HAL_RCC_ClockConfig+0x1b4>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 020c 	and.w	r2, r3, #12
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	429a      	cmp	r2, r3
 800290c:	d1eb      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800291a:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <HAL_RCC_ClockConfig+0x1b4>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	492c      	ldr	r1, [pc, #176]	; (80029d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002928:	4313      	orrs	r3, r2
 800292a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800292c:	4b29      	ldr	r3, [pc, #164]	; (80029d4 <HAL_RCC_ClockConfig+0x1b0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d210      	bcs.n	800295c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293a:	4b26      	ldr	r3, [pc, #152]	; (80029d4 <HAL_RCC_ClockConfig+0x1b0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 0207 	bic.w	r2, r3, #7
 8002942:	4924      	ldr	r1, [pc, #144]	; (80029d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294a:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <HAL_RCC_ClockConfig+0x1b0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e036      	b.n	80029ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002968:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_RCC_ClockConfig+0x1b4>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4918      	ldr	r1, [pc, #96]	; (80029d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d009      	beq.n	800299a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002986:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4910      	ldr	r1, [pc, #64]	; (80029d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002996:	4313      	orrs	r3, r2
 8002998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800299a:	f000 f825 	bl	80029e8 <HAL_RCC_GetSysClockFreq>
 800299e:	4601      	mov	r1, r0
 80029a0:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <HAL_RCC_ClockConfig+0x1b4>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	4a0c      	ldr	r2, [pc, #48]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	5cd3      	ldrb	r3, [r2, r3]
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	fa21 f303 	lsr.w	r3, r1, r3
 80029b6:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029ba:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <HAL_RCC_ClockConfig+0x1c0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe f910 	bl	8000be4 <HAL_InitTick>
 80029c4:	4603      	mov	r3, r0
 80029c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80029c8:	7afb      	ldrb	r3, [r7, #11]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40022000 	.word	0x40022000
 80029d8:	40021000 	.word	0x40021000
 80029dc:	08004b18 	.word	0x08004b18
 80029e0:	20000000 	.word	0x20000000
 80029e4:	20000004 	.word	0x20000004

080029e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b089      	sub	sp, #36	; 0x24
 80029ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
 80029f2:	2300      	movs	r3, #0
 80029f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029f6:	4b3d      	ldr	r3, [pc, #244]	; (8002aec <HAL_RCC_GetSysClockFreq+0x104>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a00:	4b3a      	ldr	r3, [pc, #232]	; (8002aec <HAL_RCC_GetSysClockFreq+0x104>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0x34>
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	2b0c      	cmp	r3, #12
 8002a14:	d121      	bne.n	8002a5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d11e      	bne.n	8002a5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a1c:	4b33      	ldr	r3, [pc, #204]	; (8002aec <HAL_RCC_GetSysClockFreq+0x104>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d107      	bne.n	8002a38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a28:	4b30      	ldr	r3, [pc, #192]	; (8002aec <HAL_RCC_GetSysClockFreq+0x104>)
 8002a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	f003 030f 	and.w	r3, r3, #15
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	e005      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a38:	4b2c      	ldr	r3, [pc, #176]	; (8002aec <HAL_RCC_GetSysClockFreq+0x104>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a44:	4a2a      	ldr	r2, [pc, #168]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10d      	bne.n	8002a70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a58:	e00a      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d102      	bne.n	8002a66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a60:	4b24      	ldr	r3, [pc, #144]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a62:	61bb      	str	r3, [r7, #24]
 8002a64:	e004      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d101      	bne.n	8002a70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a6c:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	2b0c      	cmp	r3, #12
 8002a74:	d133      	bne.n	8002ade <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a76:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <HAL_RCC_GetSysClockFreq+0x104>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d002      	beq.n	8002a8c <HAL_RCC_GetSysClockFreq+0xa4>
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d003      	beq.n	8002a92 <HAL_RCC_GetSysClockFreq+0xaa>
 8002a8a:	e005      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a8c:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a8e:	617b      	str	r3, [r7, #20]
      break;
 8002a90:	e005      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a92:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a94:	617b      	str	r3, [r7, #20]
      break;
 8002a96:	e002      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	617b      	str	r3, [r7, #20]
      break;
 8002a9c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a9e:	4b13      	ldr	r3, [pc, #76]	; (8002aec <HAL_RCC_GetSysClockFreq+0x104>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	091b      	lsrs	r3, r3, #4
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002aac:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <HAL_RCC_GetSysClockFreq+0x104>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	0a1b      	lsrs	r3, r3, #8
 8002ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	fb02 f203 	mul.w	r2, r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ac4:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_RCC_GetSysClockFreq+0x104>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	0e5b      	lsrs	r3, r3, #25
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	3301      	adds	r3, #1
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002adc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ade:	69bb      	ldr	r3, [r7, #24]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3724      	adds	r7, #36	; 0x24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	40021000 	.word	0x40021000
 8002af0:	08004b30 	.word	0x08004b30
 8002af4:	00f42400 	.word	0x00f42400
 8002af8:	007a1200 	.word	0x007a1200

08002afc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b02:	681b      	ldr	r3, [r3, #0]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	20000000 	.word	0x20000000

08002b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b18:	f7ff fff0 	bl	8002afc <HAL_RCC_GetHCLKFreq>
 8002b1c:	4601      	mov	r1, r0
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b2a:	5cd3      	ldrb	r3, [r2, r3]
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	08004b28 	.word	0x08004b28

08002b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b44:	f7ff ffda 	bl	8002afc <HAL_RCC_GetHCLKFreq>
 8002b48:	4601      	mov	r1, r0
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	0adb      	lsrs	r3, r3, #11
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b56:	5cd3      	ldrb	r3, [r2, r3]
 8002b58:	f003 031f 	and.w	r3, r3, #31
 8002b5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40021000 	.word	0x40021000
 8002b68:	08004b28 	.word	0x08004b28

08002b6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b74:	2300      	movs	r3, #0
 8002b76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b78:	4b2a      	ldr	r3, [pc, #168]	; (8002c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b84:	f7ff fa04 	bl	8001f90 <HAL_PWREx_GetVoltageRange>
 8002b88:	6178      	str	r0, [r7, #20]
 8002b8a:	e014      	b.n	8002bb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b8c:	4b25      	ldr	r3, [pc, #148]	; (8002c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	4a24      	ldr	r2, [pc, #144]	; (8002c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b96:	6593      	str	r3, [r2, #88]	; 0x58
 8002b98:	4b22      	ldr	r3, [pc, #136]	; (8002c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ba4:	f7ff f9f4 	bl	8001f90 <HAL_PWREx_GetVoltageRange>
 8002ba8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002baa:	4b1e      	ldr	r3, [pc, #120]	; (8002c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bae:	4a1d      	ldr	r2, [pc, #116]	; (8002c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bbc:	d10b      	bne.n	8002bd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b80      	cmp	r3, #128	; 0x80
 8002bc2:	d919      	bls.n	8002bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2ba0      	cmp	r3, #160	; 0xa0
 8002bc8:	d902      	bls.n	8002bd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bca:	2302      	movs	r3, #2
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	e013      	b.n	8002bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	e010      	b.n	8002bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b80      	cmp	r3, #128	; 0x80
 8002bda:	d902      	bls.n	8002be2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bdc:	2303      	movs	r3, #3
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	e00a      	b.n	8002bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b80      	cmp	r3, #128	; 0x80
 8002be6:	d102      	bne.n	8002bee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002be8:	2302      	movs	r3, #2
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	e004      	b.n	8002bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b70      	cmp	r3, #112	; 0x70
 8002bf2:	d101      	bne.n	8002bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f023 0207 	bic.w	r2, r3, #7
 8002c00:	4909      	ldr	r1, [pc, #36]	; (8002c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c08:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d001      	beq.n	8002c1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40022000 	.word	0x40022000

08002c2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c34:	2300      	movs	r3, #0
 8002c36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c38:	2300      	movs	r3, #0
 8002c3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d03f      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c50:	d01c      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c56:	d802      	bhi.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00e      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002c5c:	e01f      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002c5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c62:	d003      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002c64:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c68:	d01c      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002c6a:	e018      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c6c:	4b85      	ldr	r3, [pc, #532]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4a84      	ldr	r2, [pc, #528]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c78:	e015      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fab9 	bl	80031f8 <RCCEx_PLLSAI1_Config>
 8002c86:	4603      	mov	r3, r0
 8002c88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c8a:	e00c      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3320      	adds	r3, #32
 8002c90:	2100      	movs	r1, #0
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fba0 	bl	80033d8 <RCCEx_PLLSAI2_Config>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c9c:	e003      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ca6:	7cfb      	ldrb	r3, [r7, #19]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10b      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cac:	4b75      	ldr	r3, [pc, #468]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cba:	4972      	ldr	r1, [pc, #456]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cc2:	e001      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc4:	7cfb      	ldrb	r3, [r7, #19]
 8002cc6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d03f      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cdc:	d01c      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002cde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce2:	d802      	bhi.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00e      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002ce8:	e01f      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002cea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cee:	d003      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002cf0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cf4:	d01c      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002cf6:	e018      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cf8:	4b62      	ldr	r3, [pc, #392]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4a61      	ldr	r2, [pc, #388]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d02:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d04:	e015      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 fa73 	bl	80031f8 <RCCEx_PLLSAI1_Config>
 8002d12:	4603      	mov	r3, r0
 8002d14:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d16:	e00c      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3320      	adds	r3, #32
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fb5a 	bl	80033d8 <RCCEx_PLLSAI2_Config>
 8002d24:	4603      	mov	r3, r0
 8002d26:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d28:	e003      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	74fb      	strb	r3, [r7, #19]
      break;
 8002d2e:	e000      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10b      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d38:	4b52      	ldr	r3, [pc, #328]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d46:	494f      	ldr	r1, [pc, #316]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d4e:	e001      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80a0 	beq.w	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d62:	2300      	movs	r3, #0
 8002d64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d66:	4b47      	ldr	r3, [pc, #284]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002d76:	2300      	movs	r3, #0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00d      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d7c:	4b41      	ldr	r3, [pc, #260]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d80:	4a40      	ldr	r2, [pc, #256]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d86:	6593      	str	r3, [r2, #88]	; 0x58
 8002d88:	4b3e      	ldr	r3, [pc, #248]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d94:	2301      	movs	r3, #1
 8002d96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d98:	4b3b      	ldr	r3, [pc, #236]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a3a      	ldr	r2, [pc, #232]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002da4:	f7fd ff6a 	bl	8000c7c <HAL_GetTick>
 8002da8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002daa:	e009      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dac:	f7fd ff66 	bl	8000c7c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d902      	bls.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	74fb      	strb	r3, [r7, #19]
        break;
 8002dbe:	e005      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dc0:	4b31      	ldr	r3, [pc, #196]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ef      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d15c      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dd2:	4b2c      	ldr	r3, [pc, #176]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ddc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01f      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d019      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002df0:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dfa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dfc:	4b21      	ldr	r3, [pc, #132]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e02:	4a20      	ldr	r2, [pc, #128]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e0c:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e12:	4a1c      	ldr	r2, [pc, #112]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e1c:	4a19      	ldr	r2, [pc, #100]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d016      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2e:	f7fd ff25 	bl	8000c7c <HAL_GetTick>
 8002e32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e34:	e00b      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e36:	f7fd ff21 	bl	8000c7c <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d902      	bls.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	74fb      	strb	r3, [r7, #19]
            break;
 8002e4c:	e006      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0ec      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002e5c:	7cfb      	ldrb	r3, [r7, #19]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10c      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e62:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e72:	4904      	ldr	r1, [pc, #16]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e7a:	e009      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e7c:	7cfb      	ldrb	r3, [r7, #19]
 8002e7e:	74bb      	strb	r3, [r7, #18]
 8002e80:	e006      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e8c:	7cfb      	ldrb	r3, [r7, #19]
 8002e8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e90:	7c7b      	ldrb	r3, [r7, #17]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d105      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e96:	4b9e      	ldr	r3, [pc, #632]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9a:	4a9d      	ldr	r2, [pc, #628]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eae:	4b98      	ldr	r3, [pc, #608]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb4:	f023 0203 	bic.w	r2, r3, #3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	4994      	ldr	r1, [pc, #592]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ed0:	4b8f      	ldr	r3, [pc, #572]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed6:	f023 020c 	bic.w	r2, r3, #12
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ede:	498c      	ldr	r1, [pc, #560]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ef2:	4b87      	ldr	r3, [pc, #540]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	4983      	ldr	r1, [pc, #524]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f14:	4b7e      	ldr	r3, [pc, #504]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	497b      	ldr	r1, [pc, #492]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f36:	4b76      	ldr	r3, [pc, #472]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f44:	4972      	ldr	r1, [pc, #456]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00a      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f58:	4b6d      	ldr	r3, [pc, #436]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f66:	496a      	ldr	r1, [pc, #424]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f7a:	4b65      	ldr	r3, [pc, #404]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f88:	4961      	ldr	r1, [pc, #388]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00a      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f9c:	4b5c      	ldr	r3, [pc, #368]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002faa:	4959      	ldr	r1, [pc, #356]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00a      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fbe:	4b54      	ldr	r3, [pc, #336]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fcc:	4950      	ldr	r1, [pc, #320]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00a      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fe0:	4b4b      	ldr	r3, [pc, #300]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fee:	4948      	ldr	r1, [pc, #288]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003002:	4b43      	ldr	r3, [pc, #268]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003008:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	493f      	ldr	r1, [pc, #252]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d028      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003024:	4b3a      	ldr	r3, [pc, #232]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003032:	4937      	ldr	r1, [pc, #220]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800303e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003042:	d106      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003044:	4b32      	ldr	r3, [pc, #200]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4a31      	ldr	r2, [pc, #196]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800304a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800304e:	60d3      	str	r3, [r2, #12]
 8003050:	e011      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003056:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800305a:	d10c      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3304      	adds	r3, #4
 8003060:	2101      	movs	r1, #1
 8003062:	4618      	mov	r0, r3
 8003064:	f000 f8c8 	bl	80031f8 <RCCEx_PLLSAI1_Config>
 8003068:	4603      	mov	r3, r0
 800306a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800306c:	7cfb      	ldrb	r3, [r7, #19]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003072:	7cfb      	ldrb	r3, [r7, #19]
 8003074:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d028      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003082:	4b23      	ldr	r3, [pc, #140]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003088:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	491f      	ldr	r1, [pc, #124]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030a0:	d106      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030a2:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	4a1a      	ldr	r2, [pc, #104]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ac:	60d3      	str	r3, [r2, #12]
 80030ae:	e011      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030b8:	d10c      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3304      	adds	r3, #4
 80030be:	2101      	movs	r1, #1
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 f899 	bl	80031f8 <RCCEx_PLLSAI1_Config>
 80030c6:	4603      	mov	r3, r0
 80030c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030ca:	7cfb      	ldrb	r3, [r7, #19]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80030d0:	7cfb      	ldrb	r3, [r7, #19]
 80030d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d02b      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ee:	4908      	ldr	r1, [pc, #32]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030fe:	d109      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003100:	4b03      	ldr	r3, [pc, #12]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4a02      	ldr	r2, [pc, #8]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003106:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800310a:	60d3      	str	r3, [r2, #12]
 800310c:	e014      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800310e:	bf00      	nop
 8003110:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003118:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800311c:	d10c      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3304      	adds	r3, #4
 8003122:	2101      	movs	r1, #1
 8003124:	4618      	mov	r0, r3
 8003126:	f000 f867 	bl	80031f8 <RCCEx_PLLSAI1_Config>
 800312a:	4603      	mov	r3, r0
 800312c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800312e:	7cfb      	ldrb	r3, [r7, #19]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003134:	7cfb      	ldrb	r3, [r7, #19]
 8003136:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d02f      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003144:	4b2b      	ldr	r3, [pc, #172]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003152:	4928      	ldr	r1, [pc, #160]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800315e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003162:	d10d      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3304      	adds	r3, #4
 8003168:	2102      	movs	r1, #2
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f844 	bl	80031f8 <RCCEx_PLLSAI1_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003174:	7cfb      	ldrb	r3, [r7, #19]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d014      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800317a:	7cfb      	ldrb	r3, [r7, #19]
 800317c:	74bb      	strb	r3, [r7, #18]
 800317e:	e011      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003188:	d10c      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3320      	adds	r3, #32
 800318e:	2102      	movs	r1, #2
 8003190:	4618      	mov	r0, r3
 8003192:	f000 f921 	bl	80033d8 <RCCEx_PLLSAI2_Config>
 8003196:	4603      	mov	r3, r0
 8003198:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800319a:	7cfb      	ldrb	r3, [r7, #19]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031b0:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031be:	490d      	ldr	r1, [pc, #52]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00b      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031d2:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031e2:	4904      	ldr	r1, [pc, #16]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40021000 	.word	0x40021000

080031f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003206:	4b73      	ldr	r3, [pc, #460]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d018      	beq.n	8003244 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003212:	4b70      	ldr	r3, [pc, #448]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f003 0203 	and.w	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d10d      	bne.n	800323e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
       ||
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800322a:	4b6a      	ldr	r3, [pc, #424]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
       ||
 800323a:	429a      	cmp	r2, r3
 800323c:	d044      	beq.n	80032c8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	73fb      	strb	r3, [r7, #15]
 8003242:	e041      	b.n	80032c8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d00c      	beq.n	8003266 <RCCEx_PLLSAI1_Config+0x6e>
 800324c:	2b03      	cmp	r3, #3
 800324e:	d013      	beq.n	8003278 <RCCEx_PLLSAI1_Config+0x80>
 8003250:	2b01      	cmp	r3, #1
 8003252:	d120      	bne.n	8003296 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003254:	4b5f      	ldr	r3, [pc, #380]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d11d      	bne.n	800329c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003264:	e01a      	b.n	800329c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003266:	4b5b      	ldr	r3, [pc, #364]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326e:	2b00      	cmp	r3, #0
 8003270:	d116      	bne.n	80032a0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003276:	e013      	b.n	80032a0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003278:	4b56      	ldr	r3, [pc, #344]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10f      	bne.n	80032a4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003284:	4b53      	ldr	r3, [pc, #332]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d109      	bne.n	80032a4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003294:	e006      	b.n	80032a4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
      break;
 800329a:	e004      	b.n	80032a6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800329c:	bf00      	nop
 800329e:	e002      	b.n	80032a6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80032a0:	bf00      	nop
 80032a2:	e000      	b.n	80032a6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80032a4:	bf00      	nop
    }

    if(status == HAL_OK)
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10d      	bne.n	80032c8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032ac:	4b49      	ldr	r3, [pc, #292]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6819      	ldr	r1, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	3b01      	subs	r3, #1
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	430b      	orrs	r3, r1
 80032c2:	4944      	ldr	r1, [pc, #272]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d17d      	bne.n	80033ca <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032ce:	4b41      	ldr	r3, [pc, #260]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a40      	ldr	r2, [pc, #256]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032da:	f7fd fccf 	bl	8000c7c <HAL_GetTick>
 80032de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032e0:	e009      	b.n	80032f6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032e2:	f7fd fccb 	bl	8000c7c <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d902      	bls.n	80032f6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	73fb      	strb	r3, [r7, #15]
        break;
 80032f4:	e005      	b.n	8003302 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032f6:	4b37      	ldr	r3, [pc, #220]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1ef      	bne.n	80032e2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d160      	bne.n	80033ca <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d111      	bne.n	8003332 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800330e:	4b31      	ldr	r3, [pc, #196]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6892      	ldr	r2, [r2, #8]
 800331e:	0211      	lsls	r1, r2, #8
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	68d2      	ldr	r2, [r2, #12]
 8003324:	0912      	lsrs	r2, r2, #4
 8003326:	0452      	lsls	r2, r2, #17
 8003328:	430a      	orrs	r2, r1
 800332a:	492a      	ldr	r1, [pc, #168]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800332c:	4313      	orrs	r3, r2
 800332e:	610b      	str	r3, [r1, #16]
 8003330:	e027      	b.n	8003382 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d112      	bne.n	800335e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003338:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003340:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6892      	ldr	r2, [r2, #8]
 8003348:	0211      	lsls	r1, r2, #8
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6912      	ldr	r2, [r2, #16]
 800334e:	0852      	lsrs	r2, r2, #1
 8003350:	3a01      	subs	r2, #1
 8003352:	0552      	lsls	r2, r2, #21
 8003354:	430a      	orrs	r2, r1
 8003356:	491f      	ldr	r1, [pc, #124]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003358:	4313      	orrs	r3, r2
 800335a:	610b      	str	r3, [r1, #16]
 800335c:	e011      	b.n	8003382 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800335e:	4b1d      	ldr	r3, [pc, #116]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003366:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6892      	ldr	r2, [r2, #8]
 800336e:	0211      	lsls	r1, r2, #8
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6952      	ldr	r2, [r2, #20]
 8003374:	0852      	lsrs	r2, r2, #1
 8003376:	3a01      	subs	r2, #1
 8003378:	0652      	lsls	r2, r2, #25
 800337a:	430a      	orrs	r2, r1
 800337c:	4915      	ldr	r1, [pc, #84]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800337e:	4313      	orrs	r3, r2
 8003380:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003382:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a13      	ldr	r2, [pc, #76]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003388:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800338c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338e:	f7fd fc75 	bl	8000c7c <HAL_GetTick>
 8003392:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003394:	e009      	b.n	80033aa <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003396:	f7fd fc71 	bl	8000c7c <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d902      	bls.n	80033aa <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	73fb      	strb	r3, [r7, #15]
          break;
 80033a8:	e005      	b.n	80033b6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033aa:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0ef      	beq.n	8003396 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d106      	bne.n	80033ca <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033bc:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	4903      	ldr	r1, [pc, #12]	; (80033d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40021000 	.word	0x40021000

080033d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033e6:	4b68      	ldr	r3, [pc, #416]	; (8003588 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d018      	beq.n	8003424 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80033f2:	4b65      	ldr	r3, [pc, #404]	; (8003588 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f003 0203 	and.w	r2, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d10d      	bne.n	800341e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
       ||
 8003406:	2b00      	cmp	r3, #0
 8003408:	d009      	beq.n	800341e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800340a:	4b5f      	ldr	r3, [pc, #380]	; (8003588 <RCCEx_PLLSAI2_Config+0x1b0>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	091b      	lsrs	r3, r3, #4
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
       ||
 800341a:	429a      	cmp	r2, r3
 800341c:	d044      	beq.n	80034a8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	73fb      	strb	r3, [r7, #15]
 8003422:	e041      	b.n	80034a8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d00c      	beq.n	8003446 <RCCEx_PLLSAI2_Config+0x6e>
 800342c:	2b03      	cmp	r3, #3
 800342e:	d013      	beq.n	8003458 <RCCEx_PLLSAI2_Config+0x80>
 8003430:	2b01      	cmp	r3, #1
 8003432:	d120      	bne.n	8003476 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003434:	4b54      	ldr	r3, [pc, #336]	; (8003588 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d11d      	bne.n	800347c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003444:	e01a      	b.n	800347c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003446:	4b50      	ldr	r3, [pc, #320]	; (8003588 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344e:	2b00      	cmp	r3, #0
 8003450:	d116      	bne.n	8003480 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003456:	e013      	b.n	8003480 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003458:	4b4b      	ldr	r3, [pc, #300]	; (8003588 <RCCEx_PLLSAI2_Config+0x1b0>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10f      	bne.n	8003484 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003464:	4b48      	ldr	r3, [pc, #288]	; (8003588 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d109      	bne.n	8003484 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003474:	e006      	b.n	8003484 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	73fb      	strb	r3, [r7, #15]
      break;
 800347a:	e004      	b.n	8003486 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800347c:	bf00      	nop
 800347e:	e002      	b.n	8003486 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003480:	bf00      	nop
 8003482:	e000      	b.n	8003486 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003484:	bf00      	nop
    }

    if(status == HAL_OK)
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10d      	bne.n	80034a8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800348c:	4b3e      	ldr	r3, [pc, #248]	; (8003588 <RCCEx_PLLSAI2_Config+0x1b0>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6819      	ldr	r1, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	3b01      	subs	r3, #1
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	430b      	orrs	r3, r1
 80034a2:	4939      	ldr	r1, [pc, #228]	; (8003588 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d167      	bne.n	800357e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034ae:	4b36      	ldr	r3, [pc, #216]	; (8003588 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a35      	ldr	r2, [pc, #212]	; (8003588 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ba:	f7fd fbdf 	bl	8000c7c <HAL_GetTick>
 80034be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034c0:	e009      	b.n	80034d6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034c2:	f7fd fbdb 	bl	8000c7c <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d902      	bls.n	80034d6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	73fb      	strb	r3, [r7, #15]
        break;
 80034d4:	e005      	b.n	80034e2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034d6:	4b2c      	ldr	r3, [pc, #176]	; (8003588 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1ef      	bne.n	80034c2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d14a      	bne.n	800357e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d111      	bne.n	8003512 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034ee:	4b26      	ldr	r3, [pc, #152]	; (8003588 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80034f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6892      	ldr	r2, [r2, #8]
 80034fe:	0211      	lsls	r1, r2, #8
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	68d2      	ldr	r2, [r2, #12]
 8003504:	0912      	lsrs	r2, r2, #4
 8003506:	0452      	lsls	r2, r2, #17
 8003508:	430a      	orrs	r2, r1
 800350a:	491f      	ldr	r1, [pc, #124]	; (8003588 <RCCEx_PLLSAI2_Config+0x1b0>)
 800350c:	4313      	orrs	r3, r2
 800350e:	614b      	str	r3, [r1, #20]
 8003510:	e011      	b.n	8003536 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003512:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800351a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6892      	ldr	r2, [r2, #8]
 8003522:	0211      	lsls	r1, r2, #8
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6912      	ldr	r2, [r2, #16]
 8003528:	0852      	lsrs	r2, r2, #1
 800352a:	3a01      	subs	r2, #1
 800352c:	0652      	lsls	r2, r2, #25
 800352e:	430a      	orrs	r2, r1
 8003530:	4915      	ldr	r1, [pc, #84]	; (8003588 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003532:	4313      	orrs	r3, r2
 8003534:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003536:	4b14      	ldr	r3, [pc, #80]	; (8003588 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a13      	ldr	r2, [pc, #76]	; (8003588 <RCCEx_PLLSAI2_Config+0x1b0>)
 800353c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003540:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003542:	f7fd fb9b 	bl	8000c7c <HAL_GetTick>
 8003546:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003548:	e009      	b.n	800355e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800354a:	f7fd fb97 	bl	8000c7c <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d902      	bls.n	800355e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	73fb      	strb	r3, [r7, #15]
          break;
 800355c:	e005      	b.n	800356a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800355e:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0ef      	beq.n	800354a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d106      	bne.n	800357e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003572:	695a      	ldr	r2, [r3, #20]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	4903      	ldr	r1, [pc, #12]	; (8003588 <RCCEx_PLLSAI2_Config+0x1b0>)
 800357a:	4313      	orrs	r3, r2
 800357c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800357e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40021000 	.word	0x40021000

0800358c <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e03c      	b.n	8003618 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fd f97e 	bl	80008b4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0201 	bic.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f9df 	bl	8003994 <USART_SetConfig>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e01b      	b.n	8003618 <HAL_USART_Init+0x8c>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035ee:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035fe:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fb17 	bl	8003c44 <USART_CheckIdleState>
 8003616:	4603      	mov	r3, r0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08a      	sub	sp, #40	; 0x28
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	4613      	mov	r3, r2
 800362e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	f040 809a 	bne.w	8003772 <HAL_USART_Transmit+0x152>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <HAL_USART_Transmit+0x2a>
 8003644:	88fb      	ldrh	r3, [r7, #6]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e092      	b.n	8003774 <HAL_USART_Transmit+0x154>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_USART_Transmit+0x3c>
 8003658:	2302      	movs	r3, #2
 800365a:	e08b      	b.n	8003774 <HAL_USART_Transmit+0x154>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2212      	movs	r2, #18
 800366e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003672:	f7fd fb03 	bl	8000c7c <HAL_GetTick>
 8003676:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	88fa      	ldrh	r2, [r7, #6]
 800367c:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	88fa      	ldrh	r2, [r7, #6]
 8003682:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800368c:	d108      	bne.n	80036a0 <HAL_USART_Transmit+0x80>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d104      	bne.n	80036a0 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8003696:	2300      	movs	r3, #0
 8003698:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	e003      	b.n	80036a8 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 80036a8:	e02b      	b.n	8003702 <HAL_USART_Transmit+0xe2>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2200      	movs	r2, #0
 80036b2:	2180      	movs	r1, #128	; 0x80
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f936 	bl	8003926 <USART_WaitOnFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e057      	b.n	8003774 <HAL_USART_Transmit+0x154>
      }
      if (ptxdata8bits == NULL)
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10b      	bne.n	80036e2 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	881a      	ldrh	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036d6:	b292      	uxth	r2, r2
 80036d8:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	3302      	adds	r3, #2
 80036de:	61bb      	str	r3, [r7, #24]
 80036e0:	e008      	b.n	80036f4 <HAL_USART_Transmit+0xd4>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	781a      	ldrb	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	b292      	uxth	r2, r2
 80036ec:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3301      	adds	r3, #1
 80036f2:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1ce      	bne.n	80036aa <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2200      	movs	r2, #0
 8003714:	2140      	movs	r1, #64	; 0x40
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f905 	bl	8003926 <USART_WaitOnFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_USART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e026      	b.n	8003774 <HAL_USART_Transmit+0x154>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2240      	movs	r2, #64	; 0x40
 800372c:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2208      	movs	r2, #8
 8003734:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	8b1b      	ldrh	r3, [r3, #24]
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0208 	orr.w	r2, r2, #8
 8003746:	b292      	uxth	r2, r2
 8003748:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	8b1b      	ldrh	r3, [r3, #24]
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0210 	orr.w	r2, r2, #16
 800375a:	b292      	uxth	r2, r2
 800375c:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	e000      	b.n	8003774 <HAL_USART_Transmit+0x154>
  }
  else
  {
    return HAL_BUSY;
 8003772:	2302      	movs	r3, #2
  }
}
 8003774:	4618      	mov	r0, r3
 8003776:	3720      	adds	r7, #32
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_USART_Receive>:
  * @param Size Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08a      	sub	sp, #40	; 0x28
 8003780:	af02      	add	r7, sp, #8
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	4613      	mov	r3, r2
 800378a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *prxdata8bits;
  uint16_t *prxdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	f040 80c1 	bne.w	800391c <HAL_USART_Receive+0x1a0>
  {
    if ((pRxData == NULL) || (Size == 0U))
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <HAL_USART_Receive+0x2a>
 80037a0:	88fb      	ldrh	r3, [r7, #6]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_USART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e0b9      	b.n	800391e <HAL_USART_Receive+0x1a2>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_USART_Receive+0x3c>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e0b2      	b.n	800391e <HAL_USART_Receive+0x1a2>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_RX;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2222      	movs	r2, #34	; 0x22
 80037ca:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80037ce:	f7fd fa55 	bl	8000c7c <HAL_GetTick>
 80037d2:	6178      	str	r0, [r7, #20]

    husart->RxXferSize = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	88fa      	ldrh	r2, [r7, #6]
 80037d8:	861a      	strh	r2, [r3, #48]	; 0x30
    husart->RxXferCount = Size;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	88fa      	ldrh	r2, [r7, #6]
 80037de:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Computation of USART mask to apply to RDR register */
    USART_MASK_COMPUTATION(husart);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e8:	d10c      	bne.n	8003804 <HAL_USART_Receive+0x88>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d104      	bne.n	80037fc <HAL_USART_Receive+0x80>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80037f8:	869a      	strh	r2, [r3, #52]	; 0x34
 80037fa:	e027      	b.n	800384c <HAL_USART_Receive+0xd0>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	22ff      	movs	r2, #255	; 0xff
 8003800:	869a      	strh	r2, [r3, #52]	; 0x34
 8003802:	e023      	b.n	800384c <HAL_USART_Receive+0xd0>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10b      	bne.n	8003824 <HAL_USART_Receive+0xa8>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d103      	bne.n	800381c <HAL_USART_Receive+0xa0>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	22ff      	movs	r2, #255	; 0xff
 8003818:	869a      	strh	r2, [r3, #52]	; 0x34
 800381a:	e017      	b.n	800384c <HAL_USART_Receive+0xd0>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	227f      	movs	r2, #127	; 0x7f
 8003820:	869a      	strh	r2, [r3, #52]	; 0x34
 8003822:	e013      	b.n	800384c <HAL_USART_Receive+0xd0>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800382c:	d10b      	bne.n	8003846 <HAL_USART_Receive+0xca>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d103      	bne.n	800383e <HAL_USART_Receive+0xc2>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	227f      	movs	r2, #127	; 0x7f
 800383a:	869a      	strh	r2, [r3, #52]	; 0x34
 800383c:	e006      	b.n	800384c <HAL_USART_Receive+0xd0>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	223f      	movs	r2, #63	; 0x3f
 8003842:	869a      	strh	r2, [r3, #52]	; 0x34
 8003844:	e002      	b.n	800384c <HAL_USART_Receive+0xd0>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	869a      	strh	r2, [r3, #52]	; 0x34
    uhMask = husart->Mask;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003850:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800385a:	d108      	bne.n	800386e <HAL_USART_Receive+0xf2>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d104      	bne.n	800386e <HAL_USART_Receive+0xf2>
    {
      prxdata8bits  = NULL;
 8003864:	2300      	movs	r3, #0
 8003866:	61fb      	str	r3, [r7, #28]
      prxdata16bits = (uint16_t *) pRxData;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	61bb      	str	r3, [r7, #24]
 800386c:	e003      	b.n	8003876 <HAL_USART_Receive+0xfa>
    }
    else
    {
      prxdata8bits  = pRxData;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	61fb      	str	r3, [r7, #28]
      prxdata16bits = NULL;
 8003872:	2300      	movs	r3, #0
 8003874:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (husart->RxXferCount > 0U)
 8003876:	e042      	b.n	80038fe <HAL_USART_Receive+0x182>
      {
        /* Wait until TXE flag is set to send dummy byte in order to generate the
        * clock for the slave to send data.
        * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
        * can be written for all the cases. */
        if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2200      	movs	r2, #0
 8003880:	2180      	movs	r1, #128	; 0x80
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f84f 	bl	8003926 <USART_WaitOnFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_USART_Receive+0x116>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e045      	b.n	800391e <HAL_USART_Receive+0x1a2>
        }
        husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x0FF);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	22ff      	movs	r2, #255	; 0xff
 8003898:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait for RXNE Flag */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2200      	movs	r2, #0
 80038a2:	2120      	movs	r1, #32
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f83e 	bl	8003926 <USART_WaitOnFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_USART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e034      	b.n	800391e <HAL_USART_Receive+0x1a2>
      }

      if (prxdata8bits == NULL)
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10c      	bne.n	80038d4 <HAL_USART_Receive+0x158>
      {
        *prxdata16bits = (uint16_t)(husart->Instance->RDR & uhMask);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	8a7b      	ldrh	r3, [r7, #18]
 80038c4:	4013      	ands	r3, r2
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	801a      	strh	r2, [r3, #0]
        prxdata16bits++;
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	3302      	adds	r3, #2
 80038d0:	61bb      	str	r3, [r7, #24]
 80038d2:	e00d      	b.n	80038f0 <HAL_USART_Receive+0x174>
      }
      else
      {
        *prxdata8bits = (uint8_t)(husart->Instance->RDR & (uint8_t)(uhMask & 0xFFU));
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80038da:	b29b      	uxth	r3, r3
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	8a7b      	ldrh	r3, [r7, #18]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	4013      	ands	r3, r2
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	701a      	strb	r2, [r3, #0]
        prxdata8bits++;
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3301      	adds	r3, #1
 80038ee:	61fb      	str	r3, [r7, #28]
      }

      husart->RxXferCount--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	865a      	strh	r2, [r3, #50]	; 0x32
    while (husart->RxXferCount > 0U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1b7      	bne.n	8003878 <HAL_USART_Receive+0xfc>
      __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR2_SLVEN */

    /* At end of Rx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	e000      	b.n	800391e <HAL_USART_Receive+0x1a2>
  }
  else
  {
    return HAL_BUSY;
 800391c:	2302      	movs	r3, #2
  }
}
 800391e:	4618      	mov	r0, r3
 8003920:	3720      	adds	r7, #32
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	603b      	str	r3, [r7, #0]
 8003932:	4613      	mov	r3, r2
 8003934:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003936:	e018      	b.n	800396a <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393e:	d014      	beq.n	800396a <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003940:	f7fd f99c 	bl	8000c7c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	429a      	cmp	r2, r3
 800394e:	d302      	bcc.n	8003956 <USART_WaitOnFlagUntilTimeout+0x30>
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e00f      	b.n	800398a <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69da      	ldr	r2, [r3, #28]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4013      	ands	r3, r2
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	429a      	cmp	r2, r3
 8003978:	bf0c      	ite	eq
 800397a:	2301      	moveq	r3, #1
 800397c:	2300      	movne	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	429a      	cmp	r2, r3
 8003986:	d0d7      	beq.n	8003938 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80039a0:	2300      	movs	r3, #0
 80039a2:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	4b9b      	ldr	r3, [pc, #620]	; (8003c30 <USART_SetConfig+0x29c>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6812      	ldr	r2, [r2, #0]
 80039c8:	6979      	ldr	r1, [r7, #20]
 80039ca:	430b      	orrs	r3, r1
 80039cc:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80039ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039d2:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a88      	ldr	r2, [pc, #544]	; (8003c34 <USART_SetConfig+0x2a0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d122      	bne.n	8003a5c <USART_SetConfig+0xc8>
 8003a16:	4b88      	ldr	r3, [pc, #544]	; (8003c38 <USART_SetConfig+0x2a4>)
 8003a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1c:	f003 0303 	and.w	r3, r3, #3
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d817      	bhi.n	8003a54 <USART_SetConfig+0xc0>
 8003a24:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <USART_SetConfig+0x98>)
 8003a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2a:	bf00      	nop
 8003a2c:	08003a3d 	.word	0x08003a3d
 8003a30:	08003a49 	.word	0x08003a49
 8003a34:	08003a43 	.word	0x08003a43
 8003a38:	08003a4f 	.word	0x08003a4f
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	77fb      	strb	r3, [r7, #31]
 8003a40:	e06e      	b.n	8003b20 <USART_SetConfig+0x18c>
 8003a42:	2302      	movs	r3, #2
 8003a44:	77fb      	strb	r3, [r7, #31]
 8003a46:	e06b      	b.n	8003b20 <USART_SetConfig+0x18c>
 8003a48:	2304      	movs	r3, #4
 8003a4a:	77fb      	strb	r3, [r7, #31]
 8003a4c:	e068      	b.n	8003b20 <USART_SetConfig+0x18c>
 8003a4e:	2308      	movs	r3, #8
 8003a50:	77fb      	strb	r3, [r7, #31]
 8003a52:	e065      	b.n	8003b20 <USART_SetConfig+0x18c>
 8003a54:	2310      	movs	r3, #16
 8003a56:	77fb      	strb	r3, [r7, #31]
 8003a58:	bf00      	nop
 8003a5a:	e061      	b.n	8003b20 <USART_SetConfig+0x18c>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a76      	ldr	r2, [pc, #472]	; (8003c3c <USART_SetConfig+0x2a8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d134      	bne.n	8003ad0 <USART_SetConfig+0x13c>
 8003a66:	4b74      	ldr	r3, [pc, #464]	; (8003c38 <USART_SetConfig+0x2a4>)
 8003a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6c:	f003 030c 	and.w	r3, r3, #12
 8003a70:	2b0c      	cmp	r3, #12
 8003a72:	d829      	bhi.n	8003ac8 <USART_SetConfig+0x134>
 8003a74:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <USART_SetConfig+0xe8>)
 8003a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7a:	bf00      	nop
 8003a7c:	08003ab1 	.word	0x08003ab1
 8003a80:	08003ac9 	.word	0x08003ac9
 8003a84:	08003ac9 	.word	0x08003ac9
 8003a88:	08003ac9 	.word	0x08003ac9
 8003a8c:	08003abd 	.word	0x08003abd
 8003a90:	08003ac9 	.word	0x08003ac9
 8003a94:	08003ac9 	.word	0x08003ac9
 8003a98:	08003ac9 	.word	0x08003ac9
 8003a9c:	08003ab7 	.word	0x08003ab7
 8003aa0:	08003ac9 	.word	0x08003ac9
 8003aa4:	08003ac9 	.word	0x08003ac9
 8003aa8:	08003ac9 	.word	0x08003ac9
 8003aac:	08003ac3 	.word	0x08003ac3
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	77fb      	strb	r3, [r7, #31]
 8003ab4:	e034      	b.n	8003b20 <USART_SetConfig+0x18c>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	77fb      	strb	r3, [r7, #31]
 8003aba:	e031      	b.n	8003b20 <USART_SetConfig+0x18c>
 8003abc:	2304      	movs	r3, #4
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e02e      	b.n	8003b20 <USART_SetConfig+0x18c>
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	77fb      	strb	r3, [r7, #31]
 8003ac6:	e02b      	b.n	8003b20 <USART_SetConfig+0x18c>
 8003ac8:	2310      	movs	r3, #16
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	bf00      	nop
 8003ace:	e027      	b.n	8003b20 <USART_SetConfig+0x18c>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a5a      	ldr	r2, [pc, #360]	; (8003c40 <USART_SetConfig+0x2ac>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d120      	bne.n	8003b1c <USART_SetConfig+0x188>
 8003ada:	4b57      	ldr	r3, [pc, #348]	; (8003c38 <USART_SetConfig+0x2a4>)
 8003adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d00f      	beq.n	8003b08 <USART_SetConfig+0x174>
 8003ae8:	2b10      	cmp	r3, #16
 8003aea:	d802      	bhi.n	8003af2 <USART_SetConfig+0x15e>
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <USART_SetConfig+0x168>
 8003af0:	e010      	b.n	8003b14 <USART_SetConfig+0x180>
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	d005      	beq.n	8003b02 <USART_SetConfig+0x16e>
 8003af6:	2b30      	cmp	r3, #48	; 0x30
 8003af8:	d009      	beq.n	8003b0e <USART_SetConfig+0x17a>
 8003afa:	e00b      	b.n	8003b14 <USART_SetConfig+0x180>
 8003afc:	2300      	movs	r3, #0
 8003afe:	77fb      	strb	r3, [r7, #31]
 8003b00:	e00e      	b.n	8003b20 <USART_SetConfig+0x18c>
 8003b02:	2302      	movs	r3, #2
 8003b04:	77fb      	strb	r3, [r7, #31]
 8003b06:	e00b      	b.n	8003b20 <USART_SetConfig+0x18c>
 8003b08:	2304      	movs	r3, #4
 8003b0a:	77fb      	strb	r3, [r7, #31]
 8003b0c:	e008      	b.n	8003b20 <USART_SetConfig+0x18c>
 8003b0e:	2308      	movs	r3, #8
 8003b10:	77fb      	strb	r3, [r7, #31]
 8003b12:	e005      	b.n	8003b20 <USART_SetConfig+0x18c>
 8003b14:	2310      	movs	r3, #16
 8003b16:	77fb      	strb	r3, [r7, #31]
 8003b18:	bf00      	nop
 8003b1a:	e001      	b.n	8003b20 <USART_SetConfig+0x18c>
 8003b1c:	2310      	movs	r3, #16
 8003b1e:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8003b20:	7ffb      	ldrb	r3, [r7, #31]
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d859      	bhi.n	8003bda <USART_SetConfig+0x246>
 8003b26:	a201      	add	r2, pc, #4	; (adr r2, 8003b2c <USART_SetConfig+0x198>)
 8003b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2c:	08003b51 	.word	0x08003b51
 8003b30:	08003b6f 	.word	0x08003b6f
 8003b34:	08003b8d 	.word	0x08003b8d
 8003b38:	08003bdb 	.word	0x08003bdb
 8003b3c:	08003ba7 	.word	0x08003ba7
 8003b40:	08003bdb 	.word	0x08003bdb
 8003b44:	08003bdb 	.word	0x08003bdb
 8003b48:	08003bdb 	.word	0x08003bdb
 8003b4c:	08003bc5 	.word	0x08003bc5
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b50:	f7fe ffe0 	bl	8002b14 <HAL_RCC_GetPCLK1Freq>
 8003b54:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	005a      	lsls	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	085b      	lsrs	r3, r3, #1
 8003b60:	441a      	add	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8003b6c:	e038      	b.n	8003be0 <USART_SetConfig+0x24c>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b6e:	f7fe ffe7 	bl	8002b40 <HAL_RCC_GetPCLK2Freq>
 8003b72:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	005a      	lsls	r2, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	085b      	lsrs	r3, r3, #1
 8003b7e:	441a      	add	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8003b8a:	e029      	b.n	8003be0 <USART_SetConfig+0x24c>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	085b      	lsrs	r3, r3, #1
 8003b92:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003b96:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6852      	ldr	r2, [r2, #4]
 8003b9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8003ba4:	e01c      	b.n	8003be0 <USART_SetConfig+0x24c>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8003ba6:	f7fe ff1f 	bl	80029e8 <HAL_RCC_GetSysClockFreq>
 8003baa:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	005a      	lsls	r2, r3, #1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	085b      	lsrs	r3, r3, #1
 8003bb6:	441a      	add	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8003bc2:	e00d      	b.n	8003be0 <USART_SetConfig+0x24c>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	085b      	lsrs	r3, r3, #1
 8003bca:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8003bd8:	e002      	b.n	8003be0 <USART_SetConfig+0x24c>
    default:
      ret = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	77bb      	strb	r3, [r7, #30]
      break;
 8003bde:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	2b0f      	cmp	r3, #15
 8003be4:	d916      	bls.n	8003c14 <USART_SetConfig+0x280>
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bec:	d212      	bcs.n	8003c14 <USART_SetConfig+0x280>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	f023 030f 	bic.w	r3, r3, #15
 8003bf6:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	085b      	lsrs	r3, r3, #1
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	89fb      	ldrh	r3, [r7, #14]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	89fa      	ldrh	r2, [r7, #14]
 8003c10:	60da      	str	r2, [r3, #12]
 8003c12:	e001      	b.n	8003c18 <USART_SetConfig+0x284>
  }
  else
  {
    ret = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8003c24:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3720      	adds	r7, #32
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	efff69f3 	.word	0xefff69f3
 8003c34:	40013800 	.word	0x40013800
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	40004400 	.word	0x40004400
 8003c40:	40004800 	.word	0x40004800

08003c44 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003c52:	f7fd f813 	bl	8000c7c <HAL_GetTick>
 8003c56:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d10e      	bne.n	8003c84 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8003c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7ff fe56 	bl	8003926 <USART_WaitOnFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e01e      	b.n	8003cc2 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d10e      	bne.n	8003cb0 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8003c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff fe40 	bl	8003926 <USART_WaitOnFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e008      	b.n	8003cc2 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <__errno>:
 8003ccc:	4b01      	ldr	r3, [pc, #4]	; (8003cd4 <__errno+0x8>)
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	2000000c 	.word	0x2000000c

08003cd8 <__libc_init_array>:
 8003cd8:	b570      	push	{r4, r5, r6, lr}
 8003cda:	4e0d      	ldr	r6, [pc, #52]	; (8003d10 <__libc_init_array+0x38>)
 8003cdc:	4c0d      	ldr	r4, [pc, #52]	; (8003d14 <__libc_init_array+0x3c>)
 8003cde:	1ba4      	subs	r4, r4, r6
 8003ce0:	10a4      	asrs	r4, r4, #2
 8003ce2:	2500      	movs	r5, #0
 8003ce4:	42a5      	cmp	r5, r4
 8003ce6:	d109      	bne.n	8003cfc <__libc_init_array+0x24>
 8003ce8:	4e0b      	ldr	r6, [pc, #44]	; (8003d18 <__libc_init_array+0x40>)
 8003cea:	4c0c      	ldr	r4, [pc, #48]	; (8003d1c <__libc_init_array+0x44>)
 8003cec:	f000 ff04 	bl	8004af8 <_init>
 8003cf0:	1ba4      	subs	r4, r4, r6
 8003cf2:	10a4      	asrs	r4, r4, #2
 8003cf4:	2500      	movs	r5, #0
 8003cf6:	42a5      	cmp	r5, r4
 8003cf8:	d105      	bne.n	8003d06 <__libc_init_array+0x2e>
 8003cfa:	bd70      	pop	{r4, r5, r6, pc}
 8003cfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d00:	4798      	blx	r3
 8003d02:	3501      	adds	r5, #1
 8003d04:	e7ee      	b.n	8003ce4 <__libc_init_array+0xc>
 8003d06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d0a:	4798      	blx	r3
 8003d0c:	3501      	adds	r5, #1
 8003d0e:	e7f2      	b.n	8003cf6 <__libc_init_array+0x1e>
 8003d10:	08004bf8 	.word	0x08004bf8
 8003d14:	08004bf8 	.word	0x08004bf8
 8003d18:	08004bf8 	.word	0x08004bf8
 8003d1c:	08004bfc 	.word	0x08004bfc

08003d20 <memset>:
 8003d20:	4402      	add	r2, r0
 8003d22:	4603      	mov	r3, r0
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d100      	bne.n	8003d2a <memset+0xa>
 8003d28:	4770      	bx	lr
 8003d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d2e:	e7f9      	b.n	8003d24 <memset+0x4>

08003d30 <iprintf>:
 8003d30:	b40f      	push	{r0, r1, r2, r3}
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <iprintf+0x2c>)
 8003d34:	b513      	push	{r0, r1, r4, lr}
 8003d36:	681c      	ldr	r4, [r3, #0]
 8003d38:	b124      	cbz	r4, 8003d44 <iprintf+0x14>
 8003d3a:	69a3      	ldr	r3, [r4, #24]
 8003d3c:	b913      	cbnz	r3, 8003d44 <iprintf+0x14>
 8003d3e:	4620      	mov	r0, r4
 8003d40:	f000 f84e 	bl	8003de0 <__sinit>
 8003d44:	ab05      	add	r3, sp, #20
 8003d46:	9a04      	ldr	r2, [sp, #16]
 8003d48:	68a1      	ldr	r1, [r4, #8]
 8003d4a:	9301      	str	r3, [sp, #4]
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	f000 f955 	bl	8003ffc <_vfiprintf_r>
 8003d52:	b002      	add	sp, #8
 8003d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d58:	b004      	add	sp, #16
 8003d5a:	4770      	bx	lr
 8003d5c:	2000000c 	.word	0x2000000c

08003d60 <std>:
 8003d60:	2300      	movs	r3, #0
 8003d62:	b510      	push	{r4, lr}
 8003d64:	4604      	mov	r4, r0
 8003d66:	e9c0 3300 	strd	r3, r3, [r0]
 8003d6a:	6083      	str	r3, [r0, #8]
 8003d6c:	8181      	strh	r1, [r0, #12]
 8003d6e:	6643      	str	r3, [r0, #100]	; 0x64
 8003d70:	81c2      	strh	r2, [r0, #14]
 8003d72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d76:	6183      	str	r3, [r0, #24]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	2208      	movs	r2, #8
 8003d7c:	305c      	adds	r0, #92	; 0x5c
 8003d7e:	f7ff ffcf 	bl	8003d20 <memset>
 8003d82:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <std+0x38>)
 8003d84:	6263      	str	r3, [r4, #36]	; 0x24
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <std+0x3c>)
 8003d88:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d8a:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <std+0x40>)
 8003d8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d8e:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <std+0x44>)
 8003d90:	6224      	str	r4, [r4, #32]
 8003d92:	6323      	str	r3, [r4, #48]	; 0x30
 8003d94:	bd10      	pop	{r4, pc}
 8003d96:	bf00      	nop
 8003d98:	08004559 	.word	0x08004559
 8003d9c:	0800457b 	.word	0x0800457b
 8003da0:	080045b3 	.word	0x080045b3
 8003da4:	080045d7 	.word	0x080045d7

08003da8 <_cleanup_r>:
 8003da8:	4901      	ldr	r1, [pc, #4]	; (8003db0 <_cleanup_r+0x8>)
 8003daa:	f000 b885 	b.w	8003eb8 <_fwalk_reent>
 8003dae:	bf00      	nop
 8003db0:	080048b1 	.word	0x080048b1

08003db4 <__sfmoreglue>:
 8003db4:	b570      	push	{r4, r5, r6, lr}
 8003db6:	1e4a      	subs	r2, r1, #1
 8003db8:	2568      	movs	r5, #104	; 0x68
 8003dba:	4355      	muls	r5, r2
 8003dbc:	460e      	mov	r6, r1
 8003dbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003dc2:	f000 f897 	bl	8003ef4 <_malloc_r>
 8003dc6:	4604      	mov	r4, r0
 8003dc8:	b140      	cbz	r0, 8003ddc <__sfmoreglue+0x28>
 8003dca:	2100      	movs	r1, #0
 8003dcc:	e9c0 1600 	strd	r1, r6, [r0]
 8003dd0:	300c      	adds	r0, #12
 8003dd2:	60a0      	str	r0, [r4, #8]
 8003dd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003dd8:	f7ff ffa2 	bl	8003d20 <memset>
 8003ddc:	4620      	mov	r0, r4
 8003dde:	bd70      	pop	{r4, r5, r6, pc}

08003de0 <__sinit>:
 8003de0:	6983      	ldr	r3, [r0, #24]
 8003de2:	b510      	push	{r4, lr}
 8003de4:	4604      	mov	r4, r0
 8003de6:	bb33      	cbnz	r3, 8003e36 <__sinit+0x56>
 8003de8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003dec:	6503      	str	r3, [r0, #80]	; 0x50
 8003dee:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <__sinit+0x58>)
 8003df0:	4a12      	ldr	r2, [pc, #72]	; (8003e3c <__sinit+0x5c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6282      	str	r2, [r0, #40]	; 0x28
 8003df6:	4298      	cmp	r0, r3
 8003df8:	bf04      	itt	eq
 8003dfa:	2301      	moveq	r3, #1
 8003dfc:	6183      	streq	r3, [r0, #24]
 8003dfe:	f000 f81f 	bl	8003e40 <__sfp>
 8003e02:	6060      	str	r0, [r4, #4]
 8003e04:	4620      	mov	r0, r4
 8003e06:	f000 f81b 	bl	8003e40 <__sfp>
 8003e0a:	60a0      	str	r0, [r4, #8]
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f000 f817 	bl	8003e40 <__sfp>
 8003e12:	2200      	movs	r2, #0
 8003e14:	60e0      	str	r0, [r4, #12]
 8003e16:	2104      	movs	r1, #4
 8003e18:	6860      	ldr	r0, [r4, #4]
 8003e1a:	f7ff ffa1 	bl	8003d60 <std>
 8003e1e:	2201      	movs	r2, #1
 8003e20:	2109      	movs	r1, #9
 8003e22:	68a0      	ldr	r0, [r4, #8]
 8003e24:	f7ff ff9c 	bl	8003d60 <std>
 8003e28:	2202      	movs	r2, #2
 8003e2a:	2112      	movs	r1, #18
 8003e2c:	68e0      	ldr	r0, [r4, #12]
 8003e2e:	f7ff ff97 	bl	8003d60 <std>
 8003e32:	2301      	movs	r3, #1
 8003e34:	61a3      	str	r3, [r4, #24]
 8003e36:	bd10      	pop	{r4, pc}
 8003e38:	08004b60 	.word	0x08004b60
 8003e3c:	08003da9 	.word	0x08003da9

08003e40 <__sfp>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <__sfp+0x70>)
 8003e44:	681e      	ldr	r6, [r3, #0]
 8003e46:	69b3      	ldr	r3, [r6, #24]
 8003e48:	4607      	mov	r7, r0
 8003e4a:	b913      	cbnz	r3, 8003e52 <__sfp+0x12>
 8003e4c:	4630      	mov	r0, r6
 8003e4e:	f7ff ffc7 	bl	8003de0 <__sinit>
 8003e52:	3648      	adds	r6, #72	; 0x48
 8003e54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	d503      	bpl.n	8003e64 <__sfp+0x24>
 8003e5c:	6833      	ldr	r3, [r6, #0]
 8003e5e:	b133      	cbz	r3, 8003e6e <__sfp+0x2e>
 8003e60:	6836      	ldr	r6, [r6, #0]
 8003e62:	e7f7      	b.n	8003e54 <__sfp+0x14>
 8003e64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e68:	b16d      	cbz	r5, 8003e86 <__sfp+0x46>
 8003e6a:	3468      	adds	r4, #104	; 0x68
 8003e6c:	e7f4      	b.n	8003e58 <__sfp+0x18>
 8003e6e:	2104      	movs	r1, #4
 8003e70:	4638      	mov	r0, r7
 8003e72:	f7ff ff9f 	bl	8003db4 <__sfmoreglue>
 8003e76:	6030      	str	r0, [r6, #0]
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	d1f1      	bne.n	8003e60 <__sfp+0x20>
 8003e7c:	230c      	movs	r3, #12
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	4604      	mov	r4, r0
 8003e82:	4620      	mov	r0, r4
 8003e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e86:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <__sfp+0x74>)
 8003e88:	6665      	str	r5, [r4, #100]	; 0x64
 8003e8a:	e9c4 5500 	strd	r5, r5, [r4]
 8003e8e:	60a5      	str	r5, [r4, #8]
 8003e90:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003e94:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003e98:	2208      	movs	r2, #8
 8003e9a:	4629      	mov	r1, r5
 8003e9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ea0:	f7ff ff3e 	bl	8003d20 <memset>
 8003ea4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ea8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003eac:	e7e9      	b.n	8003e82 <__sfp+0x42>
 8003eae:	bf00      	nop
 8003eb0:	08004b60 	.word	0x08004b60
 8003eb4:	ffff0001 	.word	0xffff0001

08003eb8 <_fwalk_reent>:
 8003eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ebc:	4680      	mov	r8, r0
 8003ebe:	4689      	mov	r9, r1
 8003ec0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ec4:	2600      	movs	r6, #0
 8003ec6:	b914      	cbnz	r4, 8003ece <_fwalk_reent+0x16>
 8003ec8:	4630      	mov	r0, r6
 8003eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ece:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003ed2:	3f01      	subs	r7, #1
 8003ed4:	d501      	bpl.n	8003eda <_fwalk_reent+0x22>
 8003ed6:	6824      	ldr	r4, [r4, #0]
 8003ed8:	e7f5      	b.n	8003ec6 <_fwalk_reent+0xe>
 8003eda:	89ab      	ldrh	r3, [r5, #12]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d907      	bls.n	8003ef0 <_fwalk_reent+0x38>
 8003ee0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	d003      	beq.n	8003ef0 <_fwalk_reent+0x38>
 8003ee8:	4629      	mov	r1, r5
 8003eea:	4640      	mov	r0, r8
 8003eec:	47c8      	blx	r9
 8003eee:	4306      	orrs	r6, r0
 8003ef0:	3568      	adds	r5, #104	; 0x68
 8003ef2:	e7ee      	b.n	8003ed2 <_fwalk_reent+0x1a>

08003ef4 <_malloc_r>:
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	1ccd      	adds	r5, r1, #3
 8003ef8:	f025 0503 	bic.w	r5, r5, #3
 8003efc:	3508      	adds	r5, #8
 8003efe:	2d0c      	cmp	r5, #12
 8003f00:	bf38      	it	cc
 8003f02:	250c      	movcc	r5, #12
 8003f04:	2d00      	cmp	r5, #0
 8003f06:	4606      	mov	r6, r0
 8003f08:	db01      	blt.n	8003f0e <_malloc_r+0x1a>
 8003f0a:	42a9      	cmp	r1, r5
 8003f0c:	d903      	bls.n	8003f16 <_malloc_r+0x22>
 8003f0e:	230c      	movs	r3, #12
 8003f10:	6033      	str	r3, [r6, #0]
 8003f12:	2000      	movs	r0, #0
 8003f14:	bd70      	pop	{r4, r5, r6, pc}
 8003f16:	f000 fd6b 	bl	80049f0 <__malloc_lock>
 8003f1a:	4a21      	ldr	r2, [pc, #132]	; (8003fa0 <_malloc_r+0xac>)
 8003f1c:	6814      	ldr	r4, [r2, #0]
 8003f1e:	4621      	mov	r1, r4
 8003f20:	b991      	cbnz	r1, 8003f48 <_malloc_r+0x54>
 8003f22:	4c20      	ldr	r4, [pc, #128]	; (8003fa4 <_malloc_r+0xb0>)
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	b91b      	cbnz	r3, 8003f30 <_malloc_r+0x3c>
 8003f28:	4630      	mov	r0, r6
 8003f2a:	f000 fb05 	bl	8004538 <_sbrk_r>
 8003f2e:	6020      	str	r0, [r4, #0]
 8003f30:	4629      	mov	r1, r5
 8003f32:	4630      	mov	r0, r6
 8003f34:	f000 fb00 	bl	8004538 <_sbrk_r>
 8003f38:	1c43      	adds	r3, r0, #1
 8003f3a:	d124      	bne.n	8003f86 <_malloc_r+0x92>
 8003f3c:	230c      	movs	r3, #12
 8003f3e:	6033      	str	r3, [r6, #0]
 8003f40:	4630      	mov	r0, r6
 8003f42:	f000 fd56 	bl	80049f2 <__malloc_unlock>
 8003f46:	e7e4      	b.n	8003f12 <_malloc_r+0x1e>
 8003f48:	680b      	ldr	r3, [r1, #0]
 8003f4a:	1b5b      	subs	r3, r3, r5
 8003f4c:	d418      	bmi.n	8003f80 <_malloc_r+0x8c>
 8003f4e:	2b0b      	cmp	r3, #11
 8003f50:	d90f      	bls.n	8003f72 <_malloc_r+0x7e>
 8003f52:	600b      	str	r3, [r1, #0]
 8003f54:	50cd      	str	r5, [r1, r3]
 8003f56:	18cc      	adds	r4, r1, r3
 8003f58:	4630      	mov	r0, r6
 8003f5a:	f000 fd4a 	bl	80049f2 <__malloc_unlock>
 8003f5e:	f104 000b 	add.w	r0, r4, #11
 8003f62:	1d23      	adds	r3, r4, #4
 8003f64:	f020 0007 	bic.w	r0, r0, #7
 8003f68:	1ac3      	subs	r3, r0, r3
 8003f6a:	d0d3      	beq.n	8003f14 <_malloc_r+0x20>
 8003f6c:	425a      	negs	r2, r3
 8003f6e:	50e2      	str	r2, [r4, r3]
 8003f70:	e7d0      	b.n	8003f14 <_malloc_r+0x20>
 8003f72:	428c      	cmp	r4, r1
 8003f74:	684b      	ldr	r3, [r1, #4]
 8003f76:	bf16      	itet	ne
 8003f78:	6063      	strne	r3, [r4, #4]
 8003f7a:	6013      	streq	r3, [r2, #0]
 8003f7c:	460c      	movne	r4, r1
 8003f7e:	e7eb      	b.n	8003f58 <_malloc_r+0x64>
 8003f80:	460c      	mov	r4, r1
 8003f82:	6849      	ldr	r1, [r1, #4]
 8003f84:	e7cc      	b.n	8003f20 <_malloc_r+0x2c>
 8003f86:	1cc4      	adds	r4, r0, #3
 8003f88:	f024 0403 	bic.w	r4, r4, #3
 8003f8c:	42a0      	cmp	r0, r4
 8003f8e:	d005      	beq.n	8003f9c <_malloc_r+0xa8>
 8003f90:	1a21      	subs	r1, r4, r0
 8003f92:	4630      	mov	r0, r6
 8003f94:	f000 fad0 	bl	8004538 <_sbrk_r>
 8003f98:	3001      	adds	r0, #1
 8003f9a:	d0cf      	beq.n	8003f3c <_malloc_r+0x48>
 8003f9c:	6025      	str	r5, [r4, #0]
 8003f9e:	e7db      	b.n	8003f58 <_malloc_r+0x64>
 8003fa0:	200000c0 	.word	0x200000c0
 8003fa4:	200000c4 	.word	0x200000c4

08003fa8 <__sfputc_r>:
 8003fa8:	6893      	ldr	r3, [r2, #8]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	b410      	push	{r4}
 8003fb0:	6093      	str	r3, [r2, #8]
 8003fb2:	da08      	bge.n	8003fc6 <__sfputc_r+0x1e>
 8003fb4:	6994      	ldr	r4, [r2, #24]
 8003fb6:	42a3      	cmp	r3, r4
 8003fb8:	db01      	blt.n	8003fbe <__sfputc_r+0x16>
 8003fba:	290a      	cmp	r1, #10
 8003fbc:	d103      	bne.n	8003fc6 <__sfputc_r+0x1e>
 8003fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fc2:	f000 bb0d 	b.w	80045e0 <__swbuf_r>
 8003fc6:	6813      	ldr	r3, [r2, #0]
 8003fc8:	1c58      	adds	r0, r3, #1
 8003fca:	6010      	str	r0, [r2, #0]
 8003fcc:	7019      	strb	r1, [r3, #0]
 8003fce:	4608      	mov	r0, r1
 8003fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <__sfputs_r>:
 8003fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd8:	4606      	mov	r6, r0
 8003fda:	460f      	mov	r7, r1
 8003fdc:	4614      	mov	r4, r2
 8003fde:	18d5      	adds	r5, r2, r3
 8003fe0:	42ac      	cmp	r4, r5
 8003fe2:	d101      	bne.n	8003fe8 <__sfputs_r+0x12>
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	e007      	b.n	8003ff8 <__sfputs_r+0x22>
 8003fe8:	463a      	mov	r2, r7
 8003fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fee:	4630      	mov	r0, r6
 8003ff0:	f7ff ffda 	bl	8003fa8 <__sfputc_r>
 8003ff4:	1c43      	adds	r3, r0, #1
 8003ff6:	d1f3      	bne.n	8003fe0 <__sfputs_r+0xa>
 8003ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ffc <_vfiprintf_r>:
 8003ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004000:	460c      	mov	r4, r1
 8004002:	b09d      	sub	sp, #116	; 0x74
 8004004:	4617      	mov	r7, r2
 8004006:	461d      	mov	r5, r3
 8004008:	4606      	mov	r6, r0
 800400a:	b118      	cbz	r0, 8004014 <_vfiprintf_r+0x18>
 800400c:	6983      	ldr	r3, [r0, #24]
 800400e:	b90b      	cbnz	r3, 8004014 <_vfiprintf_r+0x18>
 8004010:	f7ff fee6 	bl	8003de0 <__sinit>
 8004014:	4b7c      	ldr	r3, [pc, #496]	; (8004208 <_vfiprintf_r+0x20c>)
 8004016:	429c      	cmp	r4, r3
 8004018:	d158      	bne.n	80040cc <_vfiprintf_r+0xd0>
 800401a:	6874      	ldr	r4, [r6, #4]
 800401c:	89a3      	ldrh	r3, [r4, #12]
 800401e:	0718      	lsls	r0, r3, #28
 8004020:	d55e      	bpl.n	80040e0 <_vfiprintf_r+0xe4>
 8004022:	6923      	ldr	r3, [r4, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d05b      	beq.n	80040e0 <_vfiprintf_r+0xe4>
 8004028:	2300      	movs	r3, #0
 800402a:	9309      	str	r3, [sp, #36]	; 0x24
 800402c:	2320      	movs	r3, #32
 800402e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004032:	2330      	movs	r3, #48	; 0x30
 8004034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004038:	9503      	str	r5, [sp, #12]
 800403a:	f04f 0b01 	mov.w	fp, #1
 800403e:	46b8      	mov	r8, r7
 8004040:	4645      	mov	r5, r8
 8004042:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004046:	b10b      	cbz	r3, 800404c <_vfiprintf_r+0x50>
 8004048:	2b25      	cmp	r3, #37	; 0x25
 800404a:	d154      	bne.n	80040f6 <_vfiprintf_r+0xfa>
 800404c:	ebb8 0a07 	subs.w	sl, r8, r7
 8004050:	d00b      	beq.n	800406a <_vfiprintf_r+0x6e>
 8004052:	4653      	mov	r3, sl
 8004054:	463a      	mov	r2, r7
 8004056:	4621      	mov	r1, r4
 8004058:	4630      	mov	r0, r6
 800405a:	f7ff ffbc 	bl	8003fd6 <__sfputs_r>
 800405e:	3001      	adds	r0, #1
 8004060:	f000 80c2 	beq.w	80041e8 <_vfiprintf_r+0x1ec>
 8004064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004066:	4453      	add	r3, sl
 8004068:	9309      	str	r3, [sp, #36]	; 0x24
 800406a:	f898 3000 	ldrb.w	r3, [r8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 80ba 	beq.w	80041e8 <_vfiprintf_r+0x1ec>
 8004074:	2300      	movs	r3, #0
 8004076:	f04f 32ff 	mov.w	r2, #4294967295
 800407a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800407e:	9304      	str	r3, [sp, #16]
 8004080:	9307      	str	r3, [sp, #28]
 8004082:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004086:	931a      	str	r3, [sp, #104]	; 0x68
 8004088:	46a8      	mov	r8, r5
 800408a:	2205      	movs	r2, #5
 800408c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004090:	485e      	ldr	r0, [pc, #376]	; (800420c <_vfiprintf_r+0x210>)
 8004092:	f7fc f89d 	bl	80001d0 <memchr>
 8004096:	9b04      	ldr	r3, [sp, #16]
 8004098:	bb78      	cbnz	r0, 80040fa <_vfiprintf_r+0xfe>
 800409a:	06d9      	lsls	r1, r3, #27
 800409c:	bf44      	itt	mi
 800409e:	2220      	movmi	r2, #32
 80040a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040a4:	071a      	lsls	r2, r3, #28
 80040a6:	bf44      	itt	mi
 80040a8:	222b      	movmi	r2, #43	; 0x2b
 80040aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040ae:	782a      	ldrb	r2, [r5, #0]
 80040b0:	2a2a      	cmp	r2, #42	; 0x2a
 80040b2:	d02a      	beq.n	800410a <_vfiprintf_r+0x10e>
 80040b4:	9a07      	ldr	r2, [sp, #28]
 80040b6:	46a8      	mov	r8, r5
 80040b8:	2000      	movs	r0, #0
 80040ba:	250a      	movs	r5, #10
 80040bc:	4641      	mov	r1, r8
 80040be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040c2:	3b30      	subs	r3, #48	; 0x30
 80040c4:	2b09      	cmp	r3, #9
 80040c6:	d969      	bls.n	800419c <_vfiprintf_r+0x1a0>
 80040c8:	b360      	cbz	r0, 8004124 <_vfiprintf_r+0x128>
 80040ca:	e024      	b.n	8004116 <_vfiprintf_r+0x11a>
 80040cc:	4b50      	ldr	r3, [pc, #320]	; (8004210 <_vfiprintf_r+0x214>)
 80040ce:	429c      	cmp	r4, r3
 80040d0:	d101      	bne.n	80040d6 <_vfiprintf_r+0xda>
 80040d2:	68b4      	ldr	r4, [r6, #8]
 80040d4:	e7a2      	b.n	800401c <_vfiprintf_r+0x20>
 80040d6:	4b4f      	ldr	r3, [pc, #316]	; (8004214 <_vfiprintf_r+0x218>)
 80040d8:	429c      	cmp	r4, r3
 80040da:	bf08      	it	eq
 80040dc:	68f4      	ldreq	r4, [r6, #12]
 80040de:	e79d      	b.n	800401c <_vfiprintf_r+0x20>
 80040e0:	4621      	mov	r1, r4
 80040e2:	4630      	mov	r0, r6
 80040e4:	f000 fae0 	bl	80046a8 <__swsetup_r>
 80040e8:	2800      	cmp	r0, #0
 80040ea:	d09d      	beq.n	8004028 <_vfiprintf_r+0x2c>
 80040ec:	f04f 30ff 	mov.w	r0, #4294967295
 80040f0:	b01d      	add	sp, #116	; 0x74
 80040f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f6:	46a8      	mov	r8, r5
 80040f8:	e7a2      	b.n	8004040 <_vfiprintf_r+0x44>
 80040fa:	4a44      	ldr	r2, [pc, #272]	; (800420c <_vfiprintf_r+0x210>)
 80040fc:	1a80      	subs	r0, r0, r2
 80040fe:	fa0b f000 	lsl.w	r0, fp, r0
 8004102:	4318      	orrs	r0, r3
 8004104:	9004      	str	r0, [sp, #16]
 8004106:	4645      	mov	r5, r8
 8004108:	e7be      	b.n	8004088 <_vfiprintf_r+0x8c>
 800410a:	9a03      	ldr	r2, [sp, #12]
 800410c:	1d11      	adds	r1, r2, #4
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	9103      	str	r1, [sp, #12]
 8004112:	2a00      	cmp	r2, #0
 8004114:	db01      	blt.n	800411a <_vfiprintf_r+0x11e>
 8004116:	9207      	str	r2, [sp, #28]
 8004118:	e004      	b.n	8004124 <_vfiprintf_r+0x128>
 800411a:	4252      	negs	r2, r2
 800411c:	f043 0302 	orr.w	r3, r3, #2
 8004120:	9207      	str	r2, [sp, #28]
 8004122:	9304      	str	r3, [sp, #16]
 8004124:	f898 3000 	ldrb.w	r3, [r8]
 8004128:	2b2e      	cmp	r3, #46	; 0x2e
 800412a:	d10e      	bne.n	800414a <_vfiprintf_r+0x14e>
 800412c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004130:	2b2a      	cmp	r3, #42	; 0x2a
 8004132:	d138      	bne.n	80041a6 <_vfiprintf_r+0x1aa>
 8004134:	9b03      	ldr	r3, [sp, #12]
 8004136:	1d1a      	adds	r2, r3, #4
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	9203      	str	r2, [sp, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	bfb8      	it	lt
 8004140:	f04f 33ff 	movlt.w	r3, #4294967295
 8004144:	f108 0802 	add.w	r8, r8, #2
 8004148:	9305      	str	r3, [sp, #20]
 800414a:	4d33      	ldr	r5, [pc, #204]	; (8004218 <_vfiprintf_r+0x21c>)
 800414c:	f898 1000 	ldrb.w	r1, [r8]
 8004150:	2203      	movs	r2, #3
 8004152:	4628      	mov	r0, r5
 8004154:	f7fc f83c 	bl	80001d0 <memchr>
 8004158:	b140      	cbz	r0, 800416c <_vfiprintf_r+0x170>
 800415a:	2340      	movs	r3, #64	; 0x40
 800415c:	1b40      	subs	r0, r0, r5
 800415e:	fa03 f000 	lsl.w	r0, r3, r0
 8004162:	9b04      	ldr	r3, [sp, #16]
 8004164:	4303      	orrs	r3, r0
 8004166:	f108 0801 	add.w	r8, r8, #1
 800416a:	9304      	str	r3, [sp, #16]
 800416c:	f898 1000 	ldrb.w	r1, [r8]
 8004170:	482a      	ldr	r0, [pc, #168]	; (800421c <_vfiprintf_r+0x220>)
 8004172:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004176:	2206      	movs	r2, #6
 8004178:	f108 0701 	add.w	r7, r8, #1
 800417c:	f7fc f828 	bl	80001d0 <memchr>
 8004180:	2800      	cmp	r0, #0
 8004182:	d037      	beq.n	80041f4 <_vfiprintf_r+0x1f8>
 8004184:	4b26      	ldr	r3, [pc, #152]	; (8004220 <_vfiprintf_r+0x224>)
 8004186:	bb1b      	cbnz	r3, 80041d0 <_vfiprintf_r+0x1d4>
 8004188:	9b03      	ldr	r3, [sp, #12]
 800418a:	3307      	adds	r3, #7
 800418c:	f023 0307 	bic.w	r3, r3, #7
 8004190:	3308      	adds	r3, #8
 8004192:	9303      	str	r3, [sp, #12]
 8004194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004196:	444b      	add	r3, r9
 8004198:	9309      	str	r3, [sp, #36]	; 0x24
 800419a:	e750      	b.n	800403e <_vfiprintf_r+0x42>
 800419c:	fb05 3202 	mla	r2, r5, r2, r3
 80041a0:	2001      	movs	r0, #1
 80041a2:	4688      	mov	r8, r1
 80041a4:	e78a      	b.n	80040bc <_vfiprintf_r+0xc0>
 80041a6:	2300      	movs	r3, #0
 80041a8:	f108 0801 	add.w	r8, r8, #1
 80041ac:	9305      	str	r3, [sp, #20]
 80041ae:	4619      	mov	r1, r3
 80041b0:	250a      	movs	r5, #10
 80041b2:	4640      	mov	r0, r8
 80041b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041b8:	3a30      	subs	r2, #48	; 0x30
 80041ba:	2a09      	cmp	r2, #9
 80041bc:	d903      	bls.n	80041c6 <_vfiprintf_r+0x1ca>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0c3      	beq.n	800414a <_vfiprintf_r+0x14e>
 80041c2:	9105      	str	r1, [sp, #20]
 80041c4:	e7c1      	b.n	800414a <_vfiprintf_r+0x14e>
 80041c6:	fb05 2101 	mla	r1, r5, r1, r2
 80041ca:	2301      	movs	r3, #1
 80041cc:	4680      	mov	r8, r0
 80041ce:	e7f0      	b.n	80041b2 <_vfiprintf_r+0x1b6>
 80041d0:	ab03      	add	r3, sp, #12
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	4622      	mov	r2, r4
 80041d6:	4b13      	ldr	r3, [pc, #76]	; (8004224 <_vfiprintf_r+0x228>)
 80041d8:	a904      	add	r1, sp, #16
 80041da:	4630      	mov	r0, r6
 80041dc:	f3af 8000 	nop.w
 80041e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80041e4:	4681      	mov	r9, r0
 80041e6:	d1d5      	bne.n	8004194 <_vfiprintf_r+0x198>
 80041e8:	89a3      	ldrh	r3, [r4, #12]
 80041ea:	065b      	lsls	r3, r3, #25
 80041ec:	f53f af7e 	bmi.w	80040ec <_vfiprintf_r+0xf0>
 80041f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041f2:	e77d      	b.n	80040f0 <_vfiprintf_r+0xf4>
 80041f4:	ab03      	add	r3, sp, #12
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	4622      	mov	r2, r4
 80041fa:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <_vfiprintf_r+0x228>)
 80041fc:	a904      	add	r1, sp, #16
 80041fe:	4630      	mov	r0, r6
 8004200:	f000 f888 	bl	8004314 <_printf_i>
 8004204:	e7ec      	b.n	80041e0 <_vfiprintf_r+0x1e4>
 8004206:	bf00      	nop
 8004208:	08004b84 	.word	0x08004b84
 800420c:	08004bc4 	.word	0x08004bc4
 8004210:	08004ba4 	.word	0x08004ba4
 8004214:	08004b64 	.word	0x08004b64
 8004218:	08004bca 	.word	0x08004bca
 800421c:	08004bce 	.word	0x08004bce
 8004220:	00000000 	.word	0x00000000
 8004224:	08003fd7 	.word	0x08003fd7

08004228 <_printf_common>:
 8004228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800422c:	4691      	mov	r9, r2
 800422e:	461f      	mov	r7, r3
 8004230:	688a      	ldr	r2, [r1, #8]
 8004232:	690b      	ldr	r3, [r1, #16]
 8004234:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004238:	4293      	cmp	r3, r2
 800423a:	bfb8      	it	lt
 800423c:	4613      	movlt	r3, r2
 800423e:	f8c9 3000 	str.w	r3, [r9]
 8004242:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004246:	4606      	mov	r6, r0
 8004248:	460c      	mov	r4, r1
 800424a:	b112      	cbz	r2, 8004252 <_printf_common+0x2a>
 800424c:	3301      	adds	r3, #1
 800424e:	f8c9 3000 	str.w	r3, [r9]
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	0699      	lsls	r1, r3, #26
 8004256:	bf42      	ittt	mi
 8004258:	f8d9 3000 	ldrmi.w	r3, [r9]
 800425c:	3302      	addmi	r3, #2
 800425e:	f8c9 3000 	strmi.w	r3, [r9]
 8004262:	6825      	ldr	r5, [r4, #0]
 8004264:	f015 0506 	ands.w	r5, r5, #6
 8004268:	d107      	bne.n	800427a <_printf_common+0x52>
 800426a:	f104 0a19 	add.w	sl, r4, #25
 800426e:	68e3      	ldr	r3, [r4, #12]
 8004270:	f8d9 2000 	ldr.w	r2, [r9]
 8004274:	1a9b      	subs	r3, r3, r2
 8004276:	42ab      	cmp	r3, r5
 8004278:	dc28      	bgt.n	80042cc <_printf_common+0xa4>
 800427a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800427e:	6822      	ldr	r2, [r4, #0]
 8004280:	3300      	adds	r3, #0
 8004282:	bf18      	it	ne
 8004284:	2301      	movne	r3, #1
 8004286:	0692      	lsls	r2, r2, #26
 8004288:	d42d      	bmi.n	80042e6 <_printf_common+0xbe>
 800428a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800428e:	4639      	mov	r1, r7
 8004290:	4630      	mov	r0, r6
 8004292:	47c0      	blx	r8
 8004294:	3001      	adds	r0, #1
 8004296:	d020      	beq.n	80042da <_printf_common+0xb2>
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	68e5      	ldr	r5, [r4, #12]
 800429c:	f8d9 2000 	ldr.w	r2, [r9]
 80042a0:	f003 0306 	and.w	r3, r3, #6
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	bf08      	it	eq
 80042a8:	1aad      	subeq	r5, r5, r2
 80042aa:	68a3      	ldr	r3, [r4, #8]
 80042ac:	6922      	ldr	r2, [r4, #16]
 80042ae:	bf0c      	ite	eq
 80042b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042b4:	2500      	movne	r5, #0
 80042b6:	4293      	cmp	r3, r2
 80042b8:	bfc4      	itt	gt
 80042ba:	1a9b      	subgt	r3, r3, r2
 80042bc:	18ed      	addgt	r5, r5, r3
 80042be:	f04f 0900 	mov.w	r9, #0
 80042c2:	341a      	adds	r4, #26
 80042c4:	454d      	cmp	r5, r9
 80042c6:	d11a      	bne.n	80042fe <_printf_common+0xd6>
 80042c8:	2000      	movs	r0, #0
 80042ca:	e008      	b.n	80042de <_printf_common+0xb6>
 80042cc:	2301      	movs	r3, #1
 80042ce:	4652      	mov	r2, sl
 80042d0:	4639      	mov	r1, r7
 80042d2:	4630      	mov	r0, r6
 80042d4:	47c0      	blx	r8
 80042d6:	3001      	adds	r0, #1
 80042d8:	d103      	bne.n	80042e2 <_printf_common+0xba>
 80042da:	f04f 30ff 	mov.w	r0, #4294967295
 80042de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e2:	3501      	adds	r5, #1
 80042e4:	e7c3      	b.n	800426e <_printf_common+0x46>
 80042e6:	18e1      	adds	r1, r4, r3
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	2030      	movs	r0, #48	; 0x30
 80042ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042f0:	4422      	add	r2, r4
 80042f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042fa:	3302      	adds	r3, #2
 80042fc:	e7c5      	b.n	800428a <_printf_common+0x62>
 80042fe:	2301      	movs	r3, #1
 8004300:	4622      	mov	r2, r4
 8004302:	4639      	mov	r1, r7
 8004304:	4630      	mov	r0, r6
 8004306:	47c0      	blx	r8
 8004308:	3001      	adds	r0, #1
 800430a:	d0e6      	beq.n	80042da <_printf_common+0xb2>
 800430c:	f109 0901 	add.w	r9, r9, #1
 8004310:	e7d8      	b.n	80042c4 <_printf_common+0x9c>
	...

08004314 <_printf_i>:
 8004314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004318:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800431c:	460c      	mov	r4, r1
 800431e:	7e09      	ldrb	r1, [r1, #24]
 8004320:	b085      	sub	sp, #20
 8004322:	296e      	cmp	r1, #110	; 0x6e
 8004324:	4617      	mov	r7, r2
 8004326:	4606      	mov	r6, r0
 8004328:	4698      	mov	r8, r3
 800432a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800432c:	f000 80b3 	beq.w	8004496 <_printf_i+0x182>
 8004330:	d822      	bhi.n	8004378 <_printf_i+0x64>
 8004332:	2963      	cmp	r1, #99	; 0x63
 8004334:	d036      	beq.n	80043a4 <_printf_i+0x90>
 8004336:	d80a      	bhi.n	800434e <_printf_i+0x3a>
 8004338:	2900      	cmp	r1, #0
 800433a:	f000 80b9 	beq.w	80044b0 <_printf_i+0x19c>
 800433e:	2958      	cmp	r1, #88	; 0x58
 8004340:	f000 8083 	beq.w	800444a <_printf_i+0x136>
 8004344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004348:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800434c:	e032      	b.n	80043b4 <_printf_i+0xa0>
 800434e:	2964      	cmp	r1, #100	; 0x64
 8004350:	d001      	beq.n	8004356 <_printf_i+0x42>
 8004352:	2969      	cmp	r1, #105	; 0x69
 8004354:	d1f6      	bne.n	8004344 <_printf_i+0x30>
 8004356:	6820      	ldr	r0, [r4, #0]
 8004358:	6813      	ldr	r3, [r2, #0]
 800435a:	0605      	lsls	r5, r0, #24
 800435c:	f103 0104 	add.w	r1, r3, #4
 8004360:	d52a      	bpl.n	80043b8 <_printf_i+0xa4>
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6011      	str	r1, [r2, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	da03      	bge.n	8004372 <_printf_i+0x5e>
 800436a:	222d      	movs	r2, #45	; 0x2d
 800436c:	425b      	negs	r3, r3
 800436e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004372:	486f      	ldr	r0, [pc, #444]	; (8004530 <_printf_i+0x21c>)
 8004374:	220a      	movs	r2, #10
 8004376:	e039      	b.n	80043ec <_printf_i+0xd8>
 8004378:	2973      	cmp	r1, #115	; 0x73
 800437a:	f000 809d 	beq.w	80044b8 <_printf_i+0x1a4>
 800437e:	d808      	bhi.n	8004392 <_printf_i+0x7e>
 8004380:	296f      	cmp	r1, #111	; 0x6f
 8004382:	d020      	beq.n	80043c6 <_printf_i+0xb2>
 8004384:	2970      	cmp	r1, #112	; 0x70
 8004386:	d1dd      	bne.n	8004344 <_printf_i+0x30>
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	f043 0320 	orr.w	r3, r3, #32
 800438e:	6023      	str	r3, [r4, #0]
 8004390:	e003      	b.n	800439a <_printf_i+0x86>
 8004392:	2975      	cmp	r1, #117	; 0x75
 8004394:	d017      	beq.n	80043c6 <_printf_i+0xb2>
 8004396:	2978      	cmp	r1, #120	; 0x78
 8004398:	d1d4      	bne.n	8004344 <_printf_i+0x30>
 800439a:	2378      	movs	r3, #120	; 0x78
 800439c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043a0:	4864      	ldr	r0, [pc, #400]	; (8004534 <_printf_i+0x220>)
 80043a2:	e055      	b.n	8004450 <_printf_i+0x13c>
 80043a4:	6813      	ldr	r3, [r2, #0]
 80043a6:	1d19      	adds	r1, r3, #4
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6011      	str	r1, [r2, #0]
 80043ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043b4:	2301      	movs	r3, #1
 80043b6:	e08c      	b.n	80044d2 <_printf_i+0x1be>
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6011      	str	r1, [r2, #0]
 80043bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043c0:	bf18      	it	ne
 80043c2:	b21b      	sxthne	r3, r3
 80043c4:	e7cf      	b.n	8004366 <_printf_i+0x52>
 80043c6:	6813      	ldr	r3, [r2, #0]
 80043c8:	6825      	ldr	r5, [r4, #0]
 80043ca:	1d18      	adds	r0, r3, #4
 80043cc:	6010      	str	r0, [r2, #0]
 80043ce:	0628      	lsls	r0, r5, #24
 80043d0:	d501      	bpl.n	80043d6 <_printf_i+0xc2>
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	e002      	b.n	80043dc <_printf_i+0xc8>
 80043d6:	0668      	lsls	r0, r5, #25
 80043d8:	d5fb      	bpl.n	80043d2 <_printf_i+0xbe>
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	4854      	ldr	r0, [pc, #336]	; (8004530 <_printf_i+0x21c>)
 80043de:	296f      	cmp	r1, #111	; 0x6f
 80043e0:	bf14      	ite	ne
 80043e2:	220a      	movne	r2, #10
 80043e4:	2208      	moveq	r2, #8
 80043e6:	2100      	movs	r1, #0
 80043e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043ec:	6865      	ldr	r5, [r4, #4]
 80043ee:	60a5      	str	r5, [r4, #8]
 80043f0:	2d00      	cmp	r5, #0
 80043f2:	f2c0 8095 	blt.w	8004520 <_printf_i+0x20c>
 80043f6:	6821      	ldr	r1, [r4, #0]
 80043f8:	f021 0104 	bic.w	r1, r1, #4
 80043fc:	6021      	str	r1, [r4, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d13d      	bne.n	800447e <_printf_i+0x16a>
 8004402:	2d00      	cmp	r5, #0
 8004404:	f040 808e 	bne.w	8004524 <_printf_i+0x210>
 8004408:	4665      	mov	r5, ip
 800440a:	2a08      	cmp	r2, #8
 800440c:	d10b      	bne.n	8004426 <_printf_i+0x112>
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	07db      	lsls	r3, r3, #31
 8004412:	d508      	bpl.n	8004426 <_printf_i+0x112>
 8004414:	6923      	ldr	r3, [r4, #16]
 8004416:	6862      	ldr	r2, [r4, #4]
 8004418:	429a      	cmp	r2, r3
 800441a:	bfde      	ittt	le
 800441c:	2330      	movle	r3, #48	; 0x30
 800441e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004422:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004426:	ebac 0305 	sub.w	r3, ip, r5
 800442a:	6123      	str	r3, [r4, #16]
 800442c:	f8cd 8000 	str.w	r8, [sp]
 8004430:	463b      	mov	r3, r7
 8004432:	aa03      	add	r2, sp, #12
 8004434:	4621      	mov	r1, r4
 8004436:	4630      	mov	r0, r6
 8004438:	f7ff fef6 	bl	8004228 <_printf_common>
 800443c:	3001      	adds	r0, #1
 800443e:	d14d      	bne.n	80044dc <_printf_i+0x1c8>
 8004440:	f04f 30ff 	mov.w	r0, #4294967295
 8004444:	b005      	add	sp, #20
 8004446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800444a:	4839      	ldr	r0, [pc, #228]	; (8004530 <_printf_i+0x21c>)
 800444c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004450:	6813      	ldr	r3, [r2, #0]
 8004452:	6821      	ldr	r1, [r4, #0]
 8004454:	1d1d      	adds	r5, r3, #4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6015      	str	r5, [r2, #0]
 800445a:	060a      	lsls	r2, r1, #24
 800445c:	d50b      	bpl.n	8004476 <_printf_i+0x162>
 800445e:	07ca      	lsls	r2, r1, #31
 8004460:	bf44      	itt	mi
 8004462:	f041 0120 	orrmi.w	r1, r1, #32
 8004466:	6021      	strmi	r1, [r4, #0]
 8004468:	b91b      	cbnz	r3, 8004472 <_printf_i+0x15e>
 800446a:	6822      	ldr	r2, [r4, #0]
 800446c:	f022 0220 	bic.w	r2, r2, #32
 8004470:	6022      	str	r2, [r4, #0]
 8004472:	2210      	movs	r2, #16
 8004474:	e7b7      	b.n	80043e6 <_printf_i+0xd2>
 8004476:	064d      	lsls	r5, r1, #25
 8004478:	bf48      	it	mi
 800447a:	b29b      	uxthmi	r3, r3
 800447c:	e7ef      	b.n	800445e <_printf_i+0x14a>
 800447e:	4665      	mov	r5, ip
 8004480:	fbb3 f1f2 	udiv	r1, r3, r2
 8004484:	fb02 3311 	mls	r3, r2, r1, r3
 8004488:	5cc3      	ldrb	r3, [r0, r3]
 800448a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800448e:	460b      	mov	r3, r1
 8004490:	2900      	cmp	r1, #0
 8004492:	d1f5      	bne.n	8004480 <_printf_i+0x16c>
 8004494:	e7b9      	b.n	800440a <_printf_i+0xf6>
 8004496:	6813      	ldr	r3, [r2, #0]
 8004498:	6825      	ldr	r5, [r4, #0]
 800449a:	6961      	ldr	r1, [r4, #20]
 800449c:	1d18      	adds	r0, r3, #4
 800449e:	6010      	str	r0, [r2, #0]
 80044a0:	0628      	lsls	r0, r5, #24
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	d501      	bpl.n	80044aa <_printf_i+0x196>
 80044a6:	6019      	str	r1, [r3, #0]
 80044a8:	e002      	b.n	80044b0 <_printf_i+0x19c>
 80044aa:	066a      	lsls	r2, r5, #25
 80044ac:	d5fb      	bpl.n	80044a6 <_printf_i+0x192>
 80044ae:	8019      	strh	r1, [r3, #0]
 80044b0:	2300      	movs	r3, #0
 80044b2:	6123      	str	r3, [r4, #16]
 80044b4:	4665      	mov	r5, ip
 80044b6:	e7b9      	b.n	800442c <_printf_i+0x118>
 80044b8:	6813      	ldr	r3, [r2, #0]
 80044ba:	1d19      	adds	r1, r3, #4
 80044bc:	6011      	str	r1, [r2, #0]
 80044be:	681d      	ldr	r5, [r3, #0]
 80044c0:	6862      	ldr	r2, [r4, #4]
 80044c2:	2100      	movs	r1, #0
 80044c4:	4628      	mov	r0, r5
 80044c6:	f7fb fe83 	bl	80001d0 <memchr>
 80044ca:	b108      	cbz	r0, 80044d0 <_printf_i+0x1bc>
 80044cc:	1b40      	subs	r0, r0, r5
 80044ce:	6060      	str	r0, [r4, #4]
 80044d0:	6863      	ldr	r3, [r4, #4]
 80044d2:	6123      	str	r3, [r4, #16]
 80044d4:	2300      	movs	r3, #0
 80044d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044da:	e7a7      	b.n	800442c <_printf_i+0x118>
 80044dc:	6923      	ldr	r3, [r4, #16]
 80044de:	462a      	mov	r2, r5
 80044e0:	4639      	mov	r1, r7
 80044e2:	4630      	mov	r0, r6
 80044e4:	47c0      	blx	r8
 80044e6:	3001      	adds	r0, #1
 80044e8:	d0aa      	beq.n	8004440 <_printf_i+0x12c>
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	079b      	lsls	r3, r3, #30
 80044ee:	d413      	bmi.n	8004518 <_printf_i+0x204>
 80044f0:	68e0      	ldr	r0, [r4, #12]
 80044f2:	9b03      	ldr	r3, [sp, #12]
 80044f4:	4298      	cmp	r0, r3
 80044f6:	bfb8      	it	lt
 80044f8:	4618      	movlt	r0, r3
 80044fa:	e7a3      	b.n	8004444 <_printf_i+0x130>
 80044fc:	2301      	movs	r3, #1
 80044fe:	464a      	mov	r2, r9
 8004500:	4639      	mov	r1, r7
 8004502:	4630      	mov	r0, r6
 8004504:	47c0      	blx	r8
 8004506:	3001      	adds	r0, #1
 8004508:	d09a      	beq.n	8004440 <_printf_i+0x12c>
 800450a:	3501      	adds	r5, #1
 800450c:	68e3      	ldr	r3, [r4, #12]
 800450e:	9a03      	ldr	r2, [sp, #12]
 8004510:	1a9b      	subs	r3, r3, r2
 8004512:	42ab      	cmp	r3, r5
 8004514:	dcf2      	bgt.n	80044fc <_printf_i+0x1e8>
 8004516:	e7eb      	b.n	80044f0 <_printf_i+0x1dc>
 8004518:	2500      	movs	r5, #0
 800451a:	f104 0919 	add.w	r9, r4, #25
 800451e:	e7f5      	b.n	800450c <_printf_i+0x1f8>
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1ac      	bne.n	800447e <_printf_i+0x16a>
 8004524:	7803      	ldrb	r3, [r0, #0]
 8004526:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800452a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800452e:	e76c      	b.n	800440a <_printf_i+0xf6>
 8004530:	08004bd5 	.word	0x08004bd5
 8004534:	08004be6 	.word	0x08004be6

08004538 <_sbrk_r>:
 8004538:	b538      	push	{r3, r4, r5, lr}
 800453a:	4c06      	ldr	r4, [pc, #24]	; (8004554 <_sbrk_r+0x1c>)
 800453c:	2300      	movs	r3, #0
 800453e:	4605      	mov	r5, r0
 8004540:	4608      	mov	r0, r1
 8004542:	6023      	str	r3, [r4, #0]
 8004544:	f7fc faaa 	bl	8000a9c <_sbrk>
 8004548:	1c43      	adds	r3, r0, #1
 800454a:	d102      	bne.n	8004552 <_sbrk_r+0x1a>
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	b103      	cbz	r3, 8004552 <_sbrk_r+0x1a>
 8004550:	602b      	str	r3, [r5, #0]
 8004552:	bd38      	pop	{r3, r4, r5, pc}
 8004554:	200021f4 	.word	0x200021f4

08004558 <__sread>:
 8004558:	b510      	push	{r4, lr}
 800455a:	460c      	mov	r4, r1
 800455c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004560:	f000 fa96 	bl	8004a90 <_read_r>
 8004564:	2800      	cmp	r0, #0
 8004566:	bfab      	itete	ge
 8004568:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800456a:	89a3      	ldrhlt	r3, [r4, #12]
 800456c:	181b      	addge	r3, r3, r0
 800456e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004572:	bfac      	ite	ge
 8004574:	6563      	strge	r3, [r4, #84]	; 0x54
 8004576:	81a3      	strhlt	r3, [r4, #12]
 8004578:	bd10      	pop	{r4, pc}

0800457a <__swrite>:
 800457a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800457e:	461f      	mov	r7, r3
 8004580:	898b      	ldrh	r3, [r1, #12]
 8004582:	05db      	lsls	r3, r3, #23
 8004584:	4605      	mov	r5, r0
 8004586:	460c      	mov	r4, r1
 8004588:	4616      	mov	r6, r2
 800458a:	d505      	bpl.n	8004598 <__swrite+0x1e>
 800458c:	2302      	movs	r3, #2
 800458e:	2200      	movs	r2, #0
 8004590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004594:	f000 f9b6 	bl	8004904 <_lseek_r>
 8004598:	89a3      	ldrh	r3, [r4, #12]
 800459a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800459e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045a2:	81a3      	strh	r3, [r4, #12]
 80045a4:	4632      	mov	r2, r6
 80045a6:	463b      	mov	r3, r7
 80045a8:	4628      	mov	r0, r5
 80045aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045ae:	f000 b869 	b.w	8004684 <_write_r>

080045b2 <__sseek>:
 80045b2:	b510      	push	{r4, lr}
 80045b4:	460c      	mov	r4, r1
 80045b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ba:	f000 f9a3 	bl	8004904 <_lseek_r>
 80045be:	1c43      	adds	r3, r0, #1
 80045c0:	89a3      	ldrh	r3, [r4, #12]
 80045c2:	bf15      	itete	ne
 80045c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80045c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80045ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80045ce:	81a3      	strheq	r3, [r4, #12]
 80045d0:	bf18      	it	ne
 80045d2:	81a3      	strhne	r3, [r4, #12]
 80045d4:	bd10      	pop	{r4, pc}

080045d6 <__sclose>:
 80045d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045da:	f000 b8d3 	b.w	8004784 <_close_r>
	...

080045e0 <__swbuf_r>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	460e      	mov	r6, r1
 80045e4:	4614      	mov	r4, r2
 80045e6:	4605      	mov	r5, r0
 80045e8:	b118      	cbz	r0, 80045f2 <__swbuf_r+0x12>
 80045ea:	6983      	ldr	r3, [r0, #24]
 80045ec:	b90b      	cbnz	r3, 80045f2 <__swbuf_r+0x12>
 80045ee:	f7ff fbf7 	bl	8003de0 <__sinit>
 80045f2:	4b21      	ldr	r3, [pc, #132]	; (8004678 <__swbuf_r+0x98>)
 80045f4:	429c      	cmp	r4, r3
 80045f6:	d12a      	bne.n	800464e <__swbuf_r+0x6e>
 80045f8:	686c      	ldr	r4, [r5, #4]
 80045fa:	69a3      	ldr	r3, [r4, #24]
 80045fc:	60a3      	str	r3, [r4, #8]
 80045fe:	89a3      	ldrh	r3, [r4, #12]
 8004600:	071a      	lsls	r2, r3, #28
 8004602:	d52e      	bpl.n	8004662 <__swbuf_r+0x82>
 8004604:	6923      	ldr	r3, [r4, #16]
 8004606:	b363      	cbz	r3, 8004662 <__swbuf_r+0x82>
 8004608:	6923      	ldr	r3, [r4, #16]
 800460a:	6820      	ldr	r0, [r4, #0]
 800460c:	1ac0      	subs	r0, r0, r3
 800460e:	6963      	ldr	r3, [r4, #20]
 8004610:	b2f6      	uxtb	r6, r6
 8004612:	4283      	cmp	r3, r0
 8004614:	4637      	mov	r7, r6
 8004616:	dc04      	bgt.n	8004622 <__swbuf_r+0x42>
 8004618:	4621      	mov	r1, r4
 800461a:	4628      	mov	r0, r5
 800461c:	f000 f948 	bl	80048b0 <_fflush_r>
 8004620:	bb28      	cbnz	r0, 800466e <__swbuf_r+0x8e>
 8004622:	68a3      	ldr	r3, [r4, #8]
 8004624:	3b01      	subs	r3, #1
 8004626:	60a3      	str	r3, [r4, #8]
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	6022      	str	r2, [r4, #0]
 800462e:	701e      	strb	r6, [r3, #0]
 8004630:	6963      	ldr	r3, [r4, #20]
 8004632:	3001      	adds	r0, #1
 8004634:	4283      	cmp	r3, r0
 8004636:	d004      	beq.n	8004642 <__swbuf_r+0x62>
 8004638:	89a3      	ldrh	r3, [r4, #12]
 800463a:	07db      	lsls	r3, r3, #31
 800463c:	d519      	bpl.n	8004672 <__swbuf_r+0x92>
 800463e:	2e0a      	cmp	r6, #10
 8004640:	d117      	bne.n	8004672 <__swbuf_r+0x92>
 8004642:	4621      	mov	r1, r4
 8004644:	4628      	mov	r0, r5
 8004646:	f000 f933 	bl	80048b0 <_fflush_r>
 800464a:	b190      	cbz	r0, 8004672 <__swbuf_r+0x92>
 800464c:	e00f      	b.n	800466e <__swbuf_r+0x8e>
 800464e:	4b0b      	ldr	r3, [pc, #44]	; (800467c <__swbuf_r+0x9c>)
 8004650:	429c      	cmp	r4, r3
 8004652:	d101      	bne.n	8004658 <__swbuf_r+0x78>
 8004654:	68ac      	ldr	r4, [r5, #8]
 8004656:	e7d0      	b.n	80045fa <__swbuf_r+0x1a>
 8004658:	4b09      	ldr	r3, [pc, #36]	; (8004680 <__swbuf_r+0xa0>)
 800465a:	429c      	cmp	r4, r3
 800465c:	bf08      	it	eq
 800465e:	68ec      	ldreq	r4, [r5, #12]
 8004660:	e7cb      	b.n	80045fa <__swbuf_r+0x1a>
 8004662:	4621      	mov	r1, r4
 8004664:	4628      	mov	r0, r5
 8004666:	f000 f81f 	bl	80046a8 <__swsetup_r>
 800466a:	2800      	cmp	r0, #0
 800466c:	d0cc      	beq.n	8004608 <__swbuf_r+0x28>
 800466e:	f04f 37ff 	mov.w	r7, #4294967295
 8004672:	4638      	mov	r0, r7
 8004674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004676:	bf00      	nop
 8004678:	08004b84 	.word	0x08004b84
 800467c:	08004ba4 	.word	0x08004ba4
 8004680:	08004b64 	.word	0x08004b64

08004684 <_write_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	4c07      	ldr	r4, [pc, #28]	; (80046a4 <_write_r+0x20>)
 8004688:	4605      	mov	r5, r0
 800468a:	4608      	mov	r0, r1
 800468c:	4611      	mov	r1, r2
 800468e:	2200      	movs	r2, #0
 8004690:	6022      	str	r2, [r4, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	f7fc f9b1 	bl	80009fa <_write>
 8004698:	1c43      	adds	r3, r0, #1
 800469a:	d102      	bne.n	80046a2 <_write_r+0x1e>
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	b103      	cbz	r3, 80046a2 <_write_r+0x1e>
 80046a0:	602b      	str	r3, [r5, #0]
 80046a2:	bd38      	pop	{r3, r4, r5, pc}
 80046a4:	200021f4 	.word	0x200021f4

080046a8 <__swsetup_r>:
 80046a8:	4b32      	ldr	r3, [pc, #200]	; (8004774 <__swsetup_r+0xcc>)
 80046aa:	b570      	push	{r4, r5, r6, lr}
 80046ac:	681d      	ldr	r5, [r3, #0]
 80046ae:	4606      	mov	r6, r0
 80046b0:	460c      	mov	r4, r1
 80046b2:	b125      	cbz	r5, 80046be <__swsetup_r+0x16>
 80046b4:	69ab      	ldr	r3, [r5, #24]
 80046b6:	b913      	cbnz	r3, 80046be <__swsetup_r+0x16>
 80046b8:	4628      	mov	r0, r5
 80046ba:	f7ff fb91 	bl	8003de0 <__sinit>
 80046be:	4b2e      	ldr	r3, [pc, #184]	; (8004778 <__swsetup_r+0xd0>)
 80046c0:	429c      	cmp	r4, r3
 80046c2:	d10f      	bne.n	80046e4 <__swsetup_r+0x3c>
 80046c4:	686c      	ldr	r4, [r5, #4]
 80046c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	0715      	lsls	r5, r2, #28
 80046ce:	d42c      	bmi.n	800472a <__swsetup_r+0x82>
 80046d0:	06d0      	lsls	r0, r2, #27
 80046d2:	d411      	bmi.n	80046f8 <__swsetup_r+0x50>
 80046d4:	2209      	movs	r2, #9
 80046d6:	6032      	str	r2, [r6, #0]
 80046d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046dc:	81a3      	strh	r3, [r4, #12]
 80046de:	f04f 30ff 	mov.w	r0, #4294967295
 80046e2:	e03e      	b.n	8004762 <__swsetup_r+0xba>
 80046e4:	4b25      	ldr	r3, [pc, #148]	; (800477c <__swsetup_r+0xd4>)
 80046e6:	429c      	cmp	r4, r3
 80046e8:	d101      	bne.n	80046ee <__swsetup_r+0x46>
 80046ea:	68ac      	ldr	r4, [r5, #8]
 80046ec:	e7eb      	b.n	80046c6 <__swsetup_r+0x1e>
 80046ee:	4b24      	ldr	r3, [pc, #144]	; (8004780 <__swsetup_r+0xd8>)
 80046f0:	429c      	cmp	r4, r3
 80046f2:	bf08      	it	eq
 80046f4:	68ec      	ldreq	r4, [r5, #12]
 80046f6:	e7e6      	b.n	80046c6 <__swsetup_r+0x1e>
 80046f8:	0751      	lsls	r1, r2, #29
 80046fa:	d512      	bpl.n	8004722 <__swsetup_r+0x7a>
 80046fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046fe:	b141      	cbz	r1, 8004712 <__swsetup_r+0x6a>
 8004700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004704:	4299      	cmp	r1, r3
 8004706:	d002      	beq.n	800470e <__swsetup_r+0x66>
 8004708:	4630      	mov	r0, r6
 800470a:	f000 f973 	bl	80049f4 <_free_r>
 800470e:	2300      	movs	r3, #0
 8004710:	6363      	str	r3, [r4, #52]	; 0x34
 8004712:	89a3      	ldrh	r3, [r4, #12]
 8004714:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004718:	81a3      	strh	r3, [r4, #12]
 800471a:	2300      	movs	r3, #0
 800471c:	6063      	str	r3, [r4, #4]
 800471e:	6923      	ldr	r3, [r4, #16]
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	89a3      	ldrh	r3, [r4, #12]
 8004724:	f043 0308 	orr.w	r3, r3, #8
 8004728:	81a3      	strh	r3, [r4, #12]
 800472a:	6923      	ldr	r3, [r4, #16]
 800472c:	b94b      	cbnz	r3, 8004742 <__swsetup_r+0x9a>
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004738:	d003      	beq.n	8004742 <__swsetup_r+0x9a>
 800473a:	4621      	mov	r1, r4
 800473c:	4630      	mov	r0, r6
 800473e:	f000 f917 	bl	8004970 <__smakebuf_r>
 8004742:	89a2      	ldrh	r2, [r4, #12]
 8004744:	f012 0301 	ands.w	r3, r2, #1
 8004748:	d00c      	beq.n	8004764 <__swsetup_r+0xbc>
 800474a:	2300      	movs	r3, #0
 800474c:	60a3      	str	r3, [r4, #8]
 800474e:	6963      	ldr	r3, [r4, #20]
 8004750:	425b      	negs	r3, r3
 8004752:	61a3      	str	r3, [r4, #24]
 8004754:	6923      	ldr	r3, [r4, #16]
 8004756:	b953      	cbnz	r3, 800476e <__swsetup_r+0xc6>
 8004758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800475c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004760:	d1ba      	bne.n	80046d8 <__swsetup_r+0x30>
 8004762:	bd70      	pop	{r4, r5, r6, pc}
 8004764:	0792      	lsls	r2, r2, #30
 8004766:	bf58      	it	pl
 8004768:	6963      	ldrpl	r3, [r4, #20]
 800476a:	60a3      	str	r3, [r4, #8]
 800476c:	e7f2      	b.n	8004754 <__swsetup_r+0xac>
 800476e:	2000      	movs	r0, #0
 8004770:	e7f7      	b.n	8004762 <__swsetup_r+0xba>
 8004772:	bf00      	nop
 8004774:	2000000c 	.word	0x2000000c
 8004778:	08004b84 	.word	0x08004b84
 800477c:	08004ba4 	.word	0x08004ba4
 8004780:	08004b64 	.word	0x08004b64

08004784 <_close_r>:
 8004784:	b538      	push	{r3, r4, r5, lr}
 8004786:	4c06      	ldr	r4, [pc, #24]	; (80047a0 <_close_r+0x1c>)
 8004788:	2300      	movs	r3, #0
 800478a:	4605      	mov	r5, r0
 800478c:	4608      	mov	r0, r1
 800478e:	6023      	str	r3, [r4, #0]
 8004790:	f7fc f94f 	bl	8000a32 <_close>
 8004794:	1c43      	adds	r3, r0, #1
 8004796:	d102      	bne.n	800479e <_close_r+0x1a>
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	b103      	cbz	r3, 800479e <_close_r+0x1a>
 800479c:	602b      	str	r3, [r5, #0]
 800479e:	bd38      	pop	{r3, r4, r5, pc}
 80047a0:	200021f4 	.word	0x200021f4

080047a4 <__sflush_r>:
 80047a4:	898a      	ldrh	r2, [r1, #12]
 80047a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047aa:	4605      	mov	r5, r0
 80047ac:	0710      	lsls	r0, r2, #28
 80047ae:	460c      	mov	r4, r1
 80047b0:	d458      	bmi.n	8004864 <__sflush_r+0xc0>
 80047b2:	684b      	ldr	r3, [r1, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	dc05      	bgt.n	80047c4 <__sflush_r+0x20>
 80047b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	dc02      	bgt.n	80047c4 <__sflush_r+0x20>
 80047be:	2000      	movs	r0, #0
 80047c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047c6:	2e00      	cmp	r6, #0
 80047c8:	d0f9      	beq.n	80047be <__sflush_r+0x1a>
 80047ca:	2300      	movs	r3, #0
 80047cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047d0:	682f      	ldr	r7, [r5, #0]
 80047d2:	6a21      	ldr	r1, [r4, #32]
 80047d4:	602b      	str	r3, [r5, #0]
 80047d6:	d032      	beq.n	800483e <__sflush_r+0x9a>
 80047d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047da:	89a3      	ldrh	r3, [r4, #12]
 80047dc:	075a      	lsls	r2, r3, #29
 80047de:	d505      	bpl.n	80047ec <__sflush_r+0x48>
 80047e0:	6863      	ldr	r3, [r4, #4]
 80047e2:	1ac0      	subs	r0, r0, r3
 80047e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047e6:	b10b      	cbz	r3, 80047ec <__sflush_r+0x48>
 80047e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047ea:	1ac0      	subs	r0, r0, r3
 80047ec:	2300      	movs	r3, #0
 80047ee:	4602      	mov	r2, r0
 80047f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047f2:	6a21      	ldr	r1, [r4, #32]
 80047f4:	4628      	mov	r0, r5
 80047f6:	47b0      	blx	r6
 80047f8:	1c43      	adds	r3, r0, #1
 80047fa:	89a3      	ldrh	r3, [r4, #12]
 80047fc:	d106      	bne.n	800480c <__sflush_r+0x68>
 80047fe:	6829      	ldr	r1, [r5, #0]
 8004800:	291d      	cmp	r1, #29
 8004802:	d848      	bhi.n	8004896 <__sflush_r+0xf2>
 8004804:	4a29      	ldr	r2, [pc, #164]	; (80048ac <__sflush_r+0x108>)
 8004806:	40ca      	lsrs	r2, r1
 8004808:	07d6      	lsls	r6, r2, #31
 800480a:	d544      	bpl.n	8004896 <__sflush_r+0xf2>
 800480c:	2200      	movs	r2, #0
 800480e:	6062      	str	r2, [r4, #4]
 8004810:	04d9      	lsls	r1, r3, #19
 8004812:	6922      	ldr	r2, [r4, #16]
 8004814:	6022      	str	r2, [r4, #0]
 8004816:	d504      	bpl.n	8004822 <__sflush_r+0x7e>
 8004818:	1c42      	adds	r2, r0, #1
 800481a:	d101      	bne.n	8004820 <__sflush_r+0x7c>
 800481c:	682b      	ldr	r3, [r5, #0]
 800481e:	b903      	cbnz	r3, 8004822 <__sflush_r+0x7e>
 8004820:	6560      	str	r0, [r4, #84]	; 0x54
 8004822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004824:	602f      	str	r7, [r5, #0]
 8004826:	2900      	cmp	r1, #0
 8004828:	d0c9      	beq.n	80047be <__sflush_r+0x1a>
 800482a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800482e:	4299      	cmp	r1, r3
 8004830:	d002      	beq.n	8004838 <__sflush_r+0x94>
 8004832:	4628      	mov	r0, r5
 8004834:	f000 f8de 	bl	80049f4 <_free_r>
 8004838:	2000      	movs	r0, #0
 800483a:	6360      	str	r0, [r4, #52]	; 0x34
 800483c:	e7c0      	b.n	80047c0 <__sflush_r+0x1c>
 800483e:	2301      	movs	r3, #1
 8004840:	4628      	mov	r0, r5
 8004842:	47b0      	blx	r6
 8004844:	1c41      	adds	r1, r0, #1
 8004846:	d1c8      	bne.n	80047da <__sflush_r+0x36>
 8004848:	682b      	ldr	r3, [r5, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0c5      	beq.n	80047da <__sflush_r+0x36>
 800484e:	2b1d      	cmp	r3, #29
 8004850:	d001      	beq.n	8004856 <__sflush_r+0xb2>
 8004852:	2b16      	cmp	r3, #22
 8004854:	d101      	bne.n	800485a <__sflush_r+0xb6>
 8004856:	602f      	str	r7, [r5, #0]
 8004858:	e7b1      	b.n	80047be <__sflush_r+0x1a>
 800485a:	89a3      	ldrh	r3, [r4, #12]
 800485c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004860:	81a3      	strh	r3, [r4, #12]
 8004862:	e7ad      	b.n	80047c0 <__sflush_r+0x1c>
 8004864:	690f      	ldr	r7, [r1, #16]
 8004866:	2f00      	cmp	r7, #0
 8004868:	d0a9      	beq.n	80047be <__sflush_r+0x1a>
 800486a:	0793      	lsls	r3, r2, #30
 800486c:	680e      	ldr	r6, [r1, #0]
 800486e:	bf08      	it	eq
 8004870:	694b      	ldreq	r3, [r1, #20]
 8004872:	600f      	str	r7, [r1, #0]
 8004874:	bf18      	it	ne
 8004876:	2300      	movne	r3, #0
 8004878:	eba6 0807 	sub.w	r8, r6, r7
 800487c:	608b      	str	r3, [r1, #8]
 800487e:	f1b8 0f00 	cmp.w	r8, #0
 8004882:	dd9c      	ble.n	80047be <__sflush_r+0x1a>
 8004884:	4643      	mov	r3, r8
 8004886:	463a      	mov	r2, r7
 8004888:	6a21      	ldr	r1, [r4, #32]
 800488a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800488c:	4628      	mov	r0, r5
 800488e:	47b0      	blx	r6
 8004890:	2800      	cmp	r0, #0
 8004892:	dc06      	bgt.n	80048a2 <__sflush_r+0xfe>
 8004894:	89a3      	ldrh	r3, [r4, #12]
 8004896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800489a:	81a3      	strh	r3, [r4, #12]
 800489c:	f04f 30ff 	mov.w	r0, #4294967295
 80048a0:	e78e      	b.n	80047c0 <__sflush_r+0x1c>
 80048a2:	4407      	add	r7, r0
 80048a4:	eba8 0800 	sub.w	r8, r8, r0
 80048a8:	e7e9      	b.n	800487e <__sflush_r+0xda>
 80048aa:	bf00      	nop
 80048ac:	20400001 	.word	0x20400001

080048b0 <_fflush_r>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	690b      	ldr	r3, [r1, #16]
 80048b4:	4605      	mov	r5, r0
 80048b6:	460c      	mov	r4, r1
 80048b8:	b1db      	cbz	r3, 80048f2 <_fflush_r+0x42>
 80048ba:	b118      	cbz	r0, 80048c4 <_fflush_r+0x14>
 80048bc:	6983      	ldr	r3, [r0, #24]
 80048be:	b90b      	cbnz	r3, 80048c4 <_fflush_r+0x14>
 80048c0:	f7ff fa8e 	bl	8003de0 <__sinit>
 80048c4:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <_fflush_r+0x48>)
 80048c6:	429c      	cmp	r4, r3
 80048c8:	d109      	bne.n	80048de <_fflush_r+0x2e>
 80048ca:	686c      	ldr	r4, [r5, #4]
 80048cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048d0:	b17b      	cbz	r3, 80048f2 <_fflush_r+0x42>
 80048d2:	4621      	mov	r1, r4
 80048d4:	4628      	mov	r0, r5
 80048d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048da:	f7ff bf63 	b.w	80047a4 <__sflush_r>
 80048de:	4b07      	ldr	r3, [pc, #28]	; (80048fc <_fflush_r+0x4c>)
 80048e0:	429c      	cmp	r4, r3
 80048e2:	d101      	bne.n	80048e8 <_fflush_r+0x38>
 80048e4:	68ac      	ldr	r4, [r5, #8]
 80048e6:	e7f1      	b.n	80048cc <_fflush_r+0x1c>
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <_fflush_r+0x50>)
 80048ea:	429c      	cmp	r4, r3
 80048ec:	bf08      	it	eq
 80048ee:	68ec      	ldreq	r4, [r5, #12]
 80048f0:	e7ec      	b.n	80048cc <_fflush_r+0x1c>
 80048f2:	2000      	movs	r0, #0
 80048f4:	bd38      	pop	{r3, r4, r5, pc}
 80048f6:	bf00      	nop
 80048f8:	08004b84 	.word	0x08004b84
 80048fc:	08004ba4 	.word	0x08004ba4
 8004900:	08004b64 	.word	0x08004b64

08004904 <_lseek_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	4c07      	ldr	r4, [pc, #28]	; (8004924 <_lseek_r+0x20>)
 8004908:	4605      	mov	r5, r0
 800490a:	4608      	mov	r0, r1
 800490c:	4611      	mov	r1, r2
 800490e:	2200      	movs	r2, #0
 8004910:	6022      	str	r2, [r4, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	f7fc f8b4 	bl	8000a80 <_lseek>
 8004918:	1c43      	adds	r3, r0, #1
 800491a:	d102      	bne.n	8004922 <_lseek_r+0x1e>
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	b103      	cbz	r3, 8004922 <_lseek_r+0x1e>
 8004920:	602b      	str	r3, [r5, #0]
 8004922:	bd38      	pop	{r3, r4, r5, pc}
 8004924:	200021f4 	.word	0x200021f4

08004928 <__swhatbuf_r>:
 8004928:	b570      	push	{r4, r5, r6, lr}
 800492a:	460e      	mov	r6, r1
 800492c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004930:	2900      	cmp	r1, #0
 8004932:	b096      	sub	sp, #88	; 0x58
 8004934:	4614      	mov	r4, r2
 8004936:	461d      	mov	r5, r3
 8004938:	da07      	bge.n	800494a <__swhatbuf_r+0x22>
 800493a:	2300      	movs	r3, #0
 800493c:	602b      	str	r3, [r5, #0]
 800493e:	89b3      	ldrh	r3, [r6, #12]
 8004940:	061a      	lsls	r2, r3, #24
 8004942:	d410      	bmi.n	8004966 <__swhatbuf_r+0x3e>
 8004944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004948:	e00e      	b.n	8004968 <__swhatbuf_r+0x40>
 800494a:	466a      	mov	r2, sp
 800494c:	f000 f8b2 	bl	8004ab4 <_fstat_r>
 8004950:	2800      	cmp	r0, #0
 8004952:	dbf2      	blt.n	800493a <__swhatbuf_r+0x12>
 8004954:	9a01      	ldr	r2, [sp, #4]
 8004956:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800495a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800495e:	425a      	negs	r2, r3
 8004960:	415a      	adcs	r2, r3
 8004962:	602a      	str	r2, [r5, #0]
 8004964:	e7ee      	b.n	8004944 <__swhatbuf_r+0x1c>
 8004966:	2340      	movs	r3, #64	; 0x40
 8004968:	2000      	movs	r0, #0
 800496a:	6023      	str	r3, [r4, #0]
 800496c:	b016      	add	sp, #88	; 0x58
 800496e:	bd70      	pop	{r4, r5, r6, pc}

08004970 <__smakebuf_r>:
 8004970:	898b      	ldrh	r3, [r1, #12]
 8004972:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004974:	079d      	lsls	r5, r3, #30
 8004976:	4606      	mov	r6, r0
 8004978:	460c      	mov	r4, r1
 800497a:	d507      	bpl.n	800498c <__smakebuf_r+0x1c>
 800497c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004980:	6023      	str	r3, [r4, #0]
 8004982:	6123      	str	r3, [r4, #16]
 8004984:	2301      	movs	r3, #1
 8004986:	6163      	str	r3, [r4, #20]
 8004988:	b002      	add	sp, #8
 800498a:	bd70      	pop	{r4, r5, r6, pc}
 800498c:	ab01      	add	r3, sp, #4
 800498e:	466a      	mov	r2, sp
 8004990:	f7ff ffca 	bl	8004928 <__swhatbuf_r>
 8004994:	9900      	ldr	r1, [sp, #0]
 8004996:	4605      	mov	r5, r0
 8004998:	4630      	mov	r0, r6
 800499a:	f7ff faab 	bl	8003ef4 <_malloc_r>
 800499e:	b948      	cbnz	r0, 80049b4 <__smakebuf_r+0x44>
 80049a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049a4:	059a      	lsls	r2, r3, #22
 80049a6:	d4ef      	bmi.n	8004988 <__smakebuf_r+0x18>
 80049a8:	f023 0303 	bic.w	r3, r3, #3
 80049ac:	f043 0302 	orr.w	r3, r3, #2
 80049b0:	81a3      	strh	r3, [r4, #12]
 80049b2:	e7e3      	b.n	800497c <__smakebuf_r+0xc>
 80049b4:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <__smakebuf_r+0x7c>)
 80049b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80049b8:	89a3      	ldrh	r3, [r4, #12]
 80049ba:	6020      	str	r0, [r4, #0]
 80049bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c0:	81a3      	strh	r3, [r4, #12]
 80049c2:	9b00      	ldr	r3, [sp, #0]
 80049c4:	6163      	str	r3, [r4, #20]
 80049c6:	9b01      	ldr	r3, [sp, #4]
 80049c8:	6120      	str	r0, [r4, #16]
 80049ca:	b15b      	cbz	r3, 80049e4 <__smakebuf_r+0x74>
 80049cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049d0:	4630      	mov	r0, r6
 80049d2:	f000 f881 	bl	8004ad8 <_isatty_r>
 80049d6:	b128      	cbz	r0, 80049e4 <__smakebuf_r+0x74>
 80049d8:	89a3      	ldrh	r3, [r4, #12]
 80049da:	f023 0303 	bic.w	r3, r3, #3
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	81a3      	strh	r3, [r4, #12]
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	431d      	orrs	r5, r3
 80049e8:	81a5      	strh	r5, [r4, #12]
 80049ea:	e7cd      	b.n	8004988 <__smakebuf_r+0x18>
 80049ec:	08003da9 	.word	0x08003da9

080049f0 <__malloc_lock>:
 80049f0:	4770      	bx	lr

080049f2 <__malloc_unlock>:
 80049f2:	4770      	bx	lr

080049f4 <_free_r>:
 80049f4:	b538      	push	{r3, r4, r5, lr}
 80049f6:	4605      	mov	r5, r0
 80049f8:	2900      	cmp	r1, #0
 80049fa:	d045      	beq.n	8004a88 <_free_r+0x94>
 80049fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a00:	1f0c      	subs	r4, r1, #4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	bfb8      	it	lt
 8004a06:	18e4      	addlt	r4, r4, r3
 8004a08:	f7ff fff2 	bl	80049f0 <__malloc_lock>
 8004a0c:	4a1f      	ldr	r2, [pc, #124]	; (8004a8c <_free_r+0x98>)
 8004a0e:	6813      	ldr	r3, [r2, #0]
 8004a10:	4610      	mov	r0, r2
 8004a12:	b933      	cbnz	r3, 8004a22 <_free_r+0x2e>
 8004a14:	6063      	str	r3, [r4, #4]
 8004a16:	6014      	str	r4, [r2, #0]
 8004a18:	4628      	mov	r0, r5
 8004a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a1e:	f7ff bfe8 	b.w	80049f2 <__malloc_unlock>
 8004a22:	42a3      	cmp	r3, r4
 8004a24:	d90c      	bls.n	8004a40 <_free_r+0x4c>
 8004a26:	6821      	ldr	r1, [r4, #0]
 8004a28:	1862      	adds	r2, r4, r1
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	bf04      	itt	eq
 8004a2e:	681a      	ldreq	r2, [r3, #0]
 8004a30:	685b      	ldreq	r3, [r3, #4]
 8004a32:	6063      	str	r3, [r4, #4]
 8004a34:	bf04      	itt	eq
 8004a36:	1852      	addeq	r2, r2, r1
 8004a38:	6022      	streq	r2, [r4, #0]
 8004a3a:	6004      	str	r4, [r0, #0]
 8004a3c:	e7ec      	b.n	8004a18 <_free_r+0x24>
 8004a3e:	4613      	mov	r3, r2
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	b10a      	cbz	r2, 8004a48 <_free_r+0x54>
 8004a44:	42a2      	cmp	r2, r4
 8004a46:	d9fa      	bls.n	8004a3e <_free_r+0x4a>
 8004a48:	6819      	ldr	r1, [r3, #0]
 8004a4a:	1858      	adds	r0, r3, r1
 8004a4c:	42a0      	cmp	r0, r4
 8004a4e:	d10b      	bne.n	8004a68 <_free_r+0x74>
 8004a50:	6820      	ldr	r0, [r4, #0]
 8004a52:	4401      	add	r1, r0
 8004a54:	1858      	adds	r0, r3, r1
 8004a56:	4282      	cmp	r2, r0
 8004a58:	6019      	str	r1, [r3, #0]
 8004a5a:	d1dd      	bne.n	8004a18 <_free_r+0x24>
 8004a5c:	6810      	ldr	r0, [r2, #0]
 8004a5e:	6852      	ldr	r2, [r2, #4]
 8004a60:	605a      	str	r2, [r3, #4]
 8004a62:	4401      	add	r1, r0
 8004a64:	6019      	str	r1, [r3, #0]
 8004a66:	e7d7      	b.n	8004a18 <_free_r+0x24>
 8004a68:	d902      	bls.n	8004a70 <_free_r+0x7c>
 8004a6a:	230c      	movs	r3, #12
 8004a6c:	602b      	str	r3, [r5, #0]
 8004a6e:	e7d3      	b.n	8004a18 <_free_r+0x24>
 8004a70:	6820      	ldr	r0, [r4, #0]
 8004a72:	1821      	adds	r1, r4, r0
 8004a74:	428a      	cmp	r2, r1
 8004a76:	bf04      	itt	eq
 8004a78:	6811      	ldreq	r1, [r2, #0]
 8004a7a:	6852      	ldreq	r2, [r2, #4]
 8004a7c:	6062      	str	r2, [r4, #4]
 8004a7e:	bf04      	itt	eq
 8004a80:	1809      	addeq	r1, r1, r0
 8004a82:	6021      	streq	r1, [r4, #0]
 8004a84:	605c      	str	r4, [r3, #4]
 8004a86:	e7c7      	b.n	8004a18 <_free_r+0x24>
 8004a88:	bd38      	pop	{r3, r4, r5, pc}
 8004a8a:	bf00      	nop
 8004a8c:	200000c0 	.word	0x200000c0

08004a90 <_read_r>:
 8004a90:	b538      	push	{r3, r4, r5, lr}
 8004a92:	4c07      	ldr	r4, [pc, #28]	; (8004ab0 <_read_r+0x20>)
 8004a94:	4605      	mov	r5, r0
 8004a96:	4608      	mov	r0, r1
 8004a98:	4611      	mov	r1, r2
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	6022      	str	r2, [r4, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f7fb ff8e 	bl	80009c0 <_read>
 8004aa4:	1c43      	adds	r3, r0, #1
 8004aa6:	d102      	bne.n	8004aae <_read_r+0x1e>
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	b103      	cbz	r3, 8004aae <_read_r+0x1e>
 8004aac:	602b      	str	r3, [r5, #0]
 8004aae:	bd38      	pop	{r3, r4, r5, pc}
 8004ab0:	200021f4 	.word	0x200021f4

08004ab4 <_fstat_r>:
 8004ab4:	b538      	push	{r3, r4, r5, lr}
 8004ab6:	4c07      	ldr	r4, [pc, #28]	; (8004ad4 <_fstat_r+0x20>)
 8004ab8:	2300      	movs	r3, #0
 8004aba:	4605      	mov	r5, r0
 8004abc:	4608      	mov	r0, r1
 8004abe:	4611      	mov	r1, r2
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	f7fb ffc2 	bl	8000a4a <_fstat>
 8004ac6:	1c43      	adds	r3, r0, #1
 8004ac8:	d102      	bne.n	8004ad0 <_fstat_r+0x1c>
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	b103      	cbz	r3, 8004ad0 <_fstat_r+0x1c>
 8004ace:	602b      	str	r3, [r5, #0]
 8004ad0:	bd38      	pop	{r3, r4, r5, pc}
 8004ad2:	bf00      	nop
 8004ad4:	200021f4 	.word	0x200021f4

08004ad8 <_isatty_r>:
 8004ad8:	b538      	push	{r3, r4, r5, lr}
 8004ada:	4c06      	ldr	r4, [pc, #24]	; (8004af4 <_isatty_r+0x1c>)
 8004adc:	2300      	movs	r3, #0
 8004ade:	4605      	mov	r5, r0
 8004ae0:	4608      	mov	r0, r1
 8004ae2:	6023      	str	r3, [r4, #0]
 8004ae4:	f7fb ffc1 	bl	8000a6a <_isatty>
 8004ae8:	1c43      	adds	r3, r0, #1
 8004aea:	d102      	bne.n	8004af2 <_isatty_r+0x1a>
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	b103      	cbz	r3, 8004af2 <_isatty_r+0x1a>
 8004af0:	602b      	str	r3, [r5, #0]
 8004af2:	bd38      	pop	{r3, r4, r5, pc}
 8004af4:	200021f4 	.word	0x200021f4

08004af8 <_init>:
 8004af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afa:	bf00      	nop
 8004afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afe:	bc08      	pop	{r3}
 8004b00:	469e      	mov	lr, r3
 8004b02:	4770      	bx	lr

08004b04 <_fini>:
 8004b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b06:	bf00      	nop
 8004b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0a:	bc08      	pop	{r3}
 8004b0c:	469e      	mov	lr, r3
 8004b0e:	4770      	bx	lr
