
DFSDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004af4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004c84  08004c84  00014c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d6c  08004d6c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004d6c  08004d6c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d6c  08004d6c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d6c  08004d6c  00014d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d70  08004d70  00014d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000218c  20000070  08004de4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  200021fc  08004de4  000221fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf6f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f09  00000000  00000000  0002c00f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0002df18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  0002eae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002688e  00000000  00000000  0002f5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c942  00000000  00000000  00055e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9029  00000000  00000000  00062780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b7a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003738  00000000  00000000  0014b7fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c6c 	.word	0x08004c6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004c6c 	.word	0x08004c6c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the serial port and Loop until the end of transmission */
  while (HAL_OK != HAL_USART_Transmit(&husart1, (uint8_t *) &ch, 1, 30000))
 8000278:	bf00      	nop
 800027a:	1d39      	adds	r1, r7, #4
 800027c:	f247 5330 	movw	r3, #30000	; 0x7530
 8000280:	2201      	movs	r2, #1
 8000282:	4805      	ldr	r0, [pc, #20]	; (8000298 <__io_putchar+0x28>)
 8000284:	f003 f9de 	bl	8003644 <HAL_USART_Transmit>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d1f5      	bne.n	800027a <__io_putchar+0xa>
  {
    ;
  }
  return ch;
 800028e:	687b      	ldr	r3, [r7, #4]
}
 8000290:	4618      	mov	r0, r3
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000160 	.word	0x20000160

0800029c <__io_getchar>:
  * @brief Retargets the C library scanf function to the USART.
  * @param None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. readwrite a character to the USART2 and Loop until the end of transmission */
  uint8_t ch = 0;
 80002a2:	2300      	movs	r3, #0
 80002a4:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_USART_Receive(&husart1, (uint8_t *)&ch, 1, 30000))
 80002a6:	bf00      	nop
 80002a8:	1df9      	adds	r1, r7, #7
 80002aa:	f247 5330 	movw	r3, #30000	; 0x7530
 80002ae:	2201      	movs	r2, #1
 80002b0:	4805      	ldr	r0, [pc, #20]	; (80002c8 <__io_getchar+0x2c>)
 80002b2:	f003 fa75 	bl	80037a0 <HAL_USART_Receive>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d1f5      	bne.n	80002a8 <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 80002bc:	79fb      	ldrb	r3, [r7, #7]
}
 80002be:	4618      	mov	r0, r3
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	20000160 	.word	0x20000160

080002cc <HAL_DFSDM_FilterRegConvCpltCallback>:


void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	firstHalfFull = true;
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	701a      	strb	r2, [r3, #0]
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	200001b0 	.word	0x200001b0

080002ec <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
	secondHalfFull = true;
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	701a      	strb	r2, [r3, #0]
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	200001b1 	.word	0x200001b1

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000312:	f000 fc4e 	bl	8000bb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000316:	f000 f863 	bl	80003e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031a:	f000 f98d 	bl	8000638 <MX_GPIO_Init>
  MX_DMA_Init();
 800031e:	f000 f96d 	bl	80005fc <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000322:	f000 f8d9 	bl	80004d8 <MX_DFSDM1_Init>
  MX_USART1_Init();
 8000326:	f000 f93d 	bl	80005a4 <MX_USART1_Init>
  /* USER CODE BEGIN 2 */
	if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RecBuff, QUEUELENGTH)){
 800032a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800032e:	4926      	ldr	r1, [pc, #152]	; (80003c8 <main+0xbc>)
 8000330:	4826      	ldr	r0, [pc, #152]	; (80003cc <main+0xc0>)
 8000332:	f000 ffb5 	bl	80012a0 <HAL_DFSDM_FilterRegularStart_DMA>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <main+0x34>
    Error_Handler();
 800033c:	f000 f9ac 	bl	8000698 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(firstHalfFull){
 8000340:	4b23      	ldr	r3, [pc, #140]	; (80003d0 <main+0xc4>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	b2db      	uxtb	r3, r3
 8000346:	2b00      	cmp	r3, #0
 8000348:	d01b      	beq.n	8000382 <main+0x76>
			for(int i=0;i<QUEUELENGTH/2;i++){
 800034a:	2300      	movs	r3, #0
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	e011      	b.n	8000374 <main+0x68>
				amplitude = (int16_t)(RecBuff[i]>>8);
 8000350:	4a1d      	ldr	r2, [pc, #116]	; (80003c8 <main+0xbc>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000358:	121b      	asrs	r3, r3, #8
 800035a:	b21a      	sxth	r2, r3
 800035c:	4b1d      	ldr	r3, [pc, #116]	; (80003d4 <main+0xc8>)
 800035e:	801a      	strh	r2, [r3, #0]
				printf("%i\r\n",amplitude);
 8000360:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <main+0xc8>)
 8000362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000366:	4619      	mov	r1, r3
 8000368:	481b      	ldr	r0, [pc, #108]	; (80003d8 <main+0xcc>)
 800036a:	f003 fcf1 	bl	8003d50 <iprintf>
			for(int i=0;i<QUEUELENGTH/2;i++){
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	3301      	adds	r3, #1
 8000372:	607b      	str	r3, [r7, #4]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800037a:	dbe9      	blt.n	8000350 <main+0x44>
			}
			firstHalfFull = false;
 800037c:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <main+0xc4>)
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]
		}
		if(secondHalfFull){
 8000382:	4b16      	ldr	r3, [pc, #88]	; (80003dc <main+0xd0>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	b2db      	uxtb	r3, r3
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <main+0x34>
			for(int i=QUEUELENGTH/2;i<QUEUELENGTH;i++){
 800038c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000390:	603b      	str	r3, [r7, #0]
 8000392:	e011      	b.n	80003b8 <main+0xac>
				amplitude = (int16_t)(RecBuff[i]>>8);
 8000394:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <main+0xbc>)
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800039c:	121b      	asrs	r3, r3, #8
 800039e:	b21a      	sxth	r2, r3
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <main+0xc8>)
 80003a2:	801a      	strh	r2, [r3, #0]
				printf("%i\r\n",amplitude);
 80003a4:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <main+0xc8>)
 80003a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003aa:	4619      	mov	r1, r3
 80003ac:	480a      	ldr	r0, [pc, #40]	; (80003d8 <main+0xcc>)
 80003ae:	f003 fccf 	bl	8003d50 <iprintf>
			for(int i=QUEUELENGTH/2;i<QUEUELENGTH;i++){
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	3301      	adds	r3, #1
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003be:	dbe9      	blt.n	8000394 <main+0x88>
			}
			secondHalfFull = false;
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <main+0xd0>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	701a      	strb	r2, [r3, #0]
		if(firstHalfFull){
 80003c6:	e7bb      	b.n	8000340 <main+0x34>
 80003c8:	200001b4 	.word	0x200001b4
 80003cc:	2000008c 	.word	0x2000008c
 80003d0:	200001b0 	.word	0x200001b0
 80003d4:	200021b4 	.word	0x200021b4
 80003d8:	08004c84 	.word	0x08004c84
 80003dc:	200001b1 	.word	0x200001b1

080003e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b0b8      	sub	sp, #224	; 0xe0
 80003e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80003ea:	2244      	movs	r2, #68	; 0x44
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f003 fca6 	bl	8003d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
 8000402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000404:	463b      	mov	r3, r7
 8000406:	2288      	movs	r2, #136	; 0x88
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f003 fc98 	bl	8003d40 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000410:	2310      	movs	r3, #16
 8000412:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000416:	2301      	movs	r3, #1
 8000418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800041c:	2300      	movs	r3, #0
 800041e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000422:	2360      	movs	r3, #96	; 0x60
 8000424:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000428:	2302      	movs	r3, #2
 800042a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800042e:	2301      	movs	r3, #1
 8000430:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000434:	2301      	movs	r3, #1
 8000436:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800043a:	2328      	movs	r3, #40	; 0x28
 800043c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000440:	2307      	movs	r3, #7
 8000442:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000446:	2302      	movs	r3, #2
 8000448:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800044c:	2302      	movs	r3, #2
 800044e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000452:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000456:	4618      	mov	r0, r3
 8000458:	f001 fe00 	bl	800205c <HAL_RCC_OscConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000462:	f000 f919 	bl	8000698 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000466:	230f      	movs	r3, #15
 8000468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046c:	2303      	movs	r3, #3
 800046e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800047e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000482:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000486:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800048a:	2104      	movs	r1, #4
 800048c:	4618      	mov	r0, r3
 800048e:	f002 f9cd 	bl	800282c <HAL_RCC_ClockConfig>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000498:	f000 f8fe 	bl	8000698 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_DFSDM1;
 800049c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80004a0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80004a2:	2301      	movs	r3, #1
 80004a4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80004a6:	2300      	movs	r3, #0
 80004a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ac:	463b      	mov	r3, r7
 80004ae:	4618      	mov	r0, r3
 80004b0:	f002 fbc2 	bl	8002c38 <HAL_RCCEx_PeriphCLKConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0xde>
  {
    Error_Handler();
 80004ba:	f000 f8ed 	bl	8000698 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004c2:	f001 fd75 	bl	8001fb0 <HAL_PWREx_ControlVoltageScaling>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80004cc:	f000 f8e4 	bl	8000698 <Error_Handler>
  }
}
 80004d0:	bf00      	nop
 80004d2:	37e0      	adds	r7, #224	; 0xe0
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80004dc:	4b2c      	ldr	r3, [pc, #176]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 80004de:	4a2d      	ldr	r2, [pc, #180]	; (8000594 <MX_DFSDM1_Init+0xbc>)
 80004e0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80004e2:	4b2b      	ldr	r3, [pc, #172]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80004e8:	4b29      	ldr	r3, [pc, #164]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80004ee:	4b28      	ldr	r3, [pc, #160]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80004f4:	4b26      	ldr	r3, [pc, #152]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 80004f6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80004fa:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 32;
 80004fc:	4b24      	ldr	r3, [pc, #144]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 80004fe:	2220      	movs	r2, #32
 8000500:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000502:	4b23      	ldr	r3, [pc, #140]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 8000504:	2201      	movs	r2, #1
 8000506:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000508:	4821      	ldr	r0, [pc, #132]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 800050a:	f000 fda9 	bl	8001060 <HAL_DFSDM_FilterInit>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000514:	f000 f8c0 	bl	8000698 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000518:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 800051a:	4a20      	ldr	r2, [pc, #128]	; (800059c <MX_DFSDM1_Init+0xc4>)
 800051c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800051e:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000520:	2201      	movs	r2, #1
 8000522:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000524:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 62;
 800052a:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 800052c:	223e      	movs	r2, #62	; 0x3e
 800052e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000530:	4b19      	ldr	r3, [pc, #100]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000536:	4b18      	ldr	r3, [pc, #96]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000538:	2200      	movs	r2, #0
 800053a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800053c:	4b16      	ldr	r3, [pc, #88]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 800053e:	2200      	movs	r2, #0
 8000540:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000544:	2200      	movs	r2, #0
 8000546:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000548:	4b13      	ldr	r3, [pc, #76]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 800054a:	2204      	movs	r2, #4
 800054c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000550:	2200      	movs	r2, #0
 8000552:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000554:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000556:	2201      	movs	r2, #1
 8000558:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 800055c:	2200      	movs	r2, #0
 800055e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000560:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000562:	2200      	movs	r2, #0
 8000564:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000566:	480c      	ldr	r0, [pc, #48]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000568:	f000 fca6 	bl	8000eb8 <HAL_DFSDM_ChannelInit>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000572:	f000 f891 	bl	8000698 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000576:	2201      	movs	r2, #1
 8000578:	4909      	ldr	r1, [pc, #36]	; (80005a0 <MX_DFSDM1_Init+0xc8>)
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 800057c:	f000 fe4a 	bl	8001214 <HAL_DFSDM_FilterConfigRegChannel>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000586:	f000 f887 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	2000008c 	.word	0x2000008c
 8000594:	40016100 	.word	0x40016100
 8000598:	200000e0 	.word	0x200000e0
 800059c:	40016040 	.word	0x40016040
 80005a0:	00020004 	.word	0x00020004

080005a4 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <MX_USART1_Init+0x50>)
 80005aa:	4a13      	ldr	r2, [pc, #76]	; (80005f8 <MX_USART1_Init+0x54>)
 80005ac:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_USART1_Init+0x50>)
 80005b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b4:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_USART1_Init+0x50>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80005bc:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <MX_USART1_Init+0x50>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_USART1_Init+0x50>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <MX_USART1_Init+0x50>)
 80005ca:	220c      	movs	r2, #12
 80005cc:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_USART1_Init+0x50>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <MX_USART1_Init+0x50>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_USART1_Init+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <MX_USART1_Init+0x50>)
 80005e2:	f002 ffe5 	bl	80035b0 <HAL_USART_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 80005ec:	f000 f854 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000160 	.word	0x20000160
 80005f8:	40013800 	.word	0x40013800

080005fc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_DMA_Init+0x38>)
 8000604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000606:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <MX_DMA_Init+0x38>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6493      	str	r3, [r2, #72]	; 0x48
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_DMA_Init+0x38>)
 8000610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	200e      	movs	r0, #14
 8000620:	f000 fc13 	bl	8000e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000624:	200e      	movs	r0, #14
 8000626:	f000 fc2c 	bl	8000e82 <HAL_NVIC_EnableIRQ>

}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40021000 	.word	0x40021000

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <MX_GPIO_Init+0x5c>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	4a14      	ldr	r2, [pc, #80]	; (8000694 <MX_GPIO_Init+0x5c>)
 8000644:	f043 0310 	orr.w	r3, r3, #16
 8000648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_GPIO_Init+0x5c>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	f003 0310 	and.w	r3, r3, #16
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_GPIO_Init+0x5c>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <MX_GPIO_Init+0x5c>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_GPIO_Init+0x5c>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_GPIO_Init+0x5c>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	4a08      	ldr	r2, [pc, #32]	; (8000694 <MX_GPIO_Init+0x5c>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_GPIO_Init+0x5c>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
	...

080006a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <HAL_MspInit+0x44>)
 80006b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006b2:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <HAL_MspInit+0x44>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6613      	str	r3, [r2, #96]	; 0x60
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <HAL_MspInit+0x44>)
 80006bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <HAL_MspInit+0x44>)
 80006c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <HAL_MspInit+0x44>)
 80006cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d0:	6593      	str	r3, [r2, #88]	; 0x58
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_MspInit+0x44>)
 80006d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40021000 	.word	0x40021000

080006f0 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000708:	4b3c      	ldr	r3, [pc, #240]	; (80007fc <HAL_DFSDM_FilterMspInit+0x10c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d139      	bne.n	8000784 <HAL_DFSDM_FilterMspInit+0x94>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000710:	4b3b      	ldr	r3, [pc, #236]	; (8000800 <HAL_DFSDM_FilterMspInit+0x110>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	4a3a      	ldr	r2, [pc, #232]	; (8000800 <HAL_DFSDM_FilterMspInit+0x110>)
 8000718:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800071a:	4b39      	ldr	r3, [pc, #228]	; (8000800 <HAL_DFSDM_FilterMspInit+0x110>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d10b      	bne.n	800073a <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000722:	4b38      	ldr	r3, [pc, #224]	; (8000804 <HAL_DFSDM_FilterMspInit+0x114>)
 8000724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000726:	4a37      	ldr	r2, [pc, #220]	; (8000804 <HAL_DFSDM_FilterMspInit+0x114>)
 8000728:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800072c:	6613      	str	r3, [r2, #96]	; 0x60
 800072e:	4b35      	ldr	r3, [pc, #212]	; (8000804 <HAL_DFSDM_FilterMspInit+0x114>)
 8000730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000732:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	4b32      	ldr	r3, [pc, #200]	; (8000804 <HAL_DFSDM_FilterMspInit+0x114>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4a31      	ldr	r2, [pc, #196]	; (8000804 <HAL_DFSDM_FilterMspInit+0x114>)
 8000740:	f043 0310 	orr.w	r3, r3, #16
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <HAL_DFSDM_FilterMspInit+0x114>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0310 	and.w	r3, r3, #16
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000752:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000764:	2306      	movs	r3, #6
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	4826      	ldr	r0, [pc, #152]	; (8000808 <HAL_DFSDM_FilterMspInit+0x118>)
 8000770:	f001 fa66 	bl	8001c40 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	203d      	movs	r0, #61	; 0x3d
 800077a:	f000 fb66 	bl	8000e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 800077e:	203d      	movs	r0, #61	; 0x3d
 8000780:	f000 fb7f 	bl	8000e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE END DFSDM1_MspInit 1 */
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a20      	ldr	r2, [pc, #128]	; (800080c <HAL_DFSDM_FilterMspInit+0x11c>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d131      	bne.n	80007f2 <HAL_DFSDM_FilterMspInit+0x102>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 8000790:	4a20      	ldr	r2, [pc, #128]	; (8000814 <HAL_DFSDM_FilterMspInit+0x124>)
 8000792:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800079a:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b2:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007ba:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007be:	2220      	movs	r2, #32
 80007c0:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80007ca:	4811      	ldr	r0, [pc, #68]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007cc:	f001 f840 	bl	8001850 <HAL_DMA_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <HAL_DFSDM_FilterMspInit+0xea>
    {
      Error_Handler();
 80007d6:	f7ff ff5f 	bl	8000698 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a0c      	ldr	r2, [pc, #48]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
 80007e0:	4a0b      	ldr	r2, [pc, #44]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a09      	ldr	r2, [pc, #36]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
 80007ec:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 80007f2:	bf00      	nop
 80007f4:	3728      	adds	r7, #40	; 0x28
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200021bc 	.word	0x200021bc
 8000800:	200021b8 	.word	0x200021b8
 8000804:	40021000 	.word	0x40021000
 8000808:	48001000 	.word	0x48001000
 800080c:	40016100 	.word	0x40016100
 8000810:	20000118 	.word	0x20000118
 8000814:	40020044 	.word	0x40020044

08000818 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <HAL_DFSDM_ChannelMspInit+0x8c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d131      	bne.n	800089c <HAL_DFSDM_ChannelMspInit+0x84>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <HAL_DFSDM_ChannelMspInit+0x90>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	4a1a      	ldr	r2, [pc, #104]	; (80008a8 <HAL_DFSDM_ChannelMspInit+0x90>)
 8000840:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <HAL_DFSDM_ChannelMspInit+0x90>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d10b      	bne.n	8000862 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <HAL_DFSDM_ChannelMspInit+0x94>)
 800084c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084e:	4a17      	ldr	r2, [pc, #92]	; (80008ac <HAL_DFSDM_ChannelMspInit+0x94>)
 8000850:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000854:	6613      	str	r3, [r2, #96]	; 0x60
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_DFSDM_ChannelMspInit+0x94>)
 8000858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_DFSDM_ChannelMspInit+0x94>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a11      	ldr	r2, [pc, #68]	; (80008ac <HAL_DFSDM_ChannelMspInit+0x94>)
 8000868:	f043 0310 	orr.w	r3, r3, #16
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <HAL_DFSDM_ChannelMspInit+0x94>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0310 	and.w	r3, r3, #16
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800087a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800087e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800088c:	2306      	movs	r3, #6
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	4806      	ldr	r0, [pc, #24]	; (80008b0 <HAL_DFSDM_ChannelMspInit+0x98>)
 8000898:	f001 f9d2 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200021bc 	.word	0x200021bc
 80008a8:	200021b8 	.word	0x200021b8
 80008ac:	40021000 	.word	0x40021000
 80008b0:	48001000 	.word	0x48001000

080008b4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a17      	ldr	r2, [pc, #92]	; (8000930 <HAL_USART_MspInit+0x7c>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d127      	bne.n	8000926 <HAL_USART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <HAL_USART_MspInit+0x80>)
 80008d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008da:	4a16      	ldr	r2, [pc, #88]	; (8000934 <HAL_USART_MspInit+0x80>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e0:	6613      	str	r3, [r2, #96]	; 0x60
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <HAL_USART_MspInit+0x80>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <HAL_USART_MspInit+0x80>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <HAL_USART_MspInit+0x80>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <HAL_USART_MspInit+0x80>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB5     ------> USART1_CK
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000906:	23e0      	movs	r3, #224	; 0xe0
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000916:	2307      	movs	r3, #7
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <HAL_USART_MspInit+0x84>)
 8000922:	f001 f98d 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40013800 	.word	0x40013800
 8000934:	40021000 	.word	0x40021000
 8000938:	48000400 	.word	0x48000400

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler+0x4>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <UsageFault_Handler+0x4>

08000962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000990:	f000 f962 	bl	8000c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <DMA1_Channel4_IRQHandler+0x10>)
 800099e:	f001 f86f 	bl	8001a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000118 	.word	0x20000118

080009ac <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <DFSDM1_FLT0_IRQHandler+0x10>)
 80009b2:	f000 fcf7 	bl	80013a4 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2000008c 	.word	0x2000008c

080009c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	e00a      	b.n	80009e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009d2:	f7ff fc63 	bl	800029c <__io_getchar>
 80009d6:	4601      	mov	r1, r0
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	60ba      	str	r2, [r7, #8]
 80009de:	b2ca      	uxtb	r2, r1
 80009e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3301      	adds	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	dbf0      	blt.n	80009d2 <_read+0x12>
	}

return len;
 80009f0:	687b      	ldr	r3, [r7, #4]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	e009      	b.n	8000a20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	60ba      	str	r2, [r7, #8]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fc2b 	bl	8000270 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dbf1      	blt.n	8000a0c <_write+0x12>
	}
	return len;
 8000a28:	687b      	ldr	r3, [r7, #4]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <_close>:

int _close(int file)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
	return -1;
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <_isatty>:

int _isatty(int file)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
	return 1;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <_sbrk+0x50>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d102      	bne.n	8000ab2 <_sbrk+0x16>
		heap_end = &end;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <_sbrk+0x50>)
 8000aae:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <_sbrk+0x54>)
 8000ab0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <_sbrk+0x50>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <_sbrk+0x50>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4413      	add	r3, r2
 8000ac0:	466a      	mov	r2, sp
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d907      	bls.n	8000ad6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000ac6:	f003 f911 	bl	8003cec <__errno>
 8000aca:	4603      	mov	r3, r0
 8000acc:	220c      	movs	r2, #12
 8000ace:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad4:	e006      	b.n	8000ae4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000ad6:	4b05      	ldr	r3, [pc, #20]	; (8000aec <_sbrk+0x50>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	4a03      	ldr	r2, [pc, #12]	; (8000aec <_sbrk+0x50>)
 8000ae0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200021c0 	.word	0x200021c0
 8000af0:	20002200 	.word	0x20002200

08000af4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <SystemInit+0x64>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afe:	4a16      	ldr	r2, [pc, #88]	; (8000b58 <SystemInit+0x64>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <SystemInit+0x68>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <SystemInit+0x68>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <SystemInit+0x68>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <SystemInit+0x68>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <SystemInit+0x68>)
 8000b20:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b24:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <SystemInit+0x68>)
 8000b2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b30:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <SystemInit+0x68>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <SystemInit+0x68>)
 8000b38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <SystemInit+0x68>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <SystemInit+0x64>)
 8000b46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00
 8000b5c:	40021000 	.word	0x40021000

08000b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b98 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b66:	e003      	b.n	8000b70 <LoopCopyDataInit>

08000b68 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b6e:	3104      	adds	r1, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b70:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b78:	d3f6      	bcc.n	8000b68 <CopyDataInit>
	ldr	r2, =_sbss
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b7c:	e002      	b.n	8000b84 <LoopFillZerobss>

08000b7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b80:	f842 3b04 	str.w	r3, [r2], #4

08000b84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <LoopForever+0x16>)
	cmp	r2, r3
 8000b86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b88:	d3f9      	bcc.n	8000b7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b8a:	f7ff ffb3 	bl	8000af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f003 f8b3 	bl	8003cf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b92:	f7ff fbbb 	bl	800030c <main>

08000b96 <LoopForever>:

LoopForever:
    b LoopForever
 8000b96:	e7fe      	b.n	8000b96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b98:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000b9c:	08004d74 	.word	0x08004d74
	ldr	r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ba4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000ba8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000bac:	200021fc 	.word	0x200021fc

08000bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC1_2_IRQHandler>

08000bb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbc:	2003      	movs	r0, #3
 8000bbe:	f000 f939 	bl	8000e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f000 f80e 	bl	8000be4 <HAL_InitTick>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d002      	beq.n	8000bd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	71fb      	strb	r3, [r7, #7]
 8000bd2:	e001      	b.n	8000bd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bd4:	f7ff fd68 	bl	80006a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <HAL_InitTick+0x68>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d022      	beq.n	8000c3e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_InitTick+0x6c>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <HAL_InitTick+0x68>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c04:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 f946 	bl	8000e9e <HAL_SYSTICK_Config>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d10f      	bne.n	8000c38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b0f      	cmp	r3, #15
 8000c1c:	d809      	bhi.n	8000c32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	6879      	ldr	r1, [r7, #4]
 8000c22:	f04f 30ff 	mov.w	r0, #4294967295
 8000c26:	f000 f910 	bl	8000e4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_InitTick+0x70>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	e007      	b.n	8000c42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	73fb      	strb	r3, [r7, #15]
 8000c36:	e004      	b.n	8000c42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	73fb      	strb	r3, [r7, #15]
 8000c3c:	e001      	b.n	8000c42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	20000000 	.word	0x20000000
 8000c54:	20000004 	.word	0x20000004

08000c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <HAL_IncTick+0x1c>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_IncTick+0x20>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a03      	ldr	r2, [pc, #12]	; (8000c74 <HAL_IncTick+0x1c>)
 8000c68:	6013      	str	r3, [r2, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	200021c4 	.word	0x200021c4
 8000c78:	20000008 	.word	0x20000008

08000c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_GetTick+0x14>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	200021c4 	.word	0x200021c4

08000c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	f003 0307 	and.w	r3, r3, #7
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db0b      	blt.n	8000d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 021f 	and.w	r2, r3, #31
 8000d10:	4907      	ldr	r1, [pc, #28]	; (8000d30 <__NVIC_EnableIRQ+0x38>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	2001      	movs	r0, #1
 8000d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	; (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	; (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	; 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e00:	d301      	bcc.n	8000e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00f      	b.n	8000e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <SysTick_Config+0x40>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0e:	210f      	movs	r1, #15
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f7ff ff8e 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <SysTick_Config+0x40>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1e:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <SysTick_Config+0x40>)
 8000e20:	2207      	movs	r2, #7
 8000e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	e000e010 	.word	0xe000e010

08000e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff29 	bl	8000c94 <__NVIC_SetPriorityGrouping>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5c:	f7ff ff3e 	bl	8000cdc <__NVIC_GetPriorityGrouping>
 8000e60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68b9      	ldr	r1, [r7, #8]
 8000e66:	6978      	ldr	r0, [r7, #20]
 8000e68:	f7ff ff8e 	bl	8000d88 <NVIC_EncodePriority>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff5d 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	4603      	mov	r3, r0
 8000e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff31 	bl	8000cf8 <__NVIC_EnableIRQ>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ffa2 	bl	8000df0 <SysTick_Config>
 8000eac:	4603      	mov	r3, r0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e0ac      	b.n	8001024 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fc1c 	bl	800170c <DFSDM_GetChannelFromInstance>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4a55      	ldr	r2, [pc, #340]	; (800102c <HAL_DFSDM_ChannelInit+0x174>)
 8000ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e09f      	b.n	8001024 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fc97 	bl	8000818 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000eea:	4b51      	ldr	r3, [pc, #324]	; (8001030 <HAL_DFSDM_ChannelInit+0x178>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	4a4f      	ldr	r2, [pc, #316]	; (8001030 <HAL_DFSDM_ChannelInit+0x178>)
 8000ef2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000ef4:	4b4e      	ldr	r3, [pc, #312]	; (8001030 <HAL_DFSDM_ChannelInit+0x178>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d125      	bne.n	8000f48 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000efc:	4b4d      	ldr	r3, [pc, #308]	; (8001034 <HAL_DFSDM_ChannelInit+0x17c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a4c      	ldr	r2, [pc, #304]	; (8001034 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000f06:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000f08:	4b4a      	ldr	r3, [pc, #296]	; (8001034 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	4948      	ldr	r1, [pc, #288]	; (8001034 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000f16:	4b47      	ldr	r3, [pc, #284]	; (8001034 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a46      	ldr	r2, [pc, #280]	; (8001034 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f1c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000f20:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	791b      	ldrb	r3, [r3, #4]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d108      	bne.n	8000f3c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000f2a:	4b42      	ldr	r3, [pc, #264]	; (8001034 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	041b      	lsls	r3, r3, #16
 8000f36:	493f      	ldr	r1, [pc, #252]	; (8001034 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000f3c:	4b3d      	ldr	r3, [pc, #244]	; (8001034 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a3c      	ldr	r2, [pc, #240]	; (8001034 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f46:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8000f56:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6819      	ldr	r1, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f66:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000f6c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	430a      	orrs	r2, r1
 8000f74:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 020f 	bic.w	r2, r2, #15
 8000f84:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6819      	ldr	r1, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000f94:	431a      	orrs	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8000fac:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6899      	ldr	r1, [r3, #8]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f002 0207 	and.w	r2, r2, #7
 8000fd8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6859      	ldr	r1, [r3, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000fec:	431a      	orrs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001004:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2201      	movs	r2, #1
 800100a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fb7a 	bl	800170c <DFSDM_GetChannelFromInstance>
 8001018:	4602      	mov	r2, r0
 800101a:	4904      	ldr	r1, [pc, #16]	; (800102c <HAL_DFSDM_ChannelInit+0x174>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200021cc 	.word	0x200021cc
 8001030:	200021c8 	.word	0x200021c8
 8001034:	40016000 	.word	0x40016000

08001038 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e0ca      	b.n	8001208 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a66      	ldr	r2, [pc, #408]	; (8001210 <HAL_DFSDM_FilterInit+0x1b0>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d109      	bne.n	8001090 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001080:	2b01      	cmp	r3, #1
 8001082:	d003      	beq.n	800108c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001088:	2b01      	cmp	r3, #1
 800108a:	d101      	bne.n	8001090 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e0bb      	b.n	8001208 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2201      	movs	r2, #1
 80010a0:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff fb21 	bl	80006f0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80010bc:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7a1b      	ldrb	r3, [r3, #8]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d108      	bne.n	80010d8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	e007      	b.n	80010e8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80010e6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7a5b      	ldrb	r3, [r3, #9]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d108      	bne.n	8001102 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	e007      	b.n	8001112 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001110:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8001120:	f023 0308 	bic.w	r3, r3, #8
 8001124:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d108      	bne.n	8001140 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6819      	ldr	r1, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	695a      	ldr	r2, [r3, #20]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7c1b      	ldrb	r3, [r3, #16]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d108      	bne.n	800115a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0210 	orr.w	r2, r2, #16
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	e007      	b.n	800116a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0210 	bic.w	r2, r2, #16
 8001168:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7c5b      	ldrb	r3, [r3, #17]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d108      	bne.n	8001184 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 0220 	orr.w	r2, r2, #32
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e007      	b.n	8001194 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0220 	bic.w	r2, r2, #32
 8001192:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80011a2:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80011a6:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6959      	ldr	r1, [r3, #20]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80011ba:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80011c2:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68da      	ldr	r2, [r3, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699a      	ldr	r2, [r3, #24]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	7c1a      	ldrb	r2, [r3, #16]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f042 0201 	orr.w	r2, r2, #1
 80011fc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40016100 	.word	0x40016100

08001214 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001220:	2300      	movs	r3, #0
 8001222:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800122a:	2b00      	cmp	r3, #0
 800122c:	d02e      	beq.n	800128c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001234:	2bff      	cmp	r3, #255	; 0xff
 8001236:	d029      	beq.n	800128c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d10d      	bne.n	800126e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001260:	431a      	orrs	r2, r3
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	e00a      	b.n	8001284 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6819      	ldr	r1, [r3, #0]
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	631a      	str	r2, [r3, #48]	; 0x30
 800128a:	e001      	b.n	8001290 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001290:	7dfb      	ldrb	r3, [r7, #23]
}
 8001292:	4618      	mov	r0, r3
 8001294:	371c      	adds	r7, #28
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	75fb      	strb	r3, [r7, #23]
 80012c0:	e064      	b.n	800138c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80012d0:	d002      	beq.n	80012d8 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	75fb      	strb	r3, [r7, #23]
 80012d6:	e059      	b.n	800138c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d10e      	bne.n	80012fe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d10a      	bne.n	80012fe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ec:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d105      	bne.n	80012fe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d002      	beq.n	80012fe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	75fb      	strb	r3, [r7, #23]
 80012fc:	e046      	b.n	800138c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10b      	bne.n	800131e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800130a:	2b00      	cmp	r3, #0
 800130c:	d107      	bne.n	800131e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001312:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001314:	2b20      	cmp	r3, #32
 8001316:	d102      	bne.n	800131e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	75fb      	strb	r3, [r7, #23]
 800131c:	e036      	b.n	800138c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001324:	2b01      	cmp	r3, #1
 8001326:	d004      	beq.n	8001332 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800132e:	2b03      	cmp	r3, #3
 8001330:	d12a      	bne.n	8001388 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001336:	4a18      	ldr	r2, [pc, #96]	; (8001398 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001338:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133e:	4a17      	ldr	r2, [pc, #92]	; (800139c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001340:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001346:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001348:	2b20      	cmp	r3, #32
 800134a:	d101      	bne.n	8001350 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 800134c:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800134e:	e000      	b.n	8001352 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8001350:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001356:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	331c      	adds	r3, #28
 8001362:	4619      	mov	r1, r3
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f000 fb2a 	bl	80019c0 <HAL_DMA_Start_IT>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d006      	beq.n	8001380 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	22ff      	movs	r2, #255	; 0xff
 8001376:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800137e:	e005      	b.n	800138c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f000 fa0f 	bl	80017a4 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001386:	e001      	b.n	800138c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 800138c:	7dfb      	ldrb	r3, [r7, #23]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	080016cd 	.word	0x080016cd
 800139c:	080016e9 	.word	0x080016e9
 80013a0:	080016b1 	.word	0x080016b1

080013a4 <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	; 0x30
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00f      	beq.n	80013e6 <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00a      	beq.n	80013e6 <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2208      	movs	r2, #8
 80013d6:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f95c 	bl	800169c <HAL_DFSDM_FilterErrorCallback>
 80013e4:	e13b      	b.n	800165e <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00f      	beq.n	8001410 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00a      	beq.n	8001410 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2204      	movs	r2, #4
 8001400:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2202      	movs	r2, #2
 8001406:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f947 	bl	800169c <HAL_DFSDM_FilterErrorCallback>
 800140e:	e126      	b.n	800165e <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d025      	beq.n	8001466 <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8001420:	2b00      	cmp	r3, #0
 8001422:	d020      	beq.n	8001466 <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7fe ff51 	bl	80002cc <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	2b00      	cmp	r3, #0
 8001430:	f040 8114 	bne.w	800165c <HAL_DFSDM_IRQHandler+0x2b8>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001438:	2b00      	cmp	r3, #0
 800143a:	f040 810f 	bne.w	800165c <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 0202 	bic.w	r2, r2, #2
 800144c:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8001454:	2b02      	cmp	r3, #2
 8001456:	d101      	bne.n	800145c <HAL_DFSDM_IRQHandler+0xb8>
 8001458:	2201      	movs	r2, #1
 800145a:	e000      	b.n	800145e <HAL_DFSDM_IRQHandler+0xba>
 800145c:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001464:	e0fa      	b.n	800165c <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d034      	beq.n	80014da <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8001476:	2b00      	cmp	r3, #0
 8001478:	d02f      	beq.n	80014da <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f8f8 	bl	8001670 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001484:	1e5a      	subs	r2, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	649a      	str	r2, [r3, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148e:	2b00      	cmp	r3, #0
 8001490:	f040 80e5 	bne.w	800165e <HAL_DFSDM_IRQHandler+0x2ba>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001498:	2b00      	cmp	r3, #0
 800149a:	d112      	bne.n	80014c2 <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0201 	bic.w	r2, r2, #1
 80014aa:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d101      	bne.n	80014ba <HAL_DFSDM_IRQHandler+0x116>
 80014b6:	2201      	movs	r2, #1
 80014b8:	e000      	b.n	80014bc <HAL_DFSDM_IRQHandler+0x118>
 80014ba:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d102      	bne.n	80014d2 <HAL_DFSDM_IRQHandler+0x12e>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d0:	e000      	b.n	80014d4 <HAL_DFSDM_IRQHandler+0x130>
 80014d2:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6493      	str	r3, [r2, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 80014d8:	e0c1      	b.n	800165e <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f003 0310 	and.w	r3, r3, #16
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d03d      	beq.n	8001560 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d038      	beq.n	8001560 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 80014fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_DFSDM_IRQHandler+0x162>
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <HAL_DFSDM_IRQHandler+0x164>
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d109      	bne.n	8001524 <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8001510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001516:	e005      	b.n	8001524 <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 8001518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151a:	3301      	adds	r3, #1
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 800151e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001520:	085b      	lsrs	r3, r3, #1
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d102      	bne.n	8001534 <HAL_DFSDM_IRQHandler+0x190>
 800152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001530:	2b06      	cmp	r3, #6
 8001532:	d9f1      	bls.n	8001518 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d105      	bne.n	8001546 <HAL_DFSDM_IRQHandler+0x1a2>
 800153a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153c:	3308      	adds	r3, #8
 800153e:	2201      	movs	r2, #1
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	e003      	b.n	800154e <HAL_DFSDM_IRQHandler+0x1aa>
 8001546:	2201      	movs	r2, #1
 8001548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 f893 	bl	8001684 <HAL_DFSDM_FilterAwdCallback>
  {
 800155e:	e07e      	b.n	800165e <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a40      	ldr	r2, [pc, #256]	; (8001668 <HAL_DFSDM_IRQHandler+0x2c4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d141      	bne.n	80015ee <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001570:	2b00      	cmp	r3, #0
 8001572:	d03c      	beq.n	80015ee <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 800157a:	2b00      	cmp	r3, #0
 800157c:	d037      	beq.n	80015ee <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	0c1b      	lsrs	r3, r3, #16
 800158a:	b2db      	uxtb	r3, r3
 800158c:	627b      	str	r3, [r7, #36]	; 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 800158e:	e02a      	b.n	80015e6 <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d01f      	beq.n	80015da <HAL_DFSDM_IRQHandler+0x236>
 800159a:	4a34      	ldr	r2, [pc, #208]	; (800166c <HAL_DFSDM_IRQHandler+0x2c8>)
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d019      	beq.n	80015da <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 80015a6:	4a31      	ldr	r2, [pc, #196]	; (800166c <HAL_DFSDM_IRQHandler+0x2c8>)
 80015a8:	6a3b      	ldr	r3, [r7, #32]
 80015aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00f      	beq.n	80015da <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	f103 0210 	add.w	r2, r3, #16
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2101      	movs	r1, #1
 80015c6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ca:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 80015cc:	4a27      	ldr	r2, [pc, #156]	; (800166c <HAL_DFSDM_IRQHandler+0x2c8>)
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fd2f 	bl	8001038 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	3301      	adds	r3, #1
 80015de:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	085b      	lsrs	r3, r3, #1
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	2b07      	cmp	r3, #7
 80015ea:	d9d1      	bls.n	8001590 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 80015ec:	e037      	b.n	800165e <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a1d      	ldr	r2, [pc, #116]	; (8001668 <HAL_DFSDM_IRQHandler+0x2c4>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d132      	bne.n	800165e <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d02d      	beq.n	800165e <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8001608:	2b00      	cmp	r3, #0
 800160a:	d028      	beq.n	800165e <HAL_DFSDM_IRQHandler+0x2ba>
  {
    uint32_t reg;
    uint32_t channel = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	0e1b      	lsrs	r3, r3, #24
 8001618:	b2db      	uxtb	r3, r3
 800161a:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800161c:	e005      	b.n	800162a <HAL_DFSDM_IRQHandler+0x286>
    {
      channel++;
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	3301      	adds	r3, #1
 8001622:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <HAL_DFSDM_IRQHandler+0x296>
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2b06      	cmp	r3, #6
 8001638:	d9f1      	bls.n	800161e <HAL_DFSDM_IRQHandler+0x27a>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	f103 0218 	add.w	r2, r3, #24
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2101      	movs	r1, #1
 8001646:	fa01 f202 	lsl.w	r2, r1, r2
 800164a:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 800164c:	4a07      	ldr	r2, [pc, #28]	; (800166c <HAL_DFSDM_IRQHandler+0x2c8>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fcf9 	bl	800104c <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 800165a:	e000      	b.n	800165e <HAL_DFSDM_IRQHandler+0x2ba>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800165c:	bf00      	nop
}
 800165e:	bf00      	nop
 8001660:	3730      	adds	r7, #48	; 0x30
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40016100 	.word	0x40016100
 800166c:	200021cc 	.word	0x200021cc

08001670 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f7fe fe14 	bl	80002ec <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f7fe fdf6 	bl	80002cc <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2203      	movs	r2, #3
 80016fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f7ff ffcd 	bl	800169c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a1c      	ldr	r2, [pc, #112]	; (8001788 <DFSDM_GetChannelFromInstance+0x7c>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d102      	bne.n	8001722 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	e02b      	b.n	800177a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a19      	ldr	r2, [pc, #100]	; (800178c <DFSDM_GetChannelFromInstance+0x80>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d102      	bne.n	8001730 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800172a:	2301      	movs	r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	e024      	b.n	800177a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a17      	ldr	r2, [pc, #92]	; (8001790 <DFSDM_GetChannelFromInstance+0x84>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d102      	bne.n	800173e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001738:	2302      	movs	r3, #2
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	e01d      	b.n	800177a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a14      	ldr	r2, [pc, #80]	; (8001794 <DFSDM_GetChannelFromInstance+0x88>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d102      	bne.n	800174c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001746:	2304      	movs	r3, #4
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	e016      	b.n	800177a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <DFSDM_GetChannelFromInstance+0x8c>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d102      	bne.n	800175a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001754:	2305      	movs	r3, #5
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	e00f      	b.n	800177a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a0f      	ldr	r2, [pc, #60]	; (800179c <DFSDM_GetChannelFromInstance+0x90>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d102      	bne.n	8001768 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001762:	2306      	movs	r3, #6
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	e008      	b.n	800177a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <DFSDM_GetChannelFromInstance+0x94>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d102      	bne.n	8001776 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001770:	2307      	movs	r3, #7
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	e001      	b.n	800177a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001776:	2303      	movs	r3, #3
 8001778:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800177a:	68fb      	ldr	r3, [r7, #12]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	40016000 	.word	0x40016000
 800178c:	40016020 	.word	0x40016020
 8001790:	40016040 	.word	0x40016040
 8001794:	40016080 	.word	0x40016080
 8001798:	400160a0 	.word	0x400160a0
 800179c:	400160c0 	.word	0x400160c0
 80017a0:	400160e0 	.word	0x400160e0

080017a4 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d108      	bne.n	80017c6 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	e033      	b.n	800182e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0201 	bic.w	r2, r2, #1
 80017d4:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80017e4:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f042 0201 	orr.w	r2, r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d116      	bne.n	800182e <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001804:	2b00      	cmp	r3, #0
 8001806:	d107      	bne.n	8001818 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0202 	orr.w	r2, r2, #2
 8001816:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800181e:	2b01      	cmp	r3, #1
 8001820:	d102      	bne.n	8001828 <DFSDM_RegConvStart+0x84>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	e000      	b.n	800182a <DFSDM_RegConvStart+0x86>
 8001828:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <DFSDM_RegConvStart+0x98>
 8001838:	2202      	movs	r2, #2
 800183a:	e000      	b.n	800183e <DFSDM_RegConvStart+0x9a>
 800183c:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e098      	b.n	8001994 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	4b4d      	ldr	r3, [pc, #308]	; (80019a0 <HAL_DMA_Init+0x150>)
 800186a:	429a      	cmp	r2, r3
 800186c:	d80f      	bhi.n	800188e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <HAL_DMA_Init+0x154>)
 8001876:	4413      	add	r3, r2
 8001878:	4a4b      	ldr	r2, [pc, #300]	; (80019a8 <HAL_DMA_Init+0x158>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	091b      	lsrs	r3, r3, #4
 8001880:	009a      	lsls	r2, r3, #2
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a48      	ldr	r2, [pc, #288]	; (80019ac <HAL_DMA_Init+0x15c>)
 800188a:	641a      	str	r2, [r3, #64]	; 0x40
 800188c:	e00e      	b.n	80018ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	4b46      	ldr	r3, [pc, #280]	; (80019b0 <HAL_DMA_Init+0x160>)
 8001896:	4413      	add	r3, r2
 8001898:	4a43      	ldr	r2, [pc, #268]	; (80019a8 <HAL_DMA_Init+0x158>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	091b      	lsrs	r3, r3, #4
 80018a0:	009a      	lsls	r2, r3, #2
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a42      	ldr	r2, [pc, #264]	; (80019b4 <HAL_DMA_Init+0x164>)
 80018aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80018c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001906:	d039      	beq.n	800197c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	4a27      	ldr	r2, [pc, #156]	; (80019ac <HAL_DMA_Init+0x15c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d11a      	bne.n	8001948 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001912:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <HAL_DMA_Init+0x168>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f003 031c 	and.w	r3, r3, #28
 800191e:	210f      	movs	r1, #15
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	4924      	ldr	r1, [pc, #144]	; (80019b8 <HAL_DMA_Init+0x168>)
 8001928:	4013      	ands	r3, r2
 800192a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800192c:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <HAL_DMA_Init+0x168>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6859      	ldr	r1, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	f003 031c 	and.w	r3, r3, #28
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	491d      	ldr	r1, [pc, #116]	; (80019b8 <HAL_DMA_Init+0x168>)
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]
 8001946:	e019      	b.n	800197c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001948:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <HAL_DMA_Init+0x16c>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001950:	f003 031c 	and.w	r3, r3, #28
 8001954:	210f      	movs	r1, #15
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	4917      	ldr	r1, [pc, #92]	; (80019bc <HAL_DMA_Init+0x16c>)
 800195e:	4013      	ands	r3, r2
 8001960:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_DMA_Init+0x16c>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6859      	ldr	r1, [r3, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f003 031c 	and.w	r3, r3, #28
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	4911      	ldr	r1, [pc, #68]	; (80019bc <HAL_DMA_Init+0x16c>)
 8001978:	4313      	orrs	r3, r2
 800197a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40020407 	.word	0x40020407
 80019a4:	bffdfff8 	.word	0xbffdfff8
 80019a8:	cccccccd 	.word	0xcccccccd
 80019ac:	40020000 	.word	0x40020000
 80019b0:	bffdfbf8 	.word	0xbffdfbf8
 80019b4:	40020400 	.word	0x40020400
 80019b8:	400200a8 	.word	0x400200a8
 80019bc:	400204a8 	.word	0x400204a8

080019c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_DMA_Start_IT+0x20>
 80019dc:	2302      	movs	r3, #2
 80019de:	e04b      	b.n	8001a78 <HAL_DMA_Start_IT+0xb8>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d13a      	bne.n	8001a6a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2202      	movs	r2, #2
 80019f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0201 	bic.w	r2, r2, #1
 8001a10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	68b9      	ldr	r1, [r7, #8]
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 f8e0 	bl	8001bde <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d008      	beq.n	8001a38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f042 020e 	orr.w	r2, r2, #14
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	e00f      	b.n	8001a58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0204 	bic.w	r2, r2, #4
 8001a46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 020a 	orr.w	r2, r2, #10
 8001a56:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e005      	b.n	8001a76 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a72:	2302      	movs	r3, #2
 8001a74:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	f003 031c 	and.w	r3, r3, #28
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d026      	beq.n	8001afa <HAL_DMA_IRQHandler+0x7a>
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d021      	beq.n	8001afa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d107      	bne.n	8001ad4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0204 	bic.w	r2, r2, #4
 8001ad2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad8:	f003 021c 	and.w	r2, r3, #28
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	2104      	movs	r1, #4
 8001ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d071      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001af8:	e06c      	b.n	8001bd4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f003 031c 	and.w	r3, r3, #28
 8001b02:	2202      	movs	r2, #2
 8001b04:	409a      	lsls	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d02e      	beq.n	8001b6c <HAL_DMA_IRQHandler+0xec>
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d029      	beq.n	8001b6c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0320 	and.w	r3, r3, #32
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10b      	bne.n	8001b3e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 020a 	bic.w	r2, r2, #10
 8001b34:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f003 021c 	and.w	r2, r3, #28
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b50:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d038      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b6a:	e033      	b.n	8001bd4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b70:	f003 031c 	and.w	r3, r3, #28
 8001b74:	2208      	movs	r2, #8
 8001b76:	409a      	lsls	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d02a      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0x156>
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d025      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 020e 	bic.w	r2, r2, #14
 8001b98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	f003 021c 	and.w	r2, r3, #28
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d004      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001bd4:	bf00      	nop
 8001bd6:	bf00      	nop
}
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b085      	sub	sp, #20
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf0:	f003 021c 	and.w	r2, r3, #28
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b10      	cmp	r3, #16
 8001c0e:	d108      	bne.n	8001c22 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c20:	e007      	b.n	8001c32 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	60da      	str	r2, [r3, #12]
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4e:	e17f      	b.n	8001f50 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2101      	movs	r1, #1
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8171 	beq.w	8001f4a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d00b      	beq.n	8001c88 <HAL_GPIO_Init+0x48>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d007      	beq.n	8001c88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c7c:	2b11      	cmp	r3, #17
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b12      	cmp	r3, #18
 8001c86:	d130      	bne.n	8001cea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	091b      	lsrs	r3, r3, #4
 8001cd4:	f003 0201 	and.w	r2, r3, #1
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d118      	bne.n	8001d28 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	08db      	lsrs	r3, r3, #3
 8001d12:	f003 0201 	and.w	r2, r3, #1
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x128>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b12      	cmp	r3, #18
 8001d66:	d123      	bne.n	8001db0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	08da      	lsrs	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3208      	adds	r2, #8
 8001d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d74:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	220f      	movs	r2, #15
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	08da      	lsrs	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3208      	adds	r2, #8
 8001daa:	6939      	ldr	r1, [r7, #16]
 8001dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0203 	and.w	r2, r3, #3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80ac 	beq.w	8001f4a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	4b5f      	ldr	r3, [pc, #380]	; (8001f70 <HAL_GPIO_Init+0x330>)
 8001df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df6:	4a5e      	ldr	r2, [pc, #376]	; (8001f70 <HAL_GPIO_Init+0x330>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6613      	str	r3, [r2, #96]	; 0x60
 8001dfe:	4b5c      	ldr	r3, [pc, #368]	; (8001f70 <HAL_GPIO_Init+0x330>)
 8001e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e0a:	4a5a      	ldr	r2, [pc, #360]	; (8001f74 <HAL_GPIO_Init+0x334>)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3302      	adds	r3, #2
 8001e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e16:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e34:	d025      	beq.n	8001e82 <HAL_GPIO_Init+0x242>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4f      	ldr	r2, [pc, #316]	; (8001f78 <HAL_GPIO_Init+0x338>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d01f      	beq.n	8001e7e <HAL_GPIO_Init+0x23e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a4e      	ldr	r2, [pc, #312]	; (8001f7c <HAL_GPIO_Init+0x33c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d019      	beq.n	8001e7a <HAL_GPIO_Init+0x23a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a4d      	ldr	r2, [pc, #308]	; (8001f80 <HAL_GPIO_Init+0x340>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d013      	beq.n	8001e76 <HAL_GPIO_Init+0x236>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4c      	ldr	r2, [pc, #304]	; (8001f84 <HAL_GPIO_Init+0x344>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d00d      	beq.n	8001e72 <HAL_GPIO_Init+0x232>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4b      	ldr	r2, [pc, #300]	; (8001f88 <HAL_GPIO_Init+0x348>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d007      	beq.n	8001e6e <HAL_GPIO_Init+0x22e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a4a      	ldr	r2, [pc, #296]	; (8001f8c <HAL_GPIO_Init+0x34c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d101      	bne.n	8001e6a <HAL_GPIO_Init+0x22a>
 8001e66:	2306      	movs	r3, #6
 8001e68:	e00c      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	e00a      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e6e:	2305      	movs	r3, #5
 8001e70:	e008      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e72:	2304      	movs	r3, #4
 8001e74:	e006      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e76:	2303      	movs	r3, #3
 8001e78:	e004      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e002      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e82:	2300      	movs	r3, #0
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	f002 0203 	and.w	r2, r2, #3
 8001e8a:	0092      	lsls	r2, r2, #2
 8001e8c:	4093      	lsls	r3, r2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e94:	4937      	ldr	r1, [pc, #220]	; (8001f74 <HAL_GPIO_Init+0x334>)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ea2:	4b3b      	ldr	r3, [pc, #236]	; (8001f90 <HAL_GPIO_Init+0x350>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ec6:	4a32      	ldr	r2, [pc, #200]	; (8001f90 <HAL_GPIO_Init+0x350>)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001ecc:	4b30      	ldr	r3, [pc, #192]	; (8001f90 <HAL_GPIO_Init+0x350>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ef0:	4a27      	ldr	r2, [pc, #156]	; (8001f90 <HAL_GPIO_Init+0x350>)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ef6:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <HAL_GPIO_Init+0x350>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f1a:	4a1d      	ldr	r2, [pc, #116]	; (8001f90 <HAL_GPIO_Init+0x350>)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f20:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <HAL_GPIO_Init+0x350>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f44:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <HAL_GPIO_Init+0x350>)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f47f ae78 	bne.w	8001c50 <HAL_GPIO_Init+0x10>
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	371c      	adds	r7, #28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40010000 	.word	0x40010000
 8001f78:	48000400 	.word	0x48000400
 8001f7c:	48000800 	.word	0x48000800
 8001f80:	48000c00 	.word	0x48000c00
 8001f84:	48001000 	.word	0x48001000
 8001f88:	48001400 	.word	0x48001400
 8001f8c:	48001800 	.word	0x48001800
 8001f90:	40010400 	.word	0x40010400

08001f94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <HAL_PWREx_GetVoltageRange+0x18>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40007000 	.word	0x40007000

08001fb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fbe:	d130      	bne.n	8002022 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fc0:	4b23      	ldr	r3, [pc, #140]	; (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fcc:	d038      	beq.n	8002040 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fce:	4b20      	ldr	r3, [pc, #128]	; (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fd6:	4a1e      	ldr	r2, [pc, #120]	; (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fdc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fde:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2232      	movs	r2, #50	; 0x32
 8001fe4:	fb02 f303 	mul.w	r3, r2, r3
 8001fe8:	4a1b      	ldr	r2, [pc, #108]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	0c9b      	lsrs	r3, r3, #18
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ff4:	e002      	b.n	8001ffc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002008:	d102      	bne.n	8002010 <HAL_PWREx_ControlVoltageScaling+0x60>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f2      	bne.n	8001ff6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800201c:	d110      	bne.n	8002040 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e00f      	b.n	8002042 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002022:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800202a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800202e:	d007      	beq.n	8002040 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002030:	4b07      	ldr	r3, [pc, #28]	; (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002038:	4a05      	ldr	r2, [pc, #20]	; (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800203a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800203e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40007000 	.word	0x40007000
 8002054:	20000000 	.word	0x20000000
 8002058:	431bde83 	.word	0x431bde83

0800205c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e3d8      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800206e:	4b97      	ldr	r3, [pc, #604]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002078:	4b94      	ldr	r3, [pc, #592]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80e4 	beq.w	8002258 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <HAL_RCC_OscConfig+0x4a>
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	2b0c      	cmp	r3, #12
 800209a:	f040 808b 	bne.w	80021b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	f040 8087 	bne.w	80021b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020a6:	4b89      	ldr	r3, [pc, #548]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_RCC_OscConfig+0x62>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e3b0      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1a      	ldr	r2, [r3, #32]
 80020c2:	4b82      	ldr	r3, [pc, #520]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d004      	beq.n	80020d8 <HAL_RCC_OscConfig+0x7c>
 80020ce:	4b7f      	ldr	r3, [pc, #508]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020d6:	e005      	b.n	80020e4 <HAL_RCC_OscConfig+0x88>
 80020d8:	4b7c      	ldr	r3, [pc, #496]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 80020da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020de:	091b      	lsrs	r3, r3, #4
 80020e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d223      	bcs.n	8002130 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 fd43 	bl	8002b78 <RCC_SetFlashLatencyFromMSIRange>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e391      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020fc:	4b73      	ldr	r3, [pc, #460]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a72      	ldr	r2, [pc, #456]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 8002102:	f043 0308 	orr.w	r3, r3, #8
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	4b70      	ldr	r3, [pc, #448]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	496d      	ldr	r1, [pc, #436]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800211a:	4b6c      	ldr	r3, [pc, #432]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	4968      	ldr	r1, [pc, #416]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
 800212e:	e025      	b.n	800217c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002130:	4b66      	ldr	r3, [pc, #408]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a65      	ldr	r2, [pc, #404]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 8002136:	f043 0308 	orr.w	r3, r3, #8
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	4b63      	ldr	r3, [pc, #396]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4960      	ldr	r1, [pc, #384]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800214e:	4b5f      	ldr	r3, [pc, #380]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	495b      	ldr	r1, [pc, #364]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d109      	bne.n	800217c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fd03 	bl	8002b78 <RCC_SetFlashLatencyFromMSIRange>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e351      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800217c:	f000 fc38 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8002180:	4602      	mov	r2, r0
 8002182:	4b52      	ldr	r3, [pc, #328]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	4950      	ldr	r1, [pc, #320]	; (80022d0 <HAL_RCC_OscConfig+0x274>)
 800218e:	5ccb      	ldrb	r3, [r1, r3]
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
 8002198:	4a4e      	ldr	r2, [pc, #312]	; (80022d4 <HAL_RCC_OscConfig+0x278>)
 800219a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800219c:	4b4e      	ldr	r3, [pc, #312]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe fd1f 	bl	8000be4 <HAL_InitTick>
 80021a6:	4603      	mov	r3, r0
 80021a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d052      	beq.n	8002256 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	e335      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d032      	beq.n	8002222 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021bc:	4b43      	ldr	r3, [pc, #268]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a42      	ldr	r2, [pc, #264]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021c8:	f7fe fd58 	bl	8000c7c <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021d0:	f7fe fd54 	bl	8000c7c <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e31e      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021e2:	4b3a      	ldr	r3, [pc, #232]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ee:	4b37      	ldr	r3, [pc, #220]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a36      	ldr	r2, [pc, #216]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 80021f4:	f043 0308 	orr.w	r3, r3, #8
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b34      	ldr	r3, [pc, #208]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4931      	ldr	r1, [pc, #196]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 8002208:	4313      	orrs	r3, r2
 800220a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800220c:	4b2f      	ldr	r3, [pc, #188]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	492c      	ldr	r1, [pc, #176]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]
 8002220:	e01a      	b.n	8002258 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002222:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a29      	ldr	r2, [pc, #164]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800222e:	f7fe fd25 	bl	8000c7c <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002236:	f7fe fd21 	bl	8000c7c <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e2eb      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002248:	4b20      	ldr	r3, [pc, #128]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f0      	bne.n	8002236 <HAL_RCC_OscConfig+0x1da>
 8002254:	e000      	b.n	8002258 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002256:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d074      	beq.n	800234e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	2b08      	cmp	r3, #8
 8002268:	d005      	beq.n	8002276 <HAL_RCC_OscConfig+0x21a>
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	2b0c      	cmp	r3, #12
 800226e:	d10e      	bne.n	800228e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d10b      	bne.n	800228e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d064      	beq.n	800234c <HAL_RCC_OscConfig+0x2f0>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d160      	bne.n	800234c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e2c8      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002296:	d106      	bne.n	80022a6 <HAL_RCC_OscConfig+0x24a>
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0b      	ldr	r2, [pc, #44]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 800229e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	e026      	b.n	80022f4 <HAL_RCC_OscConfig+0x298>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ae:	d115      	bne.n	80022dc <HAL_RCC_OscConfig+0x280>
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a05      	ldr	r2, [pc, #20]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 80022b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a02      	ldr	r2, [pc, #8]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 80022c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	e014      	b.n	80022f4 <HAL_RCC_OscConfig+0x298>
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08004c8c 	.word	0x08004c8c
 80022d4:	20000000 	.word	0x20000000
 80022d8:	20000004 	.word	0x20000004
 80022dc:	4ba0      	ldr	r3, [pc, #640]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a9f      	ldr	r2, [pc, #636]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 80022e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b9d      	ldr	r3, [pc, #628]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a9c      	ldr	r2, [pc, #624]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 80022ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d013      	beq.n	8002324 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe fcbe 	bl	8000c7c <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7fe fcba 	bl	8000c7c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e284      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002316:	4b92      	ldr	r3, [pc, #584]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x2a8>
 8002322:	e014      	b.n	800234e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7fe fcaa 	bl	8000c7c <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800232c:	f7fe fca6 	bl	8000c7c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	; 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e270      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800233e:	4b88      	ldr	r3, [pc, #544]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x2d0>
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d060      	beq.n	800241c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	2b04      	cmp	r3, #4
 800235e:	d005      	beq.n	800236c <HAL_RCC_OscConfig+0x310>
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2b0c      	cmp	r3, #12
 8002364:	d119      	bne.n	800239a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d116      	bne.n	800239a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800236c:	4b7c      	ldr	r3, [pc, #496]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_OscConfig+0x328>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e24d      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002384:	4b76      	ldr	r3, [pc, #472]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	061b      	lsls	r3, r3, #24
 8002392:	4973      	ldr	r1, [pc, #460]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002398:	e040      	b.n	800241c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d023      	beq.n	80023ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a2:	4b6f      	ldr	r3, [pc, #444]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a6e      	ldr	r2, [pc, #440]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 80023a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ae:	f7fe fc65 	bl	8000c7c <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b6:	f7fe fc61 	bl	8000c7c <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e22b      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c8:	4b65      	ldr	r3, [pc, #404]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d4:	4b62      	ldr	r3, [pc, #392]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	061b      	lsls	r3, r3, #24
 80023e2:	495f      	ldr	r1, [pc, #380]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	604b      	str	r3, [r1, #4]
 80023e8:	e018      	b.n	800241c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ea:	4b5d      	ldr	r3, [pc, #372]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a5c      	ldr	r2, [pc, #368]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 80023f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f6:	f7fe fc41 	bl	8000c7c <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fe:	f7fe fc3d 	bl	8000c7c <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e207      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002410:	4b53      	ldr	r3, [pc, #332]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1f0      	bne.n	80023fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d03c      	beq.n	80024a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d01c      	beq.n	800246a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002430:	4b4b      	ldr	r3, [pc, #300]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 8002432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002436:	4a4a      	ldr	r2, [pc, #296]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002440:	f7fe fc1c 	bl	8000c7c <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002448:	f7fe fc18 	bl	8000c7c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e1e2      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800245a:	4b41      	ldr	r3, [pc, #260]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 800245c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0ef      	beq.n	8002448 <HAL_RCC_OscConfig+0x3ec>
 8002468:	e01b      	b.n	80024a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800246a:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 800246c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002470:	4a3b      	ldr	r2, [pc, #236]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 8002472:	f023 0301 	bic.w	r3, r3, #1
 8002476:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247a:	f7fe fbff 	bl	8000c7c <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002482:	f7fe fbfb 	bl	8000c7c <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e1c5      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002494:	4b32      	ldr	r3, [pc, #200]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 8002496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1ef      	bne.n	8002482 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 80a6 	beq.w	80025fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b0:	2300      	movs	r3, #0
 80024b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024b4:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10d      	bne.n	80024dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c0:	4b27      	ldr	r3, [pc, #156]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	4a26      	ldr	r2, [pc, #152]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 80024c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ca:	6593      	str	r3, [r2, #88]	; 0x58
 80024cc:	4b24      	ldr	r3, [pc, #144]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 80024ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d8:	2301      	movs	r3, #1
 80024da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024dc:	4b21      	ldr	r3, [pc, #132]	; (8002564 <HAL_RCC_OscConfig+0x508>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d118      	bne.n	800251a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024e8:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <HAL_RCC_OscConfig+0x508>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <HAL_RCC_OscConfig+0x508>)
 80024ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f4:	f7fe fbc2 	bl	8000c7c <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fc:	f7fe fbbe 	bl	8000c7c <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e188      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <HAL_RCC_OscConfig+0x508>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d108      	bne.n	8002534 <HAL_RCC_OscConfig+0x4d8>
 8002522:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 8002524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002528:	4a0d      	ldr	r2, [pc, #52]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002532:	e029      	b.n	8002588 <HAL_RCC_OscConfig+0x52c>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b05      	cmp	r3, #5
 800253a:	d115      	bne.n	8002568 <HAL_RCC_OscConfig+0x50c>
 800253c:	4b08      	ldr	r3, [pc, #32]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002542:	4a07      	ldr	r2, [pc, #28]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 8002544:	f043 0304 	orr.w	r3, r3, #4
 8002548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 800254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002552:	4a03      	ldr	r2, [pc, #12]	; (8002560 <HAL_RCC_OscConfig+0x504>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800255c:	e014      	b.n	8002588 <HAL_RCC_OscConfig+0x52c>
 800255e:	bf00      	nop
 8002560:	40021000 	.word	0x40021000
 8002564:	40007000 	.word	0x40007000
 8002568:	4b91      	ldr	r3, [pc, #580]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 800256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256e:	4a90      	ldr	r2, [pc, #576]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 8002570:	f023 0301 	bic.w	r3, r3, #1
 8002574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002578:	4b8d      	ldr	r3, [pc, #564]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257e:	4a8c      	ldr	r2, [pc, #560]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 8002580:	f023 0304 	bic.w	r3, r3, #4
 8002584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d016      	beq.n	80025be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002590:	f7fe fb74 	bl	8000c7c <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002596:	e00a      	b.n	80025ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002598:	f7fe fb70 	bl	8000c7c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e138      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ae:	4b80      	ldr	r3, [pc, #512]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 80025b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0ed      	beq.n	8002598 <HAL_RCC_OscConfig+0x53c>
 80025bc:	e015      	b.n	80025ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025be:	f7fe fb5d 	bl	8000c7c <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c4:	e00a      	b.n	80025dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c6:	f7fe fb59 	bl	8000c7c <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e121      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025dc:	4b74      	ldr	r3, [pc, #464]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1ed      	bne.n	80025c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ea:	7ffb      	ldrb	r3, [r7, #31]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d105      	bne.n	80025fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f0:	4b6f      	ldr	r3, [pc, #444]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 80025f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f4:	4a6e      	ldr	r2, [pc, #440]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 80025f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 810c 	beq.w	800281e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260a:	2b02      	cmp	r3, #2
 800260c:	f040 80d4 	bne.w	80027b8 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002610:	4b67      	ldr	r3, [pc, #412]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f003 0203 	and.w	r2, r3, #3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	429a      	cmp	r2, r3
 8002622:	d130      	bne.n	8002686 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	3b01      	subs	r3, #1
 8002630:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002632:	429a      	cmp	r2, r3
 8002634:	d127      	bne.n	8002686 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002640:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002642:	429a      	cmp	r2, r3
 8002644:	d11f      	bne.n	8002686 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002650:	2a07      	cmp	r2, #7
 8002652:	bf14      	ite	ne
 8002654:	2201      	movne	r2, #1
 8002656:	2200      	moveq	r2, #0
 8002658:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800265a:	4293      	cmp	r3, r2
 800265c:	d113      	bne.n	8002686 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002668:	085b      	lsrs	r3, r3, #1
 800266a:	3b01      	subs	r3, #1
 800266c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800266e:	429a      	cmp	r2, r3
 8002670:	d109      	bne.n	8002686 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	085b      	lsrs	r3, r3, #1
 800267e:	3b01      	subs	r3, #1
 8002680:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002682:	429a      	cmp	r2, r3
 8002684:	d06e      	beq.n	8002764 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	2b0c      	cmp	r3, #12
 800268a:	d069      	beq.n	8002760 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800268c:	4b48      	ldr	r3, [pc, #288]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d105      	bne.n	80026a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002698:	4b45      	ldr	r3, [pc, #276]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0bb      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026a8:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a40      	ldr	r2, [pc, #256]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 80026ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026b4:	f7fe fae2 	bl	8000c7c <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026bc:	f7fe fade 	bl	8000c7c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e0a8      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ce:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026da:	4b35      	ldr	r3, [pc, #212]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCC_OscConfig+0x758>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026ea:	3a01      	subs	r2, #1
 80026ec:	0112      	lsls	r2, r2, #4
 80026ee:	4311      	orrs	r1, r2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026f4:	0212      	lsls	r2, r2, #8
 80026f6:	4311      	orrs	r1, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026fc:	0852      	lsrs	r2, r2, #1
 80026fe:	3a01      	subs	r2, #1
 8002700:	0552      	lsls	r2, r2, #21
 8002702:	4311      	orrs	r1, r2
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002708:	0852      	lsrs	r2, r2, #1
 800270a:	3a01      	subs	r2, #1
 800270c:	0652      	lsls	r2, r2, #25
 800270e:	4311      	orrs	r1, r2
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002714:	0912      	lsrs	r2, r2, #4
 8002716:	0452      	lsls	r2, r2, #17
 8002718:	430a      	orrs	r2, r1
 800271a:	4925      	ldr	r1, [pc, #148]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 800271c:	4313      	orrs	r3, r2
 800271e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002720:	4b23      	ldr	r3, [pc, #140]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a22      	ldr	r2, [pc, #136]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 8002726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800272a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800272c:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4a1f      	ldr	r2, [pc, #124]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 8002732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002736:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002738:	f7fe faa0 	bl	8000c7c <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002740:	f7fe fa9c 	bl	8000c7c <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e066      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002752:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800275e:	e05e      	b.n	800281e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e05d      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002764:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d156      	bne.n	800281e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0e      	ldr	r2, [pc, #56]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 8002776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800277a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4a0b      	ldr	r2, [pc, #44]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 8002782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002786:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002788:	f7fe fa78 	bl	8000c7c <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002790:	f7fe fa74 	bl	8000c7c <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e03e      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a2:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <HAL_RCC_OscConfig+0x754>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x734>
 80027ae:	e036      	b.n	800281e <HAL_RCC_OscConfig+0x7c2>
 80027b0:	40021000 	.word	0x40021000
 80027b4:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	2b0c      	cmp	r3, #12
 80027bc:	d02d      	beq.n	800281a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027be:	4b1a      	ldr	r3, [pc, #104]	; (8002828 <HAL_RCC_OscConfig+0x7cc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a19      	ldr	r2, [pc, #100]	; (8002828 <HAL_RCC_OscConfig+0x7cc>)
 80027c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027c8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80027ca:	4b17      	ldr	r3, [pc, #92]	; (8002828 <HAL_RCC_OscConfig+0x7cc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d105      	bne.n	80027e2 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80027d6:	4b14      	ldr	r3, [pc, #80]	; (8002828 <HAL_RCC_OscConfig+0x7cc>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	4a13      	ldr	r2, [pc, #76]	; (8002828 <HAL_RCC_OscConfig+0x7cc>)
 80027dc:	f023 0303 	bic.w	r3, r3, #3
 80027e0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027e2:	4b11      	ldr	r3, [pc, #68]	; (8002828 <HAL_RCC_OscConfig+0x7cc>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	4a10      	ldr	r2, [pc, #64]	; (8002828 <HAL_RCC_OscConfig+0x7cc>)
 80027e8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80027ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f2:	f7fe fa43 	bl	8000c7c <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fa:	f7fe fa3f 	bl	8000c7c <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e009      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_RCC_OscConfig+0x7cc>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f0      	bne.n	80027fa <HAL_RCC_OscConfig+0x79e>
 8002818:	e001      	b.n	800281e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3720      	adds	r7, #32
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40021000 	.word	0x40021000

0800282c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0c8      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002840:	4b66      	ldr	r3, [pc, #408]	; (80029dc <HAL_RCC_ClockConfig+0x1b0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d910      	bls.n	8002870 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	4b63      	ldr	r3, [pc, #396]	; (80029dc <HAL_RCC_ClockConfig+0x1b0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 0207 	bic.w	r2, r3, #7
 8002856:	4961      	ldr	r1, [pc, #388]	; (80029dc <HAL_RCC_ClockConfig+0x1b0>)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	4b5f      	ldr	r3, [pc, #380]	; (80029dc <HAL_RCC_ClockConfig+0x1b0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0b0      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d04c      	beq.n	8002916 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b03      	cmp	r3, #3
 8002882:	d107      	bne.n	8002894 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002884:	4b56      	ldr	r3, [pc, #344]	; (80029e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d121      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e09e      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d107      	bne.n	80028ac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800289c:	4b50      	ldr	r3, [pc, #320]	; (80029e0 <HAL_RCC_ClockConfig+0x1b4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d115      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e092      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d107      	bne.n	80028c4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028b4:	4b4a      	ldr	r3, [pc, #296]	; (80029e0 <HAL_RCC_ClockConfig+0x1b4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d109      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e086      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028c4:	4b46      	ldr	r3, [pc, #280]	; (80029e0 <HAL_RCC_ClockConfig+0x1b4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e07e      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028d4:	4b42      	ldr	r3, [pc, #264]	; (80029e0 <HAL_RCC_ClockConfig+0x1b4>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f023 0203 	bic.w	r2, r3, #3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	493f      	ldr	r1, [pc, #252]	; (80029e0 <HAL_RCC_ClockConfig+0x1b4>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e6:	f7fe f9c9 	bl	8000c7c <HAL_GetTick>
 80028ea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ec:	e00a      	b.n	8002904 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ee:	f7fe f9c5 	bl	8000c7c <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e066      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002904:	4b36      	ldr	r3, [pc, #216]	; (80029e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 020c 	and.w	r2, r3, #12
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	429a      	cmp	r2, r3
 8002914:	d1eb      	bne.n	80028ee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d008      	beq.n	8002934 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002922:	4b2f      	ldr	r3, [pc, #188]	; (80029e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	492c      	ldr	r1, [pc, #176]	; (80029e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002930:	4313      	orrs	r3, r2
 8002932:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002934:	4b29      	ldr	r3, [pc, #164]	; (80029dc <HAL_RCC_ClockConfig+0x1b0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d210      	bcs.n	8002964 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b26      	ldr	r3, [pc, #152]	; (80029dc <HAL_RCC_ClockConfig+0x1b0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 0207 	bic.w	r2, r3, #7
 800294a:	4924      	ldr	r1, [pc, #144]	; (80029dc <HAL_RCC_ClockConfig+0x1b0>)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b22      	ldr	r3, [pc, #136]	; (80029dc <HAL_RCC_ClockConfig+0x1b0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e036      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002970:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4918      	ldr	r1, [pc, #96]	; (80029e0 <HAL_RCC_ClockConfig+0x1b4>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800298e:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4910      	ldr	r1, [pc, #64]	; (80029e0 <HAL_RCC_ClockConfig+0x1b4>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029a2:	f000 f825 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 80029a6:	4602      	mov	r2, r0
 80029a8:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <HAL_RCC_ClockConfig+0x1b4>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	490c      	ldr	r1, [pc, #48]	; (80029e4 <HAL_RCC_ClockConfig+0x1b8>)
 80029b4:	5ccb      	ldrb	r3, [r1, r3]
 80029b6:	f003 031f 	and.w	r3, r3, #31
 80029ba:	fa22 f303 	lsr.w	r3, r2, r3
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029c2:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe f90c 	bl	8000be4 <HAL_InitTick>
 80029cc:	4603      	mov	r3, r0
 80029ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80029d0:	7afb      	ldrb	r3, [r7, #11]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40022000 	.word	0x40022000
 80029e0:	40021000 	.word	0x40021000
 80029e4:	08004c8c 	.word	0x08004c8c
 80029e8:	20000000 	.word	0x20000000
 80029ec:	20000004 	.word	0x20000004

080029f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b089      	sub	sp, #36	; 0x24
 80029f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	2300      	movs	r3, #0
 80029fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029fe:	4b3e      	ldr	r3, [pc, #248]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a08:	4b3b      	ldr	r3, [pc, #236]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_GetSysClockFreq+0x34>
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	2b0c      	cmp	r3, #12
 8002a1c:	d121      	bne.n	8002a62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d11e      	bne.n	8002a62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a24:	4b34      	ldr	r3, [pc, #208]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d107      	bne.n	8002a40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a30:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a36:	0a1b      	lsrs	r3, r3, #8
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	e005      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a40:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a4c:	4a2b      	ldr	r2, [pc, #172]	; (8002afc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10d      	bne.n	8002a78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d102      	bne.n	8002a6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a68:	4b25      	ldr	r3, [pc, #148]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a6a:	61bb      	str	r3, [r7, #24]
 8002a6c:	e004      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a74:	4b23      	ldr	r3, [pc, #140]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	2b0c      	cmp	r3, #12
 8002a7c:	d134      	bne.n	8002ae8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a7e:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d003      	beq.n	8002a96 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d003      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0xac>
 8002a94:	e005      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a96:	4b1a      	ldr	r3, [pc, #104]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a98:	617b      	str	r3, [r7, #20]
      break;
 8002a9a:	e005      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a9c:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a9e:	617b      	str	r3, [r7, #20]
      break;
 8002aa0:	e002      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	617b      	str	r3, [r7, #20]
      break;
 8002aa6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002aa8:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	0a1b      	lsrs	r3, r3, #8
 8002abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	fb03 f202 	mul.w	r2, r3, r2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002acc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	0e5b      	lsrs	r3, r3, #25
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	3301      	adds	r3, #1
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ae8:	69bb      	ldr	r3, [r7, #24]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3724      	adds	r7, #36	; 0x24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40021000 	.word	0x40021000
 8002afc:	08004ca4 	.word	0x08004ca4
 8002b00:	00f42400 	.word	0x00f42400
 8002b04:	007a1200 	.word	0x007a1200

08002b08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b0c:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000000 	.word	0x20000000

08002b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b24:	f7ff fff0 	bl	8002b08 <HAL_RCC_GetHCLKFreq>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	0a1b      	lsrs	r3, r3, #8
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	4904      	ldr	r1, [pc, #16]	; (8002b48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b36:	5ccb      	ldrb	r3, [r1, r3]
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40021000 	.word	0x40021000
 8002b48:	08004c9c 	.word	0x08004c9c

08002b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b50:	f7ff ffda 	bl	8002b08 <HAL_RCC_GetHCLKFreq>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	0adb      	lsrs	r3, r3, #11
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	4904      	ldr	r1, [pc, #16]	; (8002b74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b62:	5ccb      	ldrb	r3, [r1, r3]
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40021000 	.word	0x40021000
 8002b74:	08004c9c 	.word	0x08004c9c

08002b78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b80:	2300      	movs	r3, #0
 8002b82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b84:	4b2a      	ldr	r3, [pc, #168]	; (8002c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b90:	f7ff fa00 	bl	8001f94 <HAL_PWREx_GetVoltageRange>
 8002b94:	6178      	str	r0, [r7, #20]
 8002b96:	e014      	b.n	8002bc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b98:	4b25      	ldr	r3, [pc, #148]	; (8002c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9c:	4a24      	ldr	r2, [pc, #144]	; (8002c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ba4:	4b22      	ldr	r3, [pc, #136]	; (8002c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bb0:	f7ff f9f0 	bl	8001f94 <HAL_PWREx_GetVoltageRange>
 8002bb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bb6:	4b1e      	ldr	r3, [pc, #120]	; (8002c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bba:	4a1d      	ldr	r2, [pc, #116]	; (8002c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bc8:	d10b      	bne.n	8002be2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b80      	cmp	r3, #128	; 0x80
 8002bce:	d919      	bls.n	8002c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2ba0      	cmp	r3, #160	; 0xa0
 8002bd4:	d902      	bls.n	8002bdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	e013      	b.n	8002c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bdc:	2301      	movs	r3, #1
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	e010      	b.n	8002c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b80      	cmp	r3, #128	; 0x80
 8002be6:	d902      	bls.n	8002bee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002be8:	2303      	movs	r3, #3
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	e00a      	b.n	8002c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b80      	cmp	r3, #128	; 0x80
 8002bf2:	d102      	bne.n	8002bfa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	e004      	b.n	8002c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b70      	cmp	r3, #112	; 0x70
 8002bfe:	d101      	bne.n	8002c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c00:	2301      	movs	r3, #1
 8002c02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f023 0207 	bic.w	r2, r3, #7
 8002c0c:	4909      	ldr	r1, [pc, #36]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c14:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d001      	beq.n	8002c26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40022000 	.word	0x40022000

08002c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c40:	2300      	movs	r3, #0
 8002c42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c44:	2300      	movs	r3, #0
 8002c46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d041      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c5c:	d02a      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c62:	d824      	bhi.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c68:	d008      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c6e:	d81e      	bhi.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c78:	d010      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c7a:	e018      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c7c:	4b86      	ldr	r3, [pc, #536]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4a85      	ldr	r2, [pc, #532]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c88:	e015      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fabb 	bl	800320c <RCCEx_PLLSAI1_Config>
 8002c96:	4603      	mov	r3, r0
 8002c98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c9a:	e00c      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3320      	adds	r3, #32
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fba6 	bl	80033f4 <RCCEx_PLLSAI2_Config>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cac:	e003      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	74fb      	strb	r3, [r7, #19]
      break;
 8002cb2:	e000      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002cb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cb6:	7cfb      	ldrb	r3, [r7, #19]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10b      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cbc:	4b76      	ldr	r3, [pc, #472]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cca:	4973      	ldr	r1, [pc, #460]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cd2:	e001      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd4:	7cfb      	ldrb	r3, [r7, #19]
 8002cd6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d041      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ce8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cec:	d02a      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002cee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cf2:	d824      	bhi.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002cf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cf8:	d008      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cfe:	d81e      	bhi.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d08:	d010      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d0a:	e018      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d0c:	4b62      	ldr	r3, [pc, #392]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4a61      	ldr	r2, [pc, #388]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d18:	e015      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 fa73 	bl	800320c <RCCEx_PLLSAI1_Config>
 8002d26:	4603      	mov	r3, r0
 8002d28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d2a:	e00c      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3320      	adds	r3, #32
 8002d30:	2100      	movs	r1, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 fb5e 	bl	80033f4 <RCCEx_PLLSAI2_Config>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d3c:	e003      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	74fb      	strb	r3, [r7, #19]
      break;
 8002d42:	e000      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d46:	7cfb      	ldrb	r3, [r7, #19]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10b      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d4c:	4b52      	ldr	r3, [pc, #328]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d5a:	494f      	ldr	r1, [pc, #316]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d62:	e001      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 80a0 	beq.w	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d76:	2300      	movs	r3, #0
 8002d78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d7a:	4b47      	ldr	r3, [pc, #284]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00d      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d90:	4b41      	ldr	r3, [pc, #260]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d94:	4a40      	ldr	r2, [pc, #256]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d9c:	4b3e      	ldr	r3, [pc, #248]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da8:	2301      	movs	r3, #1
 8002daa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dac:	4b3b      	ldr	r3, [pc, #236]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a3a      	ldr	r2, [pc, #232]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002db8:	f7fd ff60 	bl	8000c7c <HAL_GetTick>
 8002dbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dbe:	e009      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc0:	f7fd ff5c 	bl	8000c7c <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d902      	bls.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	74fb      	strb	r3, [r7, #19]
        break;
 8002dd2:	e005      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dd4:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0ef      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d15c      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002de6:	4b2c      	ldr	r3, [pc, #176]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d01f      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d019      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e04:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e10:	4b21      	ldr	r3, [pc, #132]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e16:	4a20      	ldr	r2, [pc, #128]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e20:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e26:	4a1c      	ldr	r2, [pc, #112]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e30:	4a19      	ldr	r2, [pc, #100]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d016      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e42:	f7fd ff1b 	bl	8000c7c <HAL_GetTick>
 8002e46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e48:	e00b      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4a:	f7fd ff17 	bl	8000c7c <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d902      	bls.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	74fb      	strb	r3, [r7, #19]
            break;
 8002e60:	e006      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ec      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e70:	7cfb      	ldrb	r3, [r7, #19]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10c      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e76:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e86:	4904      	ldr	r1, [pc, #16]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e8e:	e009      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e90:	7cfb      	ldrb	r3, [r7, #19]
 8002e92:	74bb      	strb	r3, [r7, #18]
 8002e94:	e006      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e96:	bf00      	nop
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea0:	7cfb      	ldrb	r3, [r7, #19]
 8002ea2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ea4:	7c7b      	ldrb	r3, [r7, #17]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d105      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eaa:	4b9e      	ldr	r3, [pc, #632]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	4a9d      	ldr	r2, [pc, #628]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ec2:	4b98      	ldr	r3, [pc, #608]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec8:	f023 0203 	bic.w	r2, r3, #3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed0:	4994      	ldr	r1, [pc, #592]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00a      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ee4:	4b8f      	ldr	r3, [pc, #572]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eea:	f023 020c 	bic.w	r2, r3, #12
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef2:	498c      	ldr	r1, [pc, #560]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f06:	4b87      	ldr	r3, [pc, #540]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	4983      	ldr	r1, [pc, #524]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f28:	4b7e      	ldr	r3, [pc, #504]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	497b      	ldr	r1, [pc, #492]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f4a:	4b76      	ldr	r3, [pc, #472]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f58:	4972      	ldr	r1, [pc, #456]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00a      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f6c:	4b6d      	ldr	r3, [pc, #436]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7a:	496a      	ldr	r1, [pc, #424]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f8e:	4b65      	ldr	r3, [pc, #404]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9c:	4961      	ldr	r1, [pc, #388]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fb0:	4b5c      	ldr	r3, [pc, #368]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fbe:	4959      	ldr	r1, [pc, #356]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fd2:	4b54      	ldr	r3, [pc, #336]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe0:	4950      	ldr	r1, [pc, #320]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00a      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ff4:	4b4b      	ldr	r3, [pc, #300]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	4948      	ldr	r1, [pc, #288]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003016:	4b43      	ldr	r3, [pc, #268]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003024:	493f      	ldr	r1, [pc, #252]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d028      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003038:	4b3a      	ldr	r3, [pc, #232]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003046:	4937      	ldr	r1, [pc, #220]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003056:	d106      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003058:	4b32      	ldr	r3, [pc, #200]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4a31      	ldr	r2, [pc, #196]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003062:	60d3      	str	r3, [r2, #12]
 8003064:	e011      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800306a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800306e:	d10c      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3304      	adds	r3, #4
 8003074:	2101      	movs	r1, #1
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f8c8 	bl	800320c <RCCEx_PLLSAI1_Config>
 800307c:	4603      	mov	r3, r0
 800307e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003080:	7cfb      	ldrb	r3, [r7, #19]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003086:	7cfb      	ldrb	r3, [r7, #19]
 8003088:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d028      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003096:	4b23      	ldr	r3, [pc, #140]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	491f      	ldr	r1, [pc, #124]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030b4:	d106      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030b6:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	4a1a      	ldr	r2, [pc, #104]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030c0:	60d3      	str	r3, [r2, #12]
 80030c2:	e011      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3304      	adds	r3, #4
 80030d2:	2101      	movs	r1, #1
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 f899 	bl	800320c <RCCEx_PLLSAI1_Config>
 80030da:	4603      	mov	r3, r0
 80030dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030de:	7cfb      	ldrb	r3, [r7, #19]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80030e4:	7cfb      	ldrb	r3, [r7, #19]
 80030e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d02b      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003102:	4908      	ldr	r1, [pc, #32]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800310e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003112:	d109      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	4a02      	ldr	r2, [pc, #8]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800311e:	60d3      	str	r3, [r2, #12]
 8003120:	e014      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003122:	bf00      	nop
 8003124:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003130:	d10c      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3304      	adds	r3, #4
 8003136:	2101      	movs	r1, #1
 8003138:	4618      	mov	r0, r3
 800313a:	f000 f867 	bl	800320c <RCCEx_PLLSAI1_Config>
 800313e:	4603      	mov	r3, r0
 8003140:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003142:	7cfb      	ldrb	r3, [r7, #19]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003148:	7cfb      	ldrb	r3, [r7, #19]
 800314a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d02f      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003158:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003166:	4928      	ldr	r1, [pc, #160]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003172:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003176:	d10d      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3304      	adds	r3, #4
 800317c:	2102      	movs	r1, #2
 800317e:	4618      	mov	r0, r3
 8003180:	f000 f844 	bl	800320c <RCCEx_PLLSAI1_Config>
 8003184:	4603      	mov	r3, r0
 8003186:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003188:	7cfb      	ldrb	r3, [r7, #19]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d014      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800318e:	7cfb      	ldrb	r3, [r7, #19]
 8003190:	74bb      	strb	r3, [r7, #18]
 8003192:	e011      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800319c:	d10c      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3320      	adds	r3, #32
 80031a2:	2102      	movs	r1, #2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 f925 	bl	80033f4 <RCCEx_PLLSAI2_Config>
 80031aa:	4603      	mov	r3, r0
 80031ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031ae:	7cfb      	ldrb	r3, [r7, #19]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031b4:	7cfb      	ldrb	r3, [r7, #19]
 80031b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031c4:	4b10      	ldr	r3, [pc, #64]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031d2:	490d      	ldr	r1, [pc, #52]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00b      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031e6:	4b08      	ldr	r3, [pc, #32]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031f6:	4904      	ldr	r1, [pc, #16]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40021000 	.word	0x40021000

0800320c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800321a:	4b75      	ldr	r3, [pc, #468]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d018      	beq.n	8003258 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003226:	4b72      	ldr	r3, [pc, #456]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f003 0203 	and.w	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d10d      	bne.n	8003252 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
       ||
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800323e:	4b6c      	ldr	r3, [pc, #432]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
       ||
 800324e:	429a      	cmp	r2, r3
 8003250:	d047      	beq.n	80032e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	73fb      	strb	r3, [r7, #15]
 8003256:	e044      	b.n	80032e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d018      	beq.n	8003292 <RCCEx_PLLSAI1_Config+0x86>
 8003260:	2b03      	cmp	r3, #3
 8003262:	d825      	bhi.n	80032b0 <RCCEx_PLLSAI1_Config+0xa4>
 8003264:	2b01      	cmp	r3, #1
 8003266:	d002      	beq.n	800326e <RCCEx_PLLSAI1_Config+0x62>
 8003268:	2b02      	cmp	r3, #2
 800326a:	d009      	beq.n	8003280 <RCCEx_PLLSAI1_Config+0x74>
 800326c:	e020      	b.n	80032b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800326e:	4b60      	ldr	r3, [pc, #384]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d11d      	bne.n	80032b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800327e:	e01a      	b.n	80032b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003280:	4b5b      	ldr	r3, [pc, #364]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003288:	2b00      	cmp	r3, #0
 800328a:	d116      	bne.n	80032ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003290:	e013      	b.n	80032ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003292:	4b57      	ldr	r3, [pc, #348]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10f      	bne.n	80032be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800329e:	4b54      	ldr	r3, [pc, #336]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032ae:	e006      	b.n	80032be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	73fb      	strb	r3, [r7, #15]
      break;
 80032b4:	e004      	b.n	80032c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032b6:	bf00      	nop
 80032b8:	e002      	b.n	80032c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032ba:	bf00      	nop
 80032bc:	e000      	b.n	80032c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032be:	bf00      	nop
    }

    if(status == HAL_OK)
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10d      	bne.n	80032e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032c6:	4b4a      	ldr	r3, [pc, #296]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6819      	ldr	r1, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	430b      	orrs	r3, r1
 80032dc:	4944      	ldr	r1, [pc, #272]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d17d      	bne.n	80033e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032e8:	4b41      	ldr	r3, [pc, #260]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a40      	ldr	r2, [pc, #256]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f4:	f7fd fcc2 	bl	8000c7c <HAL_GetTick>
 80032f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032fa:	e009      	b.n	8003310 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032fc:	f7fd fcbe 	bl	8000c7c <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d902      	bls.n	8003310 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	73fb      	strb	r3, [r7, #15]
        break;
 800330e:	e005      	b.n	800331c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003310:	4b37      	ldr	r3, [pc, #220]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1ef      	bne.n	80032fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d160      	bne.n	80033e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d111      	bne.n	800334c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003328:	4b31      	ldr	r3, [pc, #196]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6892      	ldr	r2, [r2, #8]
 8003338:	0211      	lsls	r1, r2, #8
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	68d2      	ldr	r2, [r2, #12]
 800333e:	0912      	lsrs	r2, r2, #4
 8003340:	0452      	lsls	r2, r2, #17
 8003342:	430a      	orrs	r2, r1
 8003344:	492a      	ldr	r1, [pc, #168]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003346:	4313      	orrs	r3, r2
 8003348:	610b      	str	r3, [r1, #16]
 800334a:	e027      	b.n	800339c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d112      	bne.n	8003378 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003352:	4b27      	ldr	r3, [pc, #156]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800335a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6892      	ldr	r2, [r2, #8]
 8003362:	0211      	lsls	r1, r2, #8
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6912      	ldr	r2, [r2, #16]
 8003368:	0852      	lsrs	r2, r2, #1
 800336a:	3a01      	subs	r2, #1
 800336c:	0552      	lsls	r2, r2, #21
 800336e:	430a      	orrs	r2, r1
 8003370:	491f      	ldr	r1, [pc, #124]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003372:	4313      	orrs	r3, r2
 8003374:	610b      	str	r3, [r1, #16]
 8003376:	e011      	b.n	800339c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003378:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003380:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6892      	ldr	r2, [r2, #8]
 8003388:	0211      	lsls	r1, r2, #8
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6952      	ldr	r2, [r2, #20]
 800338e:	0852      	lsrs	r2, r2, #1
 8003390:	3a01      	subs	r2, #1
 8003392:	0652      	lsls	r2, r2, #25
 8003394:	430a      	orrs	r2, r1
 8003396:	4916      	ldr	r1, [pc, #88]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003398:	4313      	orrs	r3, r2
 800339a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800339c:	4b14      	ldr	r3, [pc, #80]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a13      	ldr	r2, [pc, #76]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a8:	f7fd fc68 	bl	8000c7c <HAL_GetTick>
 80033ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033ae:	e009      	b.n	80033c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033b0:	f7fd fc64 	bl	8000c7c <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d902      	bls.n	80033c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	73fb      	strb	r3, [r7, #15]
          break;
 80033c2:	e005      	b.n	80033d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033c4:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0ef      	beq.n	80033b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033d6:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	4904      	ldr	r1, [pc, #16]	; (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000

080033f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003402:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d018      	beq.n	8003440 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800340e:	4b67      	ldr	r3, [pc, #412]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f003 0203 	and.w	r2, r3, #3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d10d      	bne.n	800343a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
       ||
 8003422:	2b00      	cmp	r3, #0
 8003424:	d009      	beq.n	800343a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003426:	4b61      	ldr	r3, [pc, #388]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
       ||
 8003436:	429a      	cmp	r2, r3
 8003438:	d047      	beq.n	80034ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	73fb      	strb	r3, [r7, #15]
 800343e:	e044      	b.n	80034ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b03      	cmp	r3, #3
 8003446:	d018      	beq.n	800347a <RCCEx_PLLSAI2_Config+0x86>
 8003448:	2b03      	cmp	r3, #3
 800344a:	d825      	bhi.n	8003498 <RCCEx_PLLSAI2_Config+0xa4>
 800344c:	2b01      	cmp	r3, #1
 800344e:	d002      	beq.n	8003456 <RCCEx_PLLSAI2_Config+0x62>
 8003450:	2b02      	cmp	r3, #2
 8003452:	d009      	beq.n	8003468 <RCCEx_PLLSAI2_Config+0x74>
 8003454:	e020      	b.n	8003498 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003456:	4b55      	ldr	r3, [pc, #340]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d11d      	bne.n	800349e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003466:	e01a      	b.n	800349e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003468:	4b50      	ldr	r3, [pc, #320]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003470:	2b00      	cmp	r3, #0
 8003472:	d116      	bne.n	80034a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003478:	e013      	b.n	80034a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800347a:	4b4c      	ldr	r3, [pc, #304]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10f      	bne.n	80034a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003486:	4b49      	ldr	r3, [pc, #292]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003496:	e006      	b.n	80034a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
      break;
 800349c:	e004      	b.n	80034a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800349e:	bf00      	nop
 80034a0:	e002      	b.n	80034a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034a2:	bf00      	nop
 80034a4:	e000      	b.n	80034a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10d      	bne.n	80034ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034ae:	4b3f      	ldr	r3, [pc, #252]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6819      	ldr	r1, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	3b01      	subs	r3, #1
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	430b      	orrs	r3, r1
 80034c4:	4939      	ldr	r1, [pc, #228]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d167      	bne.n	80035a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034d0:	4b36      	ldr	r3, [pc, #216]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a35      	ldr	r2, [pc, #212]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034dc:	f7fd fbce 	bl	8000c7c <HAL_GetTick>
 80034e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034e2:	e009      	b.n	80034f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034e4:	f7fd fbca 	bl	8000c7c <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d902      	bls.n	80034f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	73fb      	strb	r3, [r7, #15]
        break;
 80034f6:	e005      	b.n	8003504 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034f8:	4b2c      	ldr	r3, [pc, #176]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1ef      	bne.n	80034e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d14a      	bne.n	80035a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d111      	bne.n	8003534 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003510:	4b26      	ldr	r3, [pc, #152]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6892      	ldr	r2, [r2, #8]
 8003520:	0211      	lsls	r1, r2, #8
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	68d2      	ldr	r2, [r2, #12]
 8003526:	0912      	lsrs	r2, r2, #4
 8003528:	0452      	lsls	r2, r2, #17
 800352a:	430a      	orrs	r2, r1
 800352c:	491f      	ldr	r1, [pc, #124]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800352e:	4313      	orrs	r3, r2
 8003530:	614b      	str	r3, [r1, #20]
 8003532:	e011      	b.n	8003558 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003534:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800353c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6892      	ldr	r2, [r2, #8]
 8003544:	0211      	lsls	r1, r2, #8
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6912      	ldr	r2, [r2, #16]
 800354a:	0852      	lsrs	r2, r2, #1
 800354c:	3a01      	subs	r2, #1
 800354e:	0652      	lsls	r2, r2, #25
 8003550:	430a      	orrs	r2, r1
 8003552:	4916      	ldr	r1, [pc, #88]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003554:	4313      	orrs	r3, r2
 8003556:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003558:	4b14      	ldr	r3, [pc, #80]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a13      	ldr	r2, [pc, #76]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800355e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003562:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003564:	f7fd fb8a 	bl	8000c7c <HAL_GetTick>
 8003568:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800356a:	e009      	b.n	8003580 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800356c:	f7fd fb86 	bl	8000c7c <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d902      	bls.n	8003580 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	73fb      	strb	r3, [r7, #15]
          break;
 800357e:	e005      	b.n	800358c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0ef      	beq.n	800356c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003592:	4b06      	ldr	r3, [pc, #24]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	4904      	ldr	r1, [pc, #16]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800359c:	4313      	orrs	r3, r2
 800359e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000

080035b0 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e03c      	b.n	800363c <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fd f96c 	bl	80008b4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0201 	bic.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f9df 	bl	80039b8 <USART_SetConfig>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e01b      	b.n	800363c <HAL_USART_Init+0x8c>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003612:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003622:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fb15 	bl	8003c64 <USART_CheckIdleState>
 800363a:	4603      	mov	r3, r0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b08a      	sub	sp, #40	; 0x28
 8003648:	af02      	add	r7, sp, #8
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	4613      	mov	r3, r2
 8003652:	80fb      	strh	r3, [r7, #6]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b01      	cmp	r3, #1
 800365e:	f040 809a 	bne.w	8003796 <HAL_USART_Transmit+0x152>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <HAL_USART_Transmit+0x2a>
 8003668:	88fb      	ldrh	r3, [r7, #6]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e092      	b.n	8003798 <HAL_USART_Transmit+0x154>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_USART_Transmit+0x3c>
 800367c:	2302      	movs	r3, #2
 800367e:	e08b      	b.n	8003798 <HAL_USART_Transmit+0x154>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2212      	movs	r2, #18
 8003692:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003696:	f7fd faf1 	bl	8000c7c <HAL_GetTick>
 800369a:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	88fa      	ldrh	r2, [r7, #6]
 80036a0:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	88fa      	ldrh	r2, [r7, #6]
 80036a6:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b0:	d108      	bne.n	80036c4 <HAL_USART_Transmit+0x80>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d104      	bne.n	80036c4 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	e003      	b.n	80036cc <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 80036cc:	e02b      	b.n	8003726 <HAL_USART_Transmit+0xe2>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2200      	movs	r2, #0
 80036d6:	2180      	movs	r1, #128	; 0x80
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f936 	bl	800394a <USART_WaitOnFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e057      	b.n	8003798 <HAL_USART_Transmit+0x154>
      }
      if (ptxdata8bits == NULL)
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10b      	bne.n	8003706 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	881a      	ldrh	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036fa:	b292      	uxth	r2, r2
 80036fc:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	3302      	adds	r3, #2
 8003702:	61bb      	str	r3, [r7, #24]
 8003704:	e008      	b.n	8003718 <HAL_USART_Transmit+0xd4>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	781a      	ldrb	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	b292      	uxth	r2, r2
 8003710:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	3301      	adds	r3, #1
 8003716:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372a:	b29b      	uxth	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1ce      	bne.n	80036ce <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2200      	movs	r2, #0
 8003738:	2140      	movs	r1, #64	; 0x40
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 f905 	bl	800394a <USART_WaitOnFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <HAL_USART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e026      	b.n	8003798 <HAL_USART_Transmit+0x154>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2240      	movs	r2, #64	; 0x40
 8003750:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2208      	movs	r2, #8
 8003758:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	8b1b      	ldrh	r3, [r3, #24]
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0208 	orr.w	r2, r2, #8
 800376a:	b292      	uxth	r2, r2
 800376c:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	8b1b      	ldrh	r3, [r3, #24]
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0210 	orr.w	r2, r2, #16
 800377e:	b292      	uxth	r2, r2
 8003780:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	e000      	b.n	8003798 <HAL_USART_Transmit+0x154>
  }
  else
  {
    return HAL_BUSY;
 8003796:	2302      	movs	r3, #2
  }
}
 8003798:	4618      	mov	r0, r3
 800379a:	3720      	adds	r7, #32
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_USART_Receive>:
  * @param Size Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08a      	sub	sp, #40	; 0x28
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	603b      	str	r3, [r7, #0]
 80037ac:	4613      	mov	r3, r2
 80037ae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *prxdata8bits;
  uint16_t *prxdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	f040 80c1 	bne.w	8003940 <HAL_USART_Receive+0x1a0>
  {
    if ((pRxData == NULL) || (Size == 0U))
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <HAL_USART_Receive+0x2a>
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_USART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e0b9      	b.n	8003942 <HAL_USART_Receive+0x1a2>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_USART_Receive+0x3c>
 80037d8:	2302      	movs	r3, #2
 80037da:	e0b2      	b.n	8003942 <HAL_USART_Receive+0x1a2>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_RX;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2222      	movs	r2, #34	; 0x22
 80037ee:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80037f2:	f7fd fa43 	bl	8000c7c <HAL_GetTick>
 80037f6:	6178      	str	r0, [r7, #20]

    husart->RxXferSize = Size;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	88fa      	ldrh	r2, [r7, #6]
 80037fc:	861a      	strh	r2, [r3, #48]	; 0x30
    husart->RxXferCount = Size;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	88fa      	ldrh	r2, [r7, #6]
 8003802:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Computation of USART mask to apply to RDR register */
    USART_MASK_COMPUTATION(husart);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380c:	d10c      	bne.n	8003828 <HAL_USART_Receive+0x88>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d104      	bne.n	8003820 <HAL_USART_Receive+0x80>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f240 12ff 	movw	r2, #511	; 0x1ff
 800381c:	869a      	strh	r2, [r3, #52]	; 0x34
 800381e:	e027      	b.n	8003870 <HAL_USART_Receive+0xd0>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	22ff      	movs	r2, #255	; 0xff
 8003824:	869a      	strh	r2, [r3, #52]	; 0x34
 8003826:	e023      	b.n	8003870 <HAL_USART_Receive+0xd0>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10b      	bne.n	8003848 <HAL_USART_Receive+0xa8>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d103      	bne.n	8003840 <HAL_USART_Receive+0xa0>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	22ff      	movs	r2, #255	; 0xff
 800383c:	869a      	strh	r2, [r3, #52]	; 0x34
 800383e:	e017      	b.n	8003870 <HAL_USART_Receive+0xd0>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	227f      	movs	r2, #127	; 0x7f
 8003844:	869a      	strh	r2, [r3, #52]	; 0x34
 8003846:	e013      	b.n	8003870 <HAL_USART_Receive+0xd0>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003850:	d10b      	bne.n	800386a <HAL_USART_Receive+0xca>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d103      	bne.n	8003862 <HAL_USART_Receive+0xc2>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	227f      	movs	r2, #127	; 0x7f
 800385e:	869a      	strh	r2, [r3, #52]	; 0x34
 8003860:	e006      	b.n	8003870 <HAL_USART_Receive+0xd0>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	223f      	movs	r2, #63	; 0x3f
 8003866:	869a      	strh	r2, [r3, #52]	; 0x34
 8003868:	e002      	b.n	8003870 <HAL_USART_Receive+0xd0>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	869a      	strh	r2, [r3, #52]	; 0x34
    uhMask = husart->Mask;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003874:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387e:	d108      	bne.n	8003892 <HAL_USART_Receive+0xf2>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d104      	bne.n	8003892 <HAL_USART_Receive+0xf2>
    {
      prxdata8bits  = NULL;
 8003888:	2300      	movs	r3, #0
 800388a:	61fb      	str	r3, [r7, #28]
      prxdata16bits = (uint16_t *) pRxData;
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	61bb      	str	r3, [r7, #24]
 8003890:	e003      	b.n	800389a <HAL_USART_Receive+0xfa>
    }
    else
    {
      prxdata8bits  = pRxData;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	61fb      	str	r3, [r7, #28]
      prxdata16bits = NULL;
 8003896:	2300      	movs	r3, #0
 8003898:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (husart->RxXferCount > 0U)
 800389a:	e042      	b.n	8003922 <HAL_USART_Receive+0x182>
      {
        /* Wait until TXE flag is set to send dummy byte in order to generate the
        * clock for the slave to send data.
        * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
        * can be written for all the cases. */
        if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2200      	movs	r2, #0
 80038a4:	2180      	movs	r1, #128	; 0x80
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f84f 	bl	800394a <USART_WaitOnFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_USART_Receive+0x116>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e045      	b.n	8003942 <HAL_USART_Receive+0x1a2>
        }
        husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x0FF);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	22ff      	movs	r2, #255	; 0xff
 80038bc:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait for RXNE Flag */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2200      	movs	r2, #0
 80038c6:	2120      	movs	r1, #32
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f83e 	bl	800394a <USART_WaitOnFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_USART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e034      	b.n	8003942 <HAL_USART_Receive+0x1a2>
      }

      if (prxdata8bits == NULL)
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10c      	bne.n	80038f8 <HAL_USART_Receive+0x158>
      {
        *prxdata16bits = (uint16_t)(husart->Instance->RDR & uhMask);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	8a7b      	ldrh	r3, [r7, #18]
 80038e8:	4013      	ands	r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	801a      	strh	r2, [r3, #0]
        prxdata16bits++;
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	3302      	adds	r3, #2
 80038f4:	61bb      	str	r3, [r7, #24]
 80038f6:	e00d      	b.n	8003914 <HAL_USART_Receive+0x174>
      }
      else
      {
        *prxdata8bits = (uint8_t)(husart->Instance->RDR & (uint8_t)(uhMask & 0xFFU));
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80038fe:	b29b      	uxth	r3, r3
 8003900:	b2da      	uxtb	r2, r3
 8003902:	8a7b      	ldrh	r3, [r7, #18]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	4013      	ands	r3, r2
 8003908:	b2da      	uxtb	r2, r3
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	701a      	strb	r2, [r3, #0]
        prxdata8bits++;
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3301      	adds	r3, #1
 8003912:	61fb      	str	r3, [r7, #28]
      }

      husart->RxXferCount--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	865a      	strh	r2, [r3, #50]	; 0x32
    while (husart->RxXferCount > 0U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1b7      	bne.n	800389c <HAL_USART_Receive+0xfc>
      __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR2_SLVEN */

    /* At end of Rx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	e000      	b.n	8003942 <HAL_USART_Receive+0x1a2>
  }
  else
  {
    return HAL_BUSY;
 8003940:	2302      	movs	r3, #2
  }
}
 8003942:	4618      	mov	r0, r3
 8003944:	3720      	adds	r7, #32
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	603b      	str	r3, [r7, #0]
 8003956:	4613      	mov	r3, r2
 8003958:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800395a:	e018      	b.n	800398e <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003962:	d014      	beq.n	800398e <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003964:	f7fd f98a 	bl	8000c7c <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	429a      	cmp	r2, r3
 8003972:	d302      	bcc.n	800397a <USART_WaitOnFlagUntilTimeout+0x30>
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d109      	bne.n	800398e <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e00f      	b.n	80039ae <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69da      	ldr	r2, [r3, #28]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4013      	ands	r3, r2
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	429a      	cmp	r2, r3
 800399c:	bf0c      	ite	eq
 800399e:	2301      	moveq	r3, #1
 80039a0:	2300      	movne	r3, #0
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	461a      	mov	r2, r3
 80039a6:	79fb      	ldrb	r3, [r7, #7]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d0d7      	beq.n	800395c <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	4b9a      	ldr	r3, [pc, #616]	; (8003c50 <USART_SetConfig+0x298>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	6979      	ldr	r1, [r7, #20]
 80039ee:	430b      	orrs	r3, r1
 80039f0:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80039f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039f6:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699a      	ldr	r2, [r3, #24]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a87      	ldr	r2, [pc, #540]	; (8003c54 <USART_SetConfig+0x29c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d121      	bne.n	8003a7e <USART_SetConfig+0xc6>
 8003a3a:	4b87      	ldr	r3, [pc, #540]	; (8003c58 <USART_SetConfig+0x2a0>)
 8003a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	2b03      	cmp	r3, #3
 8003a46:	d817      	bhi.n	8003a78 <USART_SetConfig+0xc0>
 8003a48:	a201      	add	r2, pc, #4	; (adr r2, 8003a50 <USART_SetConfig+0x98>)
 8003a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4e:	bf00      	nop
 8003a50:	08003a61 	.word	0x08003a61
 8003a54:	08003a6d 	.word	0x08003a6d
 8003a58:	08003a67 	.word	0x08003a67
 8003a5c:	08003a73 	.word	0x08003a73
 8003a60:	2301      	movs	r3, #1
 8003a62:	77fb      	strb	r3, [r7, #31]
 8003a64:	e06b      	b.n	8003b3e <USART_SetConfig+0x186>
 8003a66:	2302      	movs	r3, #2
 8003a68:	77fb      	strb	r3, [r7, #31]
 8003a6a:	e068      	b.n	8003b3e <USART_SetConfig+0x186>
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	77fb      	strb	r3, [r7, #31]
 8003a70:	e065      	b.n	8003b3e <USART_SetConfig+0x186>
 8003a72:	2308      	movs	r3, #8
 8003a74:	77fb      	strb	r3, [r7, #31]
 8003a76:	e062      	b.n	8003b3e <USART_SetConfig+0x186>
 8003a78:	2310      	movs	r3, #16
 8003a7a:	77fb      	strb	r3, [r7, #31]
 8003a7c:	e05f      	b.n	8003b3e <USART_SetConfig+0x186>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a76      	ldr	r2, [pc, #472]	; (8003c5c <USART_SetConfig+0x2a4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d132      	bne.n	8003aee <USART_SetConfig+0x136>
 8003a88:	4b73      	ldr	r3, [pc, #460]	; (8003c58 <USART_SetConfig+0x2a0>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	2b0c      	cmp	r3, #12
 8003a94:	d828      	bhi.n	8003ae8 <USART_SetConfig+0x130>
 8003a96:	a201      	add	r2, pc, #4	; (adr r2, 8003a9c <USART_SetConfig+0xe4>)
 8003a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9c:	08003ad1 	.word	0x08003ad1
 8003aa0:	08003ae9 	.word	0x08003ae9
 8003aa4:	08003ae9 	.word	0x08003ae9
 8003aa8:	08003ae9 	.word	0x08003ae9
 8003aac:	08003add 	.word	0x08003add
 8003ab0:	08003ae9 	.word	0x08003ae9
 8003ab4:	08003ae9 	.word	0x08003ae9
 8003ab8:	08003ae9 	.word	0x08003ae9
 8003abc:	08003ad7 	.word	0x08003ad7
 8003ac0:	08003ae9 	.word	0x08003ae9
 8003ac4:	08003ae9 	.word	0x08003ae9
 8003ac8:	08003ae9 	.word	0x08003ae9
 8003acc:	08003ae3 	.word	0x08003ae3
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	77fb      	strb	r3, [r7, #31]
 8003ad4:	e033      	b.n	8003b3e <USART_SetConfig+0x186>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	77fb      	strb	r3, [r7, #31]
 8003ada:	e030      	b.n	8003b3e <USART_SetConfig+0x186>
 8003adc:	2304      	movs	r3, #4
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	e02d      	b.n	8003b3e <USART_SetConfig+0x186>
 8003ae2:	2308      	movs	r3, #8
 8003ae4:	77fb      	strb	r3, [r7, #31]
 8003ae6:	e02a      	b.n	8003b3e <USART_SetConfig+0x186>
 8003ae8:	2310      	movs	r3, #16
 8003aea:	77fb      	strb	r3, [r7, #31]
 8003aec:	e027      	b.n	8003b3e <USART_SetConfig+0x186>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a5b      	ldr	r2, [pc, #364]	; (8003c60 <USART_SetConfig+0x2a8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d120      	bne.n	8003b3a <USART_SetConfig+0x182>
 8003af8:	4b57      	ldr	r3, [pc, #348]	; (8003c58 <USART_SetConfig+0x2a0>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b02:	2b30      	cmp	r3, #48	; 0x30
 8003b04:	d013      	beq.n	8003b2e <USART_SetConfig+0x176>
 8003b06:	2b30      	cmp	r3, #48	; 0x30
 8003b08:	d814      	bhi.n	8003b34 <USART_SetConfig+0x17c>
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	d009      	beq.n	8003b22 <USART_SetConfig+0x16a>
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	d810      	bhi.n	8003b34 <USART_SetConfig+0x17c>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <USART_SetConfig+0x164>
 8003b16:	2b10      	cmp	r3, #16
 8003b18:	d006      	beq.n	8003b28 <USART_SetConfig+0x170>
 8003b1a:	e00b      	b.n	8003b34 <USART_SetConfig+0x17c>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	77fb      	strb	r3, [r7, #31]
 8003b20:	e00d      	b.n	8003b3e <USART_SetConfig+0x186>
 8003b22:	2302      	movs	r3, #2
 8003b24:	77fb      	strb	r3, [r7, #31]
 8003b26:	e00a      	b.n	8003b3e <USART_SetConfig+0x186>
 8003b28:	2304      	movs	r3, #4
 8003b2a:	77fb      	strb	r3, [r7, #31]
 8003b2c:	e007      	b.n	8003b3e <USART_SetConfig+0x186>
 8003b2e:	2308      	movs	r3, #8
 8003b30:	77fb      	strb	r3, [r7, #31]
 8003b32:	e004      	b.n	8003b3e <USART_SetConfig+0x186>
 8003b34:	2310      	movs	r3, #16
 8003b36:	77fb      	strb	r3, [r7, #31]
 8003b38:	e001      	b.n	8003b3e <USART_SetConfig+0x186>
 8003b3a:	2310      	movs	r3, #16
 8003b3c:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8003b3e:	7ffb      	ldrb	r3, [r7, #31]
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d85a      	bhi.n	8003bfa <USART_SetConfig+0x242>
 8003b44:	a201      	add	r2, pc, #4	; (adr r2, 8003b4c <USART_SetConfig+0x194>)
 8003b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4a:	bf00      	nop
 8003b4c:	08003b71 	.word	0x08003b71
 8003b50:	08003b8f 	.word	0x08003b8f
 8003b54:	08003bad 	.word	0x08003bad
 8003b58:	08003bfb 	.word	0x08003bfb
 8003b5c:	08003bc7 	.word	0x08003bc7
 8003b60:	08003bfb 	.word	0x08003bfb
 8003b64:	08003bfb 	.word	0x08003bfb
 8003b68:	08003bfb 	.word	0x08003bfb
 8003b6c:	08003be5 	.word	0x08003be5
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b70:	f7fe ffd6 	bl	8002b20 <HAL_RCC_GetPCLK1Freq>
 8003b74:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	005a      	lsls	r2, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	085b      	lsrs	r3, r3, #1
 8003b80:	441a      	add	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8003b8c:	e038      	b.n	8003c00 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b8e:	f7fe ffdd 	bl	8002b4c <HAL_RCC_GetPCLK2Freq>
 8003b92:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	005a      	lsls	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	441a      	add	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8003baa:	e029      	b.n	8003c00 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	085b      	lsrs	r3, r3, #1
 8003bb2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003bb6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6852      	ldr	r2, [r2, #4]
 8003bbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8003bc4:	e01c      	b.n	8003c00 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8003bc6:	f7fe ff13 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8003bca:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	005a      	lsls	r2, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	085b      	lsrs	r3, r3, #1
 8003bd6:	441a      	add	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8003be2:	e00d      	b.n	8003c00 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8003bf8:	e002      	b.n	8003c00 <USART_SetConfig+0x248>
    default:
      ret = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	77bb      	strb	r3, [r7, #30]
      break;
 8003bfe:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2b0f      	cmp	r3, #15
 8003c04:	d916      	bls.n	8003c34 <USART_SetConfig+0x27c>
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c0c:	d212      	bcs.n	8003c34 <USART_SetConfig+0x27c>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	f023 030f 	bic.w	r3, r3, #15
 8003c16:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	085b      	lsrs	r3, r3, #1
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	89fb      	ldrh	r3, [r7, #14]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	89fa      	ldrh	r2, [r7, #14]
 8003c30:	60da      	str	r2, [r3, #12]
 8003c32:	e001      	b.n	8003c38 <USART_SetConfig+0x280>
  }
  else
  {
    ret = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8003c44:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3720      	adds	r7, #32
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	efff69f3 	.word	0xefff69f3
 8003c54:	40013800 	.word	0x40013800
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40004400 	.word	0x40004400
 8003c60:	40004800 	.word	0x40004800

08003c64 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af02      	add	r7, sp, #8
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003c72:	f7fd f803 	bl	8000c7c <HAL_GetTick>
 8003c76:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d10e      	bne.n	8003ca4 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8003c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff fe58 	bl	800394a <USART_WaitOnFlagUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e01e      	b.n	8003ce2 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d10e      	bne.n	8003cd0 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8003cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff fe42 	bl	800394a <USART_WaitOnFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e008      	b.n	8003ce2 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <__errno>:
 8003cec:	4b01      	ldr	r3, [pc, #4]	; (8003cf4 <__errno+0x8>)
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	2000000c 	.word	0x2000000c

08003cf8 <__libc_init_array>:
 8003cf8:	b570      	push	{r4, r5, r6, lr}
 8003cfa:	4d0d      	ldr	r5, [pc, #52]	; (8003d30 <__libc_init_array+0x38>)
 8003cfc:	4c0d      	ldr	r4, [pc, #52]	; (8003d34 <__libc_init_array+0x3c>)
 8003cfe:	1b64      	subs	r4, r4, r5
 8003d00:	10a4      	asrs	r4, r4, #2
 8003d02:	2600      	movs	r6, #0
 8003d04:	42a6      	cmp	r6, r4
 8003d06:	d109      	bne.n	8003d1c <__libc_init_array+0x24>
 8003d08:	4d0b      	ldr	r5, [pc, #44]	; (8003d38 <__libc_init_array+0x40>)
 8003d0a:	4c0c      	ldr	r4, [pc, #48]	; (8003d3c <__libc_init_array+0x44>)
 8003d0c:	f000 ffae 	bl	8004c6c <_init>
 8003d10:	1b64      	subs	r4, r4, r5
 8003d12:	10a4      	asrs	r4, r4, #2
 8003d14:	2600      	movs	r6, #0
 8003d16:	42a6      	cmp	r6, r4
 8003d18:	d105      	bne.n	8003d26 <__libc_init_array+0x2e>
 8003d1a:	bd70      	pop	{r4, r5, r6, pc}
 8003d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d20:	4798      	blx	r3
 8003d22:	3601      	adds	r6, #1
 8003d24:	e7ee      	b.n	8003d04 <__libc_init_array+0xc>
 8003d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d2a:	4798      	blx	r3
 8003d2c:	3601      	adds	r6, #1
 8003d2e:	e7f2      	b.n	8003d16 <__libc_init_array+0x1e>
 8003d30:	08004d6c 	.word	0x08004d6c
 8003d34:	08004d6c 	.word	0x08004d6c
 8003d38:	08004d6c 	.word	0x08004d6c
 8003d3c:	08004d70 	.word	0x08004d70

08003d40 <memset>:
 8003d40:	4402      	add	r2, r0
 8003d42:	4603      	mov	r3, r0
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d100      	bne.n	8003d4a <memset+0xa>
 8003d48:	4770      	bx	lr
 8003d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d4e:	e7f9      	b.n	8003d44 <memset+0x4>

08003d50 <iprintf>:
 8003d50:	b40f      	push	{r0, r1, r2, r3}
 8003d52:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <iprintf+0x2c>)
 8003d54:	b513      	push	{r0, r1, r4, lr}
 8003d56:	681c      	ldr	r4, [r3, #0]
 8003d58:	b124      	cbz	r4, 8003d64 <iprintf+0x14>
 8003d5a:	69a3      	ldr	r3, [r4, #24]
 8003d5c:	b913      	cbnz	r3, 8003d64 <iprintf+0x14>
 8003d5e:	4620      	mov	r0, r4
 8003d60:	f000 f866 	bl	8003e30 <__sinit>
 8003d64:	ab05      	add	r3, sp, #20
 8003d66:	9a04      	ldr	r2, [sp, #16]
 8003d68:	68a1      	ldr	r1, [r4, #8]
 8003d6a:	9301      	str	r3, [sp, #4]
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	f000 f9bd 	bl	80040ec <_vfiprintf_r>
 8003d72:	b002      	add	sp, #8
 8003d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d78:	b004      	add	sp, #16
 8003d7a:	4770      	bx	lr
 8003d7c:	2000000c 	.word	0x2000000c

08003d80 <std>:
 8003d80:	2300      	movs	r3, #0
 8003d82:	b510      	push	{r4, lr}
 8003d84:	4604      	mov	r4, r0
 8003d86:	e9c0 3300 	strd	r3, r3, [r0]
 8003d8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d8e:	6083      	str	r3, [r0, #8]
 8003d90:	8181      	strh	r1, [r0, #12]
 8003d92:	6643      	str	r3, [r0, #100]	; 0x64
 8003d94:	81c2      	strh	r2, [r0, #14]
 8003d96:	6183      	str	r3, [r0, #24]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	2208      	movs	r2, #8
 8003d9c:	305c      	adds	r0, #92	; 0x5c
 8003d9e:	f7ff ffcf 	bl	8003d40 <memset>
 8003da2:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <std+0x38>)
 8003da4:	6263      	str	r3, [r4, #36]	; 0x24
 8003da6:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <std+0x3c>)
 8003da8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <std+0x40>)
 8003dac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <std+0x44>)
 8003db0:	6224      	str	r4, [r4, #32]
 8003db2:	6323      	str	r3, [r4, #48]	; 0x30
 8003db4:	bd10      	pop	{r4, pc}
 8003db6:	bf00      	nop
 8003db8:	08004695 	.word	0x08004695
 8003dbc:	080046b7 	.word	0x080046b7
 8003dc0:	080046ef 	.word	0x080046ef
 8003dc4:	08004713 	.word	0x08004713

08003dc8 <_cleanup_r>:
 8003dc8:	4901      	ldr	r1, [pc, #4]	; (8003dd0 <_cleanup_r+0x8>)
 8003dca:	f000 b8af 	b.w	8003f2c <_fwalk_reent>
 8003dce:	bf00      	nop
 8003dd0:	080049ed 	.word	0x080049ed

08003dd4 <__sfmoreglue>:
 8003dd4:	b570      	push	{r4, r5, r6, lr}
 8003dd6:	2268      	movs	r2, #104	; 0x68
 8003dd8:	1e4d      	subs	r5, r1, #1
 8003dda:	4355      	muls	r5, r2
 8003ddc:	460e      	mov	r6, r1
 8003dde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003de2:	f000 f8e5 	bl	8003fb0 <_malloc_r>
 8003de6:	4604      	mov	r4, r0
 8003de8:	b140      	cbz	r0, 8003dfc <__sfmoreglue+0x28>
 8003dea:	2100      	movs	r1, #0
 8003dec:	e9c0 1600 	strd	r1, r6, [r0]
 8003df0:	300c      	adds	r0, #12
 8003df2:	60a0      	str	r0, [r4, #8]
 8003df4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003df8:	f7ff ffa2 	bl	8003d40 <memset>
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	bd70      	pop	{r4, r5, r6, pc}

08003e00 <__sfp_lock_acquire>:
 8003e00:	4801      	ldr	r0, [pc, #4]	; (8003e08 <__sfp_lock_acquire+0x8>)
 8003e02:	f000 b8b3 	b.w	8003f6c <__retarget_lock_acquire_recursive>
 8003e06:	bf00      	nop
 8003e08:	200021ed 	.word	0x200021ed

08003e0c <__sfp_lock_release>:
 8003e0c:	4801      	ldr	r0, [pc, #4]	; (8003e14 <__sfp_lock_release+0x8>)
 8003e0e:	f000 b8ae 	b.w	8003f6e <__retarget_lock_release_recursive>
 8003e12:	bf00      	nop
 8003e14:	200021ed 	.word	0x200021ed

08003e18 <__sinit_lock_acquire>:
 8003e18:	4801      	ldr	r0, [pc, #4]	; (8003e20 <__sinit_lock_acquire+0x8>)
 8003e1a:	f000 b8a7 	b.w	8003f6c <__retarget_lock_acquire_recursive>
 8003e1e:	bf00      	nop
 8003e20:	200021ee 	.word	0x200021ee

08003e24 <__sinit_lock_release>:
 8003e24:	4801      	ldr	r0, [pc, #4]	; (8003e2c <__sinit_lock_release+0x8>)
 8003e26:	f000 b8a2 	b.w	8003f6e <__retarget_lock_release_recursive>
 8003e2a:	bf00      	nop
 8003e2c:	200021ee 	.word	0x200021ee

08003e30 <__sinit>:
 8003e30:	b510      	push	{r4, lr}
 8003e32:	4604      	mov	r4, r0
 8003e34:	f7ff fff0 	bl	8003e18 <__sinit_lock_acquire>
 8003e38:	69a3      	ldr	r3, [r4, #24]
 8003e3a:	b11b      	cbz	r3, 8003e44 <__sinit+0x14>
 8003e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e40:	f7ff bff0 	b.w	8003e24 <__sinit_lock_release>
 8003e44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003e48:	6523      	str	r3, [r4, #80]	; 0x50
 8003e4a:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <__sinit+0x68>)
 8003e4c:	4a13      	ldr	r2, [pc, #76]	; (8003e9c <__sinit+0x6c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	62a2      	str	r2, [r4, #40]	; 0x28
 8003e52:	42a3      	cmp	r3, r4
 8003e54:	bf04      	itt	eq
 8003e56:	2301      	moveq	r3, #1
 8003e58:	61a3      	streq	r3, [r4, #24]
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	f000 f820 	bl	8003ea0 <__sfp>
 8003e60:	6060      	str	r0, [r4, #4]
 8003e62:	4620      	mov	r0, r4
 8003e64:	f000 f81c 	bl	8003ea0 <__sfp>
 8003e68:	60a0      	str	r0, [r4, #8]
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	f000 f818 	bl	8003ea0 <__sfp>
 8003e70:	2200      	movs	r2, #0
 8003e72:	60e0      	str	r0, [r4, #12]
 8003e74:	2104      	movs	r1, #4
 8003e76:	6860      	ldr	r0, [r4, #4]
 8003e78:	f7ff ff82 	bl	8003d80 <std>
 8003e7c:	68a0      	ldr	r0, [r4, #8]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	2109      	movs	r1, #9
 8003e82:	f7ff ff7d 	bl	8003d80 <std>
 8003e86:	68e0      	ldr	r0, [r4, #12]
 8003e88:	2202      	movs	r2, #2
 8003e8a:	2112      	movs	r1, #18
 8003e8c:	f7ff ff78 	bl	8003d80 <std>
 8003e90:	2301      	movs	r3, #1
 8003e92:	61a3      	str	r3, [r4, #24]
 8003e94:	e7d2      	b.n	8003e3c <__sinit+0xc>
 8003e96:	bf00      	nop
 8003e98:	08004cd4 	.word	0x08004cd4
 8003e9c:	08003dc9 	.word	0x08003dc9

08003ea0 <__sfp>:
 8003ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea2:	4607      	mov	r7, r0
 8003ea4:	f7ff ffac 	bl	8003e00 <__sfp_lock_acquire>
 8003ea8:	4b1e      	ldr	r3, [pc, #120]	; (8003f24 <__sfp+0x84>)
 8003eaa:	681e      	ldr	r6, [r3, #0]
 8003eac:	69b3      	ldr	r3, [r6, #24]
 8003eae:	b913      	cbnz	r3, 8003eb6 <__sfp+0x16>
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	f7ff ffbd 	bl	8003e30 <__sinit>
 8003eb6:	3648      	adds	r6, #72	; 0x48
 8003eb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	d503      	bpl.n	8003ec8 <__sfp+0x28>
 8003ec0:	6833      	ldr	r3, [r6, #0]
 8003ec2:	b30b      	cbz	r3, 8003f08 <__sfp+0x68>
 8003ec4:	6836      	ldr	r6, [r6, #0]
 8003ec6:	e7f7      	b.n	8003eb8 <__sfp+0x18>
 8003ec8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ecc:	b9d5      	cbnz	r5, 8003f04 <__sfp+0x64>
 8003ece:	4b16      	ldr	r3, [pc, #88]	; (8003f28 <__sfp+0x88>)
 8003ed0:	60e3      	str	r3, [r4, #12]
 8003ed2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ed6:	6665      	str	r5, [r4, #100]	; 0x64
 8003ed8:	f000 f847 	bl	8003f6a <__retarget_lock_init_recursive>
 8003edc:	f7ff ff96 	bl	8003e0c <__sfp_lock_release>
 8003ee0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003ee4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ee8:	6025      	str	r5, [r4, #0]
 8003eea:	61a5      	str	r5, [r4, #24]
 8003eec:	2208      	movs	r2, #8
 8003eee:	4629      	mov	r1, r5
 8003ef0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ef4:	f7ff ff24 	bl	8003d40 <memset>
 8003ef8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003efc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003f00:	4620      	mov	r0, r4
 8003f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f04:	3468      	adds	r4, #104	; 0x68
 8003f06:	e7d9      	b.n	8003ebc <__sfp+0x1c>
 8003f08:	2104      	movs	r1, #4
 8003f0a:	4638      	mov	r0, r7
 8003f0c:	f7ff ff62 	bl	8003dd4 <__sfmoreglue>
 8003f10:	4604      	mov	r4, r0
 8003f12:	6030      	str	r0, [r6, #0]
 8003f14:	2800      	cmp	r0, #0
 8003f16:	d1d5      	bne.n	8003ec4 <__sfp+0x24>
 8003f18:	f7ff ff78 	bl	8003e0c <__sfp_lock_release>
 8003f1c:	230c      	movs	r3, #12
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	e7ee      	b.n	8003f00 <__sfp+0x60>
 8003f22:	bf00      	nop
 8003f24:	08004cd4 	.word	0x08004cd4
 8003f28:	ffff0001 	.word	0xffff0001

08003f2c <_fwalk_reent>:
 8003f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f30:	4606      	mov	r6, r0
 8003f32:	4688      	mov	r8, r1
 8003f34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f38:	2700      	movs	r7, #0
 8003f3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f3e:	f1b9 0901 	subs.w	r9, r9, #1
 8003f42:	d505      	bpl.n	8003f50 <_fwalk_reent+0x24>
 8003f44:	6824      	ldr	r4, [r4, #0]
 8003f46:	2c00      	cmp	r4, #0
 8003f48:	d1f7      	bne.n	8003f3a <_fwalk_reent+0xe>
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f50:	89ab      	ldrh	r3, [r5, #12]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d907      	bls.n	8003f66 <_fwalk_reent+0x3a>
 8003f56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	d003      	beq.n	8003f66 <_fwalk_reent+0x3a>
 8003f5e:	4629      	mov	r1, r5
 8003f60:	4630      	mov	r0, r6
 8003f62:	47c0      	blx	r8
 8003f64:	4307      	orrs	r7, r0
 8003f66:	3568      	adds	r5, #104	; 0x68
 8003f68:	e7e9      	b.n	8003f3e <_fwalk_reent+0x12>

08003f6a <__retarget_lock_init_recursive>:
 8003f6a:	4770      	bx	lr

08003f6c <__retarget_lock_acquire_recursive>:
 8003f6c:	4770      	bx	lr

08003f6e <__retarget_lock_release_recursive>:
 8003f6e:	4770      	bx	lr

08003f70 <sbrk_aligned>:
 8003f70:	b570      	push	{r4, r5, r6, lr}
 8003f72:	4e0e      	ldr	r6, [pc, #56]	; (8003fac <sbrk_aligned+0x3c>)
 8003f74:	460c      	mov	r4, r1
 8003f76:	6831      	ldr	r1, [r6, #0]
 8003f78:	4605      	mov	r5, r0
 8003f7a:	b911      	cbnz	r1, 8003f82 <sbrk_aligned+0x12>
 8003f7c:	f000 fb7a 	bl	8004674 <_sbrk_r>
 8003f80:	6030      	str	r0, [r6, #0]
 8003f82:	4621      	mov	r1, r4
 8003f84:	4628      	mov	r0, r5
 8003f86:	f000 fb75 	bl	8004674 <_sbrk_r>
 8003f8a:	1c43      	adds	r3, r0, #1
 8003f8c:	d00a      	beq.n	8003fa4 <sbrk_aligned+0x34>
 8003f8e:	1cc4      	adds	r4, r0, #3
 8003f90:	f024 0403 	bic.w	r4, r4, #3
 8003f94:	42a0      	cmp	r0, r4
 8003f96:	d007      	beq.n	8003fa8 <sbrk_aligned+0x38>
 8003f98:	1a21      	subs	r1, r4, r0
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f000 fb6a 	bl	8004674 <_sbrk_r>
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	d101      	bne.n	8003fa8 <sbrk_aligned+0x38>
 8003fa4:	f04f 34ff 	mov.w	r4, #4294967295
 8003fa8:	4620      	mov	r0, r4
 8003faa:	bd70      	pop	{r4, r5, r6, pc}
 8003fac:	200021f4 	.word	0x200021f4

08003fb0 <_malloc_r>:
 8003fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fb4:	1ccd      	adds	r5, r1, #3
 8003fb6:	f025 0503 	bic.w	r5, r5, #3
 8003fba:	3508      	adds	r5, #8
 8003fbc:	2d0c      	cmp	r5, #12
 8003fbe:	bf38      	it	cc
 8003fc0:	250c      	movcc	r5, #12
 8003fc2:	2d00      	cmp	r5, #0
 8003fc4:	4607      	mov	r7, r0
 8003fc6:	db01      	blt.n	8003fcc <_malloc_r+0x1c>
 8003fc8:	42a9      	cmp	r1, r5
 8003fca:	d905      	bls.n	8003fd8 <_malloc_r+0x28>
 8003fcc:	230c      	movs	r3, #12
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	2600      	movs	r6, #0
 8003fd2:	4630      	mov	r0, r6
 8003fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fd8:	4e2e      	ldr	r6, [pc, #184]	; (8004094 <_malloc_r+0xe4>)
 8003fda:	f000 fdbb 	bl	8004b54 <__malloc_lock>
 8003fde:	6833      	ldr	r3, [r6, #0]
 8003fe0:	461c      	mov	r4, r3
 8003fe2:	bb34      	cbnz	r4, 8004032 <_malloc_r+0x82>
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	4638      	mov	r0, r7
 8003fe8:	f7ff ffc2 	bl	8003f70 <sbrk_aligned>
 8003fec:	1c43      	adds	r3, r0, #1
 8003fee:	4604      	mov	r4, r0
 8003ff0:	d14d      	bne.n	800408e <_malloc_r+0xde>
 8003ff2:	6834      	ldr	r4, [r6, #0]
 8003ff4:	4626      	mov	r6, r4
 8003ff6:	2e00      	cmp	r6, #0
 8003ff8:	d140      	bne.n	800407c <_malloc_r+0xcc>
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	4631      	mov	r1, r6
 8003ffe:	4638      	mov	r0, r7
 8004000:	eb04 0803 	add.w	r8, r4, r3
 8004004:	f000 fb36 	bl	8004674 <_sbrk_r>
 8004008:	4580      	cmp	r8, r0
 800400a:	d13a      	bne.n	8004082 <_malloc_r+0xd2>
 800400c:	6821      	ldr	r1, [r4, #0]
 800400e:	3503      	adds	r5, #3
 8004010:	1a6d      	subs	r5, r5, r1
 8004012:	f025 0503 	bic.w	r5, r5, #3
 8004016:	3508      	adds	r5, #8
 8004018:	2d0c      	cmp	r5, #12
 800401a:	bf38      	it	cc
 800401c:	250c      	movcc	r5, #12
 800401e:	4629      	mov	r1, r5
 8004020:	4638      	mov	r0, r7
 8004022:	f7ff ffa5 	bl	8003f70 <sbrk_aligned>
 8004026:	3001      	adds	r0, #1
 8004028:	d02b      	beq.n	8004082 <_malloc_r+0xd2>
 800402a:	6823      	ldr	r3, [r4, #0]
 800402c:	442b      	add	r3, r5
 800402e:	6023      	str	r3, [r4, #0]
 8004030:	e00e      	b.n	8004050 <_malloc_r+0xa0>
 8004032:	6822      	ldr	r2, [r4, #0]
 8004034:	1b52      	subs	r2, r2, r5
 8004036:	d41e      	bmi.n	8004076 <_malloc_r+0xc6>
 8004038:	2a0b      	cmp	r2, #11
 800403a:	d916      	bls.n	800406a <_malloc_r+0xba>
 800403c:	1961      	adds	r1, r4, r5
 800403e:	42a3      	cmp	r3, r4
 8004040:	6025      	str	r5, [r4, #0]
 8004042:	bf18      	it	ne
 8004044:	6059      	strne	r1, [r3, #4]
 8004046:	6863      	ldr	r3, [r4, #4]
 8004048:	bf08      	it	eq
 800404a:	6031      	streq	r1, [r6, #0]
 800404c:	5162      	str	r2, [r4, r5]
 800404e:	604b      	str	r3, [r1, #4]
 8004050:	4638      	mov	r0, r7
 8004052:	f104 060b 	add.w	r6, r4, #11
 8004056:	f000 fd83 	bl	8004b60 <__malloc_unlock>
 800405a:	f026 0607 	bic.w	r6, r6, #7
 800405e:	1d23      	adds	r3, r4, #4
 8004060:	1af2      	subs	r2, r6, r3
 8004062:	d0b6      	beq.n	8003fd2 <_malloc_r+0x22>
 8004064:	1b9b      	subs	r3, r3, r6
 8004066:	50a3      	str	r3, [r4, r2]
 8004068:	e7b3      	b.n	8003fd2 <_malloc_r+0x22>
 800406a:	6862      	ldr	r2, [r4, #4]
 800406c:	42a3      	cmp	r3, r4
 800406e:	bf0c      	ite	eq
 8004070:	6032      	streq	r2, [r6, #0]
 8004072:	605a      	strne	r2, [r3, #4]
 8004074:	e7ec      	b.n	8004050 <_malloc_r+0xa0>
 8004076:	4623      	mov	r3, r4
 8004078:	6864      	ldr	r4, [r4, #4]
 800407a:	e7b2      	b.n	8003fe2 <_malloc_r+0x32>
 800407c:	4634      	mov	r4, r6
 800407e:	6876      	ldr	r6, [r6, #4]
 8004080:	e7b9      	b.n	8003ff6 <_malloc_r+0x46>
 8004082:	230c      	movs	r3, #12
 8004084:	603b      	str	r3, [r7, #0]
 8004086:	4638      	mov	r0, r7
 8004088:	f000 fd6a 	bl	8004b60 <__malloc_unlock>
 800408c:	e7a1      	b.n	8003fd2 <_malloc_r+0x22>
 800408e:	6025      	str	r5, [r4, #0]
 8004090:	e7de      	b.n	8004050 <_malloc_r+0xa0>
 8004092:	bf00      	nop
 8004094:	200021f0 	.word	0x200021f0

08004098 <__sfputc_r>:
 8004098:	6893      	ldr	r3, [r2, #8]
 800409a:	3b01      	subs	r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	b410      	push	{r4}
 80040a0:	6093      	str	r3, [r2, #8]
 80040a2:	da08      	bge.n	80040b6 <__sfputc_r+0x1e>
 80040a4:	6994      	ldr	r4, [r2, #24]
 80040a6:	42a3      	cmp	r3, r4
 80040a8:	db01      	blt.n	80040ae <__sfputc_r+0x16>
 80040aa:	290a      	cmp	r1, #10
 80040ac:	d103      	bne.n	80040b6 <__sfputc_r+0x1e>
 80040ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040b2:	f000 bb33 	b.w	800471c <__swbuf_r>
 80040b6:	6813      	ldr	r3, [r2, #0]
 80040b8:	1c58      	adds	r0, r3, #1
 80040ba:	6010      	str	r0, [r2, #0]
 80040bc:	7019      	strb	r1, [r3, #0]
 80040be:	4608      	mov	r0, r1
 80040c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <__sfputs_r>:
 80040c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c8:	4606      	mov	r6, r0
 80040ca:	460f      	mov	r7, r1
 80040cc:	4614      	mov	r4, r2
 80040ce:	18d5      	adds	r5, r2, r3
 80040d0:	42ac      	cmp	r4, r5
 80040d2:	d101      	bne.n	80040d8 <__sfputs_r+0x12>
 80040d4:	2000      	movs	r0, #0
 80040d6:	e007      	b.n	80040e8 <__sfputs_r+0x22>
 80040d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040dc:	463a      	mov	r2, r7
 80040de:	4630      	mov	r0, r6
 80040e0:	f7ff ffda 	bl	8004098 <__sfputc_r>
 80040e4:	1c43      	adds	r3, r0, #1
 80040e6:	d1f3      	bne.n	80040d0 <__sfputs_r+0xa>
 80040e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080040ec <_vfiprintf_r>:
 80040ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f0:	460d      	mov	r5, r1
 80040f2:	b09d      	sub	sp, #116	; 0x74
 80040f4:	4614      	mov	r4, r2
 80040f6:	4698      	mov	r8, r3
 80040f8:	4606      	mov	r6, r0
 80040fa:	b118      	cbz	r0, 8004104 <_vfiprintf_r+0x18>
 80040fc:	6983      	ldr	r3, [r0, #24]
 80040fe:	b90b      	cbnz	r3, 8004104 <_vfiprintf_r+0x18>
 8004100:	f7ff fe96 	bl	8003e30 <__sinit>
 8004104:	4b89      	ldr	r3, [pc, #548]	; (800432c <_vfiprintf_r+0x240>)
 8004106:	429d      	cmp	r5, r3
 8004108:	d11b      	bne.n	8004142 <_vfiprintf_r+0x56>
 800410a:	6875      	ldr	r5, [r6, #4]
 800410c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800410e:	07d9      	lsls	r1, r3, #31
 8004110:	d405      	bmi.n	800411e <_vfiprintf_r+0x32>
 8004112:	89ab      	ldrh	r3, [r5, #12]
 8004114:	059a      	lsls	r2, r3, #22
 8004116:	d402      	bmi.n	800411e <_vfiprintf_r+0x32>
 8004118:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800411a:	f7ff ff27 	bl	8003f6c <__retarget_lock_acquire_recursive>
 800411e:	89ab      	ldrh	r3, [r5, #12]
 8004120:	071b      	lsls	r3, r3, #28
 8004122:	d501      	bpl.n	8004128 <_vfiprintf_r+0x3c>
 8004124:	692b      	ldr	r3, [r5, #16]
 8004126:	b9eb      	cbnz	r3, 8004164 <_vfiprintf_r+0x78>
 8004128:	4629      	mov	r1, r5
 800412a:	4630      	mov	r0, r6
 800412c:	f000 fb5a 	bl	80047e4 <__swsetup_r>
 8004130:	b1c0      	cbz	r0, 8004164 <_vfiprintf_r+0x78>
 8004132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004134:	07dc      	lsls	r4, r3, #31
 8004136:	d50e      	bpl.n	8004156 <_vfiprintf_r+0x6a>
 8004138:	f04f 30ff 	mov.w	r0, #4294967295
 800413c:	b01d      	add	sp, #116	; 0x74
 800413e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004142:	4b7b      	ldr	r3, [pc, #492]	; (8004330 <_vfiprintf_r+0x244>)
 8004144:	429d      	cmp	r5, r3
 8004146:	d101      	bne.n	800414c <_vfiprintf_r+0x60>
 8004148:	68b5      	ldr	r5, [r6, #8]
 800414a:	e7df      	b.n	800410c <_vfiprintf_r+0x20>
 800414c:	4b79      	ldr	r3, [pc, #484]	; (8004334 <_vfiprintf_r+0x248>)
 800414e:	429d      	cmp	r5, r3
 8004150:	bf08      	it	eq
 8004152:	68f5      	ldreq	r5, [r6, #12]
 8004154:	e7da      	b.n	800410c <_vfiprintf_r+0x20>
 8004156:	89ab      	ldrh	r3, [r5, #12]
 8004158:	0598      	lsls	r0, r3, #22
 800415a:	d4ed      	bmi.n	8004138 <_vfiprintf_r+0x4c>
 800415c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800415e:	f7ff ff06 	bl	8003f6e <__retarget_lock_release_recursive>
 8004162:	e7e9      	b.n	8004138 <_vfiprintf_r+0x4c>
 8004164:	2300      	movs	r3, #0
 8004166:	9309      	str	r3, [sp, #36]	; 0x24
 8004168:	2320      	movs	r3, #32
 800416a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800416e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004172:	2330      	movs	r3, #48	; 0x30
 8004174:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004338 <_vfiprintf_r+0x24c>
 8004178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800417c:	f04f 0901 	mov.w	r9, #1
 8004180:	4623      	mov	r3, r4
 8004182:	469a      	mov	sl, r3
 8004184:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004188:	b10a      	cbz	r2, 800418e <_vfiprintf_r+0xa2>
 800418a:	2a25      	cmp	r2, #37	; 0x25
 800418c:	d1f9      	bne.n	8004182 <_vfiprintf_r+0x96>
 800418e:	ebba 0b04 	subs.w	fp, sl, r4
 8004192:	d00b      	beq.n	80041ac <_vfiprintf_r+0xc0>
 8004194:	465b      	mov	r3, fp
 8004196:	4622      	mov	r2, r4
 8004198:	4629      	mov	r1, r5
 800419a:	4630      	mov	r0, r6
 800419c:	f7ff ff93 	bl	80040c6 <__sfputs_r>
 80041a0:	3001      	adds	r0, #1
 80041a2:	f000 80aa 	beq.w	80042fa <_vfiprintf_r+0x20e>
 80041a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041a8:	445a      	add	r2, fp
 80041aa:	9209      	str	r2, [sp, #36]	; 0x24
 80041ac:	f89a 3000 	ldrb.w	r3, [sl]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 80a2 	beq.w	80042fa <_vfiprintf_r+0x20e>
 80041b6:	2300      	movs	r3, #0
 80041b8:	f04f 32ff 	mov.w	r2, #4294967295
 80041bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041c0:	f10a 0a01 	add.w	sl, sl, #1
 80041c4:	9304      	str	r3, [sp, #16]
 80041c6:	9307      	str	r3, [sp, #28]
 80041c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041cc:	931a      	str	r3, [sp, #104]	; 0x68
 80041ce:	4654      	mov	r4, sl
 80041d0:	2205      	movs	r2, #5
 80041d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041d6:	4858      	ldr	r0, [pc, #352]	; (8004338 <_vfiprintf_r+0x24c>)
 80041d8:	f7fb fffa 	bl	80001d0 <memchr>
 80041dc:	9a04      	ldr	r2, [sp, #16]
 80041de:	b9d8      	cbnz	r0, 8004218 <_vfiprintf_r+0x12c>
 80041e0:	06d1      	lsls	r1, r2, #27
 80041e2:	bf44      	itt	mi
 80041e4:	2320      	movmi	r3, #32
 80041e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041ea:	0713      	lsls	r3, r2, #28
 80041ec:	bf44      	itt	mi
 80041ee:	232b      	movmi	r3, #43	; 0x2b
 80041f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041f4:	f89a 3000 	ldrb.w	r3, [sl]
 80041f8:	2b2a      	cmp	r3, #42	; 0x2a
 80041fa:	d015      	beq.n	8004228 <_vfiprintf_r+0x13c>
 80041fc:	9a07      	ldr	r2, [sp, #28]
 80041fe:	4654      	mov	r4, sl
 8004200:	2000      	movs	r0, #0
 8004202:	f04f 0c0a 	mov.w	ip, #10
 8004206:	4621      	mov	r1, r4
 8004208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800420c:	3b30      	subs	r3, #48	; 0x30
 800420e:	2b09      	cmp	r3, #9
 8004210:	d94e      	bls.n	80042b0 <_vfiprintf_r+0x1c4>
 8004212:	b1b0      	cbz	r0, 8004242 <_vfiprintf_r+0x156>
 8004214:	9207      	str	r2, [sp, #28]
 8004216:	e014      	b.n	8004242 <_vfiprintf_r+0x156>
 8004218:	eba0 0308 	sub.w	r3, r0, r8
 800421c:	fa09 f303 	lsl.w	r3, r9, r3
 8004220:	4313      	orrs	r3, r2
 8004222:	9304      	str	r3, [sp, #16]
 8004224:	46a2      	mov	sl, r4
 8004226:	e7d2      	b.n	80041ce <_vfiprintf_r+0xe2>
 8004228:	9b03      	ldr	r3, [sp, #12]
 800422a:	1d19      	adds	r1, r3, #4
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	9103      	str	r1, [sp, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	bfbb      	ittet	lt
 8004234:	425b      	neglt	r3, r3
 8004236:	f042 0202 	orrlt.w	r2, r2, #2
 800423a:	9307      	strge	r3, [sp, #28]
 800423c:	9307      	strlt	r3, [sp, #28]
 800423e:	bfb8      	it	lt
 8004240:	9204      	strlt	r2, [sp, #16]
 8004242:	7823      	ldrb	r3, [r4, #0]
 8004244:	2b2e      	cmp	r3, #46	; 0x2e
 8004246:	d10c      	bne.n	8004262 <_vfiprintf_r+0x176>
 8004248:	7863      	ldrb	r3, [r4, #1]
 800424a:	2b2a      	cmp	r3, #42	; 0x2a
 800424c:	d135      	bne.n	80042ba <_vfiprintf_r+0x1ce>
 800424e:	9b03      	ldr	r3, [sp, #12]
 8004250:	1d1a      	adds	r2, r3, #4
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	9203      	str	r2, [sp, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	bfb8      	it	lt
 800425a:	f04f 33ff 	movlt.w	r3, #4294967295
 800425e:	3402      	adds	r4, #2
 8004260:	9305      	str	r3, [sp, #20]
 8004262:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004348 <_vfiprintf_r+0x25c>
 8004266:	7821      	ldrb	r1, [r4, #0]
 8004268:	2203      	movs	r2, #3
 800426a:	4650      	mov	r0, sl
 800426c:	f7fb ffb0 	bl	80001d0 <memchr>
 8004270:	b140      	cbz	r0, 8004284 <_vfiprintf_r+0x198>
 8004272:	2340      	movs	r3, #64	; 0x40
 8004274:	eba0 000a 	sub.w	r0, r0, sl
 8004278:	fa03 f000 	lsl.w	r0, r3, r0
 800427c:	9b04      	ldr	r3, [sp, #16]
 800427e:	4303      	orrs	r3, r0
 8004280:	3401      	adds	r4, #1
 8004282:	9304      	str	r3, [sp, #16]
 8004284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004288:	482c      	ldr	r0, [pc, #176]	; (800433c <_vfiprintf_r+0x250>)
 800428a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800428e:	2206      	movs	r2, #6
 8004290:	f7fb ff9e 	bl	80001d0 <memchr>
 8004294:	2800      	cmp	r0, #0
 8004296:	d03f      	beq.n	8004318 <_vfiprintf_r+0x22c>
 8004298:	4b29      	ldr	r3, [pc, #164]	; (8004340 <_vfiprintf_r+0x254>)
 800429a:	bb1b      	cbnz	r3, 80042e4 <_vfiprintf_r+0x1f8>
 800429c:	9b03      	ldr	r3, [sp, #12]
 800429e:	3307      	adds	r3, #7
 80042a0:	f023 0307 	bic.w	r3, r3, #7
 80042a4:	3308      	adds	r3, #8
 80042a6:	9303      	str	r3, [sp, #12]
 80042a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042aa:	443b      	add	r3, r7
 80042ac:	9309      	str	r3, [sp, #36]	; 0x24
 80042ae:	e767      	b.n	8004180 <_vfiprintf_r+0x94>
 80042b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80042b4:	460c      	mov	r4, r1
 80042b6:	2001      	movs	r0, #1
 80042b8:	e7a5      	b.n	8004206 <_vfiprintf_r+0x11a>
 80042ba:	2300      	movs	r3, #0
 80042bc:	3401      	adds	r4, #1
 80042be:	9305      	str	r3, [sp, #20]
 80042c0:	4619      	mov	r1, r3
 80042c2:	f04f 0c0a 	mov.w	ip, #10
 80042c6:	4620      	mov	r0, r4
 80042c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042cc:	3a30      	subs	r2, #48	; 0x30
 80042ce:	2a09      	cmp	r2, #9
 80042d0:	d903      	bls.n	80042da <_vfiprintf_r+0x1ee>
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0c5      	beq.n	8004262 <_vfiprintf_r+0x176>
 80042d6:	9105      	str	r1, [sp, #20]
 80042d8:	e7c3      	b.n	8004262 <_vfiprintf_r+0x176>
 80042da:	fb0c 2101 	mla	r1, ip, r1, r2
 80042de:	4604      	mov	r4, r0
 80042e0:	2301      	movs	r3, #1
 80042e2:	e7f0      	b.n	80042c6 <_vfiprintf_r+0x1da>
 80042e4:	ab03      	add	r3, sp, #12
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	462a      	mov	r2, r5
 80042ea:	4b16      	ldr	r3, [pc, #88]	; (8004344 <_vfiprintf_r+0x258>)
 80042ec:	a904      	add	r1, sp, #16
 80042ee:	4630      	mov	r0, r6
 80042f0:	f3af 8000 	nop.w
 80042f4:	4607      	mov	r7, r0
 80042f6:	1c78      	adds	r0, r7, #1
 80042f8:	d1d6      	bne.n	80042a8 <_vfiprintf_r+0x1bc>
 80042fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042fc:	07d9      	lsls	r1, r3, #31
 80042fe:	d405      	bmi.n	800430c <_vfiprintf_r+0x220>
 8004300:	89ab      	ldrh	r3, [r5, #12]
 8004302:	059a      	lsls	r2, r3, #22
 8004304:	d402      	bmi.n	800430c <_vfiprintf_r+0x220>
 8004306:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004308:	f7ff fe31 	bl	8003f6e <__retarget_lock_release_recursive>
 800430c:	89ab      	ldrh	r3, [r5, #12]
 800430e:	065b      	lsls	r3, r3, #25
 8004310:	f53f af12 	bmi.w	8004138 <_vfiprintf_r+0x4c>
 8004314:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004316:	e711      	b.n	800413c <_vfiprintf_r+0x50>
 8004318:	ab03      	add	r3, sp, #12
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	462a      	mov	r2, r5
 800431e:	4b09      	ldr	r3, [pc, #36]	; (8004344 <_vfiprintf_r+0x258>)
 8004320:	a904      	add	r1, sp, #16
 8004322:	4630      	mov	r0, r6
 8004324:	f000 f880 	bl	8004428 <_printf_i>
 8004328:	e7e4      	b.n	80042f4 <_vfiprintf_r+0x208>
 800432a:	bf00      	nop
 800432c:	08004cf8 	.word	0x08004cf8
 8004330:	08004d18 	.word	0x08004d18
 8004334:	08004cd8 	.word	0x08004cd8
 8004338:	08004d38 	.word	0x08004d38
 800433c:	08004d42 	.word	0x08004d42
 8004340:	00000000 	.word	0x00000000
 8004344:	080040c7 	.word	0x080040c7
 8004348:	08004d3e 	.word	0x08004d3e

0800434c <_printf_common>:
 800434c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004350:	4616      	mov	r6, r2
 8004352:	4699      	mov	r9, r3
 8004354:	688a      	ldr	r2, [r1, #8]
 8004356:	690b      	ldr	r3, [r1, #16]
 8004358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800435c:	4293      	cmp	r3, r2
 800435e:	bfb8      	it	lt
 8004360:	4613      	movlt	r3, r2
 8004362:	6033      	str	r3, [r6, #0]
 8004364:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004368:	4607      	mov	r7, r0
 800436a:	460c      	mov	r4, r1
 800436c:	b10a      	cbz	r2, 8004372 <_printf_common+0x26>
 800436e:	3301      	adds	r3, #1
 8004370:	6033      	str	r3, [r6, #0]
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	0699      	lsls	r1, r3, #26
 8004376:	bf42      	ittt	mi
 8004378:	6833      	ldrmi	r3, [r6, #0]
 800437a:	3302      	addmi	r3, #2
 800437c:	6033      	strmi	r3, [r6, #0]
 800437e:	6825      	ldr	r5, [r4, #0]
 8004380:	f015 0506 	ands.w	r5, r5, #6
 8004384:	d106      	bne.n	8004394 <_printf_common+0x48>
 8004386:	f104 0a19 	add.w	sl, r4, #25
 800438a:	68e3      	ldr	r3, [r4, #12]
 800438c:	6832      	ldr	r2, [r6, #0]
 800438e:	1a9b      	subs	r3, r3, r2
 8004390:	42ab      	cmp	r3, r5
 8004392:	dc26      	bgt.n	80043e2 <_printf_common+0x96>
 8004394:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004398:	1e13      	subs	r3, r2, #0
 800439a:	6822      	ldr	r2, [r4, #0]
 800439c:	bf18      	it	ne
 800439e:	2301      	movne	r3, #1
 80043a0:	0692      	lsls	r2, r2, #26
 80043a2:	d42b      	bmi.n	80043fc <_printf_common+0xb0>
 80043a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043a8:	4649      	mov	r1, r9
 80043aa:	4638      	mov	r0, r7
 80043ac:	47c0      	blx	r8
 80043ae:	3001      	adds	r0, #1
 80043b0:	d01e      	beq.n	80043f0 <_printf_common+0xa4>
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	68e5      	ldr	r5, [r4, #12]
 80043b6:	6832      	ldr	r2, [r6, #0]
 80043b8:	f003 0306 	and.w	r3, r3, #6
 80043bc:	2b04      	cmp	r3, #4
 80043be:	bf08      	it	eq
 80043c0:	1aad      	subeq	r5, r5, r2
 80043c2:	68a3      	ldr	r3, [r4, #8]
 80043c4:	6922      	ldr	r2, [r4, #16]
 80043c6:	bf0c      	ite	eq
 80043c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043cc:	2500      	movne	r5, #0
 80043ce:	4293      	cmp	r3, r2
 80043d0:	bfc4      	itt	gt
 80043d2:	1a9b      	subgt	r3, r3, r2
 80043d4:	18ed      	addgt	r5, r5, r3
 80043d6:	2600      	movs	r6, #0
 80043d8:	341a      	adds	r4, #26
 80043da:	42b5      	cmp	r5, r6
 80043dc:	d11a      	bne.n	8004414 <_printf_common+0xc8>
 80043de:	2000      	movs	r0, #0
 80043e0:	e008      	b.n	80043f4 <_printf_common+0xa8>
 80043e2:	2301      	movs	r3, #1
 80043e4:	4652      	mov	r2, sl
 80043e6:	4649      	mov	r1, r9
 80043e8:	4638      	mov	r0, r7
 80043ea:	47c0      	blx	r8
 80043ec:	3001      	adds	r0, #1
 80043ee:	d103      	bne.n	80043f8 <_printf_common+0xac>
 80043f0:	f04f 30ff 	mov.w	r0, #4294967295
 80043f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f8:	3501      	adds	r5, #1
 80043fa:	e7c6      	b.n	800438a <_printf_common+0x3e>
 80043fc:	18e1      	adds	r1, r4, r3
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	2030      	movs	r0, #48	; 0x30
 8004402:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004406:	4422      	add	r2, r4
 8004408:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800440c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004410:	3302      	adds	r3, #2
 8004412:	e7c7      	b.n	80043a4 <_printf_common+0x58>
 8004414:	2301      	movs	r3, #1
 8004416:	4622      	mov	r2, r4
 8004418:	4649      	mov	r1, r9
 800441a:	4638      	mov	r0, r7
 800441c:	47c0      	blx	r8
 800441e:	3001      	adds	r0, #1
 8004420:	d0e6      	beq.n	80043f0 <_printf_common+0xa4>
 8004422:	3601      	adds	r6, #1
 8004424:	e7d9      	b.n	80043da <_printf_common+0x8e>
	...

08004428 <_printf_i>:
 8004428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800442c:	7e0f      	ldrb	r7, [r1, #24]
 800442e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004430:	2f78      	cmp	r7, #120	; 0x78
 8004432:	4691      	mov	r9, r2
 8004434:	4680      	mov	r8, r0
 8004436:	460c      	mov	r4, r1
 8004438:	469a      	mov	sl, r3
 800443a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800443e:	d807      	bhi.n	8004450 <_printf_i+0x28>
 8004440:	2f62      	cmp	r7, #98	; 0x62
 8004442:	d80a      	bhi.n	800445a <_printf_i+0x32>
 8004444:	2f00      	cmp	r7, #0
 8004446:	f000 80d8 	beq.w	80045fa <_printf_i+0x1d2>
 800444a:	2f58      	cmp	r7, #88	; 0x58
 800444c:	f000 80a3 	beq.w	8004596 <_printf_i+0x16e>
 8004450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004454:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004458:	e03a      	b.n	80044d0 <_printf_i+0xa8>
 800445a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800445e:	2b15      	cmp	r3, #21
 8004460:	d8f6      	bhi.n	8004450 <_printf_i+0x28>
 8004462:	a101      	add	r1, pc, #4	; (adr r1, 8004468 <_printf_i+0x40>)
 8004464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004468:	080044c1 	.word	0x080044c1
 800446c:	080044d5 	.word	0x080044d5
 8004470:	08004451 	.word	0x08004451
 8004474:	08004451 	.word	0x08004451
 8004478:	08004451 	.word	0x08004451
 800447c:	08004451 	.word	0x08004451
 8004480:	080044d5 	.word	0x080044d5
 8004484:	08004451 	.word	0x08004451
 8004488:	08004451 	.word	0x08004451
 800448c:	08004451 	.word	0x08004451
 8004490:	08004451 	.word	0x08004451
 8004494:	080045e1 	.word	0x080045e1
 8004498:	08004505 	.word	0x08004505
 800449c:	080045c3 	.word	0x080045c3
 80044a0:	08004451 	.word	0x08004451
 80044a4:	08004451 	.word	0x08004451
 80044a8:	08004603 	.word	0x08004603
 80044ac:	08004451 	.word	0x08004451
 80044b0:	08004505 	.word	0x08004505
 80044b4:	08004451 	.word	0x08004451
 80044b8:	08004451 	.word	0x08004451
 80044bc:	080045cb 	.word	0x080045cb
 80044c0:	682b      	ldr	r3, [r5, #0]
 80044c2:	1d1a      	adds	r2, r3, #4
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	602a      	str	r2, [r5, #0]
 80044c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0a3      	b.n	800461c <_printf_i+0x1f4>
 80044d4:	6820      	ldr	r0, [r4, #0]
 80044d6:	6829      	ldr	r1, [r5, #0]
 80044d8:	0606      	lsls	r6, r0, #24
 80044da:	f101 0304 	add.w	r3, r1, #4
 80044de:	d50a      	bpl.n	80044f6 <_printf_i+0xce>
 80044e0:	680e      	ldr	r6, [r1, #0]
 80044e2:	602b      	str	r3, [r5, #0]
 80044e4:	2e00      	cmp	r6, #0
 80044e6:	da03      	bge.n	80044f0 <_printf_i+0xc8>
 80044e8:	232d      	movs	r3, #45	; 0x2d
 80044ea:	4276      	negs	r6, r6
 80044ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044f0:	485e      	ldr	r0, [pc, #376]	; (800466c <_printf_i+0x244>)
 80044f2:	230a      	movs	r3, #10
 80044f4:	e019      	b.n	800452a <_printf_i+0x102>
 80044f6:	680e      	ldr	r6, [r1, #0]
 80044f8:	602b      	str	r3, [r5, #0]
 80044fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044fe:	bf18      	it	ne
 8004500:	b236      	sxthne	r6, r6
 8004502:	e7ef      	b.n	80044e4 <_printf_i+0xbc>
 8004504:	682b      	ldr	r3, [r5, #0]
 8004506:	6820      	ldr	r0, [r4, #0]
 8004508:	1d19      	adds	r1, r3, #4
 800450a:	6029      	str	r1, [r5, #0]
 800450c:	0601      	lsls	r1, r0, #24
 800450e:	d501      	bpl.n	8004514 <_printf_i+0xec>
 8004510:	681e      	ldr	r6, [r3, #0]
 8004512:	e002      	b.n	800451a <_printf_i+0xf2>
 8004514:	0646      	lsls	r6, r0, #25
 8004516:	d5fb      	bpl.n	8004510 <_printf_i+0xe8>
 8004518:	881e      	ldrh	r6, [r3, #0]
 800451a:	4854      	ldr	r0, [pc, #336]	; (800466c <_printf_i+0x244>)
 800451c:	2f6f      	cmp	r7, #111	; 0x6f
 800451e:	bf0c      	ite	eq
 8004520:	2308      	moveq	r3, #8
 8004522:	230a      	movne	r3, #10
 8004524:	2100      	movs	r1, #0
 8004526:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800452a:	6865      	ldr	r5, [r4, #4]
 800452c:	60a5      	str	r5, [r4, #8]
 800452e:	2d00      	cmp	r5, #0
 8004530:	bfa2      	ittt	ge
 8004532:	6821      	ldrge	r1, [r4, #0]
 8004534:	f021 0104 	bicge.w	r1, r1, #4
 8004538:	6021      	strge	r1, [r4, #0]
 800453a:	b90e      	cbnz	r6, 8004540 <_printf_i+0x118>
 800453c:	2d00      	cmp	r5, #0
 800453e:	d04d      	beq.n	80045dc <_printf_i+0x1b4>
 8004540:	4615      	mov	r5, r2
 8004542:	fbb6 f1f3 	udiv	r1, r6, r3
 8004546:	fb03 6711 	mls	r7, r3, r1, r6
 800454a:	5dc7      	ldrb	r7, [r0, r7]
 800454c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004550:	4637      	mov	r7, r6
 8004552:	42bb      	cmp	r3, r7
 8004554:	460e      	mov	r6, r1
 8004556:	d9f4      	bls.n	8004542 <_printf_i+0x11a>
 8004558:	2b08      	cmp	r3, #8
 800455a:	d10b      	bne.n	8004574 <_printf_i+0x14c>
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	07de      	lsls	r6, r3, #31
 8004560:	d508      	bpl.n	8004574 <_printf_i+0x14c>
 8004562:	6923      	ldr	r3, [r4, #16]
 8004564:	6861      	ldr	r1, [r4, #4]
 8004566:	4299      	cmp	r1, r3
 8004568:	bfde      	ittt	le
 800456a:	2330      	movle	r3, #48	; 0x30
 800456c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004570:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004574:	1b52      	subs	r2, r2, r5
 8004576:	6122      	str	r2, [r4, #16]
 8004578:	f8cd a000 	str.w	sl, [sp]
 800457c:	464b      	mov	r3, r9
 800457e:	aa03      	add	r2, sp, #12
 8004580:	4621      	mov	r1, r4
 8004582:	4640      	mov	r0, r8
 8004584:	f7ff fee2 	bl	800434c <_printf_common>
 8004588:	3001      	adds	r0, #1
 800458a:	d14c      	bne.n	8004626 <_printf_i+0x1fe>
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	b004      	add	sp, #16
 8004592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004596:	4835      	ldr	r0, [pc, #212]	; (800466c <_printf_i+0x244>)
 8004598:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800459c:	6829      	ldr	r1, [r5, #0]
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80045a4:	6029      	str	r1, [r5, #0]
 80045a6:	061d      	lsls	r5, r3, #24
 80045a8:	d514      	bpl.n	80045d4 <_printf_i+0x1ac>
 80045aa:	07df      	lsls	r7, r3, #31
 80045ac:	bf44      	itt	mi
 80045ae:	f043 0320 	orrmi.w	r3, r3, #32
 80045b2:	6023      	strmi	r3, [r4, #0]
 80045b4:	b91e      	cbnz	r6, 80045be <_printf_i+0x196>
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	f023 0320 	bic.w	r3, r3, #32
 80045bc:	6023      	str	r3, [r4, #0]
 80045be:	2310      	movs	r3, #16
 80045c0:	e7b0      	b.n	8004524 <_printf_i+0xfc>
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	f043 0320 	orr.w	r3, r3, #32
 80045c8:	6023      	str	r3, [r4, #0]
 80045ca:	2378      	movs	r3, #120	; 0x78
 80045cc:	4828      	ldr	r0, [pc, #160]	; (8004670 <_printf_i+0x248>)
 80045ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045d2:	e7e3      	b.n	800459c <_printf_i+0x174>
 80045d4:	0659      	lsls	r1, r3, #25
 80045d6:	bf48      	it	mi
 80045d8:	b2b6      	uxthmi	r6, r6
 80045da:	e7e6      	b.n	80045aa <_printf_i+0x182>
 80045dc:	4615      	mov	r5, r2
 80045de:	e7bb      	b.n	8004558 <_printf_i+0x130>
 80045e0:	682b      	ldr	r3, [r5, #0]
 80045e2:	6826      	ldr	r6, [r4, #0]
 80045e4:	6961      	ldr	r1, [r4, #20]
 80045e6:	1d18      	adds	r0, r3, #4
 80045e8:	6028      	str	r0, [r5, #0]
 80045ea:	0635      	lsls	r5, r6, #24
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	d501      	bpl.n	80045f4 <_printf_i+0x1cc>
 80045f0:	6019      	str	r1, [r3, #0]
 80045f2:	e002      	b.n	80045fa <_printf_i+0x1d2>
 80045f4:	0670      	lsls	r0, r6, #25
 80045f6:	d5fb      	bpl.n	80045f0 <_printf_i+0x1c8>
 80045f8:	8019      	strh	r1, [r3, #0]
 80045fa:	2300      	movs	r3, #0
 80045fc:	6123      	str	r3, [r4, #16]
 80045fe:	4615      	mov	r5, r2
 8004600:	e7ba      	b.n	8004578 <_printf_i+0x150>
 8004602:	682b      	ldr	r3, [r5, #0]
 8004604:	1d1a      	adds	r2, r3, #4
 8004606:	602a      	str	r2, [r5, #0]
 8004608:	681d      	ldr	r5, [r3, #0]
 800460a:	6862      	ldr	r2, [r4, #4]
 800460c:	2100      	movs	r1, #0
 800460e:	4628      	mov	r0, r5
 8004610:	f7fb fdde 	bl	80001d0 <memchr>
 8004614:	b108      	cbz	r0, 800461a <_printf_i+0x1f2>
 8004616:	1b40      	subs	r0, r0, r5
 8004618:	6060      	str	r0, [r4, #4]
 800461a:	6863      	ldr	r3, [r4, #4]
 800461c:	6123      	str	r3, [r4, #16]
 800461e:	2300      	movs	r3, #0
 8004620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004624:	e7a8      	b.n	8004578 <_printf_i+0x150>
 8004626:	6923      	ldr	r3, [r4, #16]
 8004628:	462a      	mov	r2, r5
 800462a:	4649      	mov	r1, r9
 800462c:	4640      	mov	r0, r8
 800462e:	47d0      	blx	sl
 8004630:	3001      	adds	r0, #1
 8004632:	d0ab      	beq.n	800458c <_printf_i+0x164>
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	079b      	lsls	r3, r3, #30
 8004638:	d413      	bmi.n	8004662 <_printf_i+0x23a>
 800463a:	68e0      	ldr	r0, [r4, #12]
 800463c:	9b03      	ldr	r3, [sp, #12]
 800463e:	4298      	cmp	r0, r3
 8004640:	bfb8      	it	lt
 8004642:	4618      	movlt	r0, r3
 8004644:	e7a4      	b.n	8004590 <_printf_i+0x168>
 8004646:	2301      	movs	r3, #1
 8004648:	4632      	mov	r2, r6
 800464a:	4649      	mov	r1, r9
 800464c:	4640      	mov	r0, r8
 800464e:	47d0      	blx	sl
 8004650:	3001      	adds	r0, #1
 8004652:	d09b      	beq.n	800458c <_printf_i+0x164>
 8004654:	3501      	adds	r5, #1
 8004656:	68e3      	ldr	r3, [r4, #12]
 8004658:	9903      	ldr	r1, [sp, #12]
 800465a:	1a5b      	subs	r3, r3, r1
 800465c:	42ab      	cmp	r3, r5
 800465e:	dcf2      	bgt.n	8004646 <_printf_i+0x21e>
 8004660:	e7eb      	b.n	800463a <_printf_i+0x212>
 8004662:	2500      	movs	r5, #0
 8004664:	f104 0619 	add.w	r6, r4, #25
 8004668:	e7f5      	b.n	8004656 <_printf_i+0x22e>
 800466a:	bf00      	nop
 800466c:	08004d49 	.word	0x08004d49
 8004670:	08004d5a 	.word	0x08004d5a

08004674 <_sbrk_r>:
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	4d06      	ldr	r5, [pc, #24]	; (8004690 <_sbrk_r+0x1c>)
 8004678:	2300      	movs	r3, #0
 800467a:	4604      	mov	r4, r0
 800467c:	4608      	mov	r0, r1
 800467e:	602b      	str	r3, [r5, #0]
 8004680:	f7fc fa0c 	bl	8000a9c <_sbrk>
 8004684:	1c43      	adds	r3, r0, #1
 8004686:	d102      	bne.n	800468e <_sbrk_r+0x1a>
 8004688:	682b      	ldr	r3, [r5, #0]
 800468a:	b103      	cbz	r3, 800468e <_sbrk_r+0x1a>
 800468c:	6023      	str	r3, [r4, #0]
 800468e:	bd38      	pop	{r3, r4, r5, pc}
 8004690:	200021f8 	.word	0x200021f8

08004694 <__sread>:
 8004694:	b510      	push	{r4, lr}
 8004696:	460c      	mov	r4, r1
 8004698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800469c:	f000 fab2 	bl	8004c04 <_read_r>
 80046a0:	2800      	cmp	r0, #0
 80046a2:	bfab      	itete	ge
 80046a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046a6:	89a3      	ldrhlt	r3, [r4, #12]
 80046a8:	181b      	addge	r3, r3, r0
 80046aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046ae:	bfac      	ite	ge
 80046b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80046b2:	81a3      	strhlt	r3, [r4, #12]
 80046b4:	bd10      	pop	{r4, pc}

080046b6 <__swrite>:
 80046b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ba:	461f      	mov	r7, r3
 80046bc:	898b      	ldrh	r3, [r1, #12]
 80046be:	05db      	lsls	r3, r3, #23
 80046c0:	4605      	mov	r5, r0
 80046c2:	460c      	mov	r4, r1
 80046c4:	4616      	mov	r6, r2
 80046c6:	d505      	bpl.n	80046d4 <__swrite+0x1e>
 80046c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046cc:	2302      	movs	r3, #2
 80046ce:	2200      	movs	r2, #0
 80046d0:	f000 f9c8 	bl	8004a64 <_lseek_r>
 80046d4:	89a3      	ldrh	r3, [r4, #12]
 80046d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046de:	81a3      	strh	r3, [r4, #12]
 80046e0:	4632      	mov	r2, r6
 80046e2:	463b      	mov	r3, r7
 80046e4:	4628      	mov	r0, r5
 80046e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046ea:	f000 b869 	b.w	80047c0 <_write_r>

080046ee <__sseek>:
 80046ee:	b510      	push	{r4, lr}
 80046f0:	460c      	mov	r4, r1
 80046f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046f6:	f000 f9b5 	bl	8004a64 <_lseek_r>
 80046fa:	1c43      	adds	r3, r0, #1
 80046fc:	89a3      	ldrh	r3, [r4, #12]
 80046fe:	bf15      	itete	ne
 8004700:	6560      	strne	r0, [r4, #84]	; 0x54
 8004702:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004706:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800470a:	81a3      	strheq	r3, [r4, #12]
 800470c:	bf18      	it	ne
 800470e:	81a3      	strhne	r3, [r4, #12]
 8004710:	bd10      	pop	{r4, pc}

08004712 <__sclose>:
 8004712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004716:	f000 b8d3 	b.w	80048c0 <_close_r>
	...

0800471c <__swbuf_r>:
 800471c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471e:	460e      	mov	r6, r1
 8004720:	4614      	mov	r4, r2
 8004722:	4605      	mov	r5, r0
 8004724:	b118      	cbz	r0, 800472e <__swbuf_r+0x12>
 8004726:	6983      	ldr	r3, [r0, #24]
 8004728:	b90b      	cbnz	r3, 800472e <__swbuf_r+0x12>
 800472a:	f7ff fb81 	bl	8003e30 <__sinit>
 800472e:	4b21      	ldr	r3, [pc, #132]	; (80047b4 <__swbuf_r+0x98>)
 8004730:	429c      	cmp	r4, r3
 8004732:	d12b      	bne.n	800478c <__swbuf_r+0x70>
 8004734:	686c      	ldr	r4, [r5, #4]
 8004736:	69a3      	ldr	r3, [r4, #24]
 8004738:	60a3      	str	r3, [r4, #8]
 800473a:	89a3      	ldrh	r3, [r4, #12]
 800473c:	071a      	lsls	r2, r3, #28
 800473e:	d52f      	bpl.n	80047a0 <__swbuf_r+0x84>
 8004740:	6923      	ldr	r3, [r4, #16]
 8004742:	b36b      	cbz	r3, 80047a0 <__swbuf_r+0x84>
 8004744:	6923      	ldr	r3, [r4, #16]
 8004746:	6820      	ldr	r0, [r4, #0]
 8004748:	1ac0      	subs	r0, r0, r3
 800474a:	6963      	ldr	r3, [r4, #20]
 800474c:	b2f6      	uxtb	r6, r6
 800474e:	4283      	cmp	r3, r0
 8004750:	4637      	mov	r7, r6
 8004752:	dc04      	bgt.n	800475e <__swbuf_r+0x42>
 8004754:	4621      	mov	r1, r4
 8004756:	4628      	mov	r0, r5
 8004758:	f000 f948 	bl	80049ec <_fflush_r>
 800475c:	bb30      	cbnz	r0, 80047ac <__swbuf_r+0x90>
 800475e:	68a3      	ldr	r3, [r4, #8]
 8004760:	3b01      	subs	r3, #1
 8004762:	60a3      	str	r3, [r4, #8]
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	6022      	str	r2, [r4, #0]
 800476a:	701e      	strb	r6, [r3, #0]
 800476c:	6963      	ldr	r3, [r4, #20]
 800476e:	3001      	adds	r0, #1
 8004770:	4283      	cmp	r3, r0
 8004772:	d004      	beq.n	800477e <__swbuf_r+0x62>
 8004774:	89a3      	ldrh	r3, [r4, #12]
 8004776:	07db      	lsls	r3, r3, #31
 8004778:	d506      	bpl.n	8004788 <__swbuf_r+0x6c>
 800477a:	2e0a      	cmp	r6, #10
 800477c:	d104      	bne.n	8004788 <__swbuf_r+0x6c>
 800477e:	4621      	mov	r1, r4
 8004780:	4628      	mov	r0, r5
 8004782:	f000 f933 	bl	80049ec <_fflush_r>
 8004786:	b988      	cbnz	r0, 80047ac <__swbuf_r+0x90>
 8004788:	4638      	mov	r0, r7
 800478a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800478c:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <__swbuf_r+0x9c>)
 800478e:	429c      	cmp	r4, r3
 8004790:	d101      	bne.n	8004796 <__swbuf_r+0x7a>
 8004792:	68ac      	ldr	r4, [r5, #8]
 8004794:	e7cf      	b.n	8004736 <__swbuf_r+0x1a>
 8004796:	4b09      	ldr	r3, [pc, #36]	; (80047bc <__swbuf_r+0xa0>)
 8004798:	429c      	cmp	r4, r3
 800479a:	bf08      	it	eq
 800479c:	68ec      	ldreq	r4, [r5, #12]
 800479e:	e7ca      	b.n	8004736 <__swbuf_r+0x1a>
 80047a0:	4621      	mov	r1, r4
 80047a2:	4628      	mov	r0, r5
 80047a4:	f000 f81e 	bl	80047e4 <__swsetup_r>
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d0cb      	beq.n	8004744 <__swbuf_r+0x28>
 80047ac:	f04f 37ff 	mov.w	r7, #4294967295
 80047b0:	e7ea      	b.n	8004788 <__swbuf_r+0x6c>
 80047b2:	bf00      	nop
 80047b4:	08004cf8 	.word	0x08004cf8
 80047b8:	08004d18 	.word	0x08004d18
 80047bc:	08004cd8 	.word	0x08004cd8

080047c0 <_write_r>:
 80047c0:	b538      	push	{r3, r4, r5, lr}
 80047c2:	4d07      	ldr	r5, [pc, #28]	; (80047e0 <_write_r+0x20>)
 80047c4:	4604      	mov	r4, r0
 80047c6:	4608      	mov	r0, r1
 80047c8:	4611      	mov	r1, r2
 80047ca:	2200      	movs	r2, #0
 80047cc:	602a      	str	r2, [r5, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	f7fc f913 	bl	80009fa <_write>
 80047d4:	1c43      	adds	r3, r0, #1
 80047d6:	d102      	bne.n	80047de <_write_r+0x1e>
 80047d8:	682b      	ldr	r3, [r5, #0]
 80047da:	b103      	cbz	r3, 80047de <_write_r+0x1e>
 80047dc:	6023      	str	r3, [r4, #0]
 80047de:	bd38      	pop	{r3, r4, r5, pc}
 80047e0:	200021f8 	.word	0x200021f8

080047e4 <__swsetup_r>:
 80047e4:	4b32      	ldr	r3, [pc, #200]	; (80048b0 <__swsetup_r+0xcc>)
 80047e6:	b570      	push	{r4, r5, r6, lr}
 80047e8:	681d      	ldr	r5, [r3, #0]
 80047ea:	4606      	mov	r6, r0
 80047ec:	460c      	mov	r4, r1
 80047ee:	b125      	cbz	r5, 80047fa <__swsetup_r+0x16>
 80047f0:	69ab      	ldr	r3, [r5, #24]
 80047f2:	b913      	cbnz	r3, 80047fa <__swsetup_r+0x16>
 80047f4:	4628      	mov	r0, r5
 80047f6:	f7ff fb1b 	bl	8003e30 <__sinit>
 80047fa:	4b2e      	ldr	r3, [pc, #184]	; (80048b4 <__swsetup_r+0xd0>)
 80047fc:	429c      	cmp	r4, r3
 80047fe:	d10f      	bne.n	8004820 <__swsetup_r+0x3c>
 8004800:	686c      	ldr	r4, [r5, #4]
 8004802:	89a3      	ldrh	r3, [r4, #12]
 8004804:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004808:	0719      	lsls	r1, r3, #28
 800480a:	d42c      	bmi.n	8004866 <__swsetup_r+0x82>
 800480c:	06dd      	lsls	r5, r3, #27
 800480e:	d411      	bmi.n	8004834 <__swsetup_r+0x50>
 8004810:	2309      	movs	r3, #9
 8004812:	6033      	str	r3, [r6, #0]
 8004814:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004818:	81a3      	strh	r3, [r4, #12]
 800481a:	f04f 30ff 	mov.w	r0, #4294967295
 800481e:	e03e      	b.n	800489e <__swsetup_r+0xba>
 8004820:	4b25      	ldr	r3, [pc, #148]	; (80048b8 <__swsetup_r+0xd4>)
 8004822:	429c      	cmp	r4, r3
 8004824:	d101      	bne.n	800482a <__swsetup_r+0x46>
 8004826:	68ac      	ldr	r4, [r5, #8]
 8004828:	e7eb      	b.n	8004802 <__swsetup_r+0x1e>
 800482a:	4b24      	ldr	r3, [pc, #144]	; (80048bc <__swsetup_r+0xd8>)
 800482c:	429c      	cmp	r4, r3
 800482e:	bf08      	it	eq
 8004830:	68ec      	ldreq	r4, [r5, #12]
 8004832:	e7e6      	b.n	8004802 <__swsetup_r+0x1e>
 8004834:	0758      	lsls	r0, r3, #29
 8004836:	d512      	bpl.n	800485e <__swsetup_r+0x7a>
 8004838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800483a:	b141      	cbz	r1, 800484e <__swsetup_r+0x6a>
 800483c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004840:	4299      	cmp	r1, r3
 8004842:	d002      	beq.n	800484a <__swsetup_r+0x66>
 8004844:	4630      	mov	r0, r6
 8004846:	f000 f991 	bl	8004b6c <_free_r>
 800484a:	2300      	movs	r3, #0
 800484c:	6363      	str	r3, [r4, #52]	; 0x34
 800484e:	89a3      	ldrh	r3, [r4, #12]
 8004850:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004854:	81a3      	strh	r3, [r4, #12]
 8004856:	2300      	movs	r3, #0
 8004858:	6063      	str	r3, [r4, #4]
 800485a:	6923      	ldr	r3, [r4, #16]
 800485c:	6023      	str	r3, [r4, #0]
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	f043 0308 	orr.w	r3, r3, #8
 8004864:	81a3      	strh	r3, [r4, #12]
 8004866:	6923      	ldr	r3, [r4, #16]
 8004868:	b94b      	cbnz	r3, 800487e <__swsetup_r+0x9a>
 800486a:	89a3      	ldrh	r3, [r4, #12]
 800486c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004874:	d003      	beq.n	800487e <__swsetup_r+0x9a>
 8004876:	4621      	mov	r1, r4
 8004878:	4630      	mov	r0, r6
 800487a:	f000 f92b 	bl	8004ad4 <__smakebuf_r>
 800487e:	89a0      	ldrh	r0, [r4, #12]
 8004880:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004884:	f010 0301 	ands.w	r3, r0, #1
 8004888:	d00a      	beq.n	80048a0 <__swsetup_r+0xbc>
 800488a:	2300      	movs	r3, #0
 800488c:	60a3      	str	r3, [r4, #8]
 800488e:	6963      	ldr	r3, [r4, #20]
 8004890:	425b      	negs	r3, r3
 8004892:	61a3      	str	r3, [r4, #24]
 8004894:	6923      	ldr	r3, [r4, #16]
 8004896:	b943      	cbnz	r3, 80048aa <__swsetup_r+0xc6>
 8004898:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800489c:	d1ba      	bne.n	8004814 <__swsetup_r+0x30>
 800489e:	bd70      	pop	{r4, r5, r6, pc}
 80048a0:	0781      	lsls	r1, r0, #30
 80048a2:	bf58      	it	pl
 80048a4:	6963      	ldrpl	r3, [r4, #20]
 80048a6:	60a3      	str	r3, [r4, #8]
 80048a8:	e7f4      	b.n	8004894 <__swsetup_r+0xb0>
 80048aa:	2000      	movs	r0, #0
 80048ac:	e7f7      	b.n	800489e <__swsetup_r+0xba>
 80048ae:	bf00      	nop
 80048b0:	2000000c 	.word	0x2000000c
 80048b4:	08004cf8 	.word	0x08004cf8
 80048b8:	08004d18 	.word	0x08004d18
 80048bc:	08004cd8 	.word	0x08004cd8

080048c0 <_close_r>:
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	4d06      	ldr	r5, [pc, #24]	; (80048dc <_close_r+0x1c>)
 80048c4:	2300      	movs	r3, #0
 80048c6:	4604      	mov	r4, r0
 80048c8:	4608      	mov	r0, r1
 80048ca:	602b      	str	r3, [r5, #0]
 80048cc:	f7fc f8b1 	bl	8000a32 <_close>
 80048d0:	1c43      	adds	r3, r0, #1
 80048d2:	d102      	bne.n	80048da <_close_r+0x1a>
 80048d4:	682b      	ldr	r3, [r5, #0]
 80048d6:	b103      	cbz	r3, 80048da <_close_r+0x1a>
 80048d8:	6023      	str	r3, [r4, #0]
 80048da:	bd38      	pop	{r3, r4, r5, pc}
 80048dc:	200021f8 	.word	0x200021f8

080048e0 <__sflush_r>:
 80048e0:	898a      	ldrh	r2, [r1, #12]
 80048e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e6:	4605      	mov	r5, r0
 80048e8:	0710      	lsls	r0, r2, #28
 80048ea:	460c      	mov	r4, r1
 80048ec:	d458      	bmi.n	80049a0 <__sflush_r+0xc0>
 80048ee:	684b      	ldr	r3, [r1, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	dc05      	bgt.n	8004900 <__sflush_r+0x20>
 80048f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	dc02      	bgt.n	8004900 <__sflush_r+0x20>
 80048fa:	2000      	movs	r0, #0
 80048fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004900:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004902:	2e00      	cmp	r6, #0
 8004904:	d0f9      	beq.n	80048fa <__sflush_r+0x1a>
 8004906:	2300      	movs	r3, #0
 8004908:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800490c:	682f      	ldr	r7, [r5, #0]
 800490e:	602b      	str	r3, [r5, #0]
 8004910:	d032      	beq.n	8004978 <__sflush_r+0x98>
 8004912:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004914:	89a3      	ldrh	r3, [r4, #12]
 8004916:	075a      	lsls	r2, r3, #29
 8004918:	d505      	bpl.n	8004926 <__sflush_r+0x46>
 800491a:	6863      	ldr	r3, [r4, #4]
 800491c:	1ac0      	subs	r0, r0, r3
 800491e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004920:	b10b      	cbz	r3, 8004926 <__sflush_r+0x46>
 8004922:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004924:	1ac0      	subs	r0, r0, r3
 8004926:	2300      	movs	r3, #0
 8004928:	4602      	mov	r2, r0
 800492a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800492c:	6a21      	ldr	r1, [r4, #32]
 800492e:	4628      	mov	r0, r5
 8004930:	47b0      	blx	r6
 8004932:	1c43      	adds	r3, r0, #1
 8004934:	89a3      	ldrh	r3, [r4, #12]
 8004936:	d106      	bne.n	8004946 <__sflush_r+0x66>
 8004938:	6829      	ldr	r1, [r5, #0]
 800493a:	291d      	cmp	r1, #29
 800493c:	d82c      	bhi.n	8004998 <__sflush_r+0xb8>
 800493e:	4a2a      	ldr	r2, [pc, #168]	; (80049e8 <__sflush_r+0x108>)
 8004940:	40ca      	lsrs	r2, r1
 8004942:	07d6      	lsls	r6, r2, #31
 8004944:	d528      	bpl.n	8004998 <__sflush_r+0xb8>
 8004946:	2200      	movs	r2, #0
 8004948:	6062      	str	r2, [r4, #4]
 800494a:	04d9      	lsls	r1, r3, #19
 800494c:	6922      	ldr	r2, [r4, #16]
 800494e:	6022      	str	r2, [r4, #0]
 8004950:	d504      	bpl.n	800495c <__sflush_r+0x7c>
 8004952:	1c42      	adds	r2, r0, #1
 8004954:	d101      	bne.n	800495a <__sflush_r+0x7a>
 8004956:	682b      	ldr	r3, [r5, #0]
 8004958:	b903      	cbnz	r3, 800495c <__sflush_r+0x7c>
 800495a:	6560      	str	r0, [r4, #84]	; 0x54
 800495c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800495e:	602f      	str	r7, [r5, #0]
 8004960:	2900      	cmp	r1, #0
 8004962:	d0ca      	beq.n	80048fa <__sflush_r+0x1a>
 8004964:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004968:	4299      	cmp	r1, r3
 800496a:	d002      	beq.n	8004972 <__sflush_r+0x92>
 800496c:	4628      	mov	r0, r5
 800496e:	f000 f8fd 	bl	8004b6c <_free_r>
 8004972:	2000      	movs	r0, #0
 8004974:	6360      	str	r0, [r4, #52]	; 0x34
 8004976:	e7c1      	b.n	80048fc <__sflush_r+0x1c>
 8004978:	6a21      	ldr	r1, [r4, #32]
 800497a:	2301      	movs	r3, #1
 800497c:	4628      	mov	r0, r5
 800497e:	47b0      	blx	r6
 8004980:	1c41      	adds	r1, r0, #1
 8004982:	d1c7      	bne.n	8004914 <__sflush_r+0x34>
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0c4      	beq.n	8004914 <__sflush_r+0x34>
 800498a:	2b1d      	cmp	r3, #29
 800498c:	d001      	beq.n	8004992 <__sflush_r+0xb2>
 800498e:	2b16      	cmp	r3, #22
 8004990:	d101      	bne.n	8004996 <__sflush_r+0xb6>
 8004992:	602f      	str	r7, [r5, #0]
 8004994:	e7b1      	b.n	80048fa <__sflush_r+0x1a>
 8004996:	89a3      	ldrh	r3, [r4, #12]
 8004998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800499c:	81a3      	strh	r3, [r4, #12]
 800499e:	e7ad      	b.n	80048fc <__sflush_r+0x1c>
 80049a0:	690f      	ldr	r7, [r1, #16]
 80049a2:	2f00      	cmp	r7, #0
 80049a4:	d0a9      	beq.n	80048fa <__sflush_r+0x1a>
 80049a6:	0793      	lsls	r3, r2, #30
 80049a8:	680e      	ldr	r6, [r1, #0]
 80049aa:	bf08      	it	eq
 80049ac:	694b      	ldreq	r3, [r1, #20]
 80049ae:	600f      	str	r7, [r1, #0]
 80049b0:	bf18      	it	ne
 80049b2:	2300      	movne	r3, #0
 80049b4:	eba6 0807 	sub.w	r8, r6, r7
 80049b8:	608b      	str	r3, [r1, #8]
 80049ba:	f1b8 0f00 	cmp.w	r8, #0
 80049be:	dd9c      	ble.n	80048fa <__sflush_r+0x1a>
 80049c0:	6a21      	ldr	r1, [r4, #32]
 80049c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049c4:	4643      	mov	r3, r8
 80049c6:	463a      	mov	r2, r7
 80049c8:	4628      	mov	r0, r5
 80049ca:	47b0      	blx	r6
 80049cc:	2800      	cmp	r0, #0
 80049ce:	dc06      	bgt.n	80049de <__sflush_r+0xfe>
 80049d0:	89a3      	ldrh	r3, [r4, #12]
 80049d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049d6:	81a3      	strh	r3, [r4, #12]
 80049d8:	f04f 30ff 	mov.w	r0, #4294967295
 80049dc:	e78e      	b.n	80048fc <__sflush_r+0x1c>
 80049de:	4407      	add	r7, r0
 80049e0:	eba8 0800 	sub.w	r8, r8, r0
 80049e4:	e7e9      	b.n	80049ba <__sflush_r+0xda>
 80049e6:	bf00      	nop
 80049e8:	20400001 	.word	0x20400001

080049ec <_fflush_r>:
 80049ec:	b538      	push	{r3, r4, r5, lr}
 80049ee:	690b      	ldr	r3, [r1, #16]
 80049f0:	4605      	mov	r5, r0
 80049f2:	460c      	mov	r4, r1
 80049f4:	b913      	cbnz	r3, 80049fc <_fflush_r+0x10>
 80049f6:	2500      	movs	r5, #0
 80049f8:	4628      	mov	r0, r5
 80049fa:	bd38      	pop	{r3, r4, r5, pc}
 80049fc:	b118      	cbz	r0, 8004a06 <_fflush_r+0x1a>
 80049fe:	6983      	ldr	r3, [r0, #24]
 8004a00:	b90b      	cbnz	r3, 8004a06 <_fflush_r+0x1a>
 8004a02:	f7ff fa15 	bl	8003e30 <__sinit>
 8004a06:	4b14      	ldr	r3, [pc, #80]	; (8004a58 <_fflush_r+0x6c>)
 8004a08:	429c      	cmp	r4, r3
 8004a0a:	d11b      	bne.n	8004a44 <_fflush_r+0x58>
 8004a0c:	686c      	ldr	r4, [r5, #4]
 8004a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0ef      	beq.n	80049f6 <_fflush_r+0xa>
 8004a16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a18:	07d0      	lsls	r0, r2, #31
 8004a1a:	d404      	bmi.n	8004a26 <_fflush_r+0x3a>
 8004a1c:	0599      	lsls	r1, r3, #22
 8004a1e:	d402      	bmi.n	8004a26 <_fflush_r+0x3a>
 8004a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a22:	f7ff faa3 	bl	8003f6c <__retarget_lock_acquire_recursive>
 8004a26:	4628      	mov	r0, r5
 8004a28:	4621      	mov	r1, r4
 8004a2a:	f7ff ff59 	bl	80048e0 <__sflush_r>
 8004a2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a30:	07da      	lsls	r2, r3, #31
 8004a32:	4605      	mov	r5, r0
 8004a34:	d4e0      	bmi.n	80049f8 <_fflush_r+0xc>
 8004a36:	89a3      	ldrh	r3, [r4, #12]
 8004a38:	059b      	lsls	r3, r3, #22
 8004a3a:	d4dd      	bmi.n	80049f8 <_fflush_r+0xc>
 8004a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a3e:	f7ff fa96 	bl	8003f6e <__retarget_lock_release_recursive>
 8004a42:	e7d9      	b.n	80049f8 <_fflush_r+0xc>
 8004a44:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <_fflush_r+0x70>)
 8004a46:	429c      	cmp	r4, r3
 8004a48:	d101      	bne.n	8004a4e <_fflush_r+0x62>
 8004a4a:	68ac      	ldr	r4, [r5, #8]
 8004a4c:	e7df      	b.n	8004a0e <_fflush_r+0x22>
 8004a4e:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <_fflush_r+0x74>)
 8004a50:	429c      	cmp	r4, r3
 8004a52:	bf08      	it	eq
 8004a54:	68ec      	ldreq	r4, [r5, #12]
 8004a56:	e7da      	b.n	8004a0e <_fflush_r+0x22>
 8004a58:	08004cf8 	.word	0x08004cf8
 8004a5c:	08004d18 	.word	0x08004d18
 8004a60:	08004cd8 	.word	0x08004cd8

08004a64 <_lseek_r>:
 8004a64:	b538      	push	{r3, r4, r5, lr}
 8004a66:	4d07      	ldr	r5, [pc, #28]	; (8004a84 <_lseek_r+0x20>)
 8004a68:	4604      	mov	r4, r0
 8004a6a:	4608      	mov	r0, r1
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	2200      	movs	r2, #0
 8004a70:	602a      	str	r2, [r5, #0]
 8004a72:	461a      	mov	r2, r3
 8004a74:	f7fc f804 	bl	8000a80 <_lseek>
 8004a78:	1c43      	adds	r3, r0, #1
 8004a7a:	d102      	bne.n	8004a82 <_lseek_r+0x1e>
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	b103      	cbz	r3, 8004a82 <_lseek_r+0x1e>
 8004a80:	6023      	str	r3, [r4, #0]
 8004a82:	bd38      	pop	{r3, r4, r5, pc}
 8004a84:	200021f8 	.word	0x200021f8

08004a88 <__swhatbuf_r>:
 8004a88:	b570      	push	{r4, r5, r6, lr}
 8004a8a:	460e      	mov	r6, r1
 8004a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a90:	2900      	cmp	r1, #0
 8004a92:	b096      	sub	sp, #88	; 0x58
 8004a94:	4614      	mov	r4, r2
 8004a96:	461d      	mov	r5, r3
 8004a98:	da08      	bge.n	8004aac <__swhatbuf_r+0x24>
 8004a9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	602a      	str	r2, [r5, #0]
 8004aa2:	061a      	lsls	r2, r3, #24
 8004aa4:	d410      	bmi.n	8004ac8 <__swhatbuf_r+0x40>
 8004aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aaa:	e00e      	b.n	8004aca <__swhatbuf_r+0x42>
 8004aac:	466a      	mov	r2, sp
 8004aae:	f000 f8bb 	bl	8004c28 <_fstat_r>
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	dbf1      	blt.n	8004a9a <__swhatbuf_r+0x12>
 8004ab6:	9a01      	ldr	r2, [sp, #4]
 8004ab8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004abc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ac0:	425a      	negs	r2, r3
 8004ac2:	415a      	adcs	r2, r3
 8004ac4:	602a      	str	r2, [r5, #0]
 8004ac6:	e7ee      	b.n	8004aa6 <__swhatbuf_r+0x1e>
 8004ac8:	2340      	movs	r3, #64	; 0x40
 8004aca:	2000      	movs	r0, #0
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	b016      	add	sp, #88	; 0x58
 8004ad0:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ad4 <__smakebuf_r>:
 8004ad4:	898b      	ldrh	r3, [r1, #12]
 8004ad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ad8:	079d      	lsls	r5, r3, #30
 8004ada:	4606      	mov	r6, r0
 8004adc:	460c      	mov	r4, r1
 8004ade:	d507      	bpl.n	8004af0 <__smakebuf_r+0x1c>
 8004ae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ae4:	6023      	str	r3, [r4, #0]
 8004ae6:	6123      	str	r3, [r4, #16]
 8004ae8:	2301      	movs	r3, #1
 8004aea:	6163      	str	r3, [r4, #20]
 8004aec:	b002      	add	sp, #8
 8004aee:	bd70      	pop	{r4, r5, r6, pc}
 8004af0:	ab01      	add	r3, sp, #4
 8004af2:	466a      	mov	r2, sp
 8004af4:	f7ff ffc8 	bl	8004a88 <__swhatbuf_r>
 8004af8:	9900      	ldr	r1, [sp, #0]
 8004afa:	4605      	mov	r5, r0
 8004afc:	4630      	mov	r0, r6
 8004afe:	f7ff fa57 	bl	8003fb0 <_malloc_r>
 8004b02:	b948      	cbnz	r0, 8004b18 <__smakebuf_r+0x44>
 8004b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b08:	059a      	lsls	r2, r3, #22
 8004b0a:	d4ef      	bmi.n	8004aec <__smakebuf_r+0x18>
 8004b0c:	f023 0303 	bic.w	r3, r3, #3
 8004b10:	f043 0302 	orr.w	r3, r3, #2
 8004b14:	81a3      	strh	r3, [r4, #12]
 8004b16:	e7e3      	b.n	8004ae0 <__smakebuf_r+0xc>
 8004b18:	4b0d      	ldr	r3, [pc, #52]	; (8004b50 <__smakebuf_r+0x7c>)
 8004b1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b1c:	89a3      	ldrh	r3, [r4, #12]
 8004b1e:	6020      	str	r0, [r4, #0]
 8004b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b24:	81a3      	strh	r3, [r4, #12]
 8004b26:	9b00      	ldr	r3, [sp, #0]
 8004b28:	6163      	str	r3, [r4, #20]
 8004b2a:	9b01      	ldr	r3, [sp, #4]
 8004b2c:	6120      	str	r0, [r4, #16]
 8004b2e:	b15b      	cbz	r3, 8004b48 <__smakebuf_r+0x74>
 8004b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b34:	4630      	mov	r0, r6
 8004b36:	f000 f889 	bl	8004c4c <_isatty_r>
 8004b3a:	b128      	cbz	r0, 8004b48 <__smakebuf_r+0x74>
 8004b3c:	89a3      	ldrh	r3, [r4, #12]
 8004b3e:	f023 0303 	bic.w	r3, r3, #3
 8004b42:	f043 0301 	orr.w	r3, r3, #1
 8004b46:	81a3      	strh	r3, [r4, #12]
 8004b48:	89a0      	ldrh	r0, [r4, #12]
 8004b4a:	4305      	orrs	r5, r0
 8004b4c:	81a5      	strh	r5, [r4, #12]
 8004b4e:	e7cd      	b.n	8004aec <__smakebuf_r+0x18>
 8004b50:	08003dc9 	.word	0x08003dc9

08004b54 <__malloc_lock>:
 8004b54:	4801      	ldr	r0, [pc, #4]	; (8004b5c <__malloc_lock+0x8>)
 8004b56:	f7ff ba09 	b.w	8003f6c <__retarget_lock_acquire_recursive>
 8004b5a:	bf00      	nop
 8004b5c:	200021ec 	.word	0x200021ec

08004b60 <__malloc_unlock>:
 8004b60:	4801      	ldr	r0, [pc, #4]	; (8004b68 <__malloc_unlock+0x8>)
 8004b62:	f7ff ba04 	b.w	8003f6e <__retarget_lock_release_recursive>
 8004b66:	bf00      	nop
 8004b68:	200021ec 	.word	0x200021ec

08004b6c <_free_r>:
 8004b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b6e:	2900      	cmp	r1, #0
 8004b70:	d044      	beq.n	8004bfc <_free_r+0x90>
 8004b72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b76:	9001      	str	r0, [sp, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f1a1 0404 	sub.w	r4, r1, #4
 8004b7e:	bfb8      	it	lt
 8004b80:	18e4      	addlt	r4, r4, r3
 8004b82:	f7ff ffe7 	bl	8004b54 <__malloc_lock>
 8004b86:	4a1e      	ldr	r2, [pc, #120]	; (8004c00 <_free_r+0x94>)
 8004b88:	9801      	ldr	r0, [sp, #4]
 8004b8a:	6813      	ldr	r3, [r2, #0]
 8004b8c:	b933      	cbnz	r3, 8004b9c <_free_r+0x30>
 8004b8e:	6063      	str	r3, [r4, #4]
 8004b90:	6014      	str	r4, [r2, #0]
 8004b92:	b003      	add	sp, #12
 8004b94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b98:	f7ff bfe2 	b.w	8004b60 <__malloc_unlock>
 8004b9c:	42a3      	cmp	r3, r4
 8004b9e:	d908      	bls.n	8004bb2 <_free_r+0x46>
 8004ba0:	6825      	ldr	r5, [r4, #0]
 8004ba2:	1961      	adds	r1, r4, r5
 8004ba4:	428b      	cmp	r3, r1
 8004ba6:	bf01      	itttt	eq
 8004ba8:	6819      	ldreq	r1, [r3, #0]
 8004baa:	685b      	ldreq	r3, [r3, #4]
 8004bac:	1949      	addeq	r1, r1, r5
 8004bae:	6021      	streq	r1, [r4, #0]
 8004bb0:	e7ed      	b.n	8004b8e <_free_r+0x22>
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	b10b      	cbz	r3, 8004bbc <_free_r+0x50>
 8004bb8:	42a3      	cmp	r3, r4
 8004bba:	d9fa      	bls.n	8004bb2 <_free_r+0x46>
 8004bbc:	6811      	ldr	r1, [r2, #0]
 8004bbe:	1855      	adds	r5, r2, r1
 8004bc0:	42a5      	cmp	r5, r4
 8004bc2:	d10b      	bne.n	8004bdc <_free_r+0x70>
 8004bc4:	6824      	ldr	r4, [r4, #0]
 8004bc6:	4421      	add	r1, r4
 8004bc8:	1854      	adds	r4, r2, r1
 8004bca:	42a3      	cmp	r3, r4
 8004bcc:	6011      	str	r1, [r2, #0]
 8004bce:	d1e0      	bne.n	8004b92 <_free_r+0x26>
 8004bd0:	681c      	ldr	r4, [r3, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	6053      	str	r3, [r2, #4]
 8004bd6:	4421      	add	r1, r4
 8004bd8:	6011      	str	r1, [r2, #0]
 8004bda:	e7da      	b.n	8004b92 <_free_r+0x26>
 8004bdc:	d902      	bls.n	8004be4 <_free_r+0x78>
 8004bde:	230c      	movs	r3, #12
 8004be0:	6003      	str	r3, [r0, #0]
 8004be2:	e7d6      	b.n	8004b92 <_free_r+0x26>
 8004be4:	6825      	ldr	r5, [r4, #0]
 8004be6:	1961      	adds	r1, r4, r5
 8004be8:	428b      	cmp	r3, r1
 8004bea:	bf04      	itt	eq
 8004bec:	6819      	ldreq	r1, [r3, #0]
 8004bee:	685b      	ldreq	r3, [r3, #4]
 8004bf0:	6063      	str	r3, [r4, #4]
 8004bf2:	bf04      	itt	eq
 8004bf4:	1949      	addeq	r1, r1, r5
 8004bf6:	6021      	streq	r1, [r4, #0]
 8004bf8:	6054      	str	r4, [r2, #4]
 8004bfa:	e7ca      	b.n	8004b92 <_free_r+0x26>
 8004bfc:	b003      	add	sp, #12
 8004bfe:	bd30      	pop	{r4, r5, pc}
 8004c00:	200021f0 	.word	0x200021f0

08004c04 <_read_r>:
 8004c04:	b538      	push	{r3, r4, r5, lr}
 8004c06:	4d07      	ldr	r5, [pc, #28]	; (8004c24 <_read_r+0x20>)
 8004c08:	4604      	mov	r4, r0
 8004c0a:	4608      	mov	r0, r1
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	2200      	movs	r2, #0
 8004c10:	602a      	str	r2, [r5, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	f7fb fed4 	bl	80009c0 <_read>
 8004c18:	1c43      	adds	r3, r0, #1
 8004c1a:	d102      	bne.n	8004c22 <_read_r+0x1e>
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	b103      	cbz	r3, 8004c22 <_read_r+0x1e>
 8004c20:	6023      	str	r3, [r4, #0]
 8004c22:	bd38      	pop	{r3, r4, r5, pc}
 8004c24:	200021f8 	.word	0x200021f8

08004c28 <_fstat_r>:
 8004c28:	b538      	push	{r3, r4, r5, lr}
 8004c2a:	4d07      	ldr	r5, [pc, #28]	; (8004c48 <_fstat_r+0x20>)
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	4604      	mov	r4, r0
 8004c30:	4608      	mov	r0, r1
 8004c32:	4611      	mov	r1, r2
 8004c34:	602b      	str	r3, [r5, #0]
 8004c36:	f7fb ff08 	bl	8000a4a <_fstat>
 8004c3a:	1c43      	adds	r3, r0, #1
 8004c3c:	d102      	bne.n	8004c44 <_fstat_r+0x1c>
 8004c3e:	682b      	ldr	r3, [r5, #0]
 8004c40:	b103      	cbz	r3, 8004c44 <_fstat_r+0x1c>
 8004c42:	6023      	str	r3, [r4, #0]
 8004c44:	bd38      	pop	{r3, r4, r5, pc}
 8004c46:	bf00      	nop
 8004c48:	200021f8 	.word	0x200021f8

08004c4c <_isatty_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4d06      	ldr	r5, [pc, #24]	; (8004c68 <_isatty_r+0x1c>)
 8004c50:	2300      	movs	r3, #0
 8004c52:	4604      	mov	r4, r0
 8004c54:	4608      	mov	r0, r1
 8004c56:	602b      	str	r3, [r5, #0]
 8004c58:	f7fb ff07 	bl	8000a6a <_isatty>
 8004c5c:	1c43      	adds	r3, r0, #1
 8004c5e:	d102      	bne.n	8004c66 <_isatty_r+0x1a>
 8004c60:	682b      	ldr	r3, [r5, #0]
 8004c62:	b103      	cbz	r3, 8004c66 <_isatty_r+0x1a>
 8004c64:	6023      	str	r3, [r4, #0]
 8004c66:	bd38      	pop	{r3, r4, r5, pc}
 8004c68:	200021f8 	.word	0x200021f8

08004c6c <_init>:
 8004c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6e:	bf00      	nop
 8004c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c72:	bc08      	pop	{r3}
 8004c74:	469e      	mov	lr, r3
 8004c76:	4770      	bx	lr

08004c78 <_fini>:
 8004c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7a:	bf00      	nop
 8004c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7e:	bc08      	pop	{r3}
 8004c80:	469e      	mov	lr, r3
 8004c82:	4770      	bx	lr
